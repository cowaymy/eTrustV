<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.services.as.impl.ASManagementListMapper">

  <resultMap id="callasLogClobMap" type="egovMap">
    <result property="callRem" column="CALL_REM" jdbcType="CLOB"
      javaType="string" />
  </resultMap>

  <!-- SELECT START -->
  <select id="selectASManagementList" parameterType="Map" resultType="egovMap">
    SELECT S.AS_ID ,
           S.AS_NO ,
           S.AS_SO_ID ,
           S.AS_REQST_DT ,
           TO_CHAR(S.AS_SETL_DT ,'DD/MM/YYYY') AS STR_AS_SETL_DT,
           S.AS_APPNT_DT,
           S.AS_STUS_ID ,
           S.AS_TYPE_ID ,
           S.CODE ,
           S.CODE1 ,
           S.SALES_ORD_NO ,
           S.CODE2,
           S.NAME ,
           S.NRIC ,
           S.C1 ,
           S.C2 ,
           S.C3 ,
           S.C4 ,
           S.C5 ,
           S.AS_RESULT_ID ,
           S.AS_BRNCH_ID ,
           S.AS_MEM_ID,
           NVL((SELECT CODE FROM SYS0005M H WHERE H.BRNCH_ID = AS_BRNCH_ID), '-') BRNCH_CODE,
           S.AS_SLUTN_RESN_ID,
           S.IN_HUSE_REPAIR_REPLACE_YN,
           S.REF_REQST,
           S.AS_MALFUNC_ID,
           S.AS_MALFUNC_RESN_ID,
           S.AS_FAIL_RESN_ID,
           NVL(DECODE(S.AS_IF_FLAG, 'E' ,'logistics err' ,''), '-') AS_IF_FLAG,
           NVL(MEM_CODE, '-') MEM_CODE,
           S.RCD_TMS,
           S.AS_SETL_DT,
           S.STK_DESC,
           S.AS_CRT_DT,
           S.AS_RESULT_CRT_DT,
           S.CMS AS CMS,
           S.AS_RESULT_CRT_USER_ID,
           NVL(X.TOTAL_AS, 0) TOTAL_AS,
           NVL(Z.NO, '-') AS BS_NO,
           S.INST_CITY,
           S.DEFECT_DESC,
           S.RESN_DESC,
           S.PARTNER_CODE
    FROM ( SELECT DISTINCT E.AS_ID AS_ID ,
                           E.AS_NO AS_NO ,
                           E.ASSOID1 AS_SO_ID ,
                           E.AS_REQST_DT AS_REQST_DT ,
                           E.AS_APPNT_DT AS_APPNT_DT,
                           E.AS_STUS_ID AS_STUS_ID ,
                           E.AS_TYPE_ID AS_TYPE_ID ,
                           E.CODE3 CODE ,
                           E.CODE4 CODE1 ,
                           E.SALES_ORD_NO SALES_ORD_NO ,
                           E.CODE5 CODE2 ,
                           E.NAME1 NAME ,
                           E.NRIC NRIC ,
                           1 C1 ,
                           CASE
                             WHEN ( E.AS_RESULT_ID IS NOT NULL )
                               THEN E.AS_RESULT_ID
                             ELSE 0
                           END C2 ,
                           CASE
                             WHEN ( E.AS_RESULT_ID IS NOT NULL )
                               THEN E.AS_RESULT_NO
                             ELSE '-'
                           END C3 ,
                           CASE
                             WHEN ( Extent8.USER_ID IS NOT NULL )
                               THEN Extent8.USER_NAME
                             ELSE '-'
                           END C4 ,
                           CASE
                             WHEN ( E.AS_RESULT_ID IS NOT NULL )
                               THEN E.AS_TOT_AMT
                             ELSE UTILS.CONVERT_TO_FLOAT(0,53)
                           END C5 ,
                           E.AS_RESULT_ID ,
                           E.AS_BRNCH_ID,
                           E.AS_MEM_ID,
                           E.AS_SLUTN_RESN_ID,
                           E.IN_HUSE_REPAIR_REPLACE_YN,
                           E.REF_REQST,
                           E.AS_MALFUNC_ID,
                           E.AS_MALFUNC_RESN_ID,
                           E.AS_FAIL_RESN_ID,
                           E.AS_IF_FLAG,
                           E.MEM_CODE,
                           E.RCD_TMS,
                           E.AS_SETL_DT,
                           E.STK_DESC,
                           E.AS_CRT_DT,
                           E.AS_RESULT_CRT_DT,
                           E.CMS,
                           E.AS_RESULT_CRT_USER_ID,
                           E.HSR_NO,
                           E.INST_CITY,
                           E.DEFECT_DESC,
                           E.PARTNER_CODE,
                           Extent17.RESN_DESC
           FROM ( SELECT Extent1.AS_ID AS_ID ,
                         Extent1.AS_NO AS_NO ,
                         Extent1.AS_SO_ID ASSOID1 ,
                         Extent1.AS_REQST_DT AS_REQST_DT ,
                         Extent1.AS_APPNT_DT AS_APPNT_DT ,
                         Extent1.AS_STUS_ID AS_STUS_ID ,
                         Extent1.AS_CRT_USER_ID AS_CRT_USER_ID ,
                         Extent1.AS_TYPE_ID AS_TYPE_ID ,
                         Extent2.CODE CODE3 ,
                         Extent3.CODE CODE4 ,
                         Extent4.SALES_ORD_NO SALES_ORD_NO ,
                         Extent5.CODE CODE5 ,
                         Extent6.NAME NAME1 ,
                         Extent6.NRIC NRIC ,
                         Extent7.AS_RESULT_ID AS_RESULT_ID ,
                         Extent7.AS_RESULT_NO AS_RESULT_NO ,
                         Extent7.AS_TOT_AMT AS_TOT_AMT ,
                         Extent1.AS_BRNCH_ID,
                         Extent1.AS_MEM_ID ,
                         Extent7.AS_SLUTN_RESN_ID,
                         Extent7.IN_HUSE_REPAIR_REPLACE_YN,
                         Extent1.REF_REQST ,
                         Extent1.AS_MALFUNC_ID,
                         Extent1.AS_MALFUNC_RESN_ID,
                         Extent7.AS_FAIL_RESN_ID,
                         Extent1.AS_IF_FLAG ,
                         Extent8.MEM_CODE ,
                         Extent1.RCD_TMS ,
                         Extent7.AS_SETL_DT ,
                         Extent7.AS_RESULT_CRT_DT,
                         CASE WHEN Extent7.AS_CMMS IS NULL THEN Extent1.AS_ALLOW_COMM
                         ELSE Extent7.AS_CMMS END AS CMS,
                         Extent7.USER_NAME AS AS_RESULT_CRT_USER_ID,
                         Extent1.NO AS HSR_NO,
                         Extent1.AS_CRT_DT,
                         Extent11.STK_CODE || ' - ' || STK_DESC AS STK_DESC,
                         NVL(ma1.CITY, '-') AS INST_CITY,
                         Extent16.DEFECT_DESC,
                         Extent7.PARTNER_CODE
                  FROM SVC0001D Extent1
                  JOIN SYS0013M Extent2 ON Extent1.AS_TYPE_ID = Extent2.CODE_ID
                  JOIN SYS0038M Extent3 ON Extent1.AS_STUS_ID = Extent3.STUS_CODE_ID
                  JOIN SAL0001D Extent4 ON Extent1.AS_SO_ID = Extent4.SALES_ORD_ID
                  JOIN SYS0013M Extent5 ON Extent4.APP_TYPE_ID = Extent5.CODE_ID
                  JOIN SAL0029D Extent6 ON Extent4.CUST_ID = Extent6.CUST_ID
                  LEFT JOIN ORG0001D Extent8 ON Extent1.AS_MEM_ID = Extent8.MEM_ID
                  LEFT JOIN SYS0005M Extent9 ON Extent9.BRNCH_ID = Extent8.BRNCH
                  LEFT JOIN ( SELECT AS_RESULT_ID,
                                     AS_RESULT_NO,
                                     AS_TOT_AMT,
                                     AS_SLUTN_RESN_ID,
                                     AS_FAIL_RESN_ID,
                                     IN_HUSE_REPAIR_REPLACE_YN,
                                     AS_ENTRY_ID,
                                     AS_RESULT_TYPE_ID,
                                     AS_RESULT_IS_CURR,
                                     AS_SETL_DT,
                                     AS_RESULT_CRT_DT,
                                     AS_CMMS,
                                     NVL(USER_NAME, '-') as USER_NAME,
                                     PARTNER_CODE
                              FROM ( SELECT (ROW_NUMBER() OVER (PARTITION BY AS_ENTRY_ID ORDER BY AS_RESULT_ID DESC)) AS ranking,
                                             AS_RESULT_ID,
                                             AS_RESULT_NO,
                                             AS_TOT_AMT,
                                             AS_SLUTN_RESN_ID,
                                             AS_FAIL_RESN_ID,
                                             IN_HUSE_REPAIR_REPLACE_YN,
                                             AS_ENTRY_ID,
                                             AS_RESULT_TYPE_ID,
                                             AS_RESULT_IS_CURR,
                                             AS_SETL_DT,
                                             AS_RESULT_CRT_DT,
                                             AS_CMMS,
                                             B.USER_NAME,
                                             C.MEM_CODE AS PARTNER_CODE
                                     FROM SVC0004D A
                                     LEFT JOIN SYS0047M B on A.AS_RESULT_CRT_USER_ID = B.USER_ID
                                     LEFT JOIN ORG0001D C ON A.PARTNER_CODE = C.MEM_ID
                                     WHERE ( 1 = as_result_is_curr ) ) WHERE ranking = 1
                  ) Extent7 ON ( Extent1.AS_ID = Extent7.AS_ENTRY_ID )
                              AND ( 457 = Extent7.AS_RESULT_TYPE_ID )
                              AND ( 1 = Extent7.AS_RESULT_IS_CURR )
                 JOIN SAL0002D Extent10 ON Extent4.SALES_ORD_ID = Extent10.SALES_ORD_ID
                 LEFT JOIN SYS0026M Extent11 ON Extent10.ITM_STK_ID = Extent11.STK_ID
                 LEFT JOIN SYS0100M Extent15 ON Extent15.DEFECT_GRP = Extent1.AS_MALFUNC_ID
                 LEFT JOIN SYS0100M Extent16 ON Extent16.DEFECT_ID = Extent1.AS_MALFUNC_RESN_ID and Extent15.DEFECT_GRP = Extent16.DEFECT_GRP --and Extent16.DEFECT_STATUS = 1

                 JOIN sal0045d SAL ON SAL.sales_ord_id = Extent4.sales_ord_id
                 LEFT JOIN sal0023d ca1 ON ca1.cust_add_id = SAL.add_id
                 LEFT JOIN SYS0064M ma1 ON ma1.AREA_ID = ca1.AREA_ID
                 WHERE ( 8 <![CDATA[ <> ]]> Extent1.AS_STUS_ID )
                   AND Extent4.BNDL_ID IS NULL       -- homecare Remove(except)
                 <if test="asStatusList != null and asStatusList != '' ">
                   AND Extent1.AS_STUS_ID IN
                   <foreach item="item" collection="asStatusList" index="index" open="(" separator="," close=")">
                     #{item}
                   </foreach>
                 </if>

                 <if test="asTypeList != null and asTypeList != '' ">
                   AND Extent1.AS_TYPE_ID IN
                   <foreach item="item" collection="asTypeList" index="index" open="(" separator="," close=")">
                     #{item}
                   </foreach>
                 </if>

                 <if test="cmbbranchIdList != null and cmbbranchIdList != '' ">
                   AND Extent9.CODE IN
                   <foreach item="item" collection="cmbbranchIdList" index="index" open="(" separator="," close=")">
                     #{item}
                   </foreach>
                 </if>

                 <if test="cmbctId != null and cmbctId != '' ">
                   AND (Extent8.MEM_CODE LIKE '%'|| #{cmbctId} || '%')
                 </if>

                 <if test="asProductList != null and asProductList != '' ">
                   AND Extent11.STK_ID IN
                   <foreach item="item" collection="asProductList" index="index" open="(" separator="," close=")">
                     #{item}
                   </foreach>
                 </if>


          ) E LEFT JOIN SYS0047M Extent8 ON E.AS_CRT_USER_ID = Extent8.USER_ID
              LEFT JOIN SYS0032M Extent17 ON Extent17.RESN_ID = E.AS_FAIL_RESN_ID
          WHERE 1=1

          <if test=" createStrDate  != null  and createStrDate !=''  ">
            <![CDATA[ AND ( E.AS_REQST_DT >= TO_DATE(#{createStrDate} ,'dd/mm/yyyy'))  ]]>
          </if>
          <if test="createEndDate != null   and createEndDate != '' ">
            <![CDATA[ AND ( E.AS_REQST_DT <= TO_DATE( #{createEndDate},'dd/mm/yyyy') )]]>
          </if>

          <if test=" appDtFrm  != null  and appDtFrm !=''  ">
            <![CDATA[ AND ( E.AS_APPNT_DT >= TO_DATE(#{appDtFrm} ,'dd/mm/yyyy'))  ]]>
          </if>
          <if test="appDtTo != null   and appDtTo != '' ">
            <![CDATA[ AND ( E.AS_APPNT_DT <= TO_DATE( #{appDtTo},'dd/mm/yyyy') )]]>
          </if>

          <if test=" registerDtFrm  != null  and registerDtFrm !=''  ">
            <![CDATA[ AND ( TO_CHAR(E.AS_CRT_DT, 'YYYYMMDD')  >= TO_CHAR(TO_DATE( #{registerDtFrm},'dd/mm/yyyy'), 'YYYYMMDD') )]]>
          </if>
          <if test="registerDtTo != null   and registerDtTo != '' ">
            <![CDATA[ AND ( TO_CHAR(E.AS_CRT_DT, 'YYYYMMDD')  <= TO_CHAR(TO_DATE( #{registerDtTo},'dd/mm/yyyy'), 'YYYYMMDD') )]]>
          </if>

          <if test=" settleDtFrm  != null  and settleDtFrm !=''  ">
            <![CDATA[ AND ( TO_CHAR(E.AS_SETL_DT, 'YYYYMMDD')  >= TO_CHAR(TO_DATE( #{settleDtFrm},'dd/mm/yyyy'), 'YYYYMMDD') )]]>
          </if>
          <if test="settleDtTo != null   and settleDtTo != '' ">
            <![CDATA[ AND ( TO_CHAR(E.AS_SETL_DT, 'YYYYMMDD')  <= TO_CHAR(TO_DATE( #{settleDtTo},'dd/mm/yyyy'), 'YYYYMMDD') )]]>
          </if>

          <if test="asNum != null and asNum != '' ">
            AND ( E.AS_NO = #{asNum} )
          </if>

          <if test="resultNum != null and resultNum != '' ">
            AND ( ( CASE WHEN ( E.AS_RESULT_ID IS NOT NULL )
                           THEN E.AS_RESULT_NO
                         ELSE '-'
                    END) = #{resultNum})
          </if>

          <if test="orderNum != null and orderNum != '' ">
            AND ( E.SALES_ORD_NO = #{orderNum} )
          </if>

          <if test="custName != null and custName != '' ">
            AND ( E.NAME1 LIKE '%'||#{custName}||'%')
          </if>

          <if test="nricNum != null and nricNum != '' ">
            AND ( E.NRIC LIKE '%'||#{nricNum}||'%' )
           </if>
    )S LEFT JOIN (SELECT AS_ENTRY_ID,
                            SUM(AS_LG_AMT) TOTAL_AS
                     FROM PAY0006D A
                     JOIN SVC0004D B ON A.AS_RESULT_NO = B.AS_RESULT_NO
                     GROUP BY AS_ENTRY_ID) X ON X.AS_ENTRY_ID = S.AS_ID
       LEFT JOIN SVC0006D Y ON Y.NO = S.HSR_NO
       LEFT JOIN SVC0008D Z ON Z.SCHDUL_ID = Y.SCHDUL_ID

  </select>

  <select id="getAsDefectEntry" parameterType="Map" resultType="egovMap">
    SELECT B.DEFECT_ID,
      B.DEFECT_CODE,
      B.DEFECT_DESC,
      B.DEFECT_TYP

    FROM SVC0117M A
    JOIN SYS0100M B ON A.DEFECT_TYP = B.DEFECT_TYP AND A.DEFECT_ID = B.DEFECT_ID AND B.DEFECT_STATUS = 1
    AND SYSDATE BETWEEN B.EFF_DT AND B.EXP_DT
    WHERE SYSDATE BETWEEN A.EFF_DT AND A.EXP_DT AND A.STATUS = 1
    AND A.ERR_CDE = #{errCd}
    AND A.ERR_DESC = #{errDesc}


    AND B.DEFECT_TYP in ('DP', 'DD', 'DC', 'DT', 'SC')
    ORDER BY
    CASE B.DEFECT_TYP
        WHEN 'DP' THEN 1
        WHEN 'DD' THEN 2
        WHEN 'DC' THEN 3
        WHEN 'DT' THEN 4
        ELSE 5
        END

  </select>
  <select id="selectASManagementList2" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT D.CODE,
                     C.AS_NO,
                     C.AS_REQST_DT,
                     J.CODE,
                     F.AS_RESULT_NO,
                     H.NAME,
                     B.SALES_ORD_NO,
                     I.CODE APP_TYPE,
                     A.NAME,
                     A.NRIC
              FROM SAL0029D A
              INNER JOIN SAL0001D B ON B.CUST_ID = A.CUST_ID
              INNER JOIN SVC0001D C ON C.AS_SO_ID = B.SALES_ORD_ID
              INNER JOIN SVC0004D F ON F.AS_ENTRY_ID = C.AS_ID
              INNER JOIN SVC0004D G ON G.AS_RESULT_ID = F.AS_RESULT_ID
              INNER JOIN SYS0038M C ON C.STUS_CODE_ID = F.AS_RESULT_STUS_ID
              INNER JOIN SYS0038M J ON J.STUS_CODE_ID = C.AS_STUS_ID
              INNER JOIN SYS0013M D ON D.CODE_ID = C.AS_TYPE_ID
              INNER JOIN ORG0001D H ON H.MEM_ID = G.AS_CT_ID
              INNER JOIN SYS0013M I ON I.CODE_ID = B.APP_TYPE_ID
              WHERE 1=1
    ]]>

    <if test="asNum != null and asNum != '' ">
      AND C.AS_NO = #{asNum}
    </if>
    <if test="asTypeList != null and asTypeList != '' ">
      AND C.AS_TYPE_ID IN
      <foreach item="item" collection="asTypeList" index="index"
        open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>

    <if test="asStatusList != null and asStatusList != '' ">
      AND C.AS_STUS_ID IN
      <foreach item="item" collection="asStatusList" index="index"
        open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>

    <if test="resultNum != null and resultNum != '' ">
      AND F.AS_RESULT_NO = #{resultNum}
    </if>

    <if test="orderNum != null and orderNum != '' ">
      AND B.SALES_ORD_NO = #{orderNum}
    </if>

    <if test="custName != null and custName != '' ">
      AND A.NAME = #{custName}
    </if>

    <if test="nricNum != null and nricNum != '' ">
      AND A.NRIC = #{nricNum}
    </if>

    <if test="createStrDate != '' and createEndDate == '' ">
      <![CDATA[ AND C.AS_REQST_DT >= TO_DATE(#{createStrDate}, 'DD/MM/YYYY') ]]>
    </if>

    <if test="createEndDate != '' and createStrDate == '' ">
      <![CDATA[ AND C.AS_REQST_DT <= TO_DATE(#{createEndDate}, 'DD/MM/YYYY') ]]>
    </if>

    <if test="createStrDate != '' and createEndDate != '' ">
      <![CDATA[ AND C.AS_REQST_DT BETWEEN TO_DATE(#{createStrDate}, 'DD/MM/YYYY') AND TO_DATE(#{createEndDate}, 'DD/MM/YYYY') ]]>
    </if>
  </select>

  <select id="selectOrderBasicInfo" parameterType="Map" resultType="egovMap">
     SELECT Extent1.ORD_ID ORD_ID ,
                     Extent1.ORD_NO ORD_NO ,
                     Extent1.RENTAL_STUS RENTAL_STUS ,
                     Extent1.ORD_STUS_ID ORD_STUS_ID ,
                     Extent1.ORD_STUS_CODE ORD_STUS_CODE ,
                     Extent1.ORD_STUS_NAME ORD_STUS_NAME ,
                     to_char(Extent1.ORD_DT,'dd/mm/yyyy') ORD_DT ,
                     Extent1.INSTLMT_PRIOD INSTLMT_PRIOD ,
                     Extent1.ORD_AMT ORD_AMT ,
                     Extent1.ORD_MTH_RENTAL ORD_MTH_RENTAL ,
                     Extent1.ORD_PV ORD_PV ,
                     Extent1.ORD_PV_MONTH ORD_PV_MONTH ,
                     Extent1.ORD_PV_YEAR ORD_PV_YEAR ,
                     Extent1.ORD_REF_NO ORD_REF_NO ,
                     Extent1.ORD_PO_NO ORD_PO_NO ,
                     Extent1.ORD_DEPT_CODE ORD_DEPT_CODE ,
                     Extent1.ORD_GRP_CODE ORD_GRP_CODE ,
                     Extent1.ORD_ORG_CODE ORD_ORG_CODE ,
                     Extent1.ORD_CRT_USER_ID ORD_CRT_USER_ID ,
                     to_char(Extent1.ORD_CRT_DT,'dd/mm/yyyy') ORD_CRT_DT ,
                     Extent1.APP_TYPE_ID APP_TYPE_ID ,
                     Extent1.APP_TYPE_CODE APP_TYPE_CODE ,
                     Extent1.APP_TYPE_DESC APP_TYPE_DESC ,
                     Extent1.STOCK_ID STOCK_ID ,
                     Extent1.STOCK_CODE STOCK_CODE ,
                     Extent1.STOCK_DESC STOCK_DESC ,
                     Extent1.CUST_ID CUST_ID ,
                     Extent1.CUST_TYPE CUST_TYPE ,
                     Extent1.CUST_NAME CUST_NAME ,
                     Extent1.CUST_NRIC CUST_NRIC ,
                     Extent1.CUST_DOB CUST_DOB ,
                     Extent1.CUST_NATION CUST_NATION ,
                     Extent1.CUST_GENDER CUST_GENDER ,
                     Extent1.CUST_RACE CUST_RACE ,
                     Extent1.CUST_EMAIL CUST_EMAIL ,
                     Extent1.CUST_VA_NO CUST_VA_NO ,
                     Extent1.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR ,
                     Extent1.CUST_VISA_EXPR CUST_VISA_EXPR ,
                     Extent1.ORD_PROMO_ID ORD_PROMO_ID ,
                     Extent1.ORD_PROMO_CODE ORD_PROMO_CODE ,
                     Extent1.ORD_PROMO_DESC ORD_PROMO_DESC ,
                     Extent1.ORD_MEM_ID ORD_MEM_ID ,
                     Extent1.ORD_MEM_CODE ORD_MEM_CODE ,
                     Extent1.ORD_MEM_NAME ORD_MEM_NAME ,
                     Extent1.ORD_MEM_NRIC ORD_MEM_NRIC ,
                     Extent1.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID ,
                     Extent1.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE ,
                     Extent1.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME ,
                     Extent1.COOL_OFF_PRIOD COOL_OFF_PRIOD ,
                     Extent1.KEYIN_BRNCH_ID KEYIN_BRNCH_ID ,
                     Extent1.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE ,
                     Extent1.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME ,
                     Extent1.ORD_REM ORD_REM ,
                     Extent1.RENT_CHK_ID RENT_CHK_ID ,
                     Extent1.ORD_HM_ID ORD_HM_ID ,
                     Extent1.ORD_SM_ID ORD_SM_ID ,
                     Extent1.ORD_GM_ID ORD_GM_ID ,
                     Extent1.ORD_ADDR_ID ORD_ADDR_ID ,
                     Extent1.ORD_CNTC_ID ORD_CNTC_ID ,
                     Extent1.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO ,
                     Extent1.UPD_DT UPD_DT ,
                     Extent1.UPD_USER_ID UPD_USER_ID ,
                     Extent1.JOM_PAY_REF JOM_PAY_REF ,
                     Extent1.STK_CTGRY_ID STK_CTGRY_ID ,
                     Extent1.STK_CTGRY_NAME STK_CTGRY_NAME ,
                     Extent1.CUST_TYPE_ID CUST_TYPE_ID ,
                     Extent1.CUST_BILL_ID CUST_BILL_ID ,
                     Extent1.OBLIGT_YEAR OBLIGT_YEAR
      FROM ( SELECT vOrderBasicInfo.ORD_ID ORD_ID ,
                    vOrderBasicInfo.ORD_NO ORD_NO ,
                    vOrderBasicInfo.RENTAL_STUS RENTAL_STUS ,
                    vOrderBasicInfo.ORD_STUS_ID ORD_STUS_ID ,
                    vOrderBasicInfo.ORD_STUS_CODE ORD_STUS_CODE ,
                    vOrderBasicInfo.ORD_STUS_NAME ORD_STUS_NAME ,
                    vOrderBasicInfo.ORD_DT ORD_DT ,
                    vOrderBasicInfo.INSTLMT_PRIOD INSTLMT_PRIOD ,
                    vOrderBasicInfo.ORD_AMT ORD_AMT ,
                    vOrderBasicInfo.ORD_MTH_RENTAL ORD_MTH_RENTAL ,
                    vOrderBasicInfo.ORD_PV ORD_PV ,
                    vOrderBasicInfo.ORD_PV_MONTH ORD_PV_MONTH ,
                    vOrderBasicInfo.ORD_PV_YEAR ORD_PV_YEAR ,
                    vOrderBasicInfo.ORD_REF_NO ORD_REF_NO ,
                    vOrderBasicInfo.ORD_PO_NO ORD_PO_NO ,
                    vOrderBasicInfo.ORD_DEPT_CODE ORD_DEPT_CODE ,
                    vOrderBasicInfo.ORD_GRP_CODE ORD_GRP_CODE ,
                    vOrderBasicInfo.ORD_ORG_CODE ORD_ORG_CODE ,
                    vOrderBasicInfo.ORD_CRT_USER_ID ORD_CRT_USER_ID ,
                    vOrderBasicInfo.ORD_CRT_DT ORD_CRT_DT ,
                    vOrderBasicInfo.APP_TYPE_ID APP_TYPE_ID ,
                    vOrderBasicInfo.APP_TYPE_CODE APP_TYPE_CODE ,
                    vOrderBasicInfo.APP_TYPE_DESC APP_TYPE_DESC ,
                    vOrderBasicInfo.STOCK_ID STOCK_ID ,
                    vOrderBasicInfo.STOCK_CODE STOCK_CODE ,
                    vOrderBasicInfo.STOCK_DESC STOCK_DESC ,
                    vOrderBasicInfo.CUST_ID CUST_ID ,
                    vOrderBasicInfo.CUST_TYPE CUST_TYPE ,
                    vOrderBasicInfo.CUST_NAME CUST_NAME ,
                    vOrderBasicInfo.CUST_NRIC CUST_NRIC ,
                    vOrderBasicInfo.CUST_DOB CUST_DOB ,
                    vOrderBasicInfo.CUST_NATION CUST_NATION ,
                    vOrderBasicInfo.CUST_GENDER CUST_GENDER ,
                    vOrderBasicInfo.CUST_RACE CUST_RACE ,
                    vOrderBasicInfo.CUST_EMAIL CUST_EMAIL ,
                    vOrderBasicInfo.CUST_VA_NO CUST_VA_NO ,
                    vOrderBasicInfo.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR ,
                    vOrderBasicInfo.CUST_VISA_EXPR CUST_VISA_EXPR ,
                    vOrderBasicInfo.ORD_PROMO_ID ORD_PROMO_ID ,
                    vOrderBasicInfo.ORD_PROMO_CODE ORD_PROMO_CODE ,
                    vOrderBasicInfo.ORD_PROMO_DESC ORD_PROMO_DESC ,
                    vOrderBasicInfo.ORD_MEM_ID ORD_MEM_ID ,
                    vOrderBasicInfo.ORD_MEM_CODE ORD_MEM_CODE ,
                    vOrderBasicInfo.ORD_MEM_NAME ORD_MEM_NAME ,
                    vOrderBasicInfo.ORD_MEM_NRIC ORD_MEM_NRIC ,
                    vOrderBasicInfo.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID ,
                    vOrderBasicInfo.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE ,
                    vOrderBasicInfo.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME ,
                    vOrderBasicInfo.COOL_OFF_PRIOD COOL_OFF_PRIOD ,
                    vOrderBasicInfo.KEYIN_BRNCH_ID KEYIN_BRNCH_ID ,
                    vOrderBasicInfo.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE ,
                    vOrderBasicInfo.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME ,
                    vOrderBasicInfo.ORD_REM ORD_REM ,
                    vOrderBasicInfo.RENT_CHK_ID RENT_CHK_ID ,
                    vOrderBasicInfo.ORD_HM_ID ORD_HM_ID ,
                    vOrderBasicInfo.ORD_SM_ID ORD_SM_ID ,
                    vOrderBasicInfo.ORD_GM_ID ORD_GM_ID ,
                    vOrderBasicInfo.ORD_ADDR_ID ORD_ADDR_ID ,
                    vOrderBasicInfo.ORD_CNTC_ID ORD_CNTC_ID ,
                    vOrderBasicInfo.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO ,
                    vOrderBasicInfo.UPD_DT UPD_DT ,
                    vOrderBasicInfo.UPD_USER_ID UPD_USER_ID ,
                    vOrderBasicInfo.JOM_PAY_REF JOM_PAY_REF ,
                    vOrderBasicInfo.STK_CTGRY_ID STK_CTGRY_ID ,
                    vOrderBasicInfo.STK_CTGRY_NAME STK_CTGRY_NAME ,
                    vOrderBasicInfo.CUST_TYPE_ID CUST_TYPE_ID ,
                    vOrderBasicInfo.CUST_BILL_ID CUST_BILL_ID ,
                    vOrderBasicInfo.OBLIGT_YEAR OBLIGT_YEAR
             FROM SAL1006V vOrderBasicInfo
             WHERE vOrderBasicInfo.ORD_NO = #{orderNo}
             AND vOrderBasicInfo.BNDL_ID IS NULL
             ) Extent1
             LEFT JOIN SAL0102D Extent2 ON Extent2.CCP_SALES_ORD_ID = Extent1.ORD_ID
              <!-- JOIN SAL0009D Extent3 ON Extent3.LOG_ID = (SELECT MAX(LOG_ID)
                                                        FROM SAL0009D
                                                        WHERE SALES_ORD_ID = Extent1.ORD_ID
                                                        GROUP BY SALES_ORD_ID) -->
             WHERE ( Extent1.ORD_NO = #{orderNo} )
              <!-- AND NOT EXISTS (SELECT 1
                               FROM SAL0001D Z
                              WHERE Z.SALES_ORD_ID = EXTENT1.ORD_ID
                                AND Z.BNDL_ID IS NOT NULL
                            )              homecare Remove(except) -->
                AND ( Extent1.ORD_STUS_ID = 4 ) AND (Extent1.RENTAL_STUS NOT IN ('WOF','SUS','RET'))
              <!-- AND ((Extent2.CCP_STUS_ID = 5 OR Extent2.CCP_STUS_ID IS NULL) OR (Extent3.PRGRS_ID = 5)) -->
                AND EXISTS (
        				SELECT
							1
        				FROM
            				SAL0009D Extent3
        				WHERE
                			Extent3.LOG_ID = (
                    						SELECT
                        						MAX(LOG_ID)
                    						FROM
                        						SAL0009D
                    						WHERE
                        						SALES_ORD_ID = Extent1.ORD_ID
                							)
                AND ( ( Extent2.CCP_STUS_ID = 5	OR Extent2.CCP_STUS_ID IS NULL ) OR ( Extent3.PRGRS_ID = 5 ) )
    			)
    			<![CDATA[
                AND ROWNUM <= 1
    ]]>
  </select>

  <select id="getASHistoryList" parameterType="Map" resultType="egovMap">
    SELECT S.C1 ,
           S.AS_NO ,
           S.AS_REQST_DT ,
           S.CODE ,
           S.C2 ,
           S.AS_SETL_DT ,
           S.C3 ,
           S.C4 ,
           S.C5 ,
           S.C6 ,
           S.C7
           FROM ( SELECT DISTINCT Extent1.AS_NO
                                  AS_NO ,
                                  Extent1.AS_REQST_DT AS_REQST_DT ,
                                  Extent2.CODE CODE ,
                                  1 C1 ,
                                  CASE WHEN ( Extent3.AS_RESULT_ID IS NOT NULL )
                                         THEN Extent3.AS_RESULT_NO
                                       ELSE '-'
                                  END C2 ,
                                  CASE WHEN ( Extent4.RESN_ID IS NOT NULL )
                                         THEN Extent4.RESN_DESC
                                       ELSE Extent8.DEFECT_TYPE_CODE_DESC
                                  END C3 ,
                                  CASE WHEN ( Extent5.RESN_ID IS NOT NULL )
                                         THEN Extent5.RESN_DESC
                                       ELSE Extent8.DEFECT_DTL_CODE_DESC
                                  END C4 ,
                                  CASE WHEN ( Extent6.MEM_ID IS NOT NULL )
                                         THEN Extent6.MEM_CODE
                                       ELSE '-'
                                  END C5 ,
                                  CASE WHEN ( Extent7.RESN_ID IS NOT NULL )
                                         THEN Extent7.RESN_DESC
                                       ELSE '-'
                                  END C6 ,
                                  CASE WHEN ( Extent3.AS_RESULT_ID IS NOT NULL )
                                         THEN Extent3.AS_TOT_AMT
                                       ELSE UTILS.CONVERT_TO_FLOAT(0,53)
                                  END C7 ,
                                  Extent3.AS_SETL_DT AS_SETL_DT
                  FROM SVC0001D Extent1
                  JOIN SYS0038M Extent2 ON Extent1.AS_STUS_ID = Extent2.STUS_CODE_ID
                  LEFT JOIN SVC0004D Extent3 ON ( Extent1.AS_ID = Extent3.AS_ENTRY_ID )
                                            AND ( 1 = Extent3.AS_RESULT_IS_CURR )
                                            AND ( 457 = Extent3.AS_RESULT_TYPE_ID )
                  LEFT JOIN SYS0032M Extent4 ON Extent1.AS_MALFUNC_ID = Extent4.RESN_ID
                  LEFT JOIN SYS0032M Extent5 ON Extent1.AS_MALFUNC_RESN_ID = Extent5.RESN_ID
                  LEFT JOIN ORG0001D Extent6 ON Extent3.AS_CT_ID = Extent6.MEM_ID
                  LEFT JOIN SYS0032M Extent7 ON Extent3.AS_SLUTN_RESN_ID = Extent7.RESN_ID
                  LEFT JOIN SVC0056M Extent8 ON Extent1.AS_MALFUNC_ID = Extent8.DEFECT_TYPE_CODE
                                            AND Extent1.AS_MALFUNC_RESN_ID = Extent8.DEFECT_DTL_CODE
                  WHERE Extent1.AS_SO_ID = #{SALES_ORD_ID} ) S
  </select>

  <select id="getBSHistoryList" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT S.E_MONTH ,
                     S.E_NO ,
                     S.E_YEAR ,
                     S.CODE ,
                     S.CODE1 ,
                     S.NO1 ,
                     S.C1 ,
                     S.CODE2 ,
                     S.CODE3 ,
                     S.MEM_CODE ,
                     S.E_MONTH||'-'|| S.E_YEAR EDATE
            FROM ( SELECT E.NO E_NO ,
                          E.MONTH E_MONTH ,
                          E.YEAR E_YEAR ,
                          E2.CODE CODE ,
                          E3.CODE CODE1 ,
                          E4.MEM_CODE MEM_CODE ,
                          E5.SETL_DT C1 ,
                          E5.NO NO1 ,
                          E6.CODE CODE2 ,
                          E7.CODE CODE3
                   FROM SVC0008D E
                   JOIN SYS0013M E2 ON E.TYPE_ID = E2.CODE_ID
                   JOIN SYS0038M E3 ON E.STUS_CODE_ID = E3.STUS_CODE_ID
                   JOIN ORG0001D E4 ON E.CODY_ID = E4.MEM_ID
                   LEFT JOIN SVC0006D E5 ON ( E.SCHDUL_ID = E5.SCHDUL_ID )
                                        AND ( 1 = E5.RESULT_IS_CURR )
                   LEFT JOIN SYS0032M E6   ON E5.REN_COLCT_ID = E6.RESN_ID
                   LEFT JOIN SYS0032M E7   ON E5.FAIL_RESN_ID = E7.RESN_ID
             WHERE  E.SALES_ORD_ID = #{SALES_ORD_ID} ) S
             ORDER BY  S.E_NO DESC
    ]]>
  </select>

  <select id="getBrnchId" parameterType="Map" resultType="egovMap">
    SELECT code_Id ,
           code_Name
    FROM ( SELECT SYS0005M.BRNCH_ID code_Id ,
                  CODE ||'-'||SYS0005M.NAME code_Name
           FROM SYS0005M
           WHERE SYS0005M.STUS_ID = 1
             AND SYS0005M.TYPE_ID IN (40,43)
           ORDER BY SYS0005M.BRNCH_ID ASC
    ) A ORDER BY code_Name ASC
  </select>

  <select id="getResnCode" parameterType="Map" resultType="egovMap">
    SELECT S.C1 ,
           S.RESN_ID ,
           S.CODE code_Id ,
           S.RESN_DESC code_Name
    FROM ( SELECT DISTINCT E5.RESN_ID ,
                           E5.CODE ,
                           E5.RESN_DESC ,
                           1 C1
           FROM SYS0032M Extent1
           JOIN SYS0033M Extent2 ON Extent1.RESN_ID = Extent2.RESN_ID
           JOIN SYS0033M Extent3 ON ( Extent2.RESN_GRP_ID = Extent3.RESN_PARENT_GRP_ID )
                                AND ( ( 1 = Extent3.RESN_STUS_ID )
                                 OR ( ( 1 IS NULL )
                                AND ( Extent3.RESN_STUS_ID IS NULL ) ) )
           JOIN SYS0033M Extent4 ON ( Extent3.RESN_GRP_ID = Extent4.RESN_PARENT_GRP_ID )
                                AND ( ( 1 = Extent4.RESN_STUS_ID )
                                 OR ( ( 1 IS NULL )
                                AND ( Extent4.RESN_STUS_ID IS NULL ) ) )
           JOIN SYS0032M E5 ON Extent4.RESN_ID = E5.RESN_ID
           WHERE ( 340 = Extent1.RESN_TYPE_ID )
             AND ( 1 = Extent1.STUS_CODE_ID )
             AND ( 0 = (CASE WHEN ( Extent2.RESN_PARENT_GRP_ID IS NOT NULL )
                               THEN Extent2.RESN_PARENT_GRP_ID
                               ELSE 0
                             END) )
             AND ( Extent3.RESN_ID = #{RESN_ID} ) ) S
  </select>

  <select id="getResnDetail" parameterType="Map" resultType="egovMap">
    SELECT S.C1 ,
           S.RESN_ID ,
           S.CODE code_Id ,
           S.RESN_DESC code_Name
    FROM ( SELECT DISTINCT E5.RESN_ID ,
                           E5.CODE ,
                           E5.RESN_DESC ,
                           1 C1
           FROM SYS0032M Extent1
           JOIN SYS0033M Extent2 ON Extent1.RESN_ID = Extent2.RESN_ID
           JOIN SYS0033M Extent3 ON ( Extent2.RESN_GRP_ID = Extent3.RESN_PARENT_GRP_ID )
                                AND ( ( 1 = Extent3.RESN_STUS_ID )
                                 OR ( ( 1 IS NULL )
                                AND ( Extent3.RESN_STUS_ID IS NULL ) ) )
           JOIN SYS0033M Extent4 ON ( Extent3.RESN_GRP_ID = Extent4.RESN_PARENT_GRP_ID )
                                AND ( ( 1 = Extent4.RESN_STUS_ID )
                                 OR ( ( 1 IS NULL )
                                AND ( Extent4.RESN_STUS_ID IS NULL ) ) )
           JOIN SYS0032M E5 ON Extent4.RESN_ID = E5.RESN_ID
           WHERE ( 340 = Extent1.RESN_TYPE_ID )
             AND ( 1 = Extent1.STUS_CODE_ID )
             AND ( 0 = (CASE WHEN ( Extent2.RESN_PARENT_GRP_ID IS NOT NULL )
                               THEN Extent2.RESN_PARENT_GRP_ID
                               ELSE 0
                        END) )
             AND ( Extent3.RESN_ID = #{RESN_ID} ) ) S
  </select>

  <select id="getMemberBymemberID" parameterType="Map" resultType="egovMap">
    SELECT E1.MEM_ID ,
           E4.USER_ID ,
           E4.USER_NAME ,
           E4.USER_PASSWD ,
           E4.USER_FULL_NAME ,
           E4.USER_EMAIL ,
           E4.USER_STUS_ID ,
           E4.USER_BRNCH_ID ,
           E4.USER_DEPT_ID ,
           E4.USER_UPD_USER_ID ,
           E4.USER_UPD_DT ,
           E4.USER_SYNC_CHK ,
           E4.USER_NRIC ,
           E4.USER_DT_JOIN ,
           E4.USER_GSEC_SYN_CHK ,
           E4.USER_PASSWD_LAST_UPD_DT ,
           E4.USER_TYPE_ID ,
           E4.USER_VAL_ID_FROM ,
           E4.USER_VAL_ID_TO ,
           E4.USER_SEC_QUES_ID ,
           E4.USER_SEC_QUES_ANS ,
           E4.USER_WORK_NO ,
           E4.USER_MOBILE_NO ,
           E4.USER_EXT_NO ,
           E4.USER_IS_PART_TM ,
           E4.USER_DEPT_ID ,
           E4.USER_IS_EXTRNL ,
           E1.MEM_CODE ,
           E1.MEM_TYPE ,
           E1.NAME ,
           E1.FULL_NAME ,
           E1.PASSWD ,
           E1.NRIC ,
           E1.DOB ,
           E1.GENDER ,
           E1.RACE ,
           E1.MARTL ,
           E1.NATION ,
           <!-- E1.ADDR1 , E1.ADDR2 , E1.ADDR3 , E1.ADDR4 , E1.AREAL , E1.POST_CODE
            ,  E1.STATE , E1.CNTY , -->
           E1.TEL_OFFICE ,
           E1.TEL_HUSE ,
           E1.TEL_MOB ,
           E1.EMAIL ,
           E1.SPUSE_CODE ,
           E1.SPOUSE_NAME ,
           E1.SPOUSE_NRIC ,
           E1.SPOUSE_OCPAT ,
           E1.SPOUSE_TEL_CNTC ,
           E1.SPOUSE_DOB ,
           E1.EDC_LEV ,
           E1.LANG ,
           E1.BANK ,
           E1.BANK_ACC_NO ,
           E1.SPONS_CODE ,
           E1.JOIN_DT ,
           E1.RESIGN_DT ,
           E1.TRM_DT ,
           E1.RENEW_DT ,
           E1.AGRMNT_NO ,
           E1.BRNCH ,
           E1.STUS ,
           E1.SYNC_CHK ,
           E1.RANK ,
           E1.TRNSPRT ,
           E1.PROMO_DT ,
           E1.TR_NO ,
           E1.CRT_DT ,
           E1.CRT_USER_ID ,
           E1.UPD_DT ,
           E1.UPD_USER_ID ,
           E1.MEM_IS_OUT_SRC ,
           E1.APLICNT_ID ,
           E1.BIZ_TYPE ,
           E1.HSPTLZ ,
           E6.MEM_ID ,
           E6.MEM_CODE ,
           E6.MEM_LVL ,
           E6.DEPT_CODE ,
           E6.GRP_CODE ,
           E6.ORG_CODE ,
           E6.TOP_ORG_CODE ,
           E6.MEM_UP_ID ,
           E6.LVL3_UP_ID ,
           E6.LVL2_UP_ID ,
           E6.LVL1_UP_ID ,
           E6.LVL0_UP_ID ,
           E7.MEM_ID ,
           E7.MEM_UP_ID ,
           E7.MEM_LVL ,
           E7.DEPT_CODE ,
           E7.ORG_UPD_USER_ID ,
           E7.ORG_UPD_DT ,
           E7.PREV_DEPT_CODE ,
           E7.PREV_GRP_CODE ,
           E7.PREV_MEM_ID_ID ,
           E7.PREV_MEM_LVL ,
           E7.ORG_STUS_CODE_ID ,
           E7.PR_CODE ,
           E7.PR_MEM_ID ,
           E7.GRAND_PR_CODE ,
           E7.GRAND_PR_MEM_ID ,
           E7.LAST_DEPT_CODE ,
           E7.LAST_GRP_CODE ,
           E7.LAST_ORG_CODE ,
           E7.LAST_TOP_ORG_CODE ,
           E7.BRNCH_ID
    FROM ORG0001D E1
    JOIN SYS0013M Extent2 ON E1.RANK = Extent2.CODE_ID
    LEFT JOIN SYS0038M Extent3 ON E1.STUS = Extent3.STUS_CODE_ID
    LEFT JOIN SYS0047M E4 ON E1.CRT_USER_ID = E4.USER_ID
    LEFT JOIN SYS0047M Extent5 ON E1.UPD_USER_ID = Extent5.USER_ID
    LEFT JOIN ( SELECT S.MEM_ID MEM_ID ,
                       S.MEM_CODE MEM_CODE ,
                       S.MEM_LVL MEM_LVL ,
                       S.DEPT_CODE DEPT_CODE ,
                       S.GRP_CODE GRP_CODE ,
                       S.ORG_CODE ORG_CODE ,
                       S.TOP_ORG_CODE
                       TOP_ORG_CODE ,
                       S.MEM_UP_ID MEM_UP_ID ,
                       S.LVL3_UP_ID LVL3_UP_ID ,
                       S.LVL2_UP_ID LVL2_UP_ID ,
                       S.LVL1_UP_ID LVL1_UP_ID ,
                       S.LVL0_UP_ID
                       LVL0_UP_ID
                FROM ORG1001V S ) E6 ON E1.MEM_ID = E6.MEM_ID
                LEFT JOIN ORG0005D E7 ON E1.MEM_ID = E7.MEM_ID
                WHERE E1.MEM_ID = #{MEM_ID} AND
                ROWNUM <![CDATA[ <= ]]> 1
  </select>

  <select id="getASEntryDocNo" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT FN_GET_DOCNO(#{DOCNO})  asno  FROM DUAL
    ]]>
  </select>

  <select id="getASEntryId" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT  SVC0001D_AS_ID_SEQ.nextval seq FROM DUAL
    ]]>
  </select>

  <select id="getIHREntryId" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT SVC0108D_AS_ID_SEQ.nextval seq FROM DUAL
    ]]>
  </select>

  <select id="getResultASEntryId" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT SVC0004D_AS_RESULT_ID_SEQ.NEXTVAL seq FROM DUAL
    ]]>
  </select>

  <select id="selASEntryView" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT S.AS_ID,
             S.AS_NO,
             S.AS_SO_ID,
             S.AS_MEM_ID,
             S.AS_MEM_GRP,
             TO_CHAR(S.AS_REQST_DT,'DD/MM/YYYY') AS_REQST_DT,
             S.AS_REQST_TM,
             TO_CHAR(S.AS_APPNT_DT,'DD/MM/YYYY') AS_APPNT_DT,
             S.AS_APPNT_TM,
             S.AS_BRNCH_ID,
             S.AS_MALFUNC_ID,
             S.AS_MALFUNC_RESN_ID,
             S.AS_REM_REQSTER,
             S.AS_REM_REQSTER_CNTC,
             S.AS_CALLLOG_ID,
             S.AS_STUS_ID,
             S.AS_SMS,
             S.AS_CRT_USER_ID,
             S.AS_CRT_DT,
             S.AS_UPD_USER_ID,
             S.AS_UPD_DT,
             S.AS_ENTRY_IS_SYNCH,
             S.AS_ENTRY_IS_EDIT,
             S.AS_TYPE_ID,
             S.AS_REQSTER_TYPE_ID,
             S.AS_IS_BS_WITHIN_30DAYS,
             S.AS_ALLOW_COMM,
             S.AS_PREV_MEM_ID,
             S.AS_REM_ADD_CNTC,
             S.AS_REM_REQSTER_CNTC_SMS,
             S.AS_REM_ADD_CNTC_SMS,
             S.AS_SESION_CODE,
             S.CALL_MEM,
             S.REF_REQST,
             B.PIC_NAME ,
             B.PIC_CNTC,
             B.AS_PIC_ID,
             (SELECT  MEM_CODE FROM ORG0001D WHERE MEM_ID = AS_MEM_ID) MEM_CODE,
             S.SEGMENT_TYPE
      FROM SVC0001D S,
           SVC0003D B
     WHERE S.AS_ID = B.AS_ID (+)
       AND S.AS_NO =#{AS_NO}
    ]]>
  </select>

 <select id="getASOrderInfo" parameterType="Map" resultType="egovMap">
    WITH T1 AS ( SELECT *
                        FROM SAL1014V S
                        WHERE S.ORD_ID = #{ORD_ID}
    ), T2 AS ( SELECT *
                  FROM T1
                  WHERE T1.ORD_ID = #{ORD_ID}
                      AND T1.ORD_ID IS NOT NULL
                      AND T1.CONFIG_SETT_INS IS NOT NULL
                      AND T1.CONFIG_SETT_BS IS NOT NULL
                      AND T1.CONFIG_SETT_AS IS NOT NULL
                      AND T1.CONFIG_BS_GEN IS NOT NULL
                      AND T1.CONFIG_BS_MEM_ID IS NOT NULL
                      AND T1.CONFIG_BS_WEEK IS NOT NULL
                      AND T1.CONFIG_BS_REM IS NOT NULL
                      AND T1.SRV_MEM_ID IS NOT NULL
                      AND T1.SRV_MEM_NO IS NOT NULL
                      AND T1.SRV_MEM_BILL_NO IS NOT NULL
                      AND T1.SRV_MEM_PAC_ID IS NOT NULL
                      AND T1.SRV_MEM_PAC_CODE IS NOT NULL
                      AND T1.SRV_MEM_PAC_NAME IS NOT NULL
                      AND T1.SRV_MEM_FREQ IS NOT NULL
                      AND T1.SRV_MEM_DUR IS NOT NULL
                      AND T1.SRV_MEM_SALESMAN_CODE IS NOT NULL
                      AND T1.SRV_MEM_SALESMAN_NAME IS NOT NULL
    )
    SELECT S.ORD_ID ,
               S.ORD_NO ,
               S.APP_TYPE_CODE ,
               TO_CHAR(S.ORD_DT,'dd/mm/yyyy') C1 ,
               S.ORD_STUS_CODE ,
               S.RENTAL_STUS ,
               S.CUST_NAME ,
               S.CUST_NRIC ,
               S.INST_CNT_NAME ,
               S.INST_CNT_TEL_M ,
               S.INST_CNT_TEL_O ,
               S.INST_CNT_TEL_R ,
               S.INST_ADDR1 ,
               S.INST_ADDR2 ,
               S.INST_ADDR3 ,
               S.INST_POST_CODE ,
               S.INST_AREA ,
               S.INST_STATE ,
               S.INST_CNTY ,
               S.STOCK_CODE ,
               S.STOCK_DESC ,
               S.LAST_INSTALL_SIRIM_NO ,
               S.LAST_INSTALL_SERIAL_NO ,
               CASE WHEN ( S.CODE_ID IS NOT NULL )
                       THEN S.CODE_NAME
               ELSE '-' END C2 ,
               S.LAST_INSTALL_NO ,
               S.LAST_INSTALL_DT C3 ,
               S.LAST_INSTALL_CT_CODE ,
               S.LAST_INSTALL_CT_NAME ,
               S.INSTCT ,
               CASE WHEN ( NOT ( ( S.SRV_MEM_PAC_CODE IS NULL ) ) )
                       THEN S.SRV_MEM_PAC_CODE
                       ELSE ' ' END C4,
               CASE WHEN ( NOT ( ( S.SRV_MEM_PAC_NAME IS NULL ) ) )
                       THEN S.SRV_MEM_PAC_NAME
                       ELSE ' ' END C5,
               TO_CHAR(S.SRV_MEM_EXPR_DT, 'dd/mm/yyyy') C6,
               S.USER_FULL_NAME,
               S.INST_ADDR_DTL,
               S.CODE_ID AS C2CODE,
               S.AS_TYPE_ID
    FROM ( SELECT E.ORD_ID ORD_ID ,
                          E.ORD_NO ORD_NO ,
                          E.RENTAL_STUS RENTAL_STUS ,
                          E.ORD_STUS_CODE ORD_STUS_CODE ,
                          E.ORD_DT
                          ORD_DT ,
                          E.APP_TYPE_CODE APP_TYPE_CODE ,
                          E.STOCK_CODE STOCK_CODE ,
                          E.STOCK_DESC STOCK_DESC ,
                          E.CUST_NAME CUST_NAME ,
                          E.CUST_NRIC
                          CUST_NRIC ,
                          '' INST_ADDR1 ,
                          '' INST_ADDR2 ,
                          '' INST_ADDR3 ,
                          '' INST_CNTY ,
                          '' INST_STATE ,
                          '' INST_AREA ,
                          '' INST_POST_CODE ,
                          E2.INST_ADDR_DTL
                          INST_ADDR_DTL,
                          E2.INST_CNT_NAME INST_CNT_NAME ,
                          E2.INST_CNT_TEL_M
                          INST_CNT_TEL_M ,
                          E2.INST_CNT_TEL_O INST_CNT_TEL_O ,
                          E2.INST_CNT_TEL_R
                          INST_CNT_TEL_R ,
                          E2.LAST_INSTALL_NO LAST_INSTALL_NO ,
                          E2.LAST_INSTALL_CT_CODE LAST_INSTALL_CT_CODE ,
                          E2.LAST_INSTALL_CT_NAME LAST_INSTALL_CT_NAME ,
                          E2.LAST_INSTALL_DT
                          LAST_INSTALL_DT ,
                          E2.LAST_INSTALL_SIRIM_NO LAST_INSTALL_SIRIM_NO ,
                          E2.LAST_INSTALL_SERIAL_NO LAST_INSTALL_SERIAL_NO ,
                          E2.INSTCT INSTCT ,
                          ( SELECT SRV_MEM_EXPR_DT
                            FROM T1 ) SRV_MEM_EXPR_DT,
                          ( SELECT SRV_MEM_PAC_CODE
                            FROM T2 ) SRV_MEM_PAC_CODE,
                          ( SELECT SRV_MEM_PAC_NAME
                            FROM T2 ) SRV_MEM_PAC_NAME,
                          E5.CODE_ID CODE_ID ,
                          E5.CODE_NAME CODE_NAME,
                          E6.USER_FULL_NAME,
                          E7.AS_TYPE_ID
               FROM ( SELECT vOrderBasicInfo.*
                          FROM SAL1006V vOrderBasicInfo ) E
               JOIN ( SELECT vOrderInstallationInfo.*
                         FROM SAL1010V vOrderInstallationInfo ) E2 ON E.ORD_ID = E2.ORD_ID
               JOIN SYS0026M Extent3 ON ( E.STOCK_CODE = Extent3.STK_CODE )
                                        OR ( ( E.STOCK_CODE IS NULL )
                                        AND ( Extent3.STK_CODE IS NULL ) )
               LEFT JOIN SYS0013M E5 ON Extent3.STK_CTGRY_ID = E5.CODE_ID
               LEFT JOIN SYS0047M E6 ON E.UPD_USER_ID = E6.USER_NAME
               LEFT JOIN SVC0001D E7 ON E7.AS_SO_ID = E.ORD_ID
               WHERE E.ORD_ID = #{ORD_ID} AND ROWNUM <![CDATA[ <= ]]> 1 ) S
  </select>

  <select id="getASRclInfo" parameterType="Map" resultType="egovMap">
    SELECT * FROM (
      SELECT TO_CHAR(A.AS_APPNT_DT,'dd/mm/yyyy') APP_DT,
             A.AS_SESION_CODE APP_SESS,
             A.AS_BRNCH_ID AS DSC_CDE,
             D.CODE BR_CDE,
             E.MEM_CODE MEM_ID,
             A.AS_MEM_GRP MEM_GRP,
             NVL(DBMS_LOB.substr(C.CALL_REM, 3000), '') RCL_RMK,
             A.SEGMENT_TYPE SEGMENT_TYPE
      FROM SVC0001D A
      JOIN CCR0006D B ON A.AS_CALLLOG_ID = B.CALL_ENTRY_ID
      JOIN CCR0007D C ON B.CALL_ENTRY_ID = C.CALL_ENTRY_ID
      JOIN SYS0005M D ON A.AS_BRNCH_ID = D.BRNCH_ID
      JOIN ORG0001D E ON E.MEM_ID = A.AS_MEM_ID
      WHERE A.AS_ID = #{AS_ID}
      ORDER BY C.CALL_RESULT_ID DESC) A
    WHERE ROWNUM = 1
  </select>

  <select id="getASEvntsInfo" parameterType="Map" resultType="egovMap">
    SELECT S.AS_ID AS_ID ,
           S.AS_ALLOW_COMM AS_ALLOW_COMM ,
           TO_CHAR(S.AS_CRT_DT,'dd/mm/yyyy') AS_CRT_DT ,
           CASE WHEN ( S.USER_ID IS NOT NULL )
                  THEN S.USER_NAME
                  ELSE '-'
           END C1 ,
           S.AS_NO AS_NO ,
           S.AS_STUS_ID AS_STUS_ID ,
           S.AS_SO_ID AS_SO_ID ,
           CASE WHEN ( S.AS_REQSTER_TYPE_ID IS NOT NULL )
                  THEN S.AS_REQSTER_TYPE_ID
                  ELSE 0
           END C2 ,
           CASE WHEN ( S.CODE_ID IS NOT NULL )
                  THEN S.CODE_NAME
                  ELSE ' '
           END C3 ,
           S.AS_REM_REQSTER AS_REM_REQSTER ,
           S.AS_REM_REQSTER_CNTC
           AS_REM_REQSTER_CNTC ,
           S.CODE CODE ,
           TO_CHAR( S.AS_REQST_DT, 'dd/mm/yyyy') AS_REQST_DT ,
           NVL(SUBSTR(S.AS_REQST_TM,0,8),'00:00:00') AS_REQST_TM ,
           TO_CHAR( S.AS_APPNT_DT, 'dd/mm/yyyy') AS_APPNT_DT ,
           NVL(SUBSTR(S.AS_APPNT_TM,0,8),'00:00:00') AS_APPNT_TM ,
           S.DISTANCE DISTANCE ,
           S.PREV_SVC_AREA PREV_SVC_AREA,
           S.NEXT_SVC_AREA NEXT_SVC_AREA,
           CASE WHEN ( S.AS_RESULT_ID IS NOT NULL )
                  THEN S.AS_RESULT_ID
                  ELSE 0
           END C4 ,
           CASE WHEN ( S.AS_RESULT_ID IS NOT NULL )
                  THEN S.AS_RESULT_NO
                  ELSE '-'
           END C5 ,
           S.AS_MEM_GRP AS_MEM_GRP ,
           CASE WHEN ( S.AS_BRNCH_ID IS NOT NULL )
                  THEN S.AS_BRNCH_ID
                  ELSE 0
           END C6 ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.CODE1
                  ELSE ' '
           END C7 ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.NAME
                  ELSE ' '
           END C8 ,
           CASE WHEN ( S.AS_MEM_ID IS NOT NULL )
                  THEN S.AS_MEM_ID
                  ELSE 0
           END C9 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.MEM_CODE
                  ELSE ' '
           END C10 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.NAME1
                  ELSE ' '
           END C11 ,
           CASE WHEN ( S.AS_MALFUNC_ID IS NOT NULL )
                  THEN S.AS_MALFUNC_ID
                  ELSE 0
           END C12 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                       THEN S.CODE2
                       ELSE ' '
           END C13 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                  THEN S.RESN_DESC
                  ELSE ' '
           END C14 ,
           CASE WHEN ( S.AS_MALFUNC_RESN_ID IS NOT NULL )
                  THEN S.AS_MALFUNC_RESN_ID
                  ELSE 0
           END C15 ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.CODE3
                  ELSE ' '
           END C16 ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.REASONDESC1
                  ELSE ' '
           END C17 ,
           S.AS_SMS AS_SMS ,
           S.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS ,
           -- CASE
           -- WHEN ( S.CALL_RESULT_ID IS NOT NULL ) THEN S.CALL_REM
           -- ELSE ' '
           -- END C18 ,
           CASE WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL ) AND ( S.ACC_BILL_TASK_ID IS NULL ) ) )
                  THEN S.ACC_BILL_ID
                       WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
                        AND ( S.ACC_BILL_TASK_ID IS NULL ) ) )
                  THEN S.ACC_BILL_ID
                       ELSE 0
           END C19 ,
           CASE WHEN ( NOT ( ( S.TAX_INVC_ID IS NULL )
                        AND ( S.TAX_INVC_REF_NO IS NULL ) ) )
                  THEN S.TAX_INVC_REF_NO
                  ELSE ' '
           END C20,
           SERIAL_REQUIRE_CHK_YN,
           WH_LOC_GB,
           CT_WH_LOC_ID
    FROM ( SELECT E.AS_ID AS_ID ,
                  E.AS_NO AS_NO ,
                  E.AS_SO_ID AS_SO_ID ,
                  E.AS_MEM_ID AS_MEM_ID ,
                  E.AS_MEM_GRP AS_MEM_GRP ,
                  E.AS_REQST_DT AS_REQST_DT ,
                  E.AS_REQST_TM AS_REQST_TM ,
                  E.AS_APPNT_DT AS_APPNT_DT ,
                  E.AS_APPNT_TM AS_APPNT_TM ,
                  E.AS_BRNCH_ID AS_BRNCH_ID ,
                  E.AS_MALFUNC_ID AS_MALFUNC_ID ,
                  E.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID ,
                  E.AS_REM_REQSTER AS_REM_REQSTER ,
                  E.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC ,
                  E.AS_STUS_ID AS_STUS_ID ,
                  E.AS_SMS AS_SMS ,
                  E.AS_CRT_DT AS_CRT_DT ,
                  E.AS_REQSTER_TYPE_ID AS_REQSTER_TYPE_ID ,
                  E.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS ,
                  E.AS_ALLOW_COMM AS_ALLOW_COMM ,
                  E.DISTANCE DISTANCE ,
                  E.PREV_SVC_AREA PREV_SVC_AREA,
                  E.NEXT_SVC_AREA NEXT_SVC_AREA,
                  Extent2.CODE CODE ,
                  Extent3.USER_ID USER_ID ,
                  Extent3.USER_NAME USER_NAME ,
                  Extent4.CODE_ID CODE_ID ,
                  Extent4.CODE_NAME CODE_NAME ,
                  Extent5.AS_RESULT_ID AS_RESULT_ID ,
                  Extent5.AS_RESULT_NO AS_RESULT_NO ,
                  Extent6.BRNCH_ID BRNCH_ID ,
                  Extent6.CODE CODE1 ,
                  Extent6.NAME NAME ,
                  Extent7.MEM_ID MEM_ID ,
                  Extent7.MEM_CODE MEM_CODE ,
                  Extent7.NAME NAME1 ,
                  Extent8.RESN_ID RESN_ID ,
                  Extent8.CODE CODE2 ,
                  Extent8.RESN_DESC RESN_DESC ,
                  Extent9.RESN_ID REASONID1 ,
                  Extent9.CODE CODE3 ,
                  Extent9.RESN_DESC REASONDESC1 ,
                  E1.CALL_RESULT_ID CALL_RESULT_ID ,
                  E1.CALL_REM CALL_REM ,
                  E2.TAX_INVC_ID TAX_INVC_ID ,
                  E2.TAX_INVC_REF_NO TAX_INVC_REF_NO ,
                  E3.ACC_BILL_ID ACC_BILL_ID ,
                  E3.ACC_BILL_TASK_ID ACC_BILL_TASK_ID ,
                  E4.SERIAL_REQUIRE_CHK_YN,
                  E4.WH_LOC_GB,
                  E4.WH_LOC_ID CT_WH_LOC_ID
    FROM SVC0001D E JOIN SYS0038M Extent2 ON E.AS_STUS_ID = Extent2.STUS_CODE_ID
    LEFT JOIN SYS0047M Extent3 ON E.AS_CRT_USER_ID = Extent3.USER_ID
    LEFT JOIN SYS0013M Extent4 ON E.AS_REQSTER_TYPE_ID = Extent4.CODE_ID
    LEFT JOIN SVC0004D Extent5 ON ( E.AS_ID = Extent5.AS_ENTRY_ID )
                              AND ( 457 = Extent5.AS_RESULT_TYPE_ID )
                              AND ( 1 = Extent5.AS_RESULT_IS_CURR )
    LEFT JOIN SYS0005M Extent6 ON E.AS_BRNCH_ID = Extent6.BRNCH_ID
    LEFT JOIN ORG0001D Extent7 ON E.AS_MEM_ID = Extent7.MEM_ID
    LEFT JOIN SYS0032M Extent8 ON E.AS_MALFUNC_ID = Extent8.RESN_ID
    LEFT JOIN SYS0032M Extent9 ON E.AS_MALFUNC_RESN_ID = Extent9.RESN_ID
    LEFT JOIN CCR0006D E0 ON E.AS_CALLLOG_ID = E0.CALL_ENTRY_ID
    LEFT JOIN CCR0007D E1 ON E0.RESULT_ID = E1.CALL_RESULT_ID
    LEFT JOIN PAY0031D E2 ON ( Extent5.AS_RESULT_NO = E2.TAX_INVC_SVC_NO )
                          OR ( ( Extent5.AS_RESULT_NO IS NULL )
                         AND ( E2.TAX_INVC_SVC_NO IS NULL ) )
    LEFT JOIN PAY0016D E3 ON E2.TAX_INVC_REF_NO = E3.ACC_BILL_REM
    LEFT JOIN SYS0028M E4 ON Extent7.MEM_CODE = E4.WH_LOC_CODE
    WHERE E.AS_ID = #{AS_ID} AND ROWNUM <![CDATA[ <= ]]>1 ) S
  </select>

  <select id="getASHistoryInfo" parameterType="Map" resultType="egovMap">
    SELECT S.C1 C1 ,
           S.AS_NO AS_NO ,
    CASE WHEN ( S.AS_REQST_DT IS NOT NULL )
           THEN TO_CHAR(S.AS_REQST_DT, 'DD/MM/YYYY')
           ELSE '-'
    END AS_REQST_DT ,
    S.CODE CODE ,
    S.C2 C2 ,
    CASE WHEN ( S.AS_SETL_DT IS NOT NULL )
           THEN TO_CHAR(S.AS_SETL_DT, 'DD/MM/YYYY')
           ELSE '-'
    END AS_SETL_DT ,
    S.C3 C3 ,
    S.C4 C4 ,
    S.C5 C5 ,
    S.C6 C6 ,
    S.C7 C7
    FROM ( SELECT DISTINCT D.AS_NO AS_NO ,
                           D.AS_REQST_DT AS_REQST_DT ,
                           Extent2.CODE CODE ,
                           1 C1 ,
                           CASE WHEN ( Extent3.AS_RESULT_ID IS NOT NULL )
                                  THEN Extent3.AS_RESULT_NO
                                  ELSE '-'
                           END C2 ,
                           CASE WHEN ( Extent4.RESN_ID IS NOT NULL )
                                  THEN Extent4.RESN_DESC
                                  ELSE '-'
                           END C3 ,
                           CASE WHEN ( Extent5.RESN_ID IS NOT NULL )
                                  THEN Extent5.RESN_DESC
                                  ELSE '-'
                           END C4 ,
                           CASE WHEN ( Extent6.MEM_ID IS NOT NULL )
                                  THEN Extent6.MEM_CODE
                                  ELSE '-'
                           END C5 ,
                           CASE WHEN ( Extent7.RESN_ID IS NOT NULL )
                                  THEN Extent7.RESN_DESC
                                  ELSE '-'
                           END C6 ,
                           CASE WHEN ( Extent3.AS_RESULT_ID IS NOT NULL )
                                  THEN Extent3.AS_TOT_AMT
                                  ELSE UTILS.CONVERT_TO_FLOAT(0,53)
                           END C7 ,
                           Extent3.AS_SETL_DT AS_SETL_DT
           FROM SVC0001D D JOIN SYS0038M Extent2 ON D.AS_STUS_ID = Extent2.STUS_CODE_ID
           LEFT JOIN SVC0004D Extent3 ON ( D.AS_ID = Extent3.AS_ENTRY_ID )
                                     AND ( 1 = Extent3.AS_RESULT_IS_CURR )
                                     AND ( 457 = Extent3.AS_RESULT_TYPE_ID )
           LEFT JOIN SYS0032M Extent4 ON D.AS_MALFUNC_ID = Extent4.RESN_ID
           LEFT JOIN SYS0032M Extent5 ON D.AS_MALFUNC_RESN_ID = Extent5.RESN_ID
           LEFT JOIN ORG0001D Extent6 ON D.AS_MEM_ID = Extent6.MEM_ID
           LEFT JOIN SYS0032M Extent7 ON Extent3.AS_SLUTN_RESN_ID = Extent7.RESN_ID
           WHERE D.AS_SO_ID = #{ORD_ID} ) S
  </select>

  <select id="getASStockPrice" parameterType="Map" resultType="egovMap">
    SELECT NVL(AMT , 0) AMT
    FROM SAL0016M A
    WHERE 1=1
      AND STK_ID = #{PRC_ID}
      AND MEM_PAC_ID = 0 AND APP_TYPE_ID =67
  </select>

  <select id="getASReasonCode" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT RESN_DESC,
                    RESN_TYPE_ID,
                    CODE_ID,
                    CODE_NAME,
                    RESN_ID
    FROM ( SELECT RESN_TYPE_ID ,
                  RESN_ID code_Id,
                  RESN_DESC ,
                  CODE || ' - ' || RESN_DESC CODE_Name,
                  RESN_ID
           FROM SYS0032M WHERE RESN_TYPE_ID = #{RESN_TYPE_ID}
                           AND STUS_CODE_ID = 1
           ORDER BY RESN_ID) ORDER BY CODE_ID
  </select>

  <select id="getASReasonCode2" parameterType="Map" resultType="egovMap">
    SELECT Distinct RESN_DESC ,
           RESN_TYPE_ID ,
           code_Id ,
           code_Name ,
           RESN_ID
    FROM ( SELECT RESN_TYPE_ID ,
                  RESN_ID,
                  CODE code_Id,
                  RESN_DESC ,
                  CODE || ' - ' || RESN_DESC code_Name
           FROM SYS0032M WHERE RESN_TYPE_ID = #{RESN_TYPE_ID}
                           AND CODE = UPPER(#{CODE})
           ORDER BY RESN_DESC DESC )
  </select>

  <resultMap id="asLogisticRequestMap" type="egovMap">
  </resultMap>

  <select id="callSP_LOGISTIC_REQUEST " parameterType="Map" statementType="CALLABLE">
    <![CDATA[
      { call SP_LOGISTIC_REQUEST ( #{P_ARR}, #{RETYPE} ,#{P_TYPE} , #{USERID}, #{p1, mode=OUT,  jdbcType=VARCHAR, javaType=String,  resultMap=asLogisticRequestMap}) }
    ]]>
  </select>

  <select id="getASMember" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT MEM_CODE ,
                    code_Id ,
                    MEM_CODE ,
                    NAME ,
                    code_Name
    FROM ( SELECT MEM_ID code_Id,
                  MEM_CODE ,
                  NAME ,
                  MEM_CODE || ' - ' || NAME code_Name
           FROM ORG0001D m WHERE m.STUS = 1
                     AND m.MEM_TYPE = 3
           ORDER BY MEM_CODE DESC )
  </select>

  <select id="getASFilterInfo" parameterType="Map" resultType="egovMap">
    <!-- SELECT S.C1 C1 , S.C2 code_Id , S.C3 C3 , S.C4 C4 , S.C5 C5 , S.C3
     ,  C3||'-'||C4 code_Name FROM ( SELECT D.C1 C1 , D.C2 C2 , D.C3 C3 , D.C4
      C4 , D.C5 C5 FROM ( SELECT DISTINCT UnionAll2.C1 C1 , UnionAll2.C2 C2 , UnionAll2.C3
      C3 , UnionAll2.C4 C4 , UnionAll2.C5 C5 FROM ( SELECT Distinct1.C1 C1 , Distinct1.C2
      C2 , Distinct1.C3 C3 , Distinct1.C4 C4 , Distinct1.C5 C5 FROM ( SELECT DISTINCT
      UnionAll1.C1 C1 , UnionAll1.STK_ID C2 , UnionAll1.STK_CODE C3 , UnionAll1.STK_DESC
      C4 , UnionAll1.CODE_NAME C5 FROM ( SELECT 1 C1 , Extent4.STK_ID STK_ID ,
      Extent4.STK_CODE STK_CODE , Extent4.STK_DESC STK_DESC , Extent5.CODE_NAME
      CODE_NAME FROM SVC0001D Extent1 JOIN SAL0090D Extent2 ON ( Extent2.SRV_SO_ID
      = Extent1.AS_SO_ID ) AND ( 1 = Extent2.SRV_STUS_ID ) JOIN SAL0087D Extent3
      ON ( Extent3.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID ) AND ( 1 = Extent3.SRV_FILTER_STUS_ID
      ) JOIN SYS0026M Extent4 ON Extent4.STK_ID = Extent3.SRV_FILTER_STK_ID JOIN
      SYS0013M Extent5 ON Extent5.CODE_ID = Extent4.STK_TYPE_ID WHERE Extent1.AS_ID
      = #{AS_ID} UNION ALL SELECT 1 C1 , Extent9.STK_ID STK_ID , Extent9.STK_CODE
      STK_CODE , Extent9.STK_DESC STK_DESC , Extent10.CODE_NAME CODE_NAME FROM
      SVC0001D Extent6 JOIN SAL0002D Extent7 ON Extent7.SALES_ORD_ID = Extent6.AS_SO_ID
      JOIN LOG0001M Extent8 ON ( Extent8.BOM_STK_ID = Extent7.ITM_STK_ID ) AND
      ( 1 = Extent8.BOM_PART_STUS_ID ) AND ( 548 = Extent8.BOM_TYPE_ID ) JOIN SYS0026M
      Extent9 ON Extent9.STK_ID = Extent8.BOM_PART_ID JOIN SYS0013M Extent10 ON
      Extent10.CODE_ID = Extent9.STK_TYPE_ID WHERE Extent6.AS_ID = #{AS_ID} ) UnionAll1
      ) Distinct1 UNION ALL SELECT 1 C1 , Extent11.STK_ID STK_ID , Extent11.STK_CODE
      STK_CODE , Extent11.STK_DESC STK_DESC , Extent12.CODE_NAME CODE_NAME FROM
      SYS0026M Extent11 JOIN SYS0013M Extent12 ON Extent12.CODE_ID = Extent11.STK_TYPE_ID
      WHERE ( 64 = Extent11.STK_TYPE_ID ) AND ( 1 = Extent11.STUS_CODE_ID ) AND
      ( 1 = Extent11.IS_SVC_STK ) ) UnionAll2 ) D ) S ORDER BY S.C5 ASC -->

    <![CDATA[ SELECT D.STK_ID code_Id ,
                     D.STK_CODE || ' - ' || D.STK_DESC code_Name
              FROM LOG0043M A,
                   LOG0044D B,
                   SYS0026M C,
                   SYS0026M D
              WHERE A.BOM = B.BOM
                AND A.MATRL_NO = C.STK_CODE
                AND B.BOM_COMPNT = D.STK_CODE
                AND C.STK_CODE = #{prdctCd}
                AND NVL(B.DEL_INDICT , 'N')  <>  'Y'
              ORDER BY D.STK_CODE
    ]]>
  </select>

  <select id="getASFilterInfoOld" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT D.STK_ID code_Id ,
                     D.STK_CODE || ' - ' || D.STK_DESC code_Name
              FROM LOG0043M A,
                   LOG0044D B,
                   SYS0026M C,
                   SYS0026M D
              WHERE A.BOM = B.BOM
                AND A.MATRL_NO = C.STK_CODE
                AND B.BOM_COMPNT = D.STK_CODE
                AND C.STK_OLD_CODE = #{prdctCd}
                AND B.VALID_FROM_DT < SYSDATE
                AND B.VALID_TO_DT > SYSDATE
              ORDER BY D.STK_CODE
    ]]>
  </select>

  <select id="getCallLog" parameterType="Map" resultMap="callasLogClobMap">
    SELECT S.CALL_RESULT_ID ,
           S.CALL_REM ,
           S.CALL_CRT_DT ,
           S.C2
           FROM ( SELECT E.CALL_RESULT_ID ,
                         E.CALL_REM ,
                         E.CALL_CRT_DT ,
                         CASE WHEN ( Extent4.USER_ID IS NOT NULL )
                                THEN Extent4.USER_NAME
                                ELSE '-'
                         END C2
                  FROM SVC0001D D JOIN CCR0006D C ON ( D.AS_CALLLOG_ID = C.CALL_ENTRY_ID )
                                                 AND ( 339 = C.TYPE_ID )
                                                 AND ( D.AS_ID = C.DOC_ID )
                  JOIN CCR0007D E ON C.CALL_ENTRY_ID = E.CALL_ENTRY_ID
                  LEFT JOIN SYS0047M Extent4 ON E.CALL_CRT_USER_ID = Extent4.USER_ID
                  WHERE D.AS_ID = #{AS_ID} ) S
  </select>

  <select id="getASRulstEditFilterInfo" parameterType="Map" resultType="egovMap">
    SELECT S.STK_ID filter_Id,
           S.STK_ID ,
           S.C1 filter_Desc ,
           S.C2 filter_Type ,
           S.C3 filter_Ex_Code ,
           S.C4 ,
           S.ASR_ITM_PART_QTY filter_Qty ,
           --TO_CHAR(S.ASR_ITM_PART_PRC, 'fm9,999,999,999,990.00') filter_Price ,
           --TO_CHAR((S.ASR_ITM_PART_PRC * S.ASR_ITM_PART_QTY), 'fm9,999,999,999,990.00') filter_Total ,
           --TO_CHAR(S.ASR_ITM_CHRG_AMT, 'fm9,999,999,999,990.00') ASR_ITM_CHRG_AMT,
           S.ASR_ITM_PART_PRC filter_Price,
           S.ASR_ITM_PART_PRC * S.ASR_ITM_PART_QTY filter_Total,
           S.ASR_ITM_CHRG_AMT ASR_ITM_CHRG_AMT,
           S.ASR_ITM_REM
           filter_Remark ,
           S.SERIAL_NO srv_Filter_Last_Serial
           , S.STK_CODE
           , S.OLD_FILTER_BARCD_SERIAL_NO srv_Old_Filter_Serial
           , S.FILTER_SRL_UNMATCH_RSN unmatched_Rsn
           , s.RESN_DESC unmatched_Reason_text
           FROM ( SELECT E1.ASR_ITM_ID ,
                         E1.ASR_ITM_PART_QTY ,
                         E1.ASR_ITM_PART_PRC ,
                         E1.ASR_ITM_CHRG_AMT ,
                         E1.ASR_ITM_REM ,
                         E1.SERIAL_NO,
                         E2.STK_ID ,
                         E2.STK_CODE || ' - ' || E2.STK_DESC C1 ,
                         CASE WHEN ( 1 = E1.ASR_ITM_CHRG_FOC )
                                THEN 'FOC'
                                ELSE 'CHG'
                         END C2 ,
                         CASE WHEN ( E3.RESN_ID IS NOT NULL )
                                THEN E3.CODE
                                ELSE '0'
                         END C3 ,
                      CASE WHEN ( E3.RESN_ID IS NOT NULL )
                             THEN E3.RESN_ID
                             ELSE 0
                      END C4
                      , E2.STK_CODE
                      , E1.OLD_FILTER_BARCD_SERIAL_NO
                      , E1.FILTER_SRL_UNMATCH_RSN
                      , E4.RESN_DESC
                      FROM SVC0005D E1 JOIN SYS0026M E2 ON E1.ASR_ITM_PART_ID = E2.STK_ID
                      LEFT JOIN SYS0032M E3 ON E1.ASR_ITM_EXCHG_ID = E3.RESN_ID
                      LEFT JOIN SYS0032M E4 ON E1.FILTER_SRL_UNMATCH_RSN = E4.RESN_ID
                      WHERE ( 0 <![CDATA[ <> ]]> E1.ASR_ITM_PART_ID )
                        AND ( E1.ASR_ITM_PART_QTY   <![CDATA[ > ]]> 0 )
                        AND ( E1.AS_RESULT_ID = NVL(#{REF_REQST} , (SELECT AS_RESULT_ID
                                                                    FROM SVC0004D
                                                                    WHERE AS_RESULT_NO = #{AS_RESULT_NO})) )
           ) S ORDER BY S.ASR_ITM_ID ASC
  </select>

  <select id="getASRulstSVC0004DInfo" parameterType="Map" resultType="egovMap">
    SELECT S.AS_RESULT_ID ,
           S.AS_RESULT_NO ,
           S.AS_RESULT_STUS_ID ,
           S.CODE ,
           TO_CHAR(AS_SETL_DT,'dd/mm/yyyy' ) AS_SETL_DT ,
           S.AS_SETL_TM ,
           CASE WHEN ( S.AS_FAIL_RESN_ID IS NOT NULL )
                  THEN S.AS_FAIL_RESN_ID
                  ELSE 0
           END C2 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                  THEN S.CODE1
                  ELSE ' '
           END C3 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                  THEN S.RESN_DESC
                  ELSE ' '
           END C4 ,
           S.AS_BRNCH_ID AS_BRNCH_ID ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.CODE2
                  ELSE ' '
           END C5 ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.NAME
                  ELSE ' '
           END C6 ,
           S.AS_MALFUNC_ID AS_MALFUNC_ID ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.CODE3
                  ELSE ' '
           END C7 ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.REASONDESC1
                  ELSE ' '
           END C8 ,
           S.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID ,
           CASE WHEN ( S.REASONID2 IS NOT NULL )
                  THEN S.CODE4
                  ELSE ' '
           END C9 ,
           CASE WHEN ( S.REASONID2 IS NOT NULL )
                  THEN S.REASONDESC2
                  ELSE ' '
           END C10 ,
           CASE WHEN ( S.AS_CT_ID IS NOT NULL )
                  THEN S.AS_CT_ID
                  ELSE 0
           END C11 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.MEM_CODE
                  ELSE ' '
           END C12 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.NAME1
                  ELSE ' '
           END C13 ,
           S.AS_WH_ID AS_WH_ID ,
           CASE WHEN ( S.WH_LOC_ID IS NOT NULL )
                  THEN S.WH_LOC_CODE
                  ELSE ' '
           END C14 ,
           CASE WHEN ( S.WH_LOC_ID IS NOT NULL )
                  THEN S.WH_LOC_DESC
                  ELSE ' '
           END C15 ,
           S.AS_RESULT_REM AS_RESULT_REM ,
           S.AS_DEFECT_TYPE_ID AS_DEFECT_TYPE_ID ,
           CASE WHEN ( S.REASONID3 IS NOT NULL )
                  THEN S.CODE5
                  ELSE ' '
           END C16 ,
           CASE WHEN ( S.REASONID3 IS NOT NULL )
                  THEN S.REASONDESC3
                  ELSE ' '
           END C17 ,
           S.AS_DEFECT_ID AS_DEFECT_ID ,
           CASE WHEN ( S.REASONID4 IS NOT NULL )
                  THEN S.CODE6
                  ELSE ' '
           END C18 ,
           CASE WHEN ( S.REASONID4 IS NOT NULL )
                  THEN S.REASONDESC4
                  ELSE ' '
           END C19 ,
           S.AS_DEFECT_PART_ID
           AS_DEFECT_PART_ID ,
           CASE WHEN ( S.REASONID5 IS NOT NULL )
                  THEN S.CODE7
                  ELSE ' '
           END C20 ,
           CASE WHEN ( S.REASONID5 IS NOT NULL )
                  THEN S.REASONDESC5
                  ELSE ' '
           END C21 ,
           S.AS_DEFECT_DTL_RESN_ID
           AS_DEFECT_DTL_RESN_ID ,
           CASE WHEN ( S.REASONID6 IS NOT NULL )
                  THEN S.CODE8
                  ELSE ' '
           END C22 ,
           CASE WHEN ( S.REASONID6 IS NOT NULL )
                  THEN S.REASONDESC6
                  ELSE ' '
           END C23 ,
           CASE WHEN ( S.AS_SLUTN_RESN_ID IS NOT NULL )
                  THEN S.AS_SLUTN_RESN_ID
                  ELSE 0
           END C24 ,
           CASE WHEN ( S.REASONID7 IS NOT NULL )
                  THEN S.CODE9
                  ELSE ' '
           END C25 ,
           CASE WHEN ( S.REASONID7 IS NOT NULL )
                  THEN S.REASONDESC7
                  ELSE ' '
           END C26 ,
           S.AS_TOT_AMT ,
           CASE WHEN ( S.AS_CMMS IS NOT NULL )
                THEN S.AS_CMMS
                ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
           END C27 ,
           S.AS_WORKMNSH AS_WORKMNSH ,
           S.AS_FILTER_AMT AS_FILTER_AMT ,
           S.AS_RESULT_CRT_USER_ID
           AS_RESULT_CRT_USER_ID ,
           CASE WHEN ( S.USER_ID IS NOT NULL )
                  THEN S.USER_NAME
                  ELSE ' '
           END C28 ,
           TO_CHAR(S.AS_RESULT_CRT_DT, 'dd/mm/yyyy') AS_RESULT_CRT_DT ,
           S.IN_HUSE_REPAIR_REM,
           S.IN_HUSE_REPAIR_REPLACE_YN,
           TO_CHAR(S.IN_HUSE_REPAIR_PROMIS_DT, 'dd/mm/yyyy')
           IN_HUSE_REPAIR_PROMIS_DT ,
           S.IN_HUSE_REPAIR_GRP_CODE,
           S.IN_HUSE_REPAIR_PRODUCT_CODE,
           S.IN_HUSE_REPAIR_SERIAL_NO,
           TO_CHAR((SELECT AS_APPNT_DT FROM SVC0001D X WHERE X.AS_ID =S.AS_ENTRY_ID ) , 'dd/mm/yyyy') APPNT_DT,
           CASE WHEN ( S.AS_RESULT_STUS_ID ='4' )
                  THEN TO_CHAR(S.AS_RESULT_UPD_DT,'dd/mm/yyyy')
                  ELSE '-'
           END AS AS_RESULT_DT,
           S.PSI,
           S.LPM,
           S.WATER_SRC_TYPE,
           S.AS_UNMATCH_REASON,
           S.REWORK_PROJ,
           S.CODE_NAME AS REWORK_PROJ_NAME,
           S.NTU,
           S.PARTNER_CODE,
           S.VOLT,
           S.ATCH_FILE_GRP_ID
    FROM ( SELECT E.AS_RESULT_ID AS_RESULT_ID ,
                  E.AS_RESULT_NO AS_RESULT_NO ,
                  E.AS_ENTRY_ID ,
                  E.AS_CT_ID AS_CT_ID ,
                  E.AS_SETL_DT AS_SETL_DT ,
                  E.AS_SETL_TM AS_SETL_TM ,
                  E.AS_RESULT_STUS_ID AS_RESULT_STUS_ID ,
                  E.AS_FAIL_RESN_ID AS_FAIL_RESN_ID ,
                  E.AS_CMMS AS_CMMS ,
                  E.AS_BRNCH_ID AS_BRNCH_ID ,
                  E.AS_WH_ID AS_WH_ID ,
                  E.AS_RESULT_REM AS_RESULT_REM ,
                  E.AS_RESULT_CRT_DT AS_RESULT_CRT_DT ,
                  E.AS_RESULT_CRT_USER_ID AS_RESULT_CRT_USER_ID ,
                  E.AS_MALFUNC_ID AS_MALFUNC_ID ,
                  E.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID ,
                  E.AS_DEFECT_TYPE_ID AS_DEFECT_TYPE_ID ,
                  E.AS_DEFECT_ID AS_DEFECT_ID ,
                  E.AS_DEFECT_PART_ID AS_DEFECT_PART_ID ,
                  E.AS_DEFECT_DTL_RESN_ID AS_DEFECT_DTL_RESN_ID ,
                  E.AS_SLUTN_RESN_ID AS_SLUTN_RESN_ID ,
                  E.AS_WORKMNSH AS_WORKMNSH ,
                  E.AS_FILTER_AMT AS_FILTER_AMT ,
                  E.AS_TOT_AMT AS_TOT_AMT ,
                  Extent2.CODE CODE ,
                  Extent3.RESN_ID RESN_ID ,
                  Extent3.CODE CODE1 ,
                  Extent3.RESN_DESC RESN_DESC ,
                  Extent4.BRNCH_ID BRNCH_ID ,
                  Extent4.CODE CODE2 ,
                  Extent4.NAME NAME ,
                  Extent5.RESN_ID REASONID1 ,
                  Extent5.CODE CODE3 ,
                  Extent5.RESN_DESC REASONDESC1 ,
                  Extent6.RESN_ID REASONID2 ,
                  Extent6.CODE CODE4 ,
                  Extent6.RESN_DESC REASONDESC2 ,
                  Extent7.MEM_ID MEM_ID ,
                  Extent7.MEM_CODE MEM_CODE ,
                  Extent7.NAME NAME1 ,
                  Extent8.WH_LOC_ID WH_LOC_ID ,
                  Extent8.WH_LOC_CODE WH_LOC_CODE ,
                  Extent8.WH_LOC_DESC WH_LOC_DESC ,
                  Extent9.DEFECT_ID REASONID3 ,
                  Extent9.DEFECT_CODE CODE5 ,
                  Extent9.DEFECT_DESC REASONDESC3 ,
                  E0.DEFECT_ID REASONID4 ,
                  E0.DEFECT_CODE CODE6 ,
                  E0.DEFECT_DESC REASONDESC4 ,
                  E1.DEFECT_ID REASONID5 ,
                  E1.DEFECT_CODE CODE7 ,
                  E1.DEFECT_DESC REASONDESC5 ,
                  E2.DEFECT_ID REASONID6 ,
                  E2.DEFECT_CODE CODE8 ,
                  E2.DEFECT_DESC REASONDESC6 ,
                  E3.DEFECT_ID REASONID7 ,
                  E3.DEFECT_CODE CODE9 ,
                  E3.DEFECT_DESC REASONDESC7 ,
                  E4.USER_ID USER_ID ,
                  E4.USER_NAME USER_NAME ,
                  E.IN_HUSE_REPAIR_REM,
                  E.IN_HUSE_REPAIR_REPLACE_YN,
                  E.IN_HUSE_REPAIR_PROMIS_DT,
                  E.IN_HUSE_REPAIR_GRP_CODE,
                  E.IN_HUSE_REPAIR_PRODUCT_CODE,
                  E.IN_HUSE_REPAIR_SERIAL_NO,
                  E.APPNT_DT,
                  E.AS_RESULT_UPD_DT,
                  E.PSI,
                  E.LPM,
                  E.WATER_SRC_TYPE,
                  E.AS_UNMATCH_REASON,
                  E.REWORK_PROJ,
                  E5.CODE_NAME,
                  E.NTU,
                  E.VOLT,
                  E.PARTNER_CODE,
                  NVL(E.ATCH_FILE_GRP_ID,0) ATCH_FILE_GRP_ID
           FROM SVC0004D E JOIN SYS0038M Extent2 ON Extent2.STUS_CODE_ID = E.AS_RESULT_STUS_ID
           LEFT JOIN SYS0032M Extent3 ON Extent3.RESN_ID = E.AS_FAIL_RESN_ID
           LEFT JOIN SYS0005M Extent4 ON Extent4.BRNCH_ID = E.AS_BRNCH_ID
           LEFT JOIN SYS0032M Extent5 ON Extent5.RESN_ID = E.AS_MALFUNC_ID
           LEFT JOIN SYS0032M Extent6 ON Extent6.RESN_ID = E.AS_MALFUNC_RESN_ID
           LEFT JOIN ORG0001D Extent7 ON Extent7.MEM_ID = E.AS_CT_ID
           LEFT JOIN SYS0028M Extent8 ON Extent8.WH_LOC_ID = E.AS_WH_ID
           LEFT JOIN SYS0100M Extent9 ON Extent9.DEFECT_ID = E.AS_DEFECT_TYPE_ID AND Extent9.DEFECT_TYP = 'DT'
           LEFT JOIN SYS0100M E0 ON E0.DEFECT_ID = E.AS_DEFECT_ID AND E0.DEFECT_TYP = 'DC'
           LEFT JOIN SYS0100M E1 ON E1.DEFECT_ID = E.AS_DEFECT_PART_ID AND E1.DEFECT_TYP = 'DP'
           LEFT JOIN SYS0100M E2 ON E2.DEFECT_ID = E.AS_DEFECT_DTL_RESN_ID AND E2.DEFECT_TYP = 'DD'
           LEFT JOIN SYS0100M E3 ON E3.DEFECT_ID = E.AS_SLUTN_RESN_ID AND E3.DEFECT_TYP = 'SC'
           LEFT JOIN SYS0013M E5 ON E5.CODE_ID = E.REWORK_PROJ
           LEFT JOIN SYS0047M E4 ON E4.USER_ID = E.AS_RESULT_CRT_USER_ID
           WHERE E.AS_RESULT_ID = NVL( #{REF_REQST}, (SELECT AS_RESULT_ID
                                                      FROM SVC0004D
                                                      WHERE AS_RESULT_NO = #{AS_RESULT_NO}) )
                                                        AND ROWNUM   <![CDATA[<= ]]> 1 ) S
  </select>

  <select id="getCCR0006D_CALL_ENTRY_ID_SEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT CCR0006D_CALL_ENTRY_ID_SEQ.NEXTVAL seq FROM DUAL
    ]]>
  </select>

  <select id="assignCtList" parameterType="Map" resultType="egovMap">
      SELECT DISTINCT
            A.MEM_ID CT_ID,
            A.MEM_CODE CT_CODE,
            A.BRNCH BRNCH_ID,
            C.CODE BRANCH_CODE,
            C.NAME BRANCH_NAME,
            A.STUS CT_STUS,
            A.NAME CT_NAME,
            D.CT_SUB_GRP
        FROM ORG0001D A, ORG0005D B, SYS0005M C, SYS0064M D, SVC0054M E
        WHERE A.MEM_ID = B.MEM_ID
        AND A.BRNCH = C.BRNCH_ID
        AND C.CODE = D.CT_BRNCH_CODE
        AND A.MEM_ID = E.MEM_ID
        AND D.CT_SUB_GRP = E.CT_SUB_GRP
        AND A.BRNCH = #{BRNCH_ID}
        AND A.MEM_TYPE = 3
        AND A.STUS = 1
        AND B.MEM_LVL in (3, 4)
        AND E.MAJOR_GRP = '1'
  </select>

  <select id="assignCtOrderList" parameterType="Map" resultType="egovMap">
    SELECT B.SALES_ORD_NO SALES_ORD_NO,
           A.AS_ID,
           C.NAME CUST_NAME,
           C.CUST_ID CUST_ID ,
           A.AS_MEM_ID AS_MEM_ID,
           F.CT_SUB_GRP CUST_SUB_GRP,
           (SELECT MEM_CODE
            FROM ORG0001D S
            WHERE S.MEM_ID = A.AS_MEM_ID ) MEM_CODE
    FROM SVC0001D A ,
    SAL0001D B , --ORDER INFO
    SAL0029D C , --CUST INFO
    SAL0045D D , --INST ADDRESS
    SAL0023D E , --HISTORY OF ADDR
    SYS0064M F   --MAGIC ADDR
    WHERE 1 = 1

    <if test="asNo != null and asNo != '' ">
      AND AS_NO IN
      <foreach item="item" collection="asNo" index="index" open="("
        separator="," close=")">
        #{item}
      </foreach>
    </if>

          AND A.AS_SO_ID = B.SALES_ORD_ID
          AND B.CUST_ID = C.CUST_ID
          AND B.SALES_ORD_ID = D.SALES_ORD_ID
          AND D.ADD_ID = E.CUST_ADD_ID
          AND E.AREA_ID = F.AREA_ID(+)
  </select>

  <select id="geTtotalAASLeft" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT SUM(totalLgAmt) AS totalLgAmt ,
             SUM(totalUsedLgAmt)  AS totalUsedLgAmt,
             (SUM(totalLgAmt) - SUM(totalUsedLgAmt)) totalAASLeft
      FROM ( SELECT (totalLgAmt * -1) totalLgAmt ,
                     0 totalUsedLgAmt
             FROM ( SELECT AS_SO_ID ,
                           SUM(AS_LG_AMT) totalLgAmt
                    FROM PAY0006D
                    WHERE AS_SO_ID = #{AS_SO_ID}
                      AND AS_LG_DOC_TYPE_ID = '401'
                      AND AS_LG_AMT < 0
             GROUP BY AS_SO_ID )
             UNION
             SELECT 0 totalLgAmt ,
                    (totalLgAmt * -1) totalUsedLgAmt
              FROM ( SELECT AS_SO_ID ,
                            SUM(AS_LG_AMT) totalLgAmt FROM PAY0006D
                WHERE AS_SO_ID = #{AS_SO_ID}
                AND AS_LG_DOC_TYPE_ID = '163'
                AND AS_ADV_PAY = 1
                GROUP BY AS_SO_ID
            )
      )
    ]]>
  </select>

  <select id="geGST_CHK" parameterType="Map" resultType="egovMap">
    SELECT A.SALES_ORD_ID ,
           B.CUST_ID,
           C.GST_CHK
    FROM SAL0001D A ,
         SAL0023D B ,
         SYS0064M C
    WHERE 1 = 1
      AND A.SALES_ORD_ID = #{AS_SO_ID}
      AND A.CUST_ADD_ID = B.CUST_ADD_ID
      AND C.AREA_ID = B.AREA_ID
  </select>

  <resultMap id="callasLogClobMapAS" type="egovMap">
    <result property="callRem" column="CALL_REM" jdbcType="CLOB"
      javaType="java.lang.String" />
  </resultMap>

  <select id="selectASDataInfo" parameterType="Map" resultMap="callasLogClobMapAS">
    SELECT S.AS_ID AS_ID ,
           S.AS_ALLOW_COMM AS_ALLOW_COMM ,
           S.AS_CRT_DT AS_CRT_DT ,
           CASE WHEN ( S.USER_ID IS NOT NULL )
                  THEN S.USER_NAME
                  ELSE '-'
           END C1 ,
           S.AS_NO AS_NO ,
           S.AS_STUS_ID AS_STUS_ID ,
           S.AS_SO_ID AS_SO_ID ,
           CASE WHEN ( S.AS_REQSTER_TYPE_ID IS NOT NULL )
                  THEN S.AS_REQSTER_TYPE_ID
                  ELSE 0
           END C2 ,
           CASE WHEN ( S.CODE_ID IS NOT NULL )
                  THEN S.CODE_NAME
                  ELSE ' '
           END C3 ,
           S.AS_REM_REQSTER AS_REM_REQSTER ,
           S.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC ,
           S.CODE CODE ,
           TO_CHAR(S.AS_REQST_DT,'dd/MM/YYYY') AS_REQST_DT ,
           S.AS_REQST_TM
           AS_REQST_TM ,
           TO_CHAR(S.AS_APPNT_DT,'dd/MM/YYYY') AS_APPNT_DT ,
           S.AS_APPNT_TM AS_APPNT_TM ,
           CASE WHEN ( S.AS_RESULT_ID IS NOT NULL )
                  THEN S.AS_RESULT_ID
                  ELSE 0
           END C4 ,
           CASE WHEN ( S.AS_RESULT_ID IS NOT NULL )
                  THEN S.AS_RESULT_NO
                  ELSE '-'
           END C5 ,
           S.AS_MEM_GRP AS_MEM_GRP ,
           CASE WHEN ( S.AS_BRNCH_ID IS NOT NULL )
                  THEN S.AS_BRNCH_ID
                  ELSE 0
           END C6 ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.CODE1
                  ELSE ' '
           END C7 ,
           CASE WHEN ( S.BRNCH_ID IS NOT NULL )
                  THEN S.NAME
                  ELSE ' '
           END C8 ,
           CASE WHEN ( S.AS_MEM_ID IS NOT NULL )
                  THEN S.AS_MEM_ID
                  ELSE 0
           END C9 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.MEM_CODE
                  ELSE ' '
           END C10 ,
           CASE WHEN ( S.MEM_ID IS NOT NULL )
                  THEN S.NAME1
                  ELSE ' '
           END C11 ,
           CASE WHEN ( S.AS_MALFUNC_ID IS NOT NULL )
                  THEN S.AS_MALFUNC_ID
                  ELSE 0
           END C12 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                  THEN S.CODE2
                  ELSE ' '
           END C13 ,
           CASE WHEN ( S.RESN_ID IS NOT NULL )
                  THEN S.RESN_DESC
                  ELSE ' '
           END C14 ,
           CASE WHEN ( S.AS_MALFUNC_RESN_ID IS NOT NULL )
                  THEN S.AS_MALFUNC_RESN_ID
                  ELSE 0
           END C15 ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.CODE3
                  ELSE ' '
           END C16 ,
           CASE WHEN ( S.REASONID1 IS NOT NULL )
                  THEN S.REASONDESC1
                  ELSE ' '
           END C17 ,
           S.AS_SMS AS_SMS ,
           S.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS ,
           CASE WHEN ( S.CALL_RESULT_ID IS NOT NULL )
                  THEN S.CALL_REM
                  ELSE S.CALL_REM
           END
           CALL_REM ,
           CASE WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
                 AND ( S.ACC_BILL_TASK_ID IS NULL ) ) )
                   THEN S.ACC_BILL_ID
                WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
                 AND ( S.ACC_BILL_TASK_ID IS NULL ) ) )
                   THEN S.ACC_BILL_ID
                   ELSE 0
           END C19 ,
           CASE WHEN ( NOT ( ( S.TAX_INVC_ID IS NULL )
                 AND ( S.TAX_INVC_REF_NO IS NULL ) ) )
                   THEN S.TAX_INVC_REF_NO
                   ELSE ' '
           END C20
    FROM ( SELECT Extent1.AS_ID AS_ID ,
                  Extent1.AS_NO AS_NO ,
                  Extent1.AS_SO_ID AS_SO_ID ,
                  Extent1.AS_MEM_ID AS_MEM_ID ,
                  Extent1.AS_MEM_GRP AS_MEM_GRP ,
                  Extent1.AS_REQST_DT AS_REQST_DT ,
                  Extent1.AS_REQST_TM AS_REQST_TM ,
                  Extent1.AS_APPNT_DT AS_APPNT_DT ,
                  Extent1.AS_APPNT_TM AS_APPNT_TM ,
                  Extent1.AS_BRNCH_ID AS_BRNCH_ID ,
                  Extent1.AS_MALFUNC_ID AS_MALFUNC_ID ,
                  Extent1.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID ,
                  Extent1.AS_REM_REQSTER AS_REM_REQSTER ,
                  Extent1.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC ,
                  Extent1.AS_STUS_ID AS_STUS_ID ,
                  Extent1.AS_SMS AS_SMS ,
                  Extent1.AS_CRT_DT AS_CRT_DT ,
                  Extent1.AS_REQSTER_TYPE_ID AS_REQSTER_TYPE_ID ,
                  Extent1.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS ,
                  Extent1.AS_ALLOW_COMM AS_ALLOW_COMM ,
                  Extent2.CODE CODE ,
                  Extent3.USER_ID USER_ID ,
                  Extent3.USER_NAME USER_NAME ,
                  Extent4.CODE_ID CODE_ID ,
                  Extent4.CODE_NAME CODE_NAME ,
                  Extent5.AS_RESULT_ID AS_RESULT_ID ,
                  Extent5.AS_RESULT_NO AS_RESULT_NO ,
                  Extent6.BRNCH_ID BRNCH_ID ,
                  Extent6.CODE CODE1 ,
                  Extent6.NAME NAME ,
                  Extent7.MEM_ID MEM_ID ,
                  Extent7.MEM_CODE MEM_CODE ,
                  Extent7.NAME NAME1 ,
                  Extent8.RESN_ID RESN_ID ,
                  Extent8.CODE CODE2 ,
                  Extent8.RESN_DESC RESN_DESC ,
                  Extent9.RESN_ID REASONID1 ,
                  Extent9.CODE CODE3 ,
                  Extent9.RESN_DESC REASONDESC1 ,
                  Extent11.CALL_RESULT_ID CALL_RESULT_ID ,
                  Extent11.CALL_REM CALL_REM ,
                  Extent12.TAX_INVC_ID TAX_INVC_ID ,
                  Extent12.TAX_INVC_REF_NO TAX_INVC_REF_NO ,
                  Extent13.ACC_BILL_ID ACC_BILL_ID ,
                  Extent13.ACC_BILL_TASK_ID ACC_BILL_TASK_ID
           FROM SVC0001D Extent1 JOIN SYS0038M Extent2 ON Extent1.AS_STUS_ID = Extent2.STUS_CODE_ID
           LEFT JOIN SYS0047M Extent3 ON Extent1.AS_CRT_USER_ID = Extent3.USER_ID
           LEFT JOIN SYS0013M Extent4 ON Extent1.AS_REQSTER_TYPE_ID = Extent4.CODE_ID
           LEFT JOIN SVC0004D Extent5 ON ( Extent1.AS_ID = Extent5.AS_ENTRY_ID )
                                    AND ( 457 = Extent5.AS_RESULT_TYPE_ID )
                                    AND ( 1 = Extent5.AS_RESULT_IS_CURR )
           LEFT JOIN SYS0005M Extent6 ON Extent1.AS_BRNCH_ID = Extent6.BRNCH_ID
           LEFT JOIN ORG0001D Extent7 ON Extent1.AS_MEM_ID = Extent7.MEM_ID
           LEFT JOIN SYS0032M Extent8 ON Extent1.AS_MALFUNC_ID = Extent8.RESN_ID
           LEFT JOIN SYS0032M Extent9 ON Extent1.AS_MALFUNC_RESN_ID = Extent9.RESN_ID
           LEFT JOIN CCR0006D Extent10 ON Extent1.AS_CALLLOG_ID = Extent10.CALL_ENTRY_ID
           LEFT JOIN CCR0007D Extent11 ON Extent10.RESULT_ID = Extent11.CALL_RESULT_ID
           LEFT JOIN PAY0031D Extent12 ON ( Extent5.AS_RESULT_NO = Extent12.TAX_INVC_SVC_NO )
                                       OR ( ( Extent5.AS_RESULT_NO IS NULL )
                                      AND ( Extent12.TAX_INVC_SVC_NO IS NULL ) )
           LEFT JOIN PAY0016D Extent13 ON Extent12.TAX_INVC_REF_NO = Extent13.ACC_BILL_REM
           WHERE Extent1.AS_ID = #{AS_ID}
           AND ROWNUM  <![CDATA[ <= 1 ]]> ) S
  </select>

  <resultMap id="asFilterClaimCheck" type="egovMap">
  </resultMap>

  <select id="spFilterClaimCheck" statementType="CALLABLE" parameterType="Map">
    <![CDATA[
      { call SP_FILTER_CLM_CHK ( #{asResultId} ,  #{type} , #{p1, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=asFilterClaimCheck}) }
         ]]>
  </select>

  <select id="selectStkPriceByStkID" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT AMT as FilterPrice
      FROM SAL0016M
      WHERE STK_ID = #{stkID}
      AND STUS_CODE_ID = 1  ]]>
  </select>

  <select id="getPAY0017SEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT PAY0017D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getResult_SVC0004D" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT S.AS_RESULT_ID,
                     S.AS_RESULT_NO,
                     S.AS_ENTRY_ID,
                     S.AS_SO_ID,
                     S.AS_CT_ID,
                     S.AS_SETL_DT,
                     S.AS_SETL_TM,
                     S.AS_RESULT_STUS_ID,
                     S.AS_FAIL_RESN_ID,
                     S.AS_REN_COLCT_ID,
                     S.AS_CMMS,
                     S.AS_BRNCH_ID,
                     S.AS_WH_ID,
                     S.AS_RESULT_REM,
                     S.AS_RESULT_CRT_DT,
                     S.AS_RESULT_CRT_USER_ID,
                     S.AS_MALFUNC_ID,
                     S.AS_MALFUNC_RESN_ID,
                     S.AS_DEFECT_TYPE_ID,
                     S.AS_DEFECT_GRP_ID,
                     S.AS_DEFECT_ID,
                     S.AS_DEFECT_PART_GRP_ID,
                     S.AS_DEFECT_PART_ID,
                     S.AS_DEFECT_DTL_RESN_ID,
                     S.AS_SLUTN_RESN_ID,
                     S.AS_WORKMNSH,
                     S.AS_FILTER_AMT,
                     S.AS_ACSRS_AMT,
                     S.AS_TOT_AMT,
                     S.AS_RESULT_IS_SYNCH,
                     S.AS_RCALL,
                     S.AS_RESULT_STOCK_USE,
                     S.AS_RESULT_TYPE_ID,
                     S.AS_RESULT_IS_CURR,
                     S.AS_RESULT_MTCH_ID,
                     S.AS_RESULT_NO_ERR,
                     S.AS_RESULT_UPD_DT,
                     S.AS_RESULT_UPD_USER_ID,
                     S.AS_ENTRY_POINT,
                     S.AS_WORKMNSH_TAX_CODE_ID,
                     S.AS_WORKMNSH_TXS,
                     S.AS_RESULT_MOBILE_ID
              FROM SVC0004D S
              WHERE AS_ENTRY_ID = #{AS_ID}
                AND AS_RESULT_IS_CURR =1
    ]]>
  </select>

  <select id="getLog0016DCount" parameterType="Map" resultType="egovMap">
    SELECT COUNT(*) cnt
    FROM LOG0016D
    WHERE REQ_ITM_REF_ID =#{OLD_AS_RESULT_ID}
      AND REQ_ITM_TYPE_ID ='457'
       AND REQ_ITM_STUS_ID ='4'
  </select>

  <select id="getLOG0015DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT  LOG0015D_STK_REQ_ID_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getResult_PAY0016D" parameterType="Map" resultType="egovMap">
    <![CDATA[
       SELECT P.ACC_BILL_ID,
              P.ACC_BILL_TASK_ID,
              P.ACC_BILL_REF_DT,
              P.ACC_BILL_REF_NO,
              P.ACC_BILL_ORD_ID,
              P.ACC_BILL_ORD_NO,
              P.ACC_BILL_TYPE_ID,
              P.ACC_BILL_MODE_ID,
              P.ACC_BILL_SCHDUL_ID,
              P.ACC_BILL_SCHDUL_PRIOD,
              P.ACC_BILL_ADJ_ID,
              P.ACC_BILL_SCHDUL_AMT,
              P.ACC_BILL_ADJ_AMT,
              P.ACC_BILL_TXS_AMT,
              P.ACC_BILL_NET_AMT,
              P.ACC_BILL_STUS,
              P.ACC_BILL_REM,
              P.ACC_BILL_CRT_DT,
              P.ACC_BILL_CRT_USER_ID,
              P.ACC_BILL_GRP_ID,
              P.ACC_BILL_TAX_CODE_ID,
              P.ACC_BILL_TAX_RATE,
              P.ACC_BILL_ACCT_CNVR,
              P.ACC_BILL_CNTRCT_ID
        FROM PAY0016D P
        WHERE ACC_BILL_ID = #{ACC_BILL_ID}
    ]]>
  </select>

  <select id="getResult_PAY0031D" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT P.TAX_INVC_ID,
             P.TAX_INVC_REF_NO,
             P.TAX_INVC_REF_DT,
             P.TAX_INVC_SVC_NO,
             P.TAX_INVC_TYPE,
             P.TAX_INVC_CUST_NAME,
             P.TAX_INVC_CNTC_PERSON,
             P.TAX_INVC_ADDR1,
             P.TAX_INVC_ADDR2,
             P.TAX_INVC_ADDR3,
             P.TAX_INVC_ADDR4,
             P.TAX_INVC_POST_CODE,
             P.TAX_INVC_STATE_NAME,
             P.TAX_INVC_CNTY,
             P.TAX_INVC_TASK_ID,
             P.TAX_INVC_REM,
             P.TAX_INVC_CHRG,
             P.TAX_INVC_TXS,
             P.TAX_INVC_AMT_DUE,
             P.TAX_INVC_CRT_DT,
             P.TAX_INVC_CRT_USER_ID
        FROM PAY0031D P
        WHERE TAX_INVC_REF_NO = #{accBillRem}
    ]]>
  </select>

  <select id="getPAY0016DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT  PAY0016D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getPAY0017DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT  PAY0017D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getPAY0027DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT PAY0027D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getResult_PAY0006D" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT P.AS_LDGR_ID,
             P.AS_ID,
             P.AS_DOC_NO,
             P.AS_LG_DOC_TYPE_ID,
             P.AS_LG_DT,
             P.AS_LG_AMT,
             P.AS_LG_UPD_USER_ID,
             P.AS_LG_UPD_DT,
             P.AS_SO_NO,
             P.AS_RESULT_NO,
             P.AS_SO_ID,
             P.AS_ADV_PAY,
             P.R01
      FROM PAY0006D P
      WHERE P.AS_DOC_NO = #{AS_RESULT_NO}
        AND P.AS_ADV_PAY =0
        AND P.AS_LG_DOC_TYPE_ID ='163'
        AND P.AS_LG_AMT < 0
    ]]>

    <!-- <![CDATA[ SELECT P.AS_LDGR_ID, P.AS_ID, P.AS_DOC_NO, P.AS_LG_DOC_TYPE_ID,
      P.AS_LG_DT, P.AS_LG_AMT, P.AS_LG_UPD_USER_ID, P.AS_LG_UPD_DT, P.AS_SO_NO,
      P.AS_RESULT_NO, P.AS_SO_ID, P.AS_ADV_PAY, P.R01 FROM PAY0006D P WHERE P.AS_DOC_NO
      = #{AS_DOC_NO} AND P.AS_ADV_PAY =0 AND P.AS_LG_DOC_TYPE_ID ='163' AND P.AS_LG_AMT
      < 0 ]]> -->

  </select>

  <select id="getResult_PAY0007D" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT P.BILL_ID,
             P.BILL_TYPE_ID,
             P.BILL_SO_ID,
             P.BILL_MEM_ID,
             P.BILL_AS_ID,
             P.BILL_PAY_TYPE_ID,
             P.BILL_NO,
             P.BILL_MEM_SHIP_NO,
             P.BILL_DT,
             P.BILL_AMT,
             P.BILL_REM,
             P.BILL_IS_PAID,
             P.BILL_IS_COMM,
             P.UPD_USER_ID,
             P.UPD_DT,
             P.SYNC_CHK,
             P.COURS_ID,
             P.STUS_ID
      FROM PAY0007D P
      WHERE P.BILL_NO = #{AS_RESULT_NO}
    ]]>
  </select>

  <select id="getResult_PAY0064D" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT P.PAY_ID,
             P.OR_NO,
             P.SALES_ORD_ID,
             P.BILL_ID,
             P.TR_NO,
             P.TYPE_ID,
             P.PAY_DATA,
             P.BANK_CHG_AMT,
             P.BANK_CHG_ACC_ID,
             P.COLL_MEM_ID,
             P.BRNCH_ID,
             P.BANK_ACC_ID,
             P.ALLOW_COMM,
             P.STUS_CODE_ID,
             P.UPD_USER_ID,
             P.UPD_DT,
             P.SYNC_HECK,
             P.CUST_ID_3PARTY,
             P.TOT_AMT,
             P.MTCH_ID,
             P.CRT_USER_ID,
             P.CRT_DT,
             P.IS_ALLOW_REV_MULTI,
             P.IS_GL_POST_CLM,
             P.GL_POST_CLM_DT,
             P.TRX_ID,
             P.ADV_MONTH,
             P.ACC_BILL_ID,
             P.TR_ISSU_DT,
             P.TAX_INVC_IS_GEN,
             P.TAX_INVC_REF_NO,
             P.TAX_INVC_REF_DT,
             P.SVC_CNTRCT_ID,
             P.BATCH_PAY_ID
      FROM PAY0064D P
      WHERE P.BILL_ID =  #{BILL_ID}
        AND P.TYPE_ID  IN(93,101)
        AND P.STUS_CODE_ID =1
    ]]>
  </select>

  <select id="getPAY0069DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT  PAY0069D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getPAY0064DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT PAY0064D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getPAY0065DSEQ" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT PAY0065D_SEQ.NEXTVAL seq FROM DUAL ]]>
  </select>

  <select id="getResult_PAY0065D" parameterType="Map" resultType="egovMap">
    SELECT P.PAY_ITM_ID,
           P.PAY_ID,
           P.PAY_ITM_MODE_ID,
           P.PAY_ITM_REF_NO,
           P.PAY_ITM_CC_NO,
           P.PAY_ITM_ORI_CC_NO,
           P.PAY_ITM_ENCRYPT_CC_NO,
           P.PAY_ITM_CC_TYPE_ID,
           P.PAY_ITM_CHQ_NO,
           P.PAY_ITM_ISSU_BANK_ID,
           P.PAY_ITM_AMT,
           P.PAY_ITM_IS_ONLINE,
           P.PAY_ITM_BANK_ACC_ID,
           P.PAY_ITM_REF_DT,
           P.PAY_ITM_APPV_NO,
           P.PAY_ITM_REM,
           P.PAY_ITM_STUS_ID,
           P.PAY_ITM_IS_LOK,
           P.PAY_ITM_CC_HOLDER_NAME,
           P.PAY_ITM_CC_EXPR_DT,
           P.PAY_ITM_BANK_CHRG_AMT,
           P.PAY_ITM_IS_THRD_PARTY,
           P.PAY_ITM_THRD_PARTY_IC,
           P.PAY_ITM_BANK_BRNCH_ID,
           P.PAY_ITM_BANK_IN_SLIP_NO,
           P.PAY_ITM_EFT_NO,
           P.PAY_ITM_CHQ_DEP_RECIPT_NO,
           P.ETC1,
           P.ETC2,
           P.ETC3,
           P.PAY_ITM_MID,
           P.PAY_ITM_GRP_ID,
           P.PAY_ITM_REF_ITM_ID,
           P.PAY_ITM_BANK_CHRG_ACC_ID,
           P.PAY_ITM_RUNNG_NO,
           P.UPD_USER_ID,
           P.UPD_DT,
           P.IS_FUND_TRNSFR,
           P.SKIP_RECON,
           P.PAY_ITM_CARD_TYPE_ID,
           P.PAY_ITM_CARD_MODE_ID
    FROM PAY0065D P
    WHERE PAY_ID = #{PAY_ID}
      AND PAY_ITM_STUS_ID = 1
    ORDER BY PAY_ITM_ID
  </select>

  <select id="getResult_DocNo_PAY0006D" parameterType="Map" resultType="egovMap">
    SELECT AS_ID,
           AS_DOC_NO,
           AS_LG_DOC_TYPE_ID,
           AS_LG_DT,
           AS_LG_AMT,
           AS_LG_UPD_USER_ID,
           AS_LG_UPD_DT,
           AS_SO_NO,
           AS_RESULT_NO,
           AS_SO_ID,
           AS_ADV_PAY,
           R01
    FROM PAY0006D
    WHERE AS_DOC_NO = #{AS_DOC_NO}
    ORDER BY AS_LDGR_ID
  </select>

  <select id="selectCTByDSC" parameterType="Map" resultType="egovMap">
    SELECT A.MEM_CODE CODE_ID,
           A.MEM_CODE || '-' || A.NAME CODE_NAME
    FROM ORG0001D A,
         SYS0005M B
    WHERE A.BRNCH = B.BRNCH_ID
    AND B.TYPE_ID = '43'
    AND A.STUS = '1'

    <if test="groupCode != null and groupCode !='' ">
      AND B.CODE = #{groupCode}
    </if>
  </select>

  <select id="isAsAlreadyResult" parameterType="Map" resultType="java.lang.Integer">
    <![CDATA[
      SELECT COUNT(AS_ID)
      FROM SVC0001D
      WHERE  AS_NO =#{serviceNo} AND AS_STUS_ID NOT IN ('1', '19')
    ]]>
  </select>

  <select id="getErrMstList" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT DEFECT_TYPE_CODE AS CODE_ID
                  ,  DEFECT_TYPE_CODE_DESC    AS CODE_NAME
                  ,  PRODUCT_CTGRY_CODE
              FROM( SELECT DISTINCT D.DEFECT_TYPE_CODE
                                 ,  '[' || E.CODE || ']' || D.DEFECT_TYPE_CODE_DESC AS DEFECT_TYPE_CODE_DESC
                                 ,  D.PRODUCT_CTGRY_CODE
                    FROM SAL0001D A
                      ,  SAL0002D B
                      ,  SYS0026M C
                      ,  SVC0056M D
                      ,  SYS0013M E
                    WHERE 1=1
                      AND A.SALES_ORD_ID =  B.SALES_ORD_ID
                      AND B.ITM_STK_ID   =  C.STK_ID
                      AND C.STK_CTGRY_ID =  D.PRODUCT_CTGRY_CODE
                      AND D.PRODUCT_CTGRY_CODE = E.CODE_ID (+)
                      AND E.CODE_MASTER_ID = '11'
                      AND A.SALES_ORD_NO = #{SALES_ORD_NO}
                    UNION
                    SELECT DISTINCT A.DEFECT_TYPE_CODE
                                  ,  A.DEFECT_TYPE_CODE_DESC
                                  ,  A.PRODUCT_CTGRY_CODE
                    FROM SVC0056M  A
                    WHERE 1=1
                    AND PRODUCT_CTGRY_CODE IN ('999')
                    AND STUS_CODE_ID <> 8
             ) ORDER BY PRODUCT_CTGRY_CODE DESC
    ]]>
  </select>

  <select id="getErrDetilList" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT DEFECT_TYPE_CODE
         , DEFECT_DTL_CODE AS CODE_ID
         , DEFECT_DTL_CODE_DESC AS CODE_NAME
    FROM SVC0056M A
    WHERE DEFECT_TYPE_CODE = #{DEFECT_TYPE_CODE}
    GROUP BY DEFECT_TYPE_CODE,
             DEFECT_DTL_CODE,
             DEFECT_DTL_CODE_DESC
    ]]>
  </select>

  <select id="getSLUTN_CODE_List" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT SLUTN_CODE AS CODE_ID
          ,  SLUTN_CODE_DESC AS CODE_NAME
      FROM SVC0061C
    ]]>
  </select>

  <select id="getCustAddressInfo" parameterType="Map" resultType="java.lang.String">
    <![CDATA[ SELECT FN_GET_SVC_BILL_MADDRESS( #{SALES_ORD_NO},'FULL_ADDR') FROM DUAL ]]>
  </select>

  <select id="getDTAIL_DEFECT_List" parameterType="Map" resultType="egovMap">
    <![CDATA[ SELECT CODE AS  CODE_ID
                   , CODE_DESC AS CODE_NAME
              FROM SVC0060C
    ]]>
  </select>

  <select id="getDEFECT_PART_List" parameterType="Map" resultType="egovMap">
   <![CDATA[
     SELECT CONDI_CODE AS CODE_ID
          , DTL AS CODE_NAME
     FROM SVC0059M
    ]]>
  </select>

  <select id="getDEFECT_CODE_List" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT DEFECT_CODE AS CODE_ID
           , DEFECT_DESC AS CODE_NAME
      FROM SVC0058C
    ]]>
  </select>

  <select id="getDEFECT_TYPE_List" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT DEFECT_TYPE_CODE AS CODE_ID
           , DEFECT_TYPE_CODE_DESC AS CODE_NAME
      FROM SVC0057C
    ]]>
  </select>

  <select id="isInHouseB8Update" parameterType="Map" resultType="java.lang.Integer">
    SELECT COUNT(AS_NO)
    FROM SVC0001D A,
         SVC0004D B
    WHERE A.AS_ID = B.AS_ENTRY_ID
      AND A.AS_STUS_ID = 1
      AND A.AS_NO = #{AS_NO}
  </select>

  <select id="getSmsCTMemberById" parameterType="Map" resultType="egovMap">
    SELECT * FROM org0001d WHERE MEM_ID =#{MEM_ID}
  </select>

  <select id="getMemberByMemberIdCode" parameterType="Map" resultType="egovMap">
    SELECT *
    FROM ORG0001D A ,
         SYS0013M B ,
         ORG1001V C
    WHERE B.CODE_ID = A.MEM_TYPE
      AND C.MEM_ID = A.MEM_ID
      AND A.MEM_ID = #{MEM_ID}
  </select>

  <select id="getAsEventInfo" parameterType="Map" resultType="egovMap">

    <!-- SELECT B.DEFECT_TYPE_CODE_DESC malfu_code, B.DEFECT_DTL_CODE_DESC
      malfu_reason, D.CODE|| '-' || D.NAME DSC, A. AS_APPNT_TM Req_tm FROM SVC0001D
      A, SVC0056M B, ORG0001D C, SYS0005M D, SAL0001D E, SAL0002D F, SYS0026M G
      WHERE A.AS_MALFUNC_ID = B.DEFECT_TYPE_CODE AND A.AS_MALFUNC_RESN_ID = B.DEFECT_DTL_CODE
      AND A.AS_MEM_ID = C.MEM_ID AND A.AS_SO_ID = E.SALES_ORD_ID AND E.SALES_ORD_ID
      = F.SALES_ORD_ID AND F.ITM_STK_ID = G.STK_ID AND G.STK_CTGRY_ID = B.PRODUCT_CTGRY_CODE
      AND C.BRNCH = D.BRNCH_ID AND A.AS_NO = #{as_No} -->

    SELECT DISTINCT CASE WHEN(H.RESN_ID IS NOT NULL)
                           THEN H.RESN_DESC
                           ELSE B.DEFECT_TYPE_CODE_DESC
                    END malfu_code ,
                    CASE WHEN (H.RESN_ID IS NOT NULL)
                           THEN I.RESN_DESC
                           ELSE B.DEFECT_DTL_CODE_DESC
                    END malfu_reason ,
                    D.CODE|| ' - ' || D.NAME DSC,
                    A.AS_APPNT_TM Req_tm
    FROM SVC0001D A,
         SVC0056M B,
         ORG0001D C,
         SYS0005M D,
         SYS0032M H,
         SYS0032M I
    WHERE A.AS_MALFUNC_ID = B.DEFECT_TYPE_CODE
      AND A.AS_MALFUNC_RESN_ID = B.DEFECT_DTL_CODE
      AND A.AS_MEM_ID = C.MEM_ID
      AND C.BRNCH = D.BRNCH_ID
      AND A.AS_MALFUNC_ID = H.RESN_ID(+)
      and A.AS_MALFUNC_RESN_ID =
      I.RESN_ID(+) AND A.AS_NO = #{as_No}
  </select>

  <select id="selectTaxInvoice" parameterType="Map" resultType="egovMap">
    SELECT search.TAX_INVOICE_CUST_NAME,
           search.TAX_INVOICE_CONT_PERS
    FROM ( SELECT B.NAME TAX_INVOICE_CONT_PERS ,
                  D.NAME
                  TAX_INVOICE_CUST_NAME ,
                  Rank() OVER(ORDER BY c.CUST_BILL_ID DESC ) rcnt_info
           FROM SAL0001D A,
                SAL0027D B,
                SAL0024D C,
                SAL0029D D
           WHERE A.CUST_CNT_ID = B.CUST_CNTC_ID
             AND A.CUST_BILL_ID = C.CUST_BILL_ID
             AND A.CUST_ID = D.CUST_ID
             AND A.SALES_ORD_ID = #{AS_SO_ID}
    ) search
    WHERE search.rcnt_info = 1
  </select>

  <select id="asResultSync" parameterType="Map" resultType="java.lang.Integer">
    <![CDATA[
      SELECT COUNT(*) CNT
      FROM SVC0001D A,
           ORG0001D  B
      WHERE A.AS_NO = #{serviceNo}
        AND A.AS_MEM_ID =B.MEM_ID
        AND B.MEM_CODE  =#{userId}
    ]]>
  </select>

  <select id="selectSVC0023T" parameterType="Map" resultType="egovMap">
    SELECT /*+ INDEX (A SVC0023T_IDX1) */
           'HS' AS APP_TYPE
         , A.SALES_ORD_ID
         , A.CRT_DT
         , A.SVC_NO
         , B.ERR_MSG
         , A.TRAN_STUS_CD
         , A.TRNSC_ID
    FROM SVC0023T A ,
         SVC0066T B
    WHERE A.SVC_NO = B.SVC_NO(+)
      AND A.CRT_DT BETWEEN TO_DATE ( #{S_DATE} || '010101' ,'DD/MM/YYYY hh24miss') AND TO_DATE ( #{E_DATE} ||'235959' ,'DD/MM/YYYY hh24miss')
      AND A.TRAN_STUS_CD =#{TRAN_STUS_CD}
      AND B.APP_TYPE(+) = 'HS'
      AND A.TRNSC_ID = B.TRNSC_ID(+)
  </select>

  <select id="selectSVC0024T" parameterType="Map" resultType="egovMap">
    SELECT /*+ INDEX (A SVC0024T_IDX1) */
           'AS' AS APP_TYPE
         , A.SALES_ORD_ID
         , A.CRT_DT
         , A.SVC_NO
         , B.ERR_MSG
         , A.TRAN_STUS_CD
         , A.TRNSC_ID
    FROM SVC0024T A ,
         SVC0066T B
    WHERE A.SVC_NO = B.SVC_NO(+)
      AND A.CRT_DT BETWEEN TO_DATE ( #{S_DATE} || '010101' ,'DD/MM/YYYY hh24miss') AND TO_DATE ( #{E_DATE} ||'235959' ,'DD/MM/YYYY hh24miss')
      AND A.TRAN_STUS_CD =#{TRAN_STUS_CD}
      AND B.APP_TYPE(+) = 'AS'
      AND A.TRNSC_ID = B.TRNSC_ID(+)
  </select>

  <select id="selectSVC0025T" parameterType="Map" resultType="egovMap">
    SELECT /*+ INDEX (A SVC0025T_IDX1) */
           'INS' AS APP_TYPE
         , A.SALES_ORD_ID
         , A.CRT_DT
         , A.SVC_NO
         , B.ERR_MSG
         , A.TRAN_STUS_CD
         , A.TRNSC_ID
    FROM SVC0025T A ,
         SVC0066T B
    WHERE A.SVC_NO = B.SVC_NO(+)
      AND A.CRT_DT BETWEEN TO_DATE ( #{S_DATE} || '010101' ,'DD/MM/YYYY hh24miss') AND TO_DATE ( #{E_DATE} ||'235959' ,'DD/MM/YYYY hh24miss')
      AND A.TRAN_STUS_CD =#{TRAN_STUS_CD}
      AND B.APP_TYPE(+) = 'INS'
      AND A.TRNSC_ID = B.TRNSC_ID(+)
  </select>

  <select id="selectSVC0026T" parameterType="Map" resultType="egovMap">
    SELECT /*+ INDEX (A SVC0026T_IDX1) */
          'PR' AS APP_TYPE
        , A.SALES_ORD_ID
        , A.CRT_DT
        , A.SVC_NO
        , B.ERR_MSG
        , A.TRAN_STUS_CD
        , A.TRNSC_ID
    FROM SVC0026T A ,
         SVC0066T B
    WHERE A.SVC_NO = B.SVC_NO(+)
      AND A.CRT_DT BETWEEN TO_DATE ( #{S_DATE} || '010101' ,'DD/MM/YYYY hh24miss') AND TO_DATE ( #{E_DATE} ||'235959' ,'DD/MM/YYYY hh24miss')
      AND A.TRAN_STUS_CD =#{TRAN_STUS_CD}
      AND B.APP_TYPE(+) = 'PR'
      AND A.TRNSC_ID = B.TRNSC_ID(+)
  </select>

  <select id="getFilterCount" parameterType="Map" resultType="java.lang.Integer">
    <![CDATA[
      SELECT COUNT(SRV_FILTER_ID)
      FROM SAL0090D A
      JOIN SAL0087D B ON A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
      WHERE A.SRV_SO_ID = (SELECT SALES_ORD_ID
                           FROM SAL0001D
                           WHERE SALES_ORD_NO = #{ordNo}) ]]>

    <if test="cond1 != null and cond1 != '' ">
      <![CDATA[AND B.SRV_FILTER_STK_ID = #{cond1} ]]>
    </if>
      <![CDATA[ ]]>
  </select>

  <select id="getfltConfLst" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT A.STK_ID,
             B.STK_DESC
      FROM SVC0067M A
      JOIN SYS0026M B ON A.STK_ID = B.STK_ID
      JOIN LOG0044D C ON B.STK_CODE = C.BOM_COMPNT
      WHERE A.EFF_DT <= SYSDATE
        AND A.EXP_DT >= SYSDATE
        AND C.DEFAULT_FILTER = 0 ]]>
  </select>

  <select id="getSAL87ConfigId" parameterType="Map" resultType="java.lang.Integer">
    <![CDATA[
      SELECT B.SRV_CONFIG_ID
      FROM SAL0090D A
      JOIN SAL0087D B ON A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
      WHERE A.SRV_SO_ID = (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{orderNo})
        AND ROWNUM <= 1
    ]]>
  </select>

  <select id="getFilterInfo" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT BOM_PART_ID,
             BOM_PART_PRIOD
      FROM LOG0001M
      WHERE BOM_STK_ID = '1428' AND BOM_PART_STUS_ID = 1 AND BOM_PART_PRIOD > 0 AND BOM_PART_TYPE_ID = 310
    ]]>
  </select>

  <select id="checkASReceiveEntry" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT asm.AS_NO AS_NO ,
             asm.AS_STUS_ID AS_STUS ,
             S1.CODE AS_STUS_DESC
      FROM SVC0001D asm
      LEFT JOIN SYS0038M S1 ON S1.STUS_CODE_ID = asm.AS_STUS_ID
      WHERE asm.AS_ID IN (SELECT MAX(AS_ID)
                          FROM SVC0001D
                          WHERE
                          AS_STUS_ID IN (1 , 19) AND
                          AS_SO_ID IN ( SELECT SALES_ORD_ID
                                              FROM SAL0001D
                                              WHERE SALES_ORD_NO = #{salesOrderNo})
                                                --AND EXTRACT(MONTH FROM AS_REQST_DT) = EXTRACT(MONTH FROM SYSDATE)
                                                --AND EXTRACT(YEAR FROM AS_REQST_DT) = EXTRACT(YEAR FROM SYSDATE)
                                                GROUP BY AS_SO_ID)

    ]]>
  </select>

    <select id="checkASCom" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT asm.AS_NO AS_NO ,
             asm.AS_STUS_ID AS_STUS ,
             S1.CODE AS_STUS_DESC
      FROM SVC0001D asm
      LEFT JOIN SYS0038M S1 ON S1.STUS_CODE_ID = asm.AS_STUS_ID
      WHERE asm.AS_ID IN (SELECT MAX(AS_ID)
                          FROM SVC0001D
                          WHERE
                          AS_STUS_ID IN (4) AND
                          AS_SO_ID IN ( SELECT SALES_ORD_ID
                                              FROM SAL0001D
                                              WHERE SALES_ORD_NO = #{salesOrderNo})
                                                AND EXTRACT(MONTH FROM AS_REQST_DT) = EXTRACT(MONTH FROM SYSDATE)
                                                AND EXTRACT(YEAR FROM AS_REQST_DT) = EXTRACT(YEAR FROM SYSDATE)
                                                GROUP BY AS_SO_ID)

    ]]>
  </select>



  <select id="checkHSStatus" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT hsm.NO HS_NO,
             hsm.STUS_CODE_ID HS_STUS,
             S2.CODE HS_STUS_DESC
      FROM SVC0008D hsm
      LEFT JOIN SYS0038M S2 ON S2.STUS_CODE_ID = hsm.STUS_CODE_ID
      WHERE MONTH = EXTRACT(MONTH FROM SYSDATE)
        AND YEAR = EXTRACT(YEAR FROM SYSDATE)
        AND hsm.STUS_CODE_ID IN (1,4)
        AND SALES_ORD_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
    ]]>
  </select>

  <select id="checkWarrentyStatus" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT SRV_MEM_NO ,
             SRV_STUS_CODE_ID SRV_STUS
      FROM SAL0095D
      WHERE SRV_MEM_ID IN ( SELECT MAX(SRV_MEM_ID) FROM SAL0095D
                   WHERE SRV_SALES_ORD_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
                   AND SYSDATE BETWEEN SRV_START_DT AND SRV_EXPR_DT GROUP BY SRV_SALES_ORD_ID)
             ]]>
  </select>

    <select id="checkSpecialAgreement" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT SOM.SALES_ORD_ID , SOM.SALES_ORD_NO , CUST.NAME
    FROM
    SAL0001D SOM
    LEFT JOIN SAL0029D CUST ON SOM.CUST_ID = CUST.CUST_ID
    WHERE
    SOM.CUST_ID = 215362
    AND SOM.STUS_CODE_ID = 4
    AND SOM.SALES_ORD_NO =  #{salesOrderNo}
   ]]>
  </select>

  <select id="checkAOASRcdStat" parameterType="Map" resultType="egovMap">
    SELECT A.AS_SO_ID,
           B.NO,
           C.OCCUR
    FROM SVC0001D A
    JOIN SVC0004D B ON A.AS_SO_ID = B.AS_SO_ID
    JOIN (SELECT A.AS_SO_ID,
                 COUNT(A.AS_SO_ID) OCCUR
          FROM SVC0001D A
          WHERE A.AS_TYPE_ID = '3154'
          GROUP BY A.AS_SO_ID) C ON A.AS_SO_ID = C.AS_SO_ID
    WHERE A.AS_TYPE_ID = '3154'
     AND (A.NO IS NOT NULL AND B.NO IS NOT NULL)
     AND A.AS_SO_ID = (SELECT SALES_ORD_ID
                       FROM SAL0001D
                       WHERE SALES_ORD_NO = #{ORD_NO})
  </select>

  <select id="getInHseLmtDy" parameterType="Map" resultType="String">
    SELECT CODE AS CODE
    FROM SYS0094M
    WHERE IND = 'INHSRLMTDY'
      AND DISB = 0
  </select>

  <select id="selRcdTms" parameterType="Map" resultType="int">
    SELECT COUNT(*) COUNT
    FROM SVC0001D
    WHERE AS_ID = #{asId}
      AND AS_NO = #{asNo}
      AND AS_SO_ID = #{salesOrderId}
      AND RCD_TMS = #{rcdTms}
  </select>

  <select id="chkPmtMap" parameterType="Map" resultType="int">
    SELECT COUNT(*) COUNT
    FROM PAY0081D
    WHERE F_TRNSC_ID IN ( SELECT BANK_STATE_MAPPING_ID
                          FROM PAY0252T
                          WHERE PAY_ID IN ( SELECT PAY_ID
                                            FROM PAY0064D
                                            WHERE OR_NO IN ( SELECT AS_DOC_NO
                                                             FROM PAY0006D
                                                             WHERE AS_ID = #{AS_ENTRY_ID}
                                                               AND AS_RESULT_NO = #{AS_RESULT_NO}
                                                               AND AS_DOC_NO LIKE 'WOR%'))
                            AND APP_TYPE = 'AS')
      AND OTH_KEYIN_STUS_ID = '4'
  </select>

  <select id="getFltNm" parameterType="Map" resultType="String">
    SELECT STK_CODE || '[-]' || STK_DESC as flt
    FROM SYS0026M
    WHERE STK_ID = #{params}
  </select>

  <select id="getSearchDtRange" parameterType="Map" resultType="String">
    SELECT CODE
    FROM SYS0094M
    WHERE IND = 'AS_DT_RGN'
      AND DISB = '0'
  </select>

  <select id="selectAsTyp"  parameterType="Map" resultType="egovMap">
    SELECT CODE_ID AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0013M
    WHERE CODE_MASTER_ID = '58'
      AND DISAB = 0
    ORDER BY CODE_ID
  </select>

  <select id="asProd"  parameterType="Map" resultType="egovMap">
    SELECT STK_ID AS STK_ID,
           STK_CODE || ' - ' || STK_DESC AS STK_DESC
    FROM SYS0026M
    WHERE STK_TYPE_ID = '61'
      AND STUS_CODE_ID NOT IN (8, 7)
    ORDER BY STK_CODE
  </select>

  <select id="selectAsStat"  parameterType="Map" resultType="egovMap">
    SELECT CODE AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0094M
    WHERE IND = 'AS_STAT'
      AND DISB = 0
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="selectAsCrtStat"  parameterType="Map" resultType="egovMap">
    SELECT CODE AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0094M
    WHERE IND = 'AS_CRTSTAT'
      AND DISB = 0
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="selectTimePick"  parameterType="Map" resultType="egovMap">
    SELECT CODE AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0094M
    WHERE IND = 'TIME_PICK'
      AND DISB = '0'
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="selectLbrFeeChr"  parameterType="Map" resultType="egovMap">
    SELECT
        TO_NUMBER(CODE)*((NVL(#{taxRate},0)/100)+1) as CODE_ID,
        TRIM(TO_CHAR(CODE*((NVL(#{taxRate},0)/100)+1),'9999999990.99')) as CODE_NAME
    FROM SYS0094M
    WHERE IND = 'AS_LBR_CHR'
      AND DISB = '0'
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="selectFltQty"  parameterType="Map" resultType="egovMap">
    SELECT CODE AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0094M
    WHERE IND = 'AS_FLT_QTY'
      AND DISB = '0'
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="selectFltPmtTyp"  parameterType="Map" resultType="egovMap">
    SELECT CODE AS CODE_ID,
           CODE_NAME AS CODE_NAME
    FROM SYS0094M
    WHERE IND = 'AS_PMT_TYP'
      AND DISB = '0'
    ORDER BY LPAD(CODE,4)
  </select>

  <select id="getASEntryCommission" parameterType="Map" resultType="String">
    SELECT AS_ALLOW_COMM AS COMM
    FROM SVC0001D
    WHERE AS_SO_ID = #{ORD_ID}
      AND AS_ID = #{AS_ID}
  </select>

  <select id="getDftTyp" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT
	       A.DEFECT_ID AS ID,
	       A.DEFECT_CODE AS CODE,
	       A.DEFECT_DESC AS DESCP,
           NVL(A.DEFECT_RMK, '-') AS RMK
    FROM SYS0100M A
    <if test="search4 != null and search4 != '' ">
	    <if test="callPrgm == 'DP'">
	    JOIN SVC0131D B ON A.DEFECT_CODE = B.DEF_PART_CODE
	    LEFT JOIN SYS0026M C ON B.MAT_CODE = C.STK_CODE
	    </if>
     </if>
    WHERE A.DEFECT_TYP = #{callPrgm}
      AND A.PROD_CAT IN ('*', (SELECT B.CODE
                            FROM SYS0026M A
                            JOIN SYS0013M B ON B.CODE_MASTER_ID = 11 AND B.CODE_ID = A.STK_CTGRY_ID
                            WHERE A.STK_CODE = #{prodCde}))
      AND A.DEFECT_STATUS = 1
      AND SYSDATE BETWEEN A.EFF_DT AND A.EXP_DT

      <if test="ddCde != null and ddCde != '' ">
        AND ( DEFECT_GRP = #{ddCde} )
      </if>

      <if test="dtCde != null and dtCde != '' ">
        AND ( DEFECT_GRP = #{dtCde} )
      </if>

      <if test="search1 != null and search1 != '' ">
        AND ( DEFECT_CODE LIKE UPPER(#{search1}) )
      </if>

      <if test="search2 != null and search2 != '' ">
        AND ( UPPER(DEFECT_DESC) LIKE UPPER(#{search2}) )
      </if>

      <if test="search3 != null and search3 != '' ">
        AND ( UPPER(DEFECT_RMK) LIKE UPPER(#{search3}) )
      </if>

	  <if test="search4 != null and search4 != '' ">
	       <if test="callPrgm == 'DP'">
	        AND C.STK_ID IN
	        <foreach item="item" collection="matchMatDefCodeP" index="index" open="(" separator="," close=")">
	                    #{item}
	                  </foreach>
	       </if>
	  </if>

    ORDER BY LPAD(DEFECT_CODE, 10)

  </select>

  <!-- INSERT START -->
  <insert id="insertSVC0001D" parameterType="Map">
    <![CDATA[
      INSERT INTO SVC0001D (AS_ID
                          , AS_NO
                          , AS_SO_ID
                          , AS_MEM_ID
                          , AS_MEM_GRP
                          , AS_REQST_DT
                          , AS_REQST_TM
                          , AS_APPNT_DT
                          , AS_APPNT_TM
                          , AS_BRNCH_ID
                          , AS_MALFUNC_ID
                          , AS_MALFUNC_RESN_ID
                          , AS_REM_REQSTER
                          , AS_REM_REQSTER_CNTC
                          , AS_CALLLOG_ID
                          , AS_STUS_ID
                          , AS_SMS
                          , AS_CRT_USER_ID
                          , AS_CRT_DT
                          , AS_UPD_USER_ID
                          , AS_UPD_DT
                          , AS_ENTRY_IS_SYNCH
                          , AS_ENTRY_IS_EDIT
                          , AS_TYPE_ID
                          , AS_REQSTER_TYPE_ID
                          , AS_IS_BS_WITHIN_30DAYS
                          , AS_ALLOW_COMM
                          , AS_PREV_MEM_ID
                          , AS_REM_ADD_CNTC
                          , AS_REM_REQSTER_CNTC_SMS
                          , AS_REM_ADD_CNTC_SMS
                          , AS_SESION_CODE
                          , CALL_MEM
                          , REF_REQST
                          , SEGMENT_TYPE
                          , AS_RQST_REM
      ) VALUES ( #{AS_ID},
               #{AS_NO},
               #{AS_SO_ID},
               #{AS_MEM_ID},
               #{AS_MEM_GRP},
               TO_DATE(#{AS_REQST_DT},'DD/MM/YYYY'),
               #{AS_REQST_TM},
               TO_DATE(#{AS_APPNT_DT},'DD/MM/YYYY'),
               #{AS_APPNT_TM},
               #{AS_BRNCH_ID},
               #{AS_MALFUNC_ID},
               #{AS_MALFUNC_RESN_ID},
               #{AS_REM_REQSTER},
               #{AS_REM_REQSTER_CNTC},
               #{AS_CALLLOG_ID},
               #{AS_STUS_ID},
               #{AS_SMS},
               #{USER_ID},
               SYSDATE,
               #{USER_ID},
               SYSDATE,
               #{AS_ENTRY_IS_SYNCH},
               #{AS_ENTRY_IS_EDIT},
               #{AS_TYPE_ID},
               #{AS_REQSTER_TYPE_ID},
               #{AS_IS_BS_WITHIN_30DAYS},
               #{AS_ALLOW_COMM},
               #{AS_PREV_MEM_ID},
               #{AS_REM_ADD_CNTC},
               #{AS_REM_REQSTER_CNTC_SMS},
               #{AS_REM_ADD_CNTC_SMS},
               #{AS_SESION_CODE},
               #{CALL_MEMBER},
               #{REF_REQUEST},
               #{SEGMENT_TYPE},
               #{CALL_REM}
               )
        ]]>
  </insert>

  <insert id="insertSVC0108D" parameterType="Map">
    <![CDATA[
      INSERT INTO SVC0108D (AS_ID
                          , AS_NO
                          , AS_SO_ID
                          , AS_MEM_ID
                          , AS_MEM_GRP
                          , AS_REQST_DT
                          , AS_REQST_TM
                          , AS_APPNT_DT
                          , AS_APPNT_TM
                          , AS_BRNCH_ID
                          , AS_MALFUNC_ID
                          , AS_MALFUNC_RESN_ID
                          , AS_REM_REQSTER
                          , AS_REM_REQSTER_CNTC
                          , AS_CALLLOG_ID
                          , AS_STUS_ID
                          , AS_SMS
                          , AS_CRT_USER_ID
                          , AS_CRT_DT
                          , AS_UPD_USER_ID
                          , AS_UPD_DT
                          , AS_ENTRY_IS_SYNCH
                          , AS_ENTRY_IS_EDIT
                          , AS_TYPE_ID
                          , AS_REQSTER_TYPE_ID
                          , AS_IS_BS_WITHIN_30DAYS
                          , AS_ALLOW_COMM
                          , AS_PREV_MEM_ID
                          , AS_REM_ADD_CNTC
                          , AS_REM_REQSTER_CNTC_SMS
                          , AS_REM_ADD_CNTC_SMS
                          , AS_SESION_CODE
                          , CALL_MEM
                          , REF_REQST
                          , SEGMENT_TYPE
      ) SELECT #{AS_ID},
               #{AS_NO},
               AS_SO_ID,
               AS_MEM_ID,
               AS_MEM_GRP,
               AS_REQST_DT,
               AS_REQST_TM,
               AS_APPNT_DT,
               AS_APPNT_TM,
               AS_BRNCH_ID,
               AS_MALFUNC_ID,
               AS_MALFUNC_RESN_ID,
               AS_REM_REQSTER,
               AS_REM_REQSTER_CNTC,
               #{AS_CALLLOG_ID},
               '1',
               AS_SMS,
               #{updator},
               SYSDATE,
               #{updator},
               SYSDATE,
               AS_ENTRY_IS_SYNCH,
               AS_ENTRY_IS_EDIT,
               '2713',
               AS_REQSTER_TYPE_ID,
               AS_IS_BS_WITHIN_30DAYS,
               0,
               AS_PREV_MEM_ID,
               AS_REM_ADD_CNTC,
               AS_REM_REQSTER_CNTC_SMS,
               AS_REM_ADD_CNTC_SMS,
               AS_SESION_CODE,
               CALL_MEM,
               #{REF_REQUEST},
               SEGMENT_TYPE
               FROM SVC0001D WHERE AS_ID = #{REF_REQUEST}
    ]]>
    <!-- AS_ALLOW_COMM -->
  </insert>

  <insert id="insertSVC0003D" parameterType="Map">
    <![CDATA[
      INSERT INTO SVC0003D ( AS_PIC_ID,
                             AS_ID,
                             PIC_NAME,
                             PIC_CNTC,
                             CRT_DT,
                             CRT_USER_ID)
      VALUES ( SVC0003D_AS_PIC_ID_SEQ.NEXTVAL ,
               #{AS_ID} ,
               #{PIC_NAME},
               #{PIC_CNTC},
               SYSDATE ,
               #{USER_ID})
    ]]>
  </insert>

  <insert id="updateSVC0003D" parameterType="Map">
    <![CDATA[
      UPDATE SVC0003D SET PIC_NAME = #{PIC_NAME} ,
                          PIC_CNTC = #{PIC_CNTC}
      WHERE  AS_PIC_ID = #{AS_PIC_ID}
    ]]>
  </insert>

  <insert id="insertSVC0004D" parameterType="Map">
    INSERT INTO SVC0004D ( AS_RESULT_ID,
                           AS_RESULT_NO,
                           AS_ENTRY_ID,
                           AS_SO_ID,
                           AS_CT_ID,
                           AS_SETL_DT,
                           AS_SETL_TM,
                           AS_RESULT_STUS_ID,
                           AS_FAIL_RESN_ID,
                           AS_REN_COLCT_ID,
                           AS_CMMS,
                           AS_BRNCH_ID,
                           AS_WH_ID,
                           AS_RESULT_REM,
                           AS_RESULT_CRT_DT,
                           AS_RESULT_CRT_USER_ID,
                           AS_MALFUNC_ID,
                           AS_MALFUNC_RESN_ID,
                           AS_DEFECT_TYPE_ID,
                           AS_DEFECT_GRP_ID,
                           AS_DEFECT_ID,
                           AS_DEFECT_PART_GRP_ID,
                           AS_DEFECT_PART_ID,
                           AS_DEFECT_DTL_RESN_ID,
                           AS_SLUTN_RESN_ID,
                           AS_WORKMNSH,
                           AS_FILTER_AMT,
                           AS_ACSRS_AMT,
                           AS_TOT_AMT,
                           AS_RESULT_IS_SYNCH,
                           AS_RCALL,
                           AS_RESULT_STOCK_USE,
                           AS_RESULT_TYPE_ID,
                           AS_RESULT_IS_CURR,
                           AS_RESULT_MTCH_ID,
                           AS_RESULT_NO_ERR,
                           AS_RESULT_UPD_DT,
                           AS_RESULT_UPD_USER_ID,
                           AS_ENTRY_POINT,
                           AS_WORKMNSH_TAX_CODE_ID,
                           AS_WORKMNSH_TXS,
                           AS_RESULT_MOBILE_ID,
                           APPNT_DT,
                           APPNT_TM,
                           IN_HUSE_REPAIR_REM,
                           IN_HUSE_REPAIR_REPLACE_YN,
                           IN_HUSE_REPAIR_PROMIS_DT,
                           IN_HUSE_REPAIR_GRP_CODE,
                           IN_HUSE_REPAIR_PRODUCT_CODE,
                           IN_HUSE_REPAIR_SERIAL_NO,
                           RESULT_CUST_NAME,
                           RESULT_MOBILE_NO,
                           RESULT_REP_EMAIL_NO,
                           RESULT_ACEPT_NAME,
                           SGN_DT,
                           TRNSC_ID,
                           PSI,
                           LPM,
                           WATER_SRC_TYPE,
                           AS_UNMATCH_REASON,
                           REWORK_PROJ,
                           AS_TRANSFER_TO_DT,
                           ATCH_FILE_GRP_ID,
                           PARTNER_CODE,
                           NTU,
                           VOLT
    ) VALUES ( #{AS_RESULT_ID},
               #{AS_RESULT_NO},
               #{AS_ENTRY_ID},
               #{AS_SO_ID},
               #{AS_CT_ID},
               TO_DATE(#{AS_SETL_DT},'dd/mm/yyyy'),
               #{AS_SETL_TM},
               NVL(#{AS_RESULT_STUS_ID},0),
               NVL(#{AS_FAIL_RESN_ID},0),
               NVL(#{AS_REN_COLCT_ID},0),
               NVL(#{AS_CMMS},0),
               NVL(#{AS_BRNCH_ID},0),
               NVL(#{AS_WH_ID},0),
               #{AS_RESULT_REM},
               SYSDATE,
               #{updator},
               NVL(#{AS_MALFUNC_ID},0),
               NVL(#{AS_MALFUNC_RESN_ID},0),
               NVL(#{AS_DEFECT_TYPE_ID},0),
               NVL(#{AS_DEFECT_GRP_ID},0),
               NVL(#{AS_DEFECT_ID},0),
               NVL(#{AS_DEFECT_PART_GRP_ID},0),
               NVL(#{AS_DEFECT_PART_ID},0),
               NVL(#{AS_DEFECT_DTL_RESN_ID},0),
               NVL(#{AS_SLUTN_RESN_ID},0),
               NVL(#{AS_WORKMNSH},0),
               NVL(#{AS_FILTER_AMT},0),
               NVL(#{AS_ACSRS_AMT},0),
               NVL(#{AS_TOT_AMT},0),
               NVL(#{AS_RESULT_IS_SYNCH},0),
               NVL(#{AS_RCALL},0),
               NVL(#{AS_RESULT_STOCK_USE},0),
               NVL(#{AS_RESULT_TYPE_ID},0),
               #{AS_RESULT_IS_CURR},
               #{AS_RESULT_MTCH_ID},
               #{AS_RESULT_NO_ERR},
               SYSDATE,
               #{updator},
               NVL(#{AS_ENTRY_POINT},0),
               NVL(#{AS_WORKMNSH_TAX_CODE_ID},0),
               NVL(#{AS_WORKMNSH_TXS},0),
               #{AS_RESULT_MOBILE_ID},
               TO_DATE(#{APPNT_DT},'dd/mm/yyyy'),
               #{APPNT_TM},
               #{IN_HUSE_REPAIR_REM},
               #{IN_HUSE_REPAIR_REPLACE_YN},
               TO_DATE(#{IN_HUSE_REPAIR_PROMIS_DT},'dd/mm/yyyy'),
               #{IN_HUSE_REPAIR_GRP_CODE},
               #{IN_HUSE_REPAIR_PRODUCT_CODE},
               #{IN_HUSE_REPAIR_SERIAL_NO},
               #{RESULT_CUST_NAME},
               #{RESULT_MOBILE_NO},
               #{RESULT_REP_EMAIL_NO},
               #{RESULT_ACEPT_NAME},
               #{SGN_DT},
               #{TRNSC_ID},
               #{AS_PSI},
               #{AS_LPM},
               #{WATER_SRC_TYPE},
               #{AS_UNMATCH_REASON},
               #{REWORK_PROJ},
               NVL(#{AS_TRANSFER_TO_DT},0),
               #{ATTACHMENT},
               #{PARTNER_CODE},
               <!-- #{PARTNER_CODE_ID} , -->
               #{NTU},
               NVL(#{VOLT},0)
    )
  </insert>

  <insert id="insertSVC0005D" parameterType="Map">
    INSERT INTO SVC0005D ( ASR_ITM_ID,
                           AS_RESULT_ID,
                           ASR_ITM_PART_ID,
                           ASR_ITM_PART_DESC,
                           ASR_ITM_PART_QTY,
                           ASR_ITM_PART_PRC,
                           ASR_ITM_CHRG_AMT,
                           ASR_ITM_REM,
                           ASR_ITM_CRT_USER_ID,
                           ASR_ITM_CRT_DT,
                           ASR_ITM_CHRG_FOC,
                           ASR_ITM_EXCHG_ID,
                           ASR_ITM_CLM,
                           ASR_ITM_TAX_CODE_ID,
                           ASR_ITM_TXS_AMT,
                           SERIAL_NO,
                           EXCHN_ID,
                           FILTER_BARCD_SERIAL_NO,
                           RET_SMO_SERIAL_NO,
                           IS_SMO,
                           IS_SERIAL_REPLACE,
                           OLD_FILTER_BARCD_SERIAL_NO,
                           FILTER_SRL_UNMATCH_RSN
    ) VALUES ( SVC0005D_ASR_ITM_ID_SEQ.nextval,
               #{AS_RESULT_ID},
               #{ASR_ITM_PART_ID},
               (SELECT STK_DESC FROM SYS0026M WHERE STK_ID =#{ASR_ITM_PART_ID}),
               #{ASR_ITM_PART_QTY},
               NVL(#{ASR_ITM_PART_PRC}, 0),
               NVL(#{ASR_ITM_CHRG_AMT}, 0),
               #{ASR_ITM_REM},
               #{ASR_ITM_CRT_USER_ID},
               SYSDATE,
               #{ASR_ITM_CHRG_FOC},
               #{ASR_ITM_EXCHG_ID},
               #{ASR_ITM_CLM},
               #{ASR_ITM_TAX_CODE_ID},
               NVL(#{ASR_ITM_TXS_AMT}, 0),
               #{SERIAL_NO},
               #{EXCHG_ID},
               #{FILTER_BARCD_SERIAL_NO},
               #{RET_SMO_SERIAL_NO},
               #{IS_SMO},
               #{IS_SERIAL_REPLACE},
               #{OLD_FILTER_BARCD_SERIAL_NO},
               #{FILTER_UNMATCH_RSN}
    )
  </insert>

  <insert id="insertCCR0006D" parameterType="Map">
    INSERT INTO CCR0006D ( CALL_ENTRY_ID,
                           SALES_ORD_ID,
                           TYPE_ID,
                           STUS_CODE_ID,
                           RESULT_ID,
                           DOC_ID,
                           CRT_USER_ID,
                           CRT_DT,
                           IS_WAIT_FOR_CANCL,
                           HAPY_CALLER_ID
    ) VALUES ( #{CALL_ENTRY_ID},
               #{SALES_ORD_ID},
               #{TYPE_ID},
               #{STUS_CODE_ID},
               #{RESULT_ID},
               #{DOC_ID},
               #{USER_ID},
               SYSDATE,
               #{IS_WAIT_FOR_CANCL},
               #{HAPY_CALLER_ID}
    )
  </insert>

  <insert id="insertCCR0007D" parameterType="Map">
    INSERT INTO CCR0007D ( CALL_RESULT_ID,
                           CALL_ENTRY_ID,
                           CALL_STUS_ID,
                           CALL_FDBCK_ID,
                           CALL_REM,
                           CALL_CRT_USER_ID,
                           CALL_CRT_DT,
                           CALL_HC_ID,
                           CALL_ROS_AMT,
                           CALL_SMS,
                           CALL_SMS_REM
    ) VALUES ( CCR0007D_CALL_RESULT_ID_SEQ.nextval,
               #{CALL_ENTRY_ID},
               #{CALL_STUS_ID},
               #{CALL_FDBCK_ID},
               #{CALL_REM},
               #{USER_ID},
               SYSDATE,
               #{CALL_HC_ID},
               #{CALL_ROS_AMT},
               #{CALL_SMS},
               #{CALL_SMS_REM}
    )
  </insert>

  <insert id="insertAddCCR0007D" parameterType="Map">
    INSERT INTO CCR0007D ( CALL_RESULT_ID,
                           CALL_ENTRY_ID,
                           CALL_STUS_ID,
                           CALL_FDBCK_ID,
                           CALL_REM,
                           CALL_CRT_USER_ID,
                           CALL_CRT_DT,
                           CALL_HC_ID,
                           CALL_ROS_AMT,
                           CALL_SMS,
                           CALL_SMS_REM
     ) VALUES ( CCR0007D_CALL_RESULT_ID_SEQ.nextval,
              (SELECT MAX(CALL_ENTRY_ID)
              FROM CCR0006D
              WHERE DOC_ID = #{AS_ID}
              AND TYPE_ID ='339'),
              #{CALL_STUS_ID},
              #{CALL_FDBCK_ID},
              #{CALL_REM},
              #{USER_ID},
              SYSDATE,
              #{CALL_HC_ID},
              #{CALL_ROS_AMT},
              #{CALL_SMS},
              #{CALL_SMS_REM}
    )
  </insert>

  <insert id="insert_Pay0031d" parameterType="Map">
    INSERT INTO PAY0031D ( TAX_INVC_ID,
                           TAX_INVC_REF_NO,
                           TAX_INVC_REF_DT,
                           TAX_INVC_SVC_NO,
                           TAX_INVC_TYPE,
                           TAX_INVC_CUST_NAME,
                           TAX_INVC_CNTC_PERSON,
                           TAX_INVC_ADDR1,
                           TAX_INVC_ADDR2,
                           TAX_INVC_ADDR3,
                           TAX_INVC_ADDR4,
                           TAX_INVC_POST_CODE,
                           TAX_INVC_STATE_NAME,
                           TAX_INVC_CNTY,
                           TAX_INVC_TASK_ID,
                           TAX_INVC_REM,
                           TAX_INVC_CHRG,
                           TAX_INVC_TXS,
                           TAX_INVC_AMT_DUE,
                           TAX_INVC_CRT_DT,
                           TAX_INVC_CRT_USER_ID,
                           AREA_ID,
                           ADDR_DTL,
                           STREET
    ) VALUES ( #{taxInvcId},
               #{taxInvcRefNo},
               SYSDATE,
               #{taxInvcSvcNo},
               #{taxInvcType},
               #{taxInvcCustName},
               #{taxInvcCntcPerson},
               #{taxInvcAddr1},
               #{taxInvcAddr2},
               #{taxInvcAddr3},
               #{taxInvcAddr4},
               #{taxInvcPostCode},
               #{taxInvcStateName},
               #{taxInvcCnty},
               #{taxInvcTaskId},
               #{taxInvcRem},
               #{taxInvcChrg},
               #{taxInvcTxs},
               #{taxInvcAmtDue},
               #{taxInvcCrtDt},
               #{taxInvcCrtUserId},
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID = #{AS_SO_ID}) , 'AREA_ID'),
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID = #{AS_SO_ID}) , 'ADDR1'),
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID = #{AS_SO_ID}) , 'ADDR2')
    )
  </insert>

  <insert id="insert_Pay0032d" parameterType="Map">
    INSERT INTO PAY0032D ( INVC_ITM_ID,
                           TAX_INVC_ID,
                           INVC_ITM_TYPE,
                           INVC_ITM_ORD_NO,
                           INVC_ITM_PO_NO,
                           INVC_ITM_CODE,
                           INVC_ITM_DESC1,
                           INVC_ITM_DESC2,
                           INVC_ITM_SERIAL_NO,
                           INVC_ITM_QTY,
                           INVC_ITM_UNIT_PRC,
                           INVC_ITM_TAX_CODE_ID,
                           INVC_ITM_GST_RATE,
                           INVC_ITM_GST_TXS,
                           INVC_ITM_CHRG,
                           INVC_ITM_AMT_DUE,
                           INVC_ITM_ADD1,
                           INVC_ITM_ADD2,
                           INVC_ITM_ADD3,
                           INVC_ITM_ADD4,
                           INVC_ITM_POST_CODE,
                           INVC_ITM_AREA_NAME,
                           INVC_ITM_STATE_NAME,
                           INVC_ITM_CNTY,
                           INVC_ITM_INSTALL_DT,
                           INVC_ITM_RETN_DT,
                           INVC_ITM_BILL_REF_NO ,
                           AREA_ID ,
                           ADDR_DTL,
                           STREET
    ) VALUES ( PAY0032D_SEQ.NEXTVAL,
               #{taxInvcId},
               #{invcItmType},
               (SELECT SALES_ORD_NO FROM SAL0001D WHERE SALES_ORD_ID = #{invcItmOrdNo}),
               #{invcItmPoNo},
               #{invcItmCode},
               #{invcItmDesc1},
               #{invcItmDesc2},
               #{invcItmSerialNo},
               #{invcItmQty},
               #{invcItmUnitPrc},
               #{invcItmTaxCodeId},
               #{invcItmGstRate},
               #{invcItmGstTxs},
               #{invcItmChrg},
               #{invcItmAmtDue},
               #{invcItmAdd1},
               #{invcItmAdd2},
               #{invcItmAdd3},
               #{invcItmAdd4},
               #{invcItmPostCode},
               #{invcItmAreaName},
               #{invcItmStateName},
               #{invcItmCnty},
               #{invcItmInstallDt},
               #{invcItmRetnDt},
               #{invcItmBillRefNo},
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID =#{invcItmOrdNo}) ,'AREA_ID'),
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID = #{invcItmOrdNo}) ,'ADDR1'),
               FN_GET_SVC_BILL_MADDRESS( (SELECT SALES_ORD_NO
                                          FROM SAL0001D
                                          WHERE SALES_ORD_ID = #{invcItmOrdNo}) ,'ADDR2')
    )
  </insert>

  <insert id="insert_Pay0016d" parameterType="Map">
    INSERT INTO PAY0016D ( ACC_BILL_ID,
                           ACC_BILL_TASK_ID,
                           ACC_BILL_REF_DT,
                           ACC_BILL_REF_NO,
                           ACC_BILL_ORD_ID,
                           ACC_BILL_ORD_NO,
                           ACC_BILL_TYPE_ID,
                           ACC_BILL_MODE_ID,
                           ACC_BILL_SCHDUL_ID,
                           ACC_BILL_SCHDUL_PRIOD,
                           ACC_BILL_ADJ_ID,
                           ACC_BILL_SCHDUL_AMT,
                           ACC_BILL_ADJ_AMT,
                           ACC_BILL_TXS_AMT,
                           ACC_BILL_NET_AMT,
                           ACC_BILL_STUS,
                           ACC_BILL_REM,
                           ACC_BILL_CRT_DT,
                           ACC_BILL_CRT_USER_ID,
                           ACC_BILL_GRP_ID,
                           ACC_BILL_TAX_CODE_ID,
                           ACC_BILL_TAX_RATE,
                           ACC_BILL_ACCT_CNVR,
                           ACC_BILL_CNTRCT_ID
    ) VALUES ( PAY0016D_SEQ.NEXTVAL,
               #{accBillTaskId},
               #{accBillRefDt},
               #{accBillRefNo},
               #{accBillOrdId},
               (SELECT SALES_ORD_NO
                 FROM SAL0001D
                 WHERE SALES_ORD_ID =#{accBillOrdId} ) ,
               #{accBillTypeId},
               #{accBillModeId},
               #{accBillSchdulId},
               #{accBillSchdulPriod},
               #{accBillAdjId},
               #{accBillSchdulAmt},
               #{accBillAdjAmt},
               #{accBillTxsAmt},
               #{accBillNetAmt},
               #{accBillStus},
               #{accBillRem},
               #{accBillCrtDt},
               #{accBillCrtUserId},
               #{accBillGrpId},
               #{accBillTaxCodeId},
               #{accBillTaxRate},
               #{accBillAcctCnvr},
               #{accBillCntrctId}
    )
  </insert>

  <insert id="insert_Pay0006d" parameterType="Map">
    INSERT INTO PAY0006D ( AS_LDGR_ID,
                           AS_ID,
                           AS_DOC_NO,
                           AS_LG_DOC_TYPE_ID,
                           AS_LG_DT,
                           AS_LG_AMT,
                           AS_LG_UPD_USER_ID,
                           AS_LG_UPD_DT,
                           AS_SO_NO,
                           AS_RESULT_NO,
                           AS_SO_ID,
                           AS_ADV_PAY,
                           R01
    ) VALUES ( PAY0006D_SEQ.NEXTVAL,
               #{asId},
               #{asDocNo},
               #{asLgDocTypeId},
               #{asLgDt},
               #{asLgAmt},
               #{asLgUpdUserId},
               #{asLgUpdDt},
               (SELECT SALES_ORD_NO
                FROM SAL0001D
                WHERE SALES_ORD_ID = #{asSoId} ) ,
               #{asResultNo},
               #{asSoId},
               #{asAdvPay},
               #{r01}
    )
  </insert>

  <insert id="insert_Pay0007d" parameterType="Map">
    INSERT INTO PAY0007D ( BILL_ID,
                           BILL_TYPE_ID,
                           BILL_SO_ID,
                           BILL_MEM_ID,
                           BILL_AS_ID,
                           BILL_PAY_TYPE_ID,
                           BILL_NO,
                           BILL_MEM_SHIP_NO,
                           BILL_DT,
                           BILL_AMT,
                           BILL_REM,
                           BILL_IS_PAID,
                           BILL_IS_COMM,
                           UPD_USER_ID,
                           UPD_DT,
                           SYNC_CHK,
                           COURS_ID,
                           STUS_ID
    ) VALUES ( PAY0007D_SEQ.NEXTVAL,
               #{billTypeId},
               #{billSoId},
               #{billMemId},
               #{billAsId},
               #{billPayTypeId},
               #{billNo},
               #{billMemShipNo},
               #{billDt},
               #{billAmt},
               #{billRem},
               #{billIsPaid},
               #{billIsComm},
               #{updUserId},
               #{updDt},
               #{syncChk},
               #{coursId},
               #{stusId})
  </insert>

  <insert id="insert_Ccr0001d" parameterType="Map">
    INSERT INTO CCR0001D ( HC_ID,
                           HCSOID,
                           HC_CALL_ENTRY_ID,
                           HC_TYPE_NO,
                           HC_TYPE_ID,
                           HC_STUS_ID,
                           HC_REM,
                           HC_COMMENT_TYPE_ID,
                           HC_COMMENT_GID,
                           HC_COMMENT_SID,
                           HC_COMMENT_DID,
                           CRT_USER_ID,
                           CRT_DT,
                           UPD_USER_ID,
                           UPD_DT,
                           HC_NO_SVC,
                           HC_LOK,
                           HC_CLOS_ID
    ) VALUES ( CCR0001D_HC_ID_SEQ.nextval,
               #{hcsoid},
               #{hcCallEntryId},
               #{hcTypeNo},
               #{hcTypeId},
               #{hcStusId},
               #{hcRem},
               #{hcCommentTypeId},
               #{hcCommentGid},
               #{hcCommentSid},
               #{hcCommentDid},
               #{crtUserId},
               SYSDATE,
               #{updUserId},
               SYSDATE,
               #{hcNoSvc},
               #{hcLok},
               #{hcClosId})
  </insert>

  <insert id="insert_Pay0017d" parameterType="Map">
    INSERT INTO PAY0017D ( ACC_INV_VOID_ID,
                           ACC_INV_VOID_REF_NO,
                           ACC_INV_VOID_INVC_NO,
                           ACC_INV_VOID_INVC_AMT,
                           ACC_INV_VOID_REM,
                           ACC_INV_VOID_STUS_ID,
                           ACC_INV_VOID_CRT_USER_ID,
                           ACC_INV_VOID_CRT_DT
    ) VALUES ( PAY0017D_SEQ.NEXTVAL,
               #{accInvVoidRefNo},
               #{accInvVoidInvcNo},
               #{accInvVoidInvcAmt},
               #{accInvVoidRem},
               #{accInvVoidStusId},
               #{accInvVoidCrtUserId},
               #{accInvVoidCrtDt}
    )
  </insert>

  <insert id="insert_Pay0018d" parameterType="Map">
    INSERT INTO PAY0018D ( ACC_INV_VOID_SUB_ID,
                           ACC_INV_VOID_ID,
                           ACC_INV_VOID_SUB_ORD_ID,
                           ACC_INV_VOID_SUB_BILL_ID,
                           ACC_INV_VOID_SUB_BILL_AMT,
                           ACC_INV_VOID_SUB_CRDIT_NOTE,
                           ACC_INV_VOID_SUB_CRDIT_NOTE_ID,
                           ACC_INV_VOID_SUB_REM
    ) VALUES ( PAY0018D_SEQ.NEXTVAL,
               #{accInvVoidId},
               #{accInvVoidSubOrdId} ,
               #{accInvVoidSubBillId},
               #{accInvVoidSubBillAmt},
               #{accInvVoidSubCrditNote},
               #{accInvVoidSubCrditNoteId},
               #{accInvVoidSubRem}
    )
  </insert>

  <insert id="reverse_SVC0004D" parameterType="Map">
    INSERT INTO SVC0004D ( AS_RESULT_ID,
                           AS_RESULT_NO,
                           AS_ENTRY_ID,
                           AS_SO_ID,
                           AS_CT_ID,
                           AS_SETL_DT,
                           AS_SETL_TM,
                           AS_RESULT_STUS_ID,
                           AS_FAIL_RESN_ID,
                           AS_REN_COLCT_ID,
                           AS_CMMS,
                           AS_BRNCH_ID,
                           AS_WH_ID,
                           AS_RESULT_REM,
                           AS_RESULT_CRT_DT,
                           AS_RESULT_CRT_USER_ID,
                           AS_MALFUNC_ID,
                           AS_MALFUNC_RESN_ID,
                           AS_DEFECT_TYPE_ID,
                           AS_DEFECT_GRP_ID,
                           AS_DEFECT_ID,
                           AS_DEFECT_PART_GRP_ID,
                           AS_DEFECT_PART_ID,
                           AS_DEFECT_DTL_RESN_ID,
                           AS_SLUTN_RESN_ID,
                           AS_WORKMNSH,
                           AS_FILTER_AMT,
                           AS_ACSRS_AMT,
                           AS_TOT_AMT,
                           AS_RESULT_IS_SYNCH,
                           AS_RCALL,
                           AS_RESULT_STOCK_USE,
                           AS_RESULT_TYPE_ID,
                           AS_RESULT_IS_CURR,
                           AS_RESULT_MTCH_ID,
                           AS_RESULT_NO_ERR,
                           AS_RESULT_UPD_DT,
                           AS_RESULT_UPD_USER_ID,
                           AS_ENTRY_POINT,
                           AS_WORKMNSH_TAX_CODE_ID,
                           AS_WORKMNSH_TXS,
                           AS_RESULT_MOBILE_ID)

    SELECT #{NEW_AS_RESULT_ID},
           #{NEW_AS_RESULT_NO},
           S.AS_ENTRY_ID,
           S.AS_SO_ID,
           S.AS_CT_ID,
           S.AS_SETL_DT,
           S.AS_SETL_TM,
           S.AS_RESULT_STUS_ID,
           S.AS_FAIL_RESN_ID,
           S.AS_REN_COLCT_ID,
           S.AS_CMMS,
           S.AS_BRNCH_ID,
           S.AS_WH_ID,
           S.AS_RESULT_REM,
           SYSDATE,
           #{updator},
           S.AS_MALFUNC_ID,
           S.AS_MALFUNC_RESN_ID,
           S.AS_DEFECT_TYPE_ID,
           S.AS_DEFECT_GRP_ID,
           S.AS_DEFECT_ID,
           S.AS_DEFECT_PART_GRP_ID,
           S.AS_DEFECT_PART_ID,
           S.AS_DEFECT_DTL_RESN_ID,
           S.AS_SLUTN_RESN_ID,
           (S.AS_WORKMNSH * -1) ,
           (S.AS_FILTER_AMT * -1),
           (S.AS_ACSRS_AMT * -1),
           (S.AS_TOT_AMT * -1),
           0,
           S.AS_RCALL,
           S.AS_RESULT_STOCK_USE,
           459,
           0,
           #{OLD_AS_RESULT_ID},
           '',
           S.AS_RESULT_UPD_DT,
           S.AS_RESULT_UPD_USER_ID,
           S.AS_ENTRY_POINT,
           S.AS_WORKMNSH_TAX_CODE_ID,
           S.AS_WORKMNSH_TXS,
           S.AS_RESULT_MOBILE_ID
    FROM SVC0004D S
    WHERE AS_RESULT_ID =#{OLD_AS_RESULT_ID}
    AND S.AS_RESULT_IS_CURR =1
  </insert>

  <insert id="reverse_CURR_SVC0005D" parameterType="Map">
    INSERT INTO SVC0005D ( ASR_ITM_ID,
                           AS_RESULT_ID,
                           ASR_ITM_PART_ID,
                           ASR_ITM_PART_DESC,
                           ASR_ITM_PART_QTY,
                           ASR_ITM_PART_PRC,
                           ASR_ITM_CHRG_AMT,
                           ASR_ITM_REM,
                           ASR_ITM_CRT_USER_ID,
                           ASR_ITM_CRT_DT,
                           ASR_ITM_CHRG_FOC,
                           ASR_ITM_EXCHG_ID,
                           ASR_ITM_CLM,
                           ASR_ITM_TAX_CODE_ID,
                           ASR_ITM_TXS_AMT,
                           SERIAL_NO,
                           RET_SMO_SERIAL_NO,
						   IS_SMO,
						   IS_SERIAL_REPLACE
    )
    SELECT SVC0005D_ASR_ITM_ID_SEQ.NEXTVAL ,
           #{NEW_AS_RESULT_ID},
           S.ASR_ITM_PART_ID,
           S.ASR_ITM_PART_DESC,
           (S.ASR_ITM_PART_QTY * -1),
           S.ASR_ITM_PART_PRC,
           S.ASR_ITM_CHRG_AMT,
           S.ASR_ITM_REM,
           #{updator},
           SYSDATE ,
           S.ASR_ITM_CHRG_FOC,
           S.ASR_ITM_EXCHG_ID,
           S.ASR_ITM_CLM,
           S.ASR_ITM_TAX_CODE_ID,
           S.ASR_ITM_TXS_AMT,
           S.SERIAL_NO,
           S.RET_SMO_SERIAL_NO,
           S.IS_SMO,
           S.IS_SERIAL_REPLACE
    FROM SVC0005D S
    WHERE AS_RESULT_ID = #{OLD_AS_RESULT_ID}
  </insert>

  <insert id="insert_LOG0015D" parameterType="Map">
    INSERT INTO LOG0015D ( STK_REQ_ID,
                           STK_REQ_NO,
                           STK_REQ_LOC_FROM_ID,
                           STK_REQ_LOC_TO_ID,
                           STK_REQ_REM,
                           STK_REQ_CRT_USER_ID,
                           STK_REQ_CRT_DT)
    SELECT #{STK_REQ_ID},
           #{STK_REQ_NO},
           STK_REQ_LOC_FROM_ID,
           STK_REQ_LOC_TO_ID,
           '',
           #{updator},
           SYSDATE
    FROM LOG0015D
    WHERE 1 = 1
      AND STK_REQ_ID = ( SELECT DISTINCT REQ_ID
                         FROM LOG0016D
                         WHERE REQ_ITM_REF_ID = #{OLD_AS_RESULT_ID}
      AND REQ_ITM_TYPE_ID ='457'
      AND REQ_ITM_STUS_ID ='4'
    ) AND ROWNUM =1
  </insert>

  <insert id="insert_LOG0016D" parameterType="Map">
    INSERT INTO LOG0016D ( REQ_ITM_ID,
                           REQ_ID,
                           REQ_ITM_TYPE_ID,
                           REQ_ITM_REF_ID,
                           REQ_ITM_STK_ID,
                           REQ_ITM_STK_DESC,
                           REQ_ITM_QTY,
                           REQ_ITM_STUS_ID,
                           REQ_ITM_REM
    ) SELECT LOG0016D_REQ_ITM_ID_SEQ.NEXTVAL,
             #{STK_REQ_ID},
             459,
             #{AS_RESULT_ID},
             REQ_ITM_STK_ID,
             REQ_ITM_STK_DESC,
             (REQ_ITM_QTY * -1),
             1,
             ''
      FROM LOG0016D
      WHERE REQ_ITM_REF_ID =#{OLD_AS_RESULT_ID}
        AND REQ_ITM_TYPE_ID ='457'
        AND REQ_ITM_STUS_ID ='4'
  </insert>

  <insert id="insert_LOG0014D" parameterType="Map">
    INSERT INTO LOG0014D ( SR_CARD_ID,
                           LOC_ID,
                           STOCK_ID,
                           ENTRY_DT,
                           TYPE_ID,
                           REF_NO,
                           SALES_ORD_ID,
                           ITM_NO,
                           SRC_ID,
                           PRJCT_ID,
                           BATCH_NO,
                           QTY,
                           CURR_ID,
                           CURR_RATE,
                           COST,
                           PRC, REM,
                           SERIAL_NO,
                           INSTALL_NO,
                           COST_DT,
                           APP_TYPE_ID,
                           STK_GRAD,
                           INSTALL_FAIL,
                           IS_SYNCH,
                           ENTRY_MTH_ID,
                           ORGN,
                           TRANS_TYPE,
                           DOC_LNE_NO,
                           PO_NO,
                           INSERT_DT,
                           IS_GR,
                           PO_STUS
    )
    SELECT LOG0014D_SR_CARD_ID_SEQ.NEXTVAL,
           LOC_ID,
           STOCK_ID,
           SYSDATE,
           TYPE_ID,
           #{AS_NO},
           SALES_ORD_ID,
           ITM_NO,
           SRC_ID,
           PRJCT_ID,
           BATCH_NO,
           (QTY * -1),
           CURR_ID,
           CURR_RATE,
           COST,
           PRC,
           REM,
           SERIAL_NO,
           #{AS_RESULT_NO},
           SYSDATE,
           APP_TYPE_ID,
           STK_GRAD,
           INSTALL_FAIL,
           0,
           ENTRY_MTH_ID,
           ORGN,
           TRANS_TYPE,
           DOC_LNE_NO,
           PO_NO,
           INSERT_DT,
           IS_GR,
           PO_STUS
    FROM LOG0014D
    WHERE 1=1
      AND INSTALL_NO = #{AS_RESULT_NO}
      AND REF_NO =#{AS_NO}
    ORDER BY ITM_NO DESC
  </insert>

  <insert id="reverse_PAY0007D" parameterType="Map">
    UPDATE PAY0007D SET BILL_IS_PAID = 1 ,
                        UPD_DT =SYSDATE,
                        UPD_USER_ID = #{updator}
    WHERE BILL_NO =#{AS_RESULT_NO}
  </insert>

  <insert id="reverse_updatePAY0016D" parameterType="Map">
    UPDATE PAY0016D SET ACC_BILL_STUS = 74
    WHERE ACC_BILL_ID = #{ACC_BILL_ID}
  </insert>

  <insert id="reverse_PAY0016D" parameterType="Map">
    INSERT INTO PAY0011D ( MEMO_ADJ_ID,
                           MEMO_ADJ_REF_NO,
                           MEMO_ADJ_RPT_NO,
                           MEMO_ADJ_TYPE_ID,
                           MEMO_ADJ_INVC_NO,
                           MEMO_ADJ_INVC_TYPE_ID,
                           MEMO_ADJ_STUS_ID,
                           MEMO_ADJ_RESN_ID,
                           MEMO_ADJ_REM,
                           MEMO_ADJ_TXS_AMT,
                           MEMO_ADJ_TOT_AMT,
                           MEMO_ADJ_CRT_DT,
                           MEMO_ADJ_CRT_USER_ID,
                           MEMO_ADJ_UPD_DT,
                           MEMO_ADJ_UPD_USER_ID,
                           BATCH_ID
    ) VALUES ( #{memoAdjId},
               #{memoAdjRefNo},
               #{memoAdjRptNo},
               #{memoAdjTypeId},
               #{memoAdjInvcNo},
               #{memoAdjInvcTypeId},
               #{memoAdjStusId},
               #{memoAdjResnId},
               #{memoAdjRem},
               #{memoAdjTxsAmt},
               #{memoAdjTotAmt},
               #{memoAdjCrtDt},
               #{memoAdjCrtUserId},
               #{memoAdjUpdDt},
               #{memoAdjUpdUserId},
               #{batchId}
    )
  </insert>

  <insert id="reverse_PAY0012D" parameterType="Map">
    INSERT INTO PAY0012D ( MEMO_ITM_ID,
                           MEMO_ADJ_ID,
                           MEMO_ITM_INVC_ITM_ID,
                           MEMO_ITM_INVC_ITM_QTY,
                           MEMO_ITM_CRDIT_ACC_ID,
                           MEMO_ITM_DEBT_ACC_ID,
                           MEMO_ITM_TAX_CODE_ID,
                           MEMO_ITM_STUS_ID,
                           MEMO_ITM_REM,
                           MEMO_ITM_GST_RATE,
                           MEMO_ITM_CHRG,
                           MEMO_ITM_TXS,
                           MEMO_ITM_AMT)
    SELECT PAY0012D_SEQ.NEXTVAL,
           #{MEMO_ADJ_ID},
           P.INVC_ITM_ID,
           P.INVC_ITM_QTY,
           39,
           167,
           #{MEMO_ITM_TAX_CODE_ID},
           1,
           #{MEMO_ITM_REM},
           P.INVC_ITM_GST_RATE,
           P.INVC_ITM_CHRG,
           P.INVC_ITM_GST_TXS,
           P.INVC_ITM_AMT_DUE
    FROM PAY0031D A,
         PAY0032D P
    WHERE A.TAX_INVC_ID = P.TAX_INVC_ID
      AND A.TAX_INVC_REF_NO = #{TAX_INVC_REF_NO}
  </insert>

  <insert id="reverse_PAY0027D" parameterType="Map">
    INSERT INTO PAY0027D ( NOTE_ID,
                           NOTE_ENTRY_ID,
                           NOTE_TYPE_ID,
                           NOTE_GRP_NO,
                           NOTE_REF_NO,
                           NOTE_REF_DT,
                           NOTE_INVC_NO,
                           NOTE_INVC_TYPE_ID,
                           NOTE_CUST_NAME,
                           NOTE_CNTC_PERSON,
                           NOTE_ADDR1,
                           NOTE_ADDR2,
                           NOTE_ADDR3,
                           NOTE_ADDR4,
                           NOTE_POST_CODE,
                           NOTE_AREA_NAME,
                           NOTE_STATE_NAME,
                           NOTE_CNTY_NAME,
                           NOTE_TXS,
                           NOTE_CHRG,
                           NOTE_AMT_DUE,
                           NOTE_REM,
                           NOTE_STUS_ID,
                           NOTE_CRT_DT,
                           NOTE_CRT_USER_ID
    ) VALUES ( #{noteId},
               #{noteEntryId},
               #{noteTypeId},
               #{noteGrpNo},
               #{noteRefNo},
               #{noteRefDt},
               #{noteInvcNo},
               #{noteInvcTypeId},
               #{noteCustName},
               #{noteCntcPerson},
               #{noteAddr1},
               #{noteAddr2},
               #{noteAddr3},
               #{noteAddr4},
               #{notePostCode},
               #{noteAreaName},
               #{noteStateName},
               #{noteCntyName},
               #{noteTxs},
               #{noteChrg},
               #{noteAmtDue},
               #{noteRem},
               #{noteStusId},
               #{noteCrtDt},
               #{noteCrtUserId}
    )
  </insert>

  <insert id="reverse_PAY0028D" parameterType="Map">
    INSERT INTO PAY0028D ( NOTE_ITM_ID,
                           NOTE_ID,
                           NOTE_ITM_INVC_ITM_ID,
                           NOTE_ITM_ORD_NO,
                           NOTE_ITM_PRODUCT_MODEL,
                           NOTE_ITM_SERIAL_NO,
                           NOTE_ITM_INSTALL_DT,
                           NOTE_ITM_ADD1,
                           NOTE_ITM_ADD2,
                           NOTE_ITM_ADD3,
                           NOTE_ITM_ADD4,
                           NOTE_ITM_POST_CODE,
                           NOTE_ITM_AREA_NAME,
                           NOTE_ITM_STATE_NAME,
                           NOTE_ITM_CNTY,
                           NOTE_ITM_QTY,
                           NOTE_ITM_UNIT_PRC,
                           NOTE_ITM_GST_RATE,
                           NOTE_ITM_GST_TXS,
                           NOTE_ITM_CHRG,
                           NOTE_ITM_DUE_AMT
    )
    SELECT PAY0028D_SEQ.NEXTVAL,
           #{NOTE_ID},
           P.INVC_ITM_ID,
           P.INVC_ITM_ORD_NO,
           P.INVC_ITM_DESC1,
           P.INVC_ITM_SERIAL_NO,
           P.INVC_ITM_INSTALL_DT,
           P.INVC_ITM_ADD1,
           P.INVC_ITM_ADD2,
           P.INVC_ITM_ADD3,
           P.INVC_ITM_ADD4,
           P.INVC_ITM_POST_CODE,
           P.INVC_ITM_AREA_NAME,
           P.INVC_ITM_STATE_NAME,
           P.INVC_ITM_CNTY,
           P.INVC_ITM_QTY,
           P.INVC_ITM_UNIT_PRC,
           P.INVC_ITM_GST_RATE,
           P.INVC_ITM_GST_TXS,
           P.INVC_ITM_CHRG,
           P.INVC_ITM_AMT_DUE
    FROM PAY0031D A, PAY0032D P
    WHERE A.TAX_INVC_ID = P.TAX_INVC_ID
      AND A.TAX_INVC_REF_NO = #{TAX_INVC_REF_NO}
  </insert>

  <insert id="reverse_PAY0006D" parameterType="Map">
    INSERT INTO PAY0006D ( AS_LDGR_ID,
                           AS_ID,
                           AS_DOC_NO,
                           AS_LG_DOC_TYPE_ID,
                           AS_LG_DT,
                           AS_LG_AMT,
                           AS_LG_UPD_USER_ID,
                           AS_LG_UPD_DT,
                           AS_SO_NO,
                           AS_RESULT_NO,
                           AS_SO_ID,
                           AS_ADV_PAY,
                           R01
    ) VALUES ( #{asLdgrId},
               #{asId},
               #{asDocNo},
               #{asLgDocTypeId},
               #{asLgDt},
               #{asLgAmt},
               #{asLgUpdUserId},
               #{asLgUpdDt},
               #{asSoNo},
               #{asResultNo},
               #{asSoId},
               #{asAdvPay},
               #{r01}
    )
  </insert>

  <insert id="insert_PAY0069D" parameterType="Map">
    INSERT INTO PAY0069D ( TRX_ID,
                           TRX_DT,
                           TRX_TYPE,
                           TRX_AMT,
                           TRX_MTCH_NO
    ) VALUES ( #{trxId},
               #{trxDt},
               #{trxType},
               #{trxAmt},
               #{trxMtchNo}
    )
  </insert>

  <insert id="insert_PAY0064D" parameterType="Map">
    INSERT INTO PAY0064D ( PAY_ID,
                           OR_NO,
                           SALES_ORD_ID,
                           BILL_ID,
                           TR_NO,
                           TYPE_ID,
                           PAY_DATA,
                           BANK_CHG_AMT,
                           BANK_CHG_ACC_ID,
                           COLL_MEM_ID,
                           BRNCH_ID,
                           BANK_ACC_ID,
                           ALLOW_COMM,
                           STUS_CODE_ID,
                           UPD_USER_ID,
                           UPD_DT,
                           SYNC_HECK,
                           CUST_ID_3PARTY,
                           TOT_AMT,
                           MTCH_ID,
                           CRT_USER_ID,
                           CRT_DT,
                           IS_ALLOW_REV_MULTI,
                           IS_GL_POST_CLM,
                           GL_POST_CLM_DT,
                           TRX_ID,
                           ADV_MONTH,
                           ACC_BILL_ID,
                           TR_ISSU_DT,
                           TAX_INVC_IS_GEN,
                           TAX_INVC_REF_NO,
                           TAX_INVC_REF_DT,
                           SVC_CNTRCT_ID,
                           BATCH_PAY_ID
    ) VALUES ( #{payId},
               #{orNo},
               #{salesOrdId},
               #{billId},
               #{trNo},
               #{typeId},
               SYSDATE,
               #{bankChgAmt},
               #{bankChgAccId},
               #{collMemId},
               #{brnchId},
               #{bankAccId},
               #{allowComm},
               #{stusCodeId},
               #{updUserId},
               SYSDATE,
               #{syncHeck},
               #{custId3party},
               #{totAmt},
               #{mtchId},
               #{crtUserId},
               SYSDATE,
               #{isAllowRevMulti},
               #{isGlPostClm},
               TO_DATE(#{glPostClmDt},'DD/MM/YYYY'),
               #{trxId},
               #{advMonth},
               #{accBillId},
               TO_DATE(#{trIssuDt},'DD/MM/YYYY'),
               #{taxInvcIsGen},
               #{taxInvcRefNo},
               TO_DATE(#{taxInvcRefDt},'DD/MM/YYYY'),
               #{svcCntrctId},
               #{batchPayId})

    <!-- INSERT INTO PAY0064D ( PAY_ID, OR_NO, SALES_ORD_ID, BILL_ID, TR_NO,
      TYPE_ID, PAY_DATA, BANK_CHG_AMT, BANK_CHG_ACC_ID, COLL_MEM_ID, BRNCH_ID,
      BANK_ACC_ID, ALLOW_COMM, STUS_CODE_ID, UPD_USER_ID, UPD_DT, SYNC_HECK, CUST_ID_3PARTY,
      TOT_AMT, MTCH_ID, CRT_USER_ID, CRT_DT, IS_ALLOW_REV_MULTI, IS_GL_POST_CLM,
      GL_POST_CLM_DT, TRX_ID, ADV_MONTH, ACC_BILL_ID, TR_ISSU_DT, TAX_INVC_IS_GEN,
      TAX_INVC_REF_NO, TAX_INVC_REF_DT, SVC_CNTRCT_ID, BATCH_PAY_ID) VALUES ( #{payId},
      #{orNo}, #{salesOrdId}, #{billId}, #{trNo}, #{typeId}, #{payData}, #{bankChgAmt},
      #{bankChgAccId}, #{collMemId}, #{brnchId}, #{bankAccId}, #{allowComm}, #{stusCodeId},
      #{updUserId}, #{updDt}, #{syncHeck}, #{custId3party}, #{totAmt}, #{mtchId},
      #{crtUserId}, #{crtDt}, #{isAllowRevMulti}, #{isGlPostClm}, #{glPostClmDt},
      #{trxId}, #{advMonth}, #{accBillId}, #{trIssuDt}, #{taxInvcIsGen}, #{taxInvcRefNo},
      #{taxInvcRefDt}, #{svcCntrctId}, #{batchPayId}) -->

  </insert>

  <insert id="insert_PAY0065D" parameterType="Map">
    INSERT INTO PAY0065D ( PAY_ITM_ID,
                           PAY_ID,
                           PAY_ITM_MODE_ID,
                           PAY_ITM_REF_NO,
                           PAY_ITM_CC_NO,
                           PAY_ITM_ORI_CC_NO,
                           PAY_ITM_ENCRYPT_CC_NO,
                           PAY_ITM_CC_TYPE_ID,
                           PAY_ITM_CHQ_NO,
                           PAY_ITM_ISSU_BANK_ID,
                           PAY_ITM_AMT,
                           PAY_ITM_IS_ONLINE,
                           PAY_ITM_BANK_ACC_ID,
                           PAY_ITM_REF_DT,
                           PAY_ITM_APPV_NO,
                           PAY_ITM_REM,
                           PAY_ITM_STUS_ID,
                           PAY_ITM_IS_LOK,
                           PAY_ITM_CC_HOLDER_NAME,
                           PAY_ITM_CC_EXPR_DT,
                           PAY_ITM_BANK_CHRG_AMT,
                           PAY_ITM_IS_THRD_PARTY,
                           PAY_ITM_THRD_PARTY_IC,
                           PAY_ITM_BANK_BRNCH_ID,
                           PAY_ITM_BANK_IN_SLIP_NO,
                           PAY_ITM_EFT_NO,
                           PAY_ITM_CHQ_DEP_RECIPT_NO,
                           ETC1,
                           ETC2,
                           ETC3,
                           PAY_ITM_MID,
                           PAY_ITM_GRP_ID,
                           PAY_ITM_REF_ITM_ID,
                           PAY_ITM_BANK_CHRG_ACC_ID,
                           PAY_ITM_RUNNG_NO,
                           UPD_USER_ID,
                           UPD_DT,
                           IS_FUND_TRNSFR,
                           SKIP_RECON,
                           PAY_ITM_CARD_TYPE_ID,
                           PAY_ITM_CARD_MODE_ID
    ) VALUES ( #{PayItmId},
               #{payId},
               #{payItmModeId},
               #{payItmRefNo},
               #{payItmCcNo},
               #{payItmOriCcNo},
               #{payItmEncryptCcNo},
               #{payItmCcTypeId},
               #{payItmChqNo},
               #{payItmIssuBankId},
               #{payItmAmt},
               #{payItmIsOnline},
               #{payItmBankAccId},
               #{payItmRefDt},
               #{payItmAppvNo},
               #{payItmRem},
               #{payItmStusId},
               #{payItmIsLok},
               #{payItmCcHolderName},
               #{payItmCcExprDt},
               #{payItmBankChrgAmt},
               #{payItmIsThrdParty},
               #{payItmThrdPartyIc},
               #{payItmBankBrnchId},
               #{payItmBankInSlipNo},
               #{payItmEftNo},
               #{payItmChqDepReciptNo},
               #{etc1},
               #{etc2},
               #{etc3},
               #{payItmMid},
               #{payItmGrpId},
               #{payItmRefItmId},
               #{payItmBankChrgAccId},
               #{payItmRunngNo},
               #{updUserId},
               #{updDt},
               #{isFundTrnsfr},
               #{skipRecon},
               #{payItmCardTypeId},
               #{payItmCardModeId})
  </insert>

  <insert id="insert_PAY0009D" parameterType="Map">
    INSERT INTO PAY0009D ( ID,
                           GLPOSTNGDT,
                           GLFISCALDT,
                           GLBATCHNO,
                           GLBATCHTYPEDESC,
                           GLBATCHTOT,
                           GLRECIPTNO,
                           GLRECIPTTYPEID,
                           GLRECIPTBRNCHID,
                           GLRECIPTSETLACCID,
                           GLRECIPTACCID,
                           GLRECIPTITMID,
                           GLRECIPTITMMODEID,
                           GLREVRSRECIPTITMID,
                           GLRECIPTITMAMT,
                           GLRECIPTITMCHRG,
                           GLRECIPTITMRCLSTUS,
                           GLJRNLNO,
                           GLAUDITREF,
                           GLCNVRSTUS,
                           GLCNVRDT
    ) VALUES ( PAY0009D_SEQ.nextval,
               #{glPostngDt},
               #{glFiscalDt},
               #{glBatchNo},
               #{glBatchTypeDesc},
               #{glBatchTot},
               #{glReciptNo},
               #{glReciptTypeId},
               #{glReciptBrnchId},
               #{glReciptSetlAccId},
               #{glReciptAccId},
               #{glReciptItmId},
               #{glReciptItmModeId},
               #{glRevrsReciptItmId},
               #{glReciptItmAmt},
               #{glReciptItmChrg},
               #{glReciptItmRclStus},
               #{glJrnlNo},
               #{glAuditRef},
               #{glCnvrStus},
               #{glCnvrDt}
    )
  </insert>

  <insert id="reverse_DocNo_PAY0006D" parameterType="Map">
    INSERT INTO PAY0006D ( AS_LDGR_ID,
                           AS_ID,
                           AS_DOC_NO,
                           AS_LG_DOC_TYPE_ID,
                           AS_LG_DT,
                           AS_LG_AMT,
                           AS_LG_UPD_USER_ID,
                           AS_LG_UPD_DT,
                           AS_SO_NO,
                           AS_RESULT_NO,
                           AS_SO_ID,
                           AS_ADV_PAY,
                           R01
    ) VALUES ( PAY0006D_SEQ.NEXTVAL,
               #{asId},
               #{asDocNo},
               #{asLgDocTypeId},
               #{asLgDt},
               #{asLgAmt},
               #{asLgUpdUserId},
               #{asLgUpdDt},
               #{asSoNo},
               #{asResultNo},
               #{asSoId},
               #{asAdvPay},
               #{r01}
    )
  </insert>

  <insert id="updateInhouseSVC0005D" parameterType="Map">
    UPDATE SVC0005D SET ASR_ITM_PART_DESC = #{ASR_ITM_PART_DESC},
                        ASR_ITM_PART_QTY = #{ASR_ITM_PART_QTY},
                        ASR_ITM_PART_PRC = #{ASR_ITM_PART_PRC},
                        ASR_ITM_CHRG_AMT = NVL(#{ASR_ITM_CHRG_AMT},0),
                        ASR_ITM_REM = #{ASR_ITM_REM},
                        ASR_ITM_CHRG_FOC = #{ASR_ITM_CHRG_FOC},
                        ASR_ITM_EXCHG_ID = #{ASR_ITM_EXCHG_ID},
                        ASR_ITM_CLM = #{ASR_ITM_CLM},
                        ASR_ITM_TAX_CODE_ID = #{ASR_ITM_TAX_CODE_ID},
                        ASR_ITM_TXS_AMT = #{ASR_ITM_TXS_AMT},
                        SERIAL_NO = #{SERIAL_NO},
                        EXCHN_ID = #{EXCHN_ID},
                        FILTER_BARCD_SERIAL_NO = #{FILTER_BARCD_SERIAL_NO}
    WHERE ASR_ITM_ID =#{ASR_ITM_ID}
  </insert>

  <insert id="insert_SAL0087D" parameterType="Map">
    INSERT INTO SAL0087D ( SRV_FILTER_ID,
                           SRV_CONFIG_ID,
                           SRV_FILTER_STK_ID,
                           SRV_FILTER_PRIOD,
                           SRV_FILTER_PRV_CHG_DT,
                           SRV_FILTER_STUS_ID,
                           SRV_FILTER_REM,
                           SRV_FILTER_CRT_DT,
                           SRV_FILTER_CRT_USER_ID,
                           SRV_FILTER_UPD_DT,
                           SRV_FILTER_UPD_USER_ID,
                           SRV_FILTER_EXPR_DT,
                           FILTER_BARCD_SERIAL_NO
    ) VALUES ( SAL0087D_SRV_FILTER_ID_SEQ.NEXTVAL,
               #{configId},
               NVL(#{fID},0),
               NVL((SELECT LEAD_TM_OFFSET_N FROM LOG0044D A JOIN
               SYS0026M B ON A.BOM_COMPNT =
               B.STK_CODE WHERE B.STK_ID = #{fID}),0),
               TO_DATE(#{AS_SETL_DT},'DD/MM/YYYY'),
               '1',
               #{AS_ORD_NO},
               SYSDATE,
               '349',
               SYSDATE,
               '349',
               TO_DATE(#{AS_SETL_DT},'DD/MM/YYYY'),
               '1'
    )
  </insert>

  <insert id="bckupPAY0252T" parameterType="Map">
    INSERT INTO PAY0293T
    SELECT *
    FROM PAY0252T
    WHERE PAY_ID IN ( SELECT PAY_ID
                      FROM PAY0064D
                      WHERE OR_NO IN ( SELECT AS_DOC_NO
                                       FROM PAY0006D
                                       WHERE AS_ID = #{AS_ENTRY_ID}
                                         AND AS_RESULT_NO = #{AS_RESULT_NO}
                                         AND AS_DOC_NO LIKE 'WOR%' ))
      AND APP_TYPE = 'AS'
  </insert>

  <!-- UPDATE START -->
  <update id="updateSVC0001D" parameterType="Map">
    UPDATE SVC0001D SET
                        <!-- AS_MEM_ID = #{AS_MEM_ID},
                        AS_MEM_GRP = #{AS_MEM_GRP},
                        AS_REQST_DT = TO_DATE(#{AS_REQST_DT},'DD/MM/YYYY'),
                        AS_REQST_TM = #{AS_REQST_TM},
                        AS_APPNT_DT = TO_DATE(#{AS_APPNT_DT},'DD/MM/YYYY'),
                        AS_APPNT_TM = #{AS_APPNT_TM},
                        AS_BRNCH_ID = #{AS_BRNCH_ID}, -->
                        AS_MALFUNC_ID = #{AS_MALFUNC_ID},
                        AS_MALFUNC_RESN_ID = #{AS_MALFUNC_RESN_ID},
                        AS_REM_REQSTER = #{AS_REM_REQSTER},
                        AS_REM_REQSTER_CNTC = #{AS_REM_REQSTER_CNTC},
                        <!-- AS_CALLLOG_ID = #{AS_CALLLOG_ID}, AS_STUS_ID = #{AS_STUS_ID}, AS_SMS
                          = #{AS_SMS}, AS_UPD_USER_ID = #{USER_ID}, AS_UPD_DT = SYSDATE, AS_ENTRY_IS_SYNCH
                          = #{AS_ENTRY_IS_SYNCH}, AS_ENTRY_IS_EDIT = #{AS_ENTRY_IS_EDIT}, AS_TYPE_ID
                          = #{AS_TYPE_ID}, AS_PREV_MEM_ID = #{AS_PREV_MEM_ID}, -->

                        AS_REQSTER_TYPE_ID = #{AS_REQSTER_TYPE_ID},
                        AS_IS_BS_WITHIN_30DAYS = #{AS_IS_BS_WITHIN_30DAYS},
                        AS_ALLOW_COMM = #{AS_ALLOW_COMM},
                        AS_REM_ADD_CNTC = #{AS_REM_ADD_CNTC},
                        AS_REM_REQSTER_CNTC_SMS = #{AS_REM_REQSTER_CNTC_SMS},
                        AS_REM_ADD_CNTC_SMS = #{AS_REM_ADD_CNTC_SMS},
                        AS_SESION_CODE = #{AS_SESION_CODE},
                        CALL_MEM = #{CALL_MEMBER},
                        REF_REQST = #{REF_REQUEST},
                        SEGMENT_TYPE = #{SEGMENT_TYPE}
    WHERE AS_ID = #{AS_ID}
  </update>

  <update id="updateSVC0001D_RCL" parameterType="Map">
    UPDATE SVC0001D SET AS_MEM_ID = (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE = #{AS_MEM_ID}),
                        AS_MEM_GRP = #{AS_MEM_GRP},
                        AS_APPNT_DT = TO_DATE(#{AS_APP_DT},'DD/MM/YYYY'),
                        AS_BRNCH_ID = #{AS_RCL_ASG_DSC},
                        AS_SESION_CODE = #{AS_APP_SESS},
                        AS_UPD_USER_ID = #{updator},
                        AS_UPD_DT = SYSDATE,
                        SEGMENT_TYPE = #{SEGMENT_TYPE}
    WHERE AS_ID = #{AS_ID}

    <!-- AS_APPNT_TM = #{AS_APP_SESS}, -->
  </update>

  <update id="updateSVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_CT_ID = NVL(#{AS_CT_ID}, 0),
                        AS_SETL_DT = TO_DATE(#{AS_SETL_DT},'dd/mm/yyyy'),
                        AS_SETL_TM = #{AS_SETL_TM},
                        AS_RESULT_STUS_ID = NVL(#{AS_RESULT_STUS_ID},0),
                        AS_FAIL_RESN_ID = NVL(#{AS_FAIL_RESN_ID},0),
                        AS_REN_COLCT_ID = NVL(#{AS_REN_COLCT_ID},0),
                        AS_CMMS = NVL(#{AS_CMMS},0),
                        AS_BRNCH_ID = NVL(#{AS_BRNCH_ID},0),
                        AS_WH_ID = NVL(#{AS_WH_ID},0),
                        AS_RESULT_REM = #{AS_RESULT_REM},
                        AS_MALFUNC_ID = NVL(#{AS_MALFUNC_ID},0) ,
                        AS_MALFUNC_RESN_ID = NVL(#{AS_MALFUNC_RESN_ID},0),
                        AS_DEFECT_TYPE_ID = NVL(#{AS_DEFECT_TYPE_ID},0),
                        AS_DEFECT_GRP_ID = NVL(#{AS_DEFECT_GRP_ID},0),
                        AS_DEFECT_ID = NVL(#{AS_DEFECT_ID},0),
                        AS_DEFECT_PART_GRP_ID = NVL(#{AS_DEFECT_PART_GRP_ID},0),
                        AS_DEFECT_PART_ID = NVL(#{AS_DEFECT_PART_ID},0),
                        AS_DEFECT_DTL_RESN_ID = NVL(#{AS_DEFECT_DTL_RESN_ID},0),
                        AS_SLUTN_RESN_ID = NVL(#{AS_SLUTN_RESN_ID},0),
                        AS_WORKMNSH = NVL(#{AS_WORKMNSH},0),
                        AS_FILTER_AMT = NVL(#{AS_FILTER_AMT},0),
                        AS_ACSRS_AMT = NVL(#{AS_ACSRS_AMT},0),
                        AS_TOT_AMT = NVL(#{AS_TOT_AMT},0),
                        AS_RESULT_IS_SYNCH = NVL(#{AS_RESULT_IS_SYNCH},0),
                        AS_RCALL = NVL(#{AS_RCALL},0),
                        AS_RESULT_STOCK_USE = NVL(#{AS_RESULT_STOCK_USE},0),
                        AS_RESULT_TYPE_ID = NVL(#{AS_RESULT_TYPE_ID},0),
                        AS_RESULT_IS_CURR = NVL(#{AS_RESULT_IS_CURR},0),
                        AS_RESULT_MTCH_ID = NVL(#{AS_RESULT_MTCH_ID},0),
                        AS_RESULT_NO_ERR = NVL(#{AS_RESULT_NO_ERR},0),
                        AS_RESULT_UPD_DT = SYSDATE,
                        AS_RESULT_UPD_USER_ID = #{updator},
                        AS_ENTRY_POINT = NVL(#{AS_ENTRY_POINT},0),
                        AS_WORKMNSH_TAX_CODE_ID = NVL(#{AS_WORKMNSH_TAX_CODE_ID},0),
                        AS_WORKMNSH_TXS = NVL(#{AS_WORKMNSH_TXS},0),
                        AS_RESULT_MOBILE_ID = NVL(#{AS_RESULT_MOBILE_ID},0)
    WHERE AS_RESULT_NO = #{AS_RESULT_NO}
  </update>

  <update id="updateBasicSVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_CMMS = NVL(#{AS_CMMS}, 0),
                        AS_RESULT_REM = #{AS_RESULT_REM},
                        AS_MALFUNC_ID = NVL(#{AS_MALFUNC_ID}, 0) ,
                        AS_MALFUNC_RESN_ID = NVL(#{AS_MALFUNC_RESN_ID}, 0),
                        AS_DEFECT_TYPE_ID = NVL(#{AS_DEFECT_TYPE_ID}, 0),
                        AS_DEFECT_ID = NVL(#{AS_DEFECT_ID}, 0),
                        AS_DEFECT_PART_ID = NVL(#{AS_DEFECT_PART_ID}, 0),
                        AS_DEFECT_DTL_RESN_ID = NVL(#{AS_DEFECT_DTL_RESN_ID}, 0),
                        AS_SLUTN_RESN_ID = NVL(#{AS_SLUTN_RESN_ID}, 0),
                        AS_FAIL_RESN_ID = NVL(#{AS_FAIL_RSN}, 0)
    WHERE AS_RESULT_ID = #{AS_RESULT_ID}
  </update>

  <update id="updateInHouseNOReplaceMentSVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_RESULT_STUS_ID = 4
    WHERE AS_RESULT_ID = #{AS_RESULT_ID}
  </update>

  <update id="updateBasicInhouseSVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_CMMS =NVL(#{AS_CMMS},0),
                        AS_RESULT_REM = #{AS_RESULT_REM},
                        AS_MALFUNC_ID = NVL(#{AS_MALFUNC_ID},0) ,
                        AS_MALFUNC_RESN_ID =NVL(#{AS_MALFUNC_RESN_ID},0),
                        IN_HUSE_REPAIR_REM =#{IN_HUSE_REPAIR_REM},
                        IN_HUSE_REPAIR_REPLACE_YN =#{IN_HUSE_REPAIR_REPLACE_YN},
                        IN_HUSE_REPAIR_PROMIS_DT = TO_DATE(#{IN_HUSE_REPAIR_PROMIS_DT} ,'dd/mm/yyyy'),
                        IN_HUSE_REPAIR_GRP_CODE = #{IN_HUSE_REPAIR_GRP_CODE},
                        IN_HUSE_REPAIR_PRODUCT_CODE =#{IN_HUSE_REPAIR_PRODUCT_CODE},
                        IN_HUSE_REPAIR_SERIAL_NO =#{IN_HUSE_REPAIR_SERIAL_NO} ,
                        AS_RESULT_STUS_ID =4
    WHERE AS_RESULT_ID = #{AS_RESULT_ID}
  </update>

  <update id="updateBasicInhouseSVC0001D" parameterType="Map">
    UPDATE SVC0001D SET AS_STUS_ID = 4 ,
                        AS_UPD_USER_ID = #{updator},
                        AS_UPD_DT = SYSDATE
    WHERE AS_ID =( SELECT AS_ENTRY_ID
                   FROM SVC0004D
                   WHERE AS_RESULT_ID =#{AS_RESULT_ID} )
  </update>

  <update id="updateSVC0005D" parameterType="Map">
    UPDATE SVC0005D SET ASR_ITM_PART_ID =#{ASR_ITM_PART_ID},
                        ASR_ITM_PART_DESC = #{ASR_ITM_PART_DESC},
                        ASR_ITM_PART_QTY = #{ASR_ITM_PART_QTY},
                        ASR_ITM_PART_PRC = #{ASR_ITM_PART_PRC},
                        ASR_ITM_CHRG_AMT = #{ASR_ITM_CHRG_AMT},
                        ASR_ITM_REM = #{ASR_ITM_REM},
                        ASR_ITM_CRT_USER_ID = #{ASR_ITM_CRT_USER_ID},
                        ASR_ITM_CRT_DT = SYSDATE,
                        ASR_ITM_CHRG_FOC = #{ASR_ITM_CHRG_FOC},
                        ASR_ITM_EXCHG_ID = #{ASR_ITM_EXCHG_ID},
                        ASR_ITM_CLM = #{ASR_ITM_CLM},
                        ASR_ITM_TAX_CODE_ID = #{ASR_ITM_TAX_CODE_ID},
                        ASR_ITM_TXS_AMT = #{ASR_ITM_TXS_AMT}
    WHERE ASR_ITM_ID = #{ASR_ITM_ID}
  </update>

  <update id="updateStateSVC0001D" parameterType="Map">
    UPDATE SVC0001D SET AS_STUS_ID = #{AS_RESULT_STUS_ID}
                      , AS_UPD_USER_ID = #{USER_ID}
                      , AS_UPD_DT = SYSDATE
    WHERE AS_ID = #{AS_ENTRY_ID}
  </update>

  <update id="updateAS_TYPE_ID_SVC0001D" parameterType="Map">
    UPDATE SVC0001D SET AS_TYPE_ID ='674',
                        AS_UPD_USER_ID =#{USER_ID},
                        AS_UPD_DT = SYSDATE
    WHERE AS_ID =#{AS_ENTRY_ID}
  </update>

  <update id="updateCCR0006D" parameterType="Map">
    UPDATE CCR0006D SET RESULT_ID = #{CALL_RESULT_ID},
                        UPD_DT =SYSDATE ,
                        UPD_USER_ID = #{USER_ID}
    WHERE DOC_ID = #{AS_ID}
      AND TYPE_ID = '339'
  </update>

  <update id="updateAssignCT" parameterType="Map">
    UPDATE SVC0001D SET AS_MEM_ID = #{asMemId},
                        AS_UPD_USER_ID = #{updator} ,
                        AS_UPD_DT = SYSDATE
    WHERE AS_ID = #{asId}
  </update>

  <update id="updateSTATE_CCR0006D" parameterType="Map">
    UPDATE CCR0006D SET STUS_CODE_ID = 4 ,
                        UPD_DT = SYSDATE ,
                        UPD_USER_ID = #{USER_ID}
    WHERE CALL_ENTRY_ID =#{CALL_ENTRY_ID}
  </update>

  <update id="reverse_CURR_SVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_RESULT_IS_CURR = 0
    WHERE AS_RESULT_ID = #{OLD_AS_RESULT_ID}
  </update>

  <update id="reverse_StateUpPAY0007D" parameterType="Map">
    UPDATE PAY0007D SET BILL_IS_PAID = 1 ,
                        STUS_ID = 4,
                        UPD_DT = SYSDATE,
                        UPD_USER_ID = #{updator}
    WHERE BILL_NO = #{AS_RESULT_NO}
  </update>

  <update id="reverse_State_CCR0001D" parameterType="Map">
    UPDATE CCR0001D SET HC_STUS_ID = 8 ,
                        UPD_USER_ID = #{updator},
                        UPD_DT = SYSDATE
    WHERE HC_TYPE_NO = #{HC_TYPE_NO}
      AND HC_STUS_ID='33'
  </update>

  <update id="updateSVC0004DIsCur" parameterType="Map">
    UPDATE SVC0004D SET AS_RESULT_IS_CURR = 0
    WHERE AS_ENTRY_ID = #{AS_ENTRY_ID} AND AS_RESULT_IS_CURR = 1
  </update>

  <update id="update_SAL0087D" parameterType="Map">
    UPDATE SAL0087D SET SRV_FILTER_PRV_CHG_DT = TO_DATE(#{SRV_FILTER_PRV_CHG_DT},'dd/mm/yyyy'),
                        SRV_FILTER_LAST_SERIAL = #{SRV_FILTER_LAST_SERIAL} ,
                        SRV_FILTER_PREV_SERIAL = SRV_FILTER_LAST_SERIAL,
                        SRV_FILTER_UPD_DT = SYSDATE,
                        SRV_FILTER_UPD_USER_ID = #{updator}
    WHERE SRV_CONFIG_ID =( SELECT MAX(SRV_CONFIG_ID)
                           FROM SAL0090D
                           WHERE 1 = 1
                             AND SRV_SO_ID = #{SRV_SO_ID}
                             AND SRV_STUS_ID = 1
    )
      AND SRV_FILTER_STUS_ID = 1
      AND SRV_FILTER_STK_ID = #{SRV_FILTER_STK_ID}
  </update>

  <update id="update_Filter_SAL0087D" parameterType="Map">
    UPDATE (SELECT D.AS_NO,
                   D.AS_SO_ID,
                   B.SRV_SO_ID,
                   F.ASR_ITM_PART_ID,
                   A.SRV_FILTER_STK_ID,
                   A.SRV_FILTER_PRV_CHG_DT,
                   A.SRV_FILTER_LAST_SERIAL, A.SRV_FILTER_PREV_SERIAL
            FROM SAL0087D A,
                 SAL0090D B,
                 SVC0004D C,
                 SVC0001D D,
                 SVC0005D F
            WHERE A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
              AND B.SRV_SO_ID = D.AS_SO_ID
              AND D.AS_ID = C.AS_ENTRY_ID
              AND C.AS_RESULT_ID = F.AS_RESULT_ID
              AND A.SRV_FILTER_STK_ID = F.ASR_ITM_PART_ID
              AND D.AS_ID = #{AS_RESULT_ID}
    ) S SET SRV_FILTER_LAST_SERIAL = #{SRV_FILTER_LAST_SERIAL},
        SRV_FILTER_PREV_SERIAL = S.SRV_FILTER_LAST_SERIAL,
        SRV_FILTER_PRV_CHG_DT = SYSDATE
  </update>

  <update id="updateInHouseSVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_SETL_DT = TO_DATE(#{AS_SETL_DT},'dd/mm/yyyy'),
                        AS_SETL_TM = #{AS_SETL_TM},
                        AS_RESULT_STUS_ID = NVL(#{AS_RESULT_STUS_ID},0),
                        AS_FAIL_RESN_ID = NVL(#{AS_FAIL_RESN_ID},0),
                        AS_REN_COLCT_ID = NVL(#{AS_REN_COLCT_ID},0),
                        AS_CMMS = NVL(#{AS_CMMS},0),
                        AS_BRNCH_ID = NVL(#{AS_BRNCH_ID},0),
                        AS_WH_ID = NVL(#{AS_WH_ID},0),
                        AS_RESULT_REM = #{AS_RESULT_REM},
                        AS_MALFUNC_ID = NVL(#{AS_MALFUNC_ID},0) ,
                        AS_MALFUNC_RESN_ID = NVL(#{AS_MALFUNC_RESN_ID},0),
                        AS_DEFECT_TYPE_ID = NVL(#{AS_DEFECT_TYPE_ID},0),
                        AS_DEFECT_GRP_ID = NVL(#{AS_DEFECT_GRP_ID},0),
                        AS_DEFECT_ID = NVL(#{AS_DEFECT_ID},0),
                        AS_DEFECT_PART_GRP_ID = NVL(#{AS_DEFECT_PART_GRP_ID},0),
                        AS_DEFECT_PART_ID = NVL(#{AS_DEFECT_PART_ID},0),
                        AS_DEFECT_DTL_RESN_ID = NVL(#{AS_DEFECT_DTL_RESN_ID},0),
                        AS_SLUTN_RESN_ID = NVL(#{AS_SLUTN_RESN_ID},0),
                        AS_WORKMNSH = NVL(#{AS_WORKMNSH},0), AS_FILTER_AMT =NVL(#{AS_FILTER_AMT},0),
                        AS_ACSRS_AMT = NVL(#{AS_ACSRS_AMT},0),
                        AS_TOT_AMT = NVL(#{AS_TOT_AMT},0),
                        AS_RESULT_IS_SYNCH = NVL(#{AS_RESULT_IS_SYNCH},0),
                        AS_RCALL = NVL(#{AS_RCALL},0),
                        AS_RESULT_STOCK_USE = NVL(#{AS_RESULT_STOCK_USE},0),
                        AS_RESULT_TYPE_ID = NVL(#{AS_RESULT_TYPE_ID},0),
                        AS_RESULT_IS_CURR = NVL(#{AS_RESULT_IS_CURR},0),
                        AS_RESULT_MTCH_ID = NVL(#{AS_RESULT_MTCH_ID},0),
                        AS_RESULT_NO_ERR = NVL(#{AS_RESULT_NO_ERR},0),
                        AS_RESULT_UPD_DT = SYSDATE,
                        AS_RESULT_UPD_USER_ID = #{updator},
                        AS_ENTRY_POINT = NVL(#{AS_ENTRY_POINT},0),
                        AS_WORKMNSH_TAX_CODE_ID = NVL(#{AS_WORKMNSH_TAX_CODE_ID},0),
                        AS_WORKMNSH_TXS = NVL(#{AS_WORKMNSH_TXS},0),
                        AS_RESULT_MOBILE_ID = NVL(#{AS_RESULT_MOBILE_ID},0),
                        APPNT_DT = TO_DATE(#{APPNT_DT},'dd/mm/yyyy'),
                        IN_HUSE_REPAIR_REM = #{IN_HUSE_REPAIR_REM},
                        IN_HUSE_REPAIR_REPLACE_YN = #{IN_HUSE_REPAIR_REPLACE_YN},
                        IN_HUSE_REPAIR_PROMIS_DT = TO_DATE(#{IN_HUSE_REPAIR_PROMIS_DT} ,'dd/mm/yyyy'),
                        IN_HUSE_REPAIR_GRP_CODE = #{IN_HUSE_REPAIR_GRP_CODE},
                        IN_HUSE_REPAIR_PRODUCT_CODE = #{IN_HUSE_REPAIR_PRODUCT_CODE},
                        IN_HUSE_REPAIR_SERIAL_NO = #{IN_HUSE_REPAIR_SERIAL_NO}
    WHERE AS_RESULT_NO = #{AS_RESULT_NO}
  </update>

  <update id="updateInhouseSVC0001D_appdt" parameterType="Map">
    UPDATE SVC0001D SET AS_STUS_ID = #{AS_STUS_ID} ,
                        AS_UPD_USER_ID = #{updator},
                        AS_UPD_DT = SYSDATE ,
                        AS_APPNT_DT = TO_DATE( #{APPNT_DT},'dd/mm/yyyy')
    WHERE AS_ID = ( SELECT AS_ENTRY_ID
                    FROM SVC0004D
                    WHERE AS_RESULT_NO =#{AS_RESULT_NO}
    )
  </update>

  <update id="updateState_SERIAL_NO_SVC0004D" parameterType="Map">
    UPDATE SVC0004D SET AS_RESULT_UPD_DT =SYSDATE
                      , AS_RESULT_UPD_USER_ID = #{updator}
                      , AS_RESULT_STUS_ID = #{AS_RESULT_STUS_ID}
                      , IN_HUSE_REPAIR_REM = #{IN_HUSE_REPAIR_REM}
                      , IN_HUSE_REPAIR_SERIAL_NO = #{IN_HUSE_REPAIR_SERIAL_NO}
    WHERE AS_ENTRY_ID = #{AS_ENTRY_ID}
  </update>

  <update id="chkRcdTms" parameterType="Map">
    UPDATE SVC0001D
    SET RCD_TMS = TO_CHAR(SYSTIMESTAMP,'ddmmyyyyHH24miss')
    WHERE AS_SO_ID = #{asSoId}
      AND AS_ID = #{asEntryId}
      AND AS_NO = #{asNo}
      AND RCD_TMS = #{rcdTms}
  </update>

  <update id="updPAY0081D" parameterType="Map">
    UPDATE PAY0081D
    SET OTH_KEYIN_STUS_ID = 1
    WHERE F_TRNSC_ID IN ( SELECT BANK_STATE_MAPPING_ID
                          FROM PAY0252T
                          WHERE PAY_ID IN ( SELECT PAY_ID
                                            FROM PAY0064D
                                            WHERE OR_NO IN ( SELECT AS_DOC_NO
                                                             FROM PAY0006D
                                                             WHERE AS_ID = #{AS_ENTRY_ID}
                                                               AND AS_RESULT_NO = #{AS_RESULT_NO}
                                                               AND AS_DOC_NO LIKE 'WOR%'))
                            AND APP_TYPE = 'AS')
      AND OTH_KEYIN_STUS_ID = '4'
  </update>

  <!-- DELETE START -->
  <delete id="deleteSVC0005D" parameterType="Map">
    DELETE SVC0005D
    WHERE ASR_ITM_ID = #{ASR_ITM_ID}
  </delete>

  <delete id="deleteInhouseSVC0005D" parameterType="Map">
    DELETE SVC0005D
    WHERE ASR_ITM_ID = #{ASR_ITM_ID}
  </delete>

  <delete id="rmvPAY0252T" parameterType="Map">
    DELETE
    FROM PAY0252T
    WHERE PAY_ID IN ( SELECT PAY_ID
                      FROM PAY0064D
                      WHERE OR_NO IN ( SELECT AS_DOC_NO
                                       FROM PAY0006D
                                       WHERE AS_ID = #{AS_ENTRY_ID}
                                         AND AS_RESULT_NO = #{AS_RESULT_NO}
                                         AND AS_DOC_NO LIKE 'WOR%' ))
      AND APP_TYPE = 'AS'
  </delete>

  <select id="getDefectTypSCList" parameterType="Map" resultType="egovMap">
    SELECT DEFECT_ID
    FROM SYS0100M
    WHERE DEFECT_TYP = 'SC'
      AND DEFECT_STATUS = 1
      AND IS_INHOUSE = 1
      AND SYSDATE BETWEEN EFF_DT AND EXP_DT
      AND DEFECT_ID = #{AS_SLUTN_RESN_ID}
  </select>

  <select id="getSerialChk" parameterType="Map" resultType="String">
     SELECT SERIAL_CHK
	   FROM SYS0026M
	 WHERE STK_ID = #{STK_CODE}
  </select>

  <insert id="insertLOG0103M" parameterType="Map">
    INSERT INTO LOG0103M ( SEQ,
                           SVC_ORD_ID,
                           CUST_ID,
                           SVC_DT,
                           STK_ID,
                           QTY,
                           OLD_SERIAL,
                           NEW_SERIAL,
                           CMPLT_YN,
                           CMPLT_DT,
                           RESN_CODE,
                           COMMENTS,
                           CRT_DT,
                           CRT_USER_ID,
                           UPD_DT,
                           UPD_USER_ID,
                           MEM_ID,
                           RESULT_ID,
                           STK_ID_NEW
    ) VALUES ( LOG0103M_SEQ.nextval,
               #{AS_NO},
               null,
               TO_DATE(#{ASR_SETL_DT},'dd/mm/yyyy'),
               #{AS_PART_ID},
               #{AS_PART_QTY},
               #{OLD_FILTER_BARCD_SERIAL_NO},
               #{FILTER_BARCD_SERIAL_NO},
               null,
               null,
               null,
               null,
               SYSDATE,
               #{AS_UPD_USR},
               SYSDATE,
               #{AS_UPD_USR},
               #{ASR_CT},
               #{ASR_NO},
               null
    )
  </insert>

  <insert id="reverse_CURR_LOG0103M" parameterType="Map">
    INSERT INTO LOG0103M ( SEQ,
                           SVC_ORD_ID,
                           CUST_ID,
                           SVC_DT,
                           STK_ID,
                           QTY,
                           OLD_SERIAL,
                           NEW_SERIAL,
                           CMPLT_YN,
                           CMPLT_DT,
                           RESN_CODE,
                           COMMENTS,
                           CRT_DT,
                           CRT_USER_ID,
                           UPD_DT,
                           UPD_USER_ID,
                           MEM_ID,
                           RESULT_ID,
                           STK_ID_NEW
    )
    SELECT LOG0103M_SEQ.NEXTVAL ,
           A.AS_NO,
           NULL,
           B.AS_SETL_DT,
           C.ASR_ITM_PART_ID,
           (C.ASR_ITM_PART_QTY * -1),
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           SYSDATE,
           #{updator},
           SYSDATE,
           #{updator},
           B.AS_CT_ID,
           B.AS_RESULT_ID,
           NULL
    FROM SVC0001D A JOIN SVC0004D B ON A.AS_ID = B.AS_ENTRY_ID AND AS_RESULT_ID = #{OLD_AS_RESULT_ID}
    LEFT JOIN SVC0005D C ON B.AS_RESULT_ID = C.AS_RESULT_ID
  </insert>


  <select id="selectTestChk" parameterType="Map" resultType="int">
  SELECT COUNT(1)
    FROM SVC0005D S
    WHERE AS_RESULT_ID = #{OLD_AS_RESULT_ID}
  </select>

   <select id="selectCustomerInstallationAddress" parameterType="Map"
    resultType="egovMap">
        SELECT
        A.SALES_ORD_ID ,
        A.ADD_ID ,
        A.INSTALL_ID ,
        B.AREA_ID ,
        B.AREA
        FROM SAL0045D A
        LEFT JOIN SAL0023D B ON A.ADD_ID = B.CUST_ADD_ID
        LEFT JOIN SYS0064M C ON B.AREA_ID = C.AREA_ID
        WHERE A.SALES_ORD_ID IN  (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})

  </select>


   <!--added by keyi 20211015-->
    <select id="selectDefectEntry" parameterType="Map" resultType="egovMap">
      SELECT * from ( SELECT Extent1.*  FROM(
            SELECT DISTINCT B.SALES_ORD_NO AS SALES_ORD_NO,
               TO_CHAR (A.AS_SETL_DT, 'YYYYMMDD') AS AS_SETL_DT,
               A.AS_DEFECT_PART_ID,
               C.DEFECT_CODE AS DEFECT_CODE_DP,
               C.DEFECT_DESC AS DEFECT_DESC_DP,
               A.AS_DEFECT_DTL_RESN_ID,
               D.DEFECT_CODE AS DEFECT_CODE_DD,
               D.DEFECT_DESC AS DEFECT_DESC_DD,
               A.AS_DEFECT_ID ,
               E.DEFECT_CODE AS DEFECT_CODE_DC,
               E.DEFECT_DESC AS DEFECT_DESC_DC

               FROM SVC0109D A, SAL0001D B, SYS0100M C, SYS0100M D , SYS0100M E

               WHERE A.AS_SO_ID = B.SALES_ORD_ID
               AND A.AS_DEFECT_PART_ID = C.DEFECT_ID
               AND A.AS_DEFECT_DTL_RESN_ID = D.DEFECT_ID
               AND A.AS_DEFECT_ID = E.DEFECT_ID

               AND (EXTRACT(MONTH FROM A.AS_SETL_DT) IN (SELECT EXTRACT(MONTH FROM SYSDATE) -1 FROM dual) OR EXTRACT(MONTH FROM A.AS_SETL_DT) IN (SELECT EXTRACT(MONTH FROM SYSDATE) FROM dual))
               AND EXTRACT(YEAR FROM A.AS_SETL_DT) IN (SELECT EXTRACT(YEAR FROM SYSDATE) FROM dual)
               AND A.AS_RESULT_STUS_ID = '4'
               AND SALES_ORD_NO = #{ORD_NO}
               ORDER BY AS_SETL_DT DESC
        ) Extent1  where ROWNUM = 1 )TABLE1 ,

        (select
        DEFECT_ID AS SOLUTION_LARGE_ID,
        DEFECT_CODE AS SOLUTION_LARGE_CODE,
        DEFECT_DESC AS SOLUTION_LARGE_DESC
        from SYS0100M where DEFECT_TYP = 'DT' and DEFECT_CODE = '0800') TABLE2,

        (select
        DEFECT_ID AS SOLUTION_SMALL_ID,
        DEFECT_CODE AS SOLUTION_SMALL_CODE,
        DEFECT_DESC AS SOLUTION_SMALL_DESC
        from SYS0100M where DEFECT_TYP = 'SC' and DEFECT_CODE = '0816') TABLE3

  </select>


  <update id="updateSVC0130D" parameterType="Map">
    UPDATE SVC0130D SET STUS = 5
                      , UPD_USER_ID = #{USER_ID}
                      , UPD_DT = SYSDATE
                      , AS_NO = #{AS_NO}
                      , APPV_REMARK = #{CALL_REM}
    WHERE SALES_ORDER_NO = #{ORDNO} AND STUS in (1,44)
  </update>

  <select id="selectWaterSrcType" parameterType="Map" resultType="egovMap">
	  SELECT Extent1.CODE_ID
	       , Extent1.CODE
	       , Extent1.CODE_NAME
	  FROM SYS0013M Extent1
	  WHERE CODE_MASTER_ID = 501
  </select>

  <select id="selectASNotMatch" parameterType="Map" resultType="egovMap">
      SELECT Extent1.CODE_ID
           , Extent1.CODE
           , Extent1.CODE_NAME
      FROM SYS0013M Extent1
      WHERE CODE_MASTER_ID = 510
  </select>

   <select id="selectReworkProj" parameterType="Map" resultType="egovMap">
      SELECT Extent1.CODE_ID
           , Extent1.CODE
           , Extent1.CODE_NAME
      FROM SYS0013M Extent1
      WHERE CODE_MASTER_ID = 561
  </select>

  <insert id="insertASResultLog" parameterType="Map">
        INSERT INTO SVC0135H (
            PARAMS,
            AS_ID,
            CRT_USR,
            URL_PATH
        ) VALUES (
            #{params},
            #{asId},
            #{userId},
            #{url}
        )
  </insert>

  <select id="selectSubmissionRecords" parameterType="Map" resultType="egovMap">
    <![CDATA[
        SELECT * FROM (
        SELECT
            A.REG_ID AS USER_ID,
            CASE WHEN D.MEM_TYPE = '1' THEN '717'
	            WHEN D.MEM_TYPE = '2' THEN '718'
	            ELSE '' END AS PRE_AS_MEM_TYPE,
	        A.SALES_ORDER_NO AS SALES_ORDER_NO,
	        A.PROD_CAT AS PROD_CAT,
	        C.NAME AS STUS,
	        TO_CHAR (A.CRT_DT, 'YYYY-MM-DD') AS CRT_DT,
	        A.APPV_REMARK AS REMARK,
	        A.PRODUCT_NAME AS PRODUCT_NAME,
	        A.CUST_NAME AS CUST_NAME
	    FROM SVC0130D A
	    JOIN SYS0047M B ON A.REG_ID = B.USER_NAME
	    JOIN SYS0038M C ON C.STUS_CODE_ID = A.STUS
	    JOIN ORG0001D D ON A.REG_ID = D.MEM_CODE
	    WHERE 1 = 1
	       AND A.SALES_ORDER_NO = #{orderNo}
	    ORDER BY A.CRT_DT DESC
	    )WHERE ROWNUM = 1
    ]]>
  </select>

  <update id="disbleInstallAccWithAsEntryId" parameterType="Map">
    UPDATE SVC0140D SET UPD_DT = SYSDATE
                      , UPD_USER_ID = #{user_id}
                      , DISB = 1
    WHERE RESULT_NO IN (SELECT AS_RESULT_NO FROM SVC0004D WHERE AS_ENTRY_ID = #{asEntryId} )
  </update>

  <select id="selectInstallAccWithAsEntryId" parameterType="Map" resultType="egovMap">
		SELECT INS_ACC_PART_ID
		FROM
		SVC0140D A
		LEFT JOIN SVC0004D B ON A.RESULT_NO = B.AS_RESULT_NO
		WHERE
		B.AS_ENTRY_ID = #{asEntryId}
		AND A.RESULT_SO_ID = #{salesOrderId}
		AND A.DISB = 0
</select>

<!-- // CELESTE [20240828] - New Product External Filter Registration Enhancement [S] -->
<select id="selectMembershipValidity" parameterType="Map" resultType="egovMap">
     SELECT CEIL(MONTHS_BETWEEN(LAST_SRV_MEM_EXPR_DATE, SYSDATE)) MBRSH_MTHS, CURR_DATE, LAST_SRV_MEM_EXPR_DATE FROM (
            SELECT TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS CURR_DATE,
                       TO_DATE(MAX(TO_CHAR(LAST_SRV_MEM_EXPR_DATE,'YYYY-MM-DD')), 'YYYY-MM-DD') AS LAST_SRV_MEM_EXPR_DATE
            FROM SAL1014V
            WHERE ORD_ID = #{salesOrderId}
            GROUP BY ORD_ID
            )
  </select>

  <insert id="insert_SAL0423D" parameterType="Map">
    INSERT INTO SAL0423D ( INS_RESULT_ID,
                            INS_ENTRY_ID,
                            SALES_ORD_ID,
                            INS_NO, SEQ,
                            TYPE,
                            FILTER_ID,
                            FILTER_CODE,
                            QTY,
                            PART_SERIAL_NO,
                            PAY_MODE,
                            REMARK,
                            CRT_DT,
                            CRT_USER_ID,
                            UPD_DT,
                            UPD_USER_ID
    ) VALUES ( SAL0087D_SRV_FILTER_ID_SEQ.NEXTVAL,
               #{configId},
               NVL(#{fID},0),
               NVL((SELECT LEAD_TM_OFFSET_N FROM LOG0044D A JOIN
               SYS0026M B ON A.BOM_COMPNT =
               B.STK_CODE WHERE B.STK_ID = #{fID}),0),
               TO_DATE(#{AS_SETL_DT},'DD/MM/YYYY'),
               '1',
               #{AS_ORD_NO},
               SYSDATE,
               '349',
               SYSDATE,
               '349',
               TO_DATE(#{AS_SETL_DT},'DD/MM/YYYY'),
               '1'
    )
  </insert>

  <update id="updateStatus_SAL0087D" parameterType="Map">

    UPDATE SAL0087D SET SRV_FILTER_STUS_ID = #{status}
    , SRV_FILTER_UPD_DT = SYSDATE
    , SRV_FILTER_UPD_USER_ID = #{userId}
    WHERE SRV_CONFIG_ID = #{configId} AND SRV_FILTER_STK_ID = (SELECT STK_ID FROM SYS0026M WHERE 1=1 AND STK_ID = #{fID})

  </update>

  <select id="selectStkCatType" parameterType="Map" resultType="egovMap">
            SELECT STK_CODE stkcode, STK_DESC stkdesc, STK_TYPE_ID stktypeid, STK_CTGRY_ID stkctgryid, STK_ID stkid FROM SYS0026M WHERE 1=1
            <choose>
                <when test="stockId !=null and stockId != '' ">
                   AND STK_ID = #{stockId}
                </when>
                <otherwise>
                   AND STK_CODE = #{itmcode}
                </otherwise>
            </choose>

  </select>

  <select id="selectExistingPreFilterCount" parameterType="Map" resultType="java.lang.Integer">

    SELECT COUNT(1)
    FROM SAL0087D
    WHERE SRV_CONFIG_ID = #{configId}
    AND SRV_FILTER_STK_ID = (SELECT STK_ID FROM SYS0026M WHERE 1=1 AND STK_ID = #{fID})

  </select>

  <select id="selectExistingPreFilterInfo" parameterType="Map" resultType="egovMap">

    SELECT SRV_FILTER_STUS_ID, SRV_FILTER_ID
    FROM SAL0087D
    WHERE SRV_CONFIG_ID = #{configId}
    AND SRV_FILTER_STK_ID = (SELECT STK_ID FROM SYS0026M WHERE 1=1 AND STK_ID = #{fID})

  </select>

<!-- // CELESTE [20240828] - New Product External Filter Registration Enhancement [E] -->

    <select id="selectFilterSerialConfig" parameterType="Map" resultType="egovMap">
        SELECT
            Extent1.SRV_SO_ID SRV_SO_ID ,
	        Extent2.SRV_FILTER_STK_ID SRV_FILTER_STK_ID,
	        Extent2.SRV_FILTER_ID,
	        Extent1.SRV_CONFIG_ID,
	        Extent2.IS_RETURN,
	        Extent2.SRV_FILTER_LAST_SERIAL old_serial_no
		FROM SAL0090D Extent1
		JOIN SAL0087D Extent2 ON (Extent1.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID) AND ( 1 = Extent2.SRV_FILTER_STUS_ID )
		WHERE ( 1 = Extent1.SRV_STUS_ID )
		AND ( 443 <![CDATA[<>]]> Extent2.SRV_FILTER_ID )
		and Extent1.SRV_SO_ID = #{ordId} and Extent2.SRV_FILTER_STK_ID = #{stkId}

  </select>

  <select id="getMobileWarehouseByMemID" parameterType="Map"
        resultType="int">
        select wh_loc_id
        from SYS0028M a
               ,ORG0001D b
        where
        1 = 1
        and b.MEM_CODE = a.WH_LOC_CODE
        and b.MEM_ID = #{locId}
    </select>

  <select id="selectFilterSerial" parameterType="Map" resultType="int">
        SELECT COUNT(1) AS CNT
          FROM LOG0100M
        WHERE SERIAL_NO = #{serialNo}
        and LAST_LOC_ID = #{lastLocId}
    </select>

  <update id="updateAsFilterSerial" parameterType="Map">
        UPDATE LOG0100M
        SET
        STUS_CODE = 'C'
        , LAST_SALES_ORD_ID = #{salesOrdId}
        , HS_NO = #{serviceNo}
        , UPD_USER_ID = '349'
        , UPD_DT = SYSDATE
        WHERE SERIAL_NO = #{serialNo}
        and LAST_LOC_ID = #{lastLocId}
    </update>

    <update id="updateSAL0087DFilter_rev" parameterType="Map">
        MERGE INTO SAL0087D TRG USING (SELECT D.AS_NO,
                    B.SRV_CONFIG_ID,
                   D.AS_SO_ID,
                   B.SRV_SO_ID,
                   F.ASR_ITM_PART_ID,
                   A.SRV_FILTER_STK_ID,
                   A.SRV_FILTER_PRV_CHG_DT,
                   A.SRV_FILTER_LAST_SERIAL,
                   A.SRV_FILTER_PREV_SERIAL,
                   A.SRV_FILTER_UPD_DT,
                   A.SRV_FILTER_UPD_USER_ID
            FROM SAL0087D A,
                 SAL0090D B,
                 SVC0004D C,
                 SVC0001D D,
                 SVC0005D F
            WHERE A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
              AND B.SRV_SO_ID = D.AS_SO_ID
              AND D.AS_ID = C.AS_ENTRY_ID
              AND C.AS_RESULT_ID = F.AS_RESULT_ID
              AND A.SRV_FILTER_STK_ID = F.ASR_ITM_PART_ID
              AND C.AS_RESULT_ID = #{OLD_AS_RESULT_ID}
              AND F.FILTER_BARCD_SERIAL_NO IS NOT NULL
    ) S ON (TRG.SRV_CONFIG_ID = S.SRV_CONFIG_ID AND TRG.SRV_FILTER_STK_ID = S.SRV_FILTER_STK_ID AND TRG.SRV_FILTER_STUS_ID = 1)
    WHEN MATCHED THEN
    UPDATE SET TRG.SRV_FILTER_LAST_SERIAL = S.SRV_FILTER_PREV_SERIAL,
        TRG.SRV_FILTER_PREV_SERIAL = NULL,
        TRG.SRV_FILTER_PRV_CHG_DT = SYSDATE,
        TRG.SRV_FILTER_UPD_DT = SYSDATE
        ,TRG.SRV_FILTER_UPD_USER_ID = 349
            </update>

	<select id="selectNextFileId" resultType="int">
        SELECT SYS0071D_ATCH_FILE_ID_SEQ.NEXTVAL atchFileId FROM DUAL
    </select>

    <insert id="insertFileDetail" parameterType="Map">
        INSERT INTO SYS0071D (
        ATCH_FILE_ID
        , ATCH_FILE_NAME
        , FILE_SUB_PATH
        , PHYSICL_FILE_NAME
        , FILE_EXTSN
        , FILE_SIZE
        , FILE_PASSWORD
        )VALUES (
        #{atchFileId}
        ,#{atchFileName}
        ,#{fileSubPath}
        ,#{physiclFileName}
        ,#{fileExtsn}
        ,#{fileSize}
        ,#{filePassword}
        )
    </insert>

</mapper>