<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.scm.impl.SalesPlanManagementMapper">

  <!-- Sales Plan Management -->
  <!-- Search -->
  <select id="selectSalesPlanSummaryHeader" parameterType="Map" resultType="egovMap">
    SELECT TEAM
    , TYPE_NAME
    , M0
    , M1
    , M2
    , M3
    , M4
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W1_WEEK_SEQ ,1,5) ELSE SUBSTR(W1_WEEK_SEQ ,1,3) END) AS W1_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W2_WEEK_SEQ ,1,5) ELSE SUBSTR(W2_WEEK_SEQ ,1,3) END) AS W2_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W3_WEEK_SEQ ,1,5) ELSE SUBSTR(W3_WEEK_SEQ ,1,3) END) AS W3_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W4_WEEK_SEQ ,1,5) ELSE SUBSTR(W4_WEEK_SEQ ,1,3) END) AS W4_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W5_WEEK_SEQ ,1,5) ELSE SUBSTR(W5_WEEK_SEQ ,1,3) END) AS W5_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W6_WEEK_SEQ ,1,5) ELSE SUBSTR(W6_WEEK_SEQ ,1,3) END) AS W6_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W7_WEEK_SEQ ,1,5) ELSE SUBSTR(W7_WEEK_SEQ ,1,3) END) AS W7_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W8_WEEK_SEQ ,1,5) ELSE SUBSTR(W8_WEEK_SEQ ,1,3) END) AS W8_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W9_WEEK_SEQ ,1,5) ELSE SUBSTR(W9_WEEK_SEQ ,1,3) END) AS W9_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W10_WEEK_SEQ,1,5) ELSE SUBSTR(W10_WEEK_SEQ,1,3) END) AS W10_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W11_WEEK_SEQ,1,5) ELSE SUBSTR(W11_WEEK_SEQ,1,3) END) AS W11_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W12_WEEK_SEQ,1,5) ELSE SUBSTR(W12_WEEK_SEQ,1,3) END) AS W12_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W13_WEEK_SEQ,1,5) ELSE SUBSTR(W13_WEEK_SEQ,1,3) END) AS W13_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W14_WEEK_SEQ,1,5) ELSE SUBSTR(W14_WEEK_SEQ,1,3) END) AS W14_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W15_WEEK_SEQ,1,5) ELSE SUBSTR(W15_WEEK_SEQ,1,3) END) AS W15_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W16_WEEK_SEQ,1,5) ELSE SUBSTR(W16_WEEK_SEQ,1,3) END) AS W16_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W17_WEEK_SEQ,1,5) ELSE SUBSTR(W17_WEEK_SEQ,1,3) END) AS W17_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W18_WEEK_SEQ,1,5) ELSE SUBSTR(W18_WEEK_SEQ,1,3) END) AS W18_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W19_WEEK_SEQ,1,5) ELSE SUBSTR(W19_WEEK_SEQ,1,3) END) AS W19_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W20_WEEK_SEQ,1,5) ELSE SUBSTR(W20_WEEK_SEQ,1,3) END) AS W20_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W21_WEEK_SEQ,1,5) ELSE SUBSTR(W21_WEEK_SEQ,1,3) END) AS W21_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W22_WEEK_SEQ,1,5) ELSE SUBSTR(W22_WEEK_SEQ,1,3) END) AS W22_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W23_WEEK_SEQ,1,5) ELSE SUBSTR(W23_WEEK_SEQ,1,3) END) AS W23_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W24_WEEK_SEQ,1,5) ELSE SUBSTR(W24_WEEK_SEQ,1,3) END) AS W24_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W25_WEEK_SEQ,1,5) ELSE SUBSTR(W25_WEEK_SEQ,1,3) END) AS W25_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W26_WEEK_SEQ,1,5) ELSE SUBSTR(W26_WEEK_SEQ,1,3) END) AS W26_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W27_WEEK_SEQ,1,5) ELSE SUBSTR(W27_WEEK_SEQ,1,3) END) AS W27_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W28_WEEK_SEQ,1,5) ELSE SUBSTR(W28_WEEK_SEQ,1,3) END) AS W28_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W29_WEEK_SEQ,1,5) ELSE SUBSTR(W29_WEEK_SEQ,1,3) END) AS W29_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W30_WEEK_SEQ,1,5) ELSE SUBSTR(W30_WEEK_SEQ,1,3) END) AS W30_WEEK_SEQ
    FROM (
    SELECT *
    FROM (
    SELECT DECODE(RNO, 1, '1', 2, '2', 3, '3', 4, '4', 5, '5', 6, '6', 7, '7', 8, '8', 9, '9', 10, '10'
    , 11, '11', 12, '12', 13, '13', 14, '14', 15, '15', 16, '16', 17, '17', 18, '18', 19, '19', 20, '20'
    , 21, '21', 22, '22', 23, '23', 24, '24', 25, '25', 26, '26', 27, '27', 28, '28', 29, '29', 30, '30') AS RNO
    , WEEK_SEQ
    , TEAM
    , TYPE_NAME
    , M0
    , M1
    , M2
    , M3
    , M4
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY Z.USE_YN ORDER BY Z.CAL_ID) AS RNO
    , DECODE(LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)
    , NULL
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || '9'
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W'|| LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)) AS WEEK_SEQ
    , 'team' AS TEAM
    , 'typeName' AS TYPE_NAME
    , 'm0' AS M0
    , 'm1' AS M1
    , 'm2' AS M2
    , 'm3' AS M3
    , 'm4' AS M4
    FROM SCM0018M Z
    WHERE Z.SCM_YYYYMM BETWEEN #{headFrom} AND #{headTo}
    AND Z.USE_YN = 'Y'
    )
    )
    PIVOT (
    MAX(WEEK_SEQ) WEEK_SEQ
    FOR RNO IN (1 AS W1, 2 AS W2, 3 AS W3, 4 AS W4, 5 AS W5, 6 AS W6, 7 AS W7, 8 AS W8, 9 AS W9, 10 AS W10
    , 11 AS W11, 12 AS W12, 13 AS W13, 14 AS W14, 15 AS W15, 16 AS W16, 17 AS W17, 18 AS W18, 19 AS W19, 20 AS W20
    , 21 AS W21, 22 AS W22, 23 AS W23, 24 AS W24, 25 AS W25, 26 AS W26, 27 AS W27, 28 AS W28, 29 AS W29, 30 AS W30)
    )
    )
  </select>
  <select id="selectSalesPlanHeader" parameterType="Map" resultType="egovMap">
    SELECT PLAN_ID
    , PLAN_DTL_ID
    , PLAN_STUS_ID
    , STOCK
    , TEAM
    , TYPE_ID
    , TYPE_NAME
    , CATEGORY_ID
    , CATEGORY_NAME
    , CODE
    , NAME
    , PRE_M3_ISS_AVG
    , MONTHLY
    , PRE_M1_ORD_SUM
    , M0_EXP
    , M0_ORD_SUM
    , M0
    , M1
    , M2
    , M3
    , M4
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W1_WEEK_SEQ ,1,5) ELSE SUBSTR(W1_WEEK_SEQ ,1,3) END) AS W1_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W2_WEEK_SEQ ,1,5) ELSE SUBSTR(W2_WEEK_SEQ ,1,3) END) AS W2_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W3_WEEK_SEQ ,1,5) ELSE SUBSTR(W3_WEEK_SEQ ,1,3) END) AS W3_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W4_WEEK_SEQ ,1,5) ELSE SUBSTR(W4_WEEK_SEQ ,1,3) END) AS W4_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W5_WEEK_SEQ ,1,5) ELSE SUBSTR(W5_WEEK_SEQ ,1,3) END) AS W5_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W6_WEEK_SEQ ,1,5) ELSE SUBSTR(W6_WEEK_SEQ ,1,3) END) AS W6_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W7_WEEK_SEQ ,1,5) ELSE SUBSTR(W7_WEEK_SEQ ,1,3) END) AS W7_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W8_WEEK_SEQ ,1,5) ELSE SUBSTR(W8_WEEK_SEQ ,1,3) END) AS W8_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W9_WEEK_SEQ ,1,5) ELSE SUBSTR(W9_WEEK_SEQ ,1,3) END) AS W9_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W10_WEEK_SEQ,1,5) ELSE SUBSTR(W10_WEEK_SEQ,1,3) END) AS W10_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W11_WEEK_SEQ,1,5) ELSE SUBSTR(W11_WEEK_SEQ,1,3) END) AS W11_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W12_WEEK_SEQ,1,5) ELSE SUBSTR(W12_WEEK_SEQ,1,3) END) AS W12_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W13_WEEK_SEQ,1,5) ELSE SUBSTR(W13_WEEK_SEQ,1,3) END) AS W13_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W14_WEEK_SEQ,1,5) ELSE SUBSTR(W14_WEEK_SEQ,1,3) END) AS W14_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W15_WEEK_SEQ,1,5) ELSE SUBSTR(W15_WEEK_SEQ,1,3) END) AS W15_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W16_WEEK_SEQ,1,5) ELSE SUBSTR(W16_WEEK_SEQ,1,3) END) AS W16_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W17_WEEK_SEQ,1,5) ELSE SUBSTR(W17_WEEK_SEQ,1,3) END) AS W17_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W18_WEEK_SEQ,1,5) ELSE SUBSTR(W18_WEEK_SEQ,1,3) END) AS W18_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W19_WEEK_SEQ,1,5) ELSE SUBSTR(W19_WEEK_SEQ,1,3) END) AS W19_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W20_WEEK_SEQ,1,5) ELSE SUBSTR(W20_WEEK_SEQ,1,3) END) AS W20_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W21_WEEK_SEQ,1,5) ELSE SUBSTR(W21_WEEK_SEQ,1,3) END) AS W21_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W22_WEEK_SEQ,1,5) ELSE SUBSTR(W22_WEEK_SEQ,1,3) END) AS W22_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W23_WEEK_SEQ,1,5) ELSE SUBSTR(W23_WEEK_SEQ,1,3) END) AS W23_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W24_WEEK_SEQ,1,5) ELSE SUBSTR(W24_WEEK_SEQ,1,3) END) AS W24_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W25_WEEK_SEQ,1,5) ELSE SUBSTR(W25_WEEK_SEQ,1,3) END) AS W25_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W26_WEEK_SEQ,1,5) ELSE SUBSTR(W26_WEEK_SEQ,1,3) END) AS W26_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W27_WEEK_SEQ,1,5) ELSE SUBSTR(W27_WEEK_SEQ,1,3) END) AS W27_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W28_WEEK_SEQ,1,5) ELSE SUBSTR(W28_WEEK_SEQ,1,3) END) AS W28_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W29_WEEK_SEQ,1,5) ELSE SUBSTR(W29_WEEK_SEQ,1,3) END) AS W29_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W30_WEEK_SEQ,1,5) ELSE SUBSTR(W30_WEEK_SEQ,1,3) END) AS W30_WEEK_SEQ
    FROM (
    SELECT *
    FROM (
    SELECT DECODE(RNO, 1, '1', 2, '2', 3, '3', 4, '4', 5, '5', 6, '6', 7, '7', 8, '8', 9, '9', 10, '10'
    , 11, '11', 12, '12', 13, '13', 14, '14', 15, '15', 16, '16', 17, '17', 18, '18', 19, '19', 20, '20'
    , 21, '21', 22, '22', 23, '23', 24, '24', 25, '25', 26, '26', 27, '27', 28, '28', 29, '29', 30, '30') AS RNO
    , WEEK_SEQ
    , PLAN_ID
    , PLAN_DTL_ID
    , PLAN_STUS_ID
    , STOCK
    , TEAM
    , TYPE_ID
    , TYPE_NAME
    , CATEGORY_ID
    , CATEGORY_NAME
    , CODE
    , NAME
    , PRE_M3_ISS_AVG
    , MONTHLY
    , PRE_M1_ORD_SUM
    , M0_EXP
    , M0_ORD_SUM
    , M0
    , M1
    , M2
    , M3
    , M4
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY Z.USE_YN ORDER BY Z.CAL_ID) AS RNO
    , DECODE(LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)
    , NULL
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || '9'
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W'|| LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)) AS WEEK_SEQ
    , 'planId' AS PLAN_ID
    , 'planDtlId' AS PLAN_DTL_ID
    , 'planStusId' AS PLAN_STUS_ID
    , 'stock' AS STOCK
    , 'team' AS TEAM
    , 'typeId' AS TYPE_ID
    , 'typeName' AS TYPE_NAME
    , 'categoryId' AS CATEGORY_ID
    , 'categoryName' AS CATEGORY_NAME
    , 'code' AS CODE
    , 'name' AS NAME
    , 'monthly' AS MONTHLY
    , 'preM3IssAvg' AS PRE_M3_ISS_AVG
    , 'preM1OrdSum' AS PRE_M1_ORD_SUM
    , 'm0Exp' AS M0_EXP
    , 'm0OrdSum' AS M0_ORD_SUM
    , 'm0' AS M0
    , 'm1' AS M1
    , 'm2' AS M2
    , 'm3' AS M3
    , 'm4' AS M4
    FROM SCM0018M Z
    WHERE Z.SCM_YYYYMM BETWEEN #{headFrom} AND #{headTo}
    AND Z.USE_YN = 'Y'
    )
    )
    PIVOT (
    MAX(WEEK_SEQ) WEEK_SEQ
    FOR RNO IN (1 AS W1, 2 AS W2, 3 AS W3, 4 AS W4, 5 AS W5, 6 AS W6, 7 AS W7, 8 AS W8, 9 AS W9, 10 AS W10
    , 11 AS W11, 12 AS W12, 13 AS W13, 14 AS W14, 15 AS W15, 16 AS W16, 17 AS W17, 18 AS W18, 19 AS W19, 20 AS W20
    , 21 AS W21, 22 AS W22, 23 AS W23, 24 AS W24, 25 AS W25, 26 AS W26, 27 AS W27, 28 AS W28, 29 AS W29, 30 AS W30)
    )
    )
  </select>
  <select id="selectSalesPlanInfo" parameterType="Map" resultType="egovMap">
    SELECT '1' AS GBN
    , NVL((
    SELECT SUM(Z.PLAN_STUS_ID)
    FROM SCM0001M Z
    WHERE Z.PLAN_YEAR = #{planYear}
    AND Z.PLAN_WEEK = #{planWeek}
    <if test="team != null and team != ''">
      AND Z.TEAM = #{team}
    </if>
    ), 0) AS PLAN_STUS_ID
    FROM DUAL
    UNION ALL
    SELECT '2' AS GBN
    , NVL((
    SELECT SUM(Z.PLAN_STUS_ID)
    FROM SCM0001M Z
    WHERE Z.PLAN_YEAR = #{befWeekYear}
    AND Z.PLAN_WEEK = #{befWeekWeek}
    <if test="team != null and team != ''">
      AND Z.TEAM = #{team}
    </if>
    ), 0) AS PLAN_STUS_ID
    FROM DUAL
    UNION ALL
    SELECT '3' AS GBN
    , NVL((
    SELECT SUM(Z.PLAN_STUS_ID)
    FROM SCM0005M Z
    WHERE Z.PLAN_YEAR = #{planYear}
    AND Z.PLAN_WEEK = #{planWeek}
    ), 0) AS PLAN_STUS_ID
    FROM DUAL
  </select>
  <select id="selectSalesPlanList" parameterType="Map" resultType="egovMap">
    SELECT A.PLAN_ID
    , B.PLAN_DTL_ID
    , A.PLAN_STUS_ID
    , A.TEAM
    , D.STK_TYPE_ID AS TYPE_ID
    , E.CODE_NAME AS CATEGORY_NAME
    , D.STK_CTGRY_ID AS CATEGORY_ID
    , F.CODE_NAME AS TYPE_NAME
    , B.STOCK_CODE AS CODE
    , D.STK_DESC AS NAME
    , NVL(B.PRE_M3_ISS_AVG, 0) AS PRE_M3_ISS_AVG
    , NVL(B.PRE_M1_ORD_SUM, 0) AS PRE_M1_ORD_SUM
    , NVL(B.M0_ORD_SUM, 0) + NVL(B.M0, 0) AS M0_EXP
    , NVL(B.M0_ORD_SUM, 0) AS M0_ORD_SUM
    , NVL(B.M0, 0) AS M0
    , NVL(B.M1, 0) AS M1
    , NVL(B.M2, 0) AS M2
    , NVL(B.M3, 0) AS M3
    , NVL(B.M4, 0) AS M4
    , NVL(B.W01, 0) AS W01
    , NVL(B.W02, 0) AS W02
    , NVL(B.W03, 0) AS W03
    , NVL(B.W04, 0) AS W04
    , NVL(B.W05, 0) AS W05
    , NVL(B.W06, 0) AS W06
    , NVL(B.W07, 0) AS W07
    , NVL(B.W08, 0) AS W08
    , NVL(B.W09, 0) AS W09
    , NVL(B.W10, 0) AS W10
    , NVL(B.W11, 0) AS W11
    , NVL(B.W12, 0) AS W12
    , NVL(B.W13, 0) AS W13
    , NVL(B.W14, 0) AS W14
    , NVL(B.W15, 0) AS W15
    , NVL(B.W16, 0) AS W16
    , NVL(B.W17, 0) AS W17
    , NVL(B.W18, 0) AS W18
    , NVL(B.W19, 0) AS W19
    , NVL(B.W20, 0) AS W20
    , NVL(B.W21, 0) AS W21
    , NVL(B.W22, 0) AS W22
    , NVL(B.W23, 0) AS W23
    , NVL(B.W24, 0) AS W24
    , NVL(B.W25, 0) AS W25
    , NVL(B.W26, 0) AS W26
    , NVL(B.W27, 0) AS W27
    , NVL(B.W28, 0) AS W28
    , NVL(B.W29, 0) AS W29
    , NVL(B.W30, 0) AS W30
    , NVL(B.WS1, 0) AS WS1
    , NVL(B.WS2, 0) AS WS2
    , NVL(B.WS3, 0) AS WS3
    , NVL(B.WS4, 0) AS WS4
    , NVL(B.WS5, 0) AS WS5
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    LEFT OUTER JOIN SCM0008M C ON (B.STOCK_CODE = C.STOCK_CODE)
    LEFT OUTER JOIN SYS0026M D ON (C.STOCK_ID = D.STK_ID)
    LEFT OUTER JOIN SYS0013M E ON (D.STK_CTGRY_ID = E.CODE_ID AND E.CODE_MASTER_ID = 11) /* 11 : Stock Category */
    LEFT OUTER JOIN SYS0013M F ON (D.STK_TYPE_ID = F.CODE_ID AND F.CODE_MASTER_ID = 15) /* 15 : Spare Part Type */
    WHERE A.PLAN_YEAR = #{scmYearCbBox}
    AND A.PLAN_WEEK = #{scmWeekCbBox}
    <if test="scmTeamCbBox != null and scmTeamCbBox != ''">
      AND A.TEAM = #{scmTeamCbBox}
    </if>
    <if test="scmStockTypeCbBox != null and ! scmStockTypeCbBox.isEmpty">
      AND D.STK_TYPE_ID IN
      <foreach item="item" collection="scmStockTypeCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="scmStockCategoryCbBox != null and ! scmStockCategoryCbBox.isEmpty">
      AND D.STK_CTGRY_ID IN
      <foreach item="item" collection="scmStockCategoryCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="scmStockCodeCbBox != null and ! scmStockCodeCbBox.isEmpty">
      AND D.STK_CODE IN
      <foreach item="item" collection="scmStockCodeCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    ORDER BY B.STOCK_CODE
  </select>
  <select id="selectSalesPlanListAll" parameterType="Map" resultType="egovMap">
    SELECT 'All' AS TEAM
    , D.STK_TYPE_ID AS TYPE_ID
    , E.CODE_NAME AS CATEGORY_NAME
    , D.STK_CTGRY_ID AS CATEGORY_ID
    , F.CODE_NAME AS TYPE_NAME
    , B.STOCK_CODE AS CODE
    , D.STK_DESC AS NAME
    , SUM(NVL(B.PRE_M3_ISS_AVG, 0)) AS PRE_M3_ISS_AVG
    , SUM(NVL(B.PRE_M1_ORD_SUM, 0)) AS PRE_M1_ORD_SUM
    , SUM(NVL(B.M0_ORD_SUM, 0) + NVL(B.M0, 0)) AS M0_EXP
    , SUM(NVL(B.M0_ORD_SUM, 0)) AS M0_ORD_SUM
    , SUM(NVL(B.M0, 0)) AS M0
    , SUM(NVL(B.M1, 0)) AS M1
    , SUM(NVL(B.M2, 0)) AS M2
    , SUM(NVL(B.M3, 0)) AS M3
    , SUM(NVL(B.M4, 0)) AS M4
    , SUM(NVL(B.W01, 0)) AS W01
    , SUM(NVL(B.W02, 0)) AS W02
    , SUM(NVL(B.W03, 0)) AS W03
    , SUM(NVL(B.W04, 0)) AS W04
    , SUM(NVL(B.W05, 0)) AS W05
    , SUM(NVL(B.W06, 0)) AS W06
    , SUM(NVL(B.W07, 0)) AS W07
    , SUM(NVL(B.W08, 0)) AS W08
    , SUM(NVL(B.W09, 0)) AS W09
    , SUM(NVL(B.W10, 0)) AS W10
    , SUM(NVL(B.W11, 0)) AS W11
    , SUM(NVL(B.W12, 0)) AS W12
    , SUM(NVL(B.W13, 0)) AS W13
    , SUM(NVL(B.W14, 0)) AS W14
    , SUM(NVL(B.W15, 0)) AS W15
    , SUM(NVL(B.W16, 0)) AS W16
    , SUM(NVL(B.W17, 0)) AS W17
    , SUM(NVL(B.W18, 0)) AS W18
    , SUM(NVL(B.W19, 0)) AS W19
    , SUM(NVL(B.W20, 0)) AS W20
    , SUM(NVL(B.W21, 0)) AS W21
    , SUM(NVL(B.W22, 0)) AS W22
    , SUM(NVL(B.W23, 0)) AS W23
    , SUM(NVL(B.W24, 0)) AS W24
    , SUM(NVL(B.W25, 0)) AS W25
    , SUM(NVL(B.W26, 0)) AS W26
    , SUM(NVL(B.W27, 0)) AS W27
    , SUM(NVL(B.W28, 0)) AS W28
    , SUM(NVL(B.W29, 0)) AS W29
    , SUM(NVL(B.W30, 0)) AS W30
    , SUM(NVL(B.WS1, 0)) AS WS1
    , SUM(NVL(B.WS2, 0)) AS WS2
    , SUM(NVL(B.WS3, 0)) AS WS3
    , SUM(NVL(B.WS4, 0)) AS WS4
    , SUM(NVL(B.WS5, 0)) AS WS5
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    LEFT OUTER JOIN SCM0008M C ON (B.STOCK_CODE = C.STOCK_CODE)
    LEFT OUTER JOIN SYS0026M D ON (C.STOCK_ID = D.STK_ID)
    LEFT OUTER JOIN SYS0013M E ON (D.STK_CTGRY_ID = E.CODE_ID AND E.CODE_MASTER_ID = 11) /* 11 : Stock Category */
    LEFT OUTER JOIN SYS0013M F ON (D.STK_TYPE_ID = F.CODE_ID AND F.CODE_MASTER_ID = 15) /* 15 : Spare Part Type */
    WHERE A.PLAN_YEAR = #{scmYearCbBox}
    AND A.PLAN_WEEK = #{scmWeekCbBox}
    <if test="scmStockTypeCbBox != null and ! scmStockTypeCbBox.isEmpty">
      AND D.STK_TYPE_ID IN
      <foreach item="item" collection="scmStockTypeCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="scmStockCategoryCbBox != null and ! scmStockCategoryCbBox.isEmpty">
      AND D.STK_CTGRY_ID IN
      <foreach item="item" collection="scmStockCategoryCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="scmStockCodeCbBox != null and ! scmStockCodeCbBox.isEmpty">
      AND D.STK_CODE IN
      <foreach item="item" collection="scmStockCodeCbBox" index="index" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    GROUP BY D.STK_TYPE_ID
    , E.CODE_NAME
    , D.STK_CTGRY_ID
    , F.CODE_NAME
    , B.STOCK_CODE
    , D.STK_DESC
    ORDER BY B.STOCK_CODE
  </select>

  <!-- Create -->
  <insert id="insertSalesPlanMaster" parameterType="Map">
    INSERT INTO SCM0001M
    (
    PLAN_ID
    , PLAN_YEAR
    , PLAN_MONTH
    , PLAN_WEEK
    , TEAM
    , CRT_DT
    , CRT_USER_ID
    )
    VALUES
    (
    SCM0001M_PLAN_ID_SEQ.NEXTVAL
    , #{planYear}
    , #{planMonth}
    , #{planWeek}
    , #{team}
    , SYSDATE
    , #{crtUserId}
    )
  </insert>
  <select id="selectGetSalesPlanId" parameterType="Map" resultType="egovMap">
    SELECT A.PLAN_ID
    FROM SCM0001M A
    WHERE A.PLAN_YEAR = #{scmYearCbBox}
    AND A.PLAN_WEEK = #{scmWeekCbBox}
    AND A.TEAM = #{scmTeamCbBox}
  </select>
  <insert id="insertSalesPlanDetail" parameterType="Map">
    INSERT INTO SCM0002D
    (
    PLAN_ID
    , PLAN_DTL_ID
    , STOCK_CODE
    , PRE_M3_ISS_AVG
    , PRE_M1_ORD_SUM
    , CRT_USER_ID
    )
    SELECT #{planId}
    , SCM0002D_PLAN_DTL_ID_SEQ.NEXTVAL
    , A.STOCK_CODE
    , ROUND((A.M3 + A.M2 + A.M1) / A.DIV_NO) AS PRE_M3_ISS_AVG
    , A.PRE_M1_ORD_SUM
    , #{crtUserId}
    FROM (
    SELECT Z.STOCK_CODE
    , CASE WHEN Z.M3 = 0 THEN CASE WHEN Z.M2 = 0 THEN 1 ELSE 2 END
    ELSE 3 END AS DIV_NO
    , Z.M3, Z.M2, Z.M1
    , Z.PRE_M1_ORD_SUM
    --, Z.M0_ORD_SUM
    FROM (
    SELECT G.STOCK_CODE
    , NVL((SELECT SUM(H.ISS_QTY) FROM SCM0051S H WHERE H.ISS_DT BETWEEN #{m3From} AND #{m3To} AND H.STOCK_CODE = G.STOCK_CODE AND H.TEAM = #{team}), 0) AS M3
    , NVL((SELECT SUM(H.ISS_QTY) FROM SCM0051S H WHERE H.ISS_DT BETWEEN #{m2From} AND #{m2To} AND H.STOCK_CODE = G.STOCK_CODE AND H.TEAM = #{team}), 0) AS M2
    , NVL((SELECT SUM(H.ISS_QTY) FROM SCM0051S H WHERE H.ISS_DT BETWEEN #{m1From} AND #{m1To} AND H.STOCK_CODE = G.STOCK_CODE AND H.TEAM = #{team}), 0) AS M1
    , NVL((SELECT SUM(H.ORD_QTY) FROM SCM0050S H WHERE H.ORD_DT BETWEEN #{m1From} AND #{m1To} AND H.STOCK_CODE = G.STOCK_CODE AND H.TEAM = #{team}), 0) AS PRE_M1_ORD_SUM
    FROM SCM0008M G
    LEFT JOIN SYS0026M C ON (G.STOCK_CODE = C.STK_CODE)
    WHERE C.STUS_CODE_ID = 1
    AND G.IS_TRGET = 1
    AND TO_CHAR(G.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]>
    #{endDt}
    ) Z
    ) A
  </insert>
  <select id="selectSalesPlanForUpdate" parameterType="Map" resultType="egovMap">
    SELECT B.PLAN_ID
    , B.PLAN_DTL_ID
    , A.STOCK_CODE
    , C.STK_TYPE_ID
    , NVL(B.W01, 0) AS W01
    , NVL(B.W02, 0) AS W02
    , NVL(B.W03, 0) AS W03
    , NVL(B.W04, 0) AS W04
    , NVL(B.W05, 0) AS W05
    , NVL(B.W06, 0) AS W06
    , NVL(B.W07, 0) AS W07
    , NVL(B.W08, 0) AS W08
    , NVL(B.W09, 0) AS W09
    , NVL(B.W10, 0) AS W10
    , NVL(B.W11, 0) AS W11
    , NVL(B.W12, 0) AS W12
    , NVL(B.W13, 0) AS W13
    , NVL(B.W14, 0) AS W14
    , NVL(B.W15, 0) AS W15
    , NVL(B.W16, 0) AS W16
    , NVL(B.W17, 0) AS W17
    , NVL(B.W18, 0) AS W18
    , NVL(B.W19, 0) AS W19
    , NVL(B.W20, 0) AS W20
    , NVL(B.W21, 0) AS W21
    , NVL(B.W22, 0) AS W22
    , NVL(B.W23, 0) AS W23
    , NVL(B.W24, 0) AS W24
    , NVL(B.W25, 0) AS W25
    , NVL(B.W26, 0) AS W26
    , NVL(B.W27, 0) AS W27
    , NVL(B.W28, 0) AS W28
    , NVL(B.W29, 0) AS W29
    , NVL(B.W30, 0) AS W30
    , NVL(B.WS1, 0) AS WS1
    , NVL(B.WS2, 0) AS WS2
    , NVL(B.WS3, 0) AS WS3
    , NVL(B.WS4, 0) AS WS4
    , NVL(B.WS5, 0) AS WS5
    FROM SCM0008M A
    LEFT OUTER JOIN (
    SELECT Z.PLAN_ID
    , X.PLAN_DTL_ID
    , X.STOCK_CODE
    , NVL(X.W01, 0) AS W01
    , NVL(X.W02, 0) AS W02
    , NVL(X.W03, 0) AS W03
    , NVL(X.W04, 0) AS W04
    , NVL(X.W05, 0) AS W05
    , NVL(X.W06, 0) AS W06
    , NVL(X.W07, 0) AS W07
    , NVL(X.W08, 0) AS W08
    , NVL(X.W09, 0) AS W09
    , NVL(X.W10, 0) AS W10
    , NVL(X.W11, 0) AS W11
    , NVL(X.W12, 0) AS W12
    , NVL(X.W13, 0) AS W13
    , NVL(X.W14, 0) AS W14
    , NVL(X.W15, 0) AS W15
    , NVL(X.W16, 0) AS W16
    , NVL(X.W17, 0) AS W17
    , NVL(X.W18, 0) AS W18
    , NVL(X.W19, 0) AS W19
    , NVL(X.W20, 0) AS W20
    , NVL(X.W21, 0) AS W21
    , NVL(X.W22, 0) AS W22
    , NVL(X.W23, 0) AS W23
    , NVL(X.W24, 0) AS W24
    , NVL(X.W25, 0) AS W25
    , NVL(X.W26, 0) AS W26
    , NVL(X.W27, 0) AS W27
    , NVL(X.W28, 0) AS W28
    , NVL(X.W29, 0) AS W29
    , NVL(X.W30, 0) AS W30
    , NVL(X.WS1, 0) AS WS1
    , NVL(X.WS2, 0) AS WS2
    , NVL(X.WS3, 0) AS WS3
    , NVL(X.WS4, 0) AS WS4
    , NVL(X.WS5, 0) AS WS5
    FROM SCM0001M Z
    LEFT OUTER JOIN SCM0002D X ON (Z.PLAN_ID = X.PLAN_ID)
    WHERE Z.PLAN_YEAR = #{year}
    AND Z.PLAN_WEEK = #{week}
    AND Z.TEAM = #{team}
    ) B ON (A.STOCK_CODE = B.STOCK_CODE)
    LEFT OUTER JOIN SYS0026M C ON (A.STOCK_CODE = C.STK_CODE)
    WHERE C.STUS_CODE_ID = 1
    AND A.IS_TRGET = 1
    AND TO_CHAR(A.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]>
    #{endDt}
    ORDER BY A.STOCK_CODE
  </select>
  <select id="selectThisMonthOrder" parameterType="Map" resultType="egovMap">
    SELECT A.STOCK_CODE
    , NVL(SUM(B.W01), 0) AS W01
    , NVL(SUM(B.W02), 0) AS W02
    , NVL(SUM(B.W03), 0) AS W03
    , NVL(SUM(B.W04), 0) AS W04
    , NVL(SUM(B.W05), 0) AS W05
    , NVL(SUM(B.W06), 0) AS W06
    FROM SCM0008M A
    LEFT JOIN SYS0026M C ON (A.STOCK_CODE = C.STK_CODE)
    LEFT OUTER JOIN (
    SELECT Z.STOCK_CODE
    , CASE WHEN X.RN = 1 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W01
    , CASE WHEN X.RN = 2 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W02
    , CASE WHEN X.RN = 3 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W03
    , CASE WHEN X.RN = 4 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W04
    , CASE WHEN X.RN = 5 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W05
    , CASE WHEN X.RN = 6 THEN (SELECT NVL(SUM(ORD_QTY), 0) FROM SCM0050S WHERE ORD_DT BETWEEN X.SCM_START AND X.SCM_END AND STOCK_CODE = Z.STOCK_CODE AND TEAM = #{team}) ELSE 0 END AS W06
    FROM (
    SELECT B.STOCK_CODE
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    WHERE A.PLAN_YEAR = #{year}
    AND A.PLAN_WEEK = #{week}
    AND A.TEAM = #{team}
    ) Z
    , (
    SELECT ROW_NUMBER() OVER (PARTITION BY SCM_MONTH ORDER BY CAL_ID) AS RN
    , TO_CHAR(SCM_WEEK_START, 'YYYYMMDD') AS SCM_START
    , TO_CHAR(SCM_WEEK_END, 'YYYYMMDD') AS SCM_END
    FROM SCM0018M G
    , (
    SELECT (
    SELECT CAL_ID
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY SCM_YEAR ORDER BY CAL_ID) AS RN
    , CAL_ID
    FROM SCM0018M
    WHERE SCM_YEAR = #{planYear}
    AND SCM_MONTH = #{planMonth}
    AND SCM_WEEK <![CDATA[ < ]]>
    #{planWeek}
    )
    WHERE RN = 1
    ) AS FROM_CAL
    , (
    SELECT CAL_ID
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY SCM_YEAR ORDER BY CAL_ID DESC) AS RN
    , CAL_ID
    FROM SCM0018M
    WHERE SCM_YEAR = #{planYear}
    AND SCM_MONTH = #{planMonth}
    AND SCM_WEEK <![CDATA[ < ]]>
    #{planWeek}
    )
    WHERE RN = 1
    ) AS TO_CAL
    FROM DUAL
    ) H
    WHERE G.CAL_ID BETWEEN H.FROM_CAL AND H.TO_CAL
    ) X
    ) B ON (A.STOCK_CODE = B.STOCK_CODE)
    WHERE C.STUS_CODE_ID = 1
    AND A.IS_TRGET = 1
    AND TO_CHAR(A.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]>
    #{endDt}
    GROUP BY A.STOCK_CODE
    ORDER BY A.STOCK_CODE
  </select>
  <select id="selectFilterPlan" parameterType="Map" resultType="egovMap">
    SELECT B.PLAN_ID
    , B.PLAN_DTL_ID
    , A.STOCK_CODE
    , B.M0_QTY
    , B.M1_QTY
    , B.M2_QTY
    , B.M3_QTY
    , B.M4_QTY
    FROM SCM0008M A
    LEFT JOIN SYS0026M S26 ON S26.STK_CODE = A.STOCK_CODE
    LEFT OUTER JOIN (
    SELECT Z.PLAN_ID
    , X.PLAN_DTL_ID
    , X.STOCK_CODE
    , NVL(Y.M0_QTY, 0) AS M0_QTY
    , NVL(Y.M1_QTY, 0) AS M1_QTY
    , NVL(Y.M2_QTY, 0) AS M2_QTY
    , NVL(Y.M3_QTY, 0) AS M3_QTY
    , NVL(Y.M4_QTY, 0) AS M4_QTY
    FROM SCM0001M Z
    LEFT OUTER JOIN SCM0002D X ON (Z.PLAN_ID = X.PLAN_ID)
    LEFT OUTER JOIN SCM0054S Y ON (Z.PLAN_YEAR = Y.PLAN_YEAR AND Z.PLAN_MONTH = Y.PLAN_MONTH AND Z.TEAM = Y.TEAM AND X.STOCK_CODE = Y.STOCK_CODE)
    WHERE Z.PLAN_YEAR = #{planYear}
    AND Z.PLAN_WEEK = #{planWeek}
    AND Z.TEAM = #{team}
    ) B ON (A.STOCK_CODE = B.STOCK_CODE)
    WHERE S26.STUS_CODE_ID = 1
    AND A.IS_TRGET = 1
    AND TO_CHAR(A.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]>
    #{endDt}
    ORDER BY A.STOCK_CODE
  </select>
  <delete id="deleteSalesPlanDetail" parameterType="Map">
    DELETE FROM SCM0002D WHERE PLAN_ID = (SELECT PLAN_ID FROM SCM0001M WHERE PLAN_YEAR = #{scmYearCbBox} AND PLAN_WEEK = #{scmWeekCbBox} AND TEAM = #{scmTeamCbBox})
  </delete>
  <delete id="deleteSalesPlanMaster" parameterType="Map">
    DELETE FROM SCM0001M WHERE PLAN_YEAR = #{scmYearCbBox} AND PLAN_WEEK = #{scmWeekCbBox} AND TEAM = #{scmTeamCbBox}
  </delete>

  <!-- Save -->
  <update id="updateSalesPlanDetail" parameterType="Map">
    UPDATE SCM0002D
    SET UPD_DT = SYSDATE
    , UPD_USER_ID = #{updUserId}
    , M0_ORD_SUM = TO_NUMBER(REPLACE(#{m0OrdSum}, ','))
    , M0 = TO_NUMBER(REPLACE(#{m0}, ','))
    , M1 = TO_NUMBER(REPLACE(#{m1}, ','))
    , M2 = TO_NUMBER(REPLACE(#{m2}, ','))
    , M3 = TO_NUMBER(REPLACE(#{m3}, ','))
    , M4 = TO_NUMBER(REPLACE(#{m4}, ','))
    , W01 = TO_NUMBER(REPLACE(#{w01}, ','))
    , W02 = TO_NUMBER(REPLACE(#{w02}, ','))
    , W03 = TO_NUMBER(REPLACE(#{w03}, ','))
    , W04 = TO_NUMBER(REPLACE(#{w04}, ','))
    , W05 = TO_NUMBER(REPLACE(#{w05}, ','))
    , W06 = TO_NUMBER(REPLACE(#{w06}, ','))
    , W07 = TO_NUMBER(REPLACE(#{w07}, ','))
    , W08 = TO_NUMBER(REPLACE(#{w08}, ','))
    , W09 = TO_NUMBER(REPLACE(#{w09}, ','))
    , W10 = TO_NUMBER(REPLACE(#{w10}, ','))
    , W11 = TO_NUMBER(REPLACE(#{w11}, ','))
    , W12 = TO_NUMBER(REPLACE(#{w12}, ','))
    , W13 = TO_NUMBER(REPLACE(#{w13}, ','))
    , W14 = TO_NUMBER(REPLACE(#{w14}, ','))
    , W15 = TO_NUMBER(REPLACE(#{w15}, ','))
    , W16 = TO_NUMBER(REPLACE(#{w16}, ','))
    , W17 = TO_NUMBER(REPLACE(#{w17}, ','))
    , W18 = TO_NUMBER(REPLACE(#{w18}, ','))
    , W19 = TO_NUMBER(REPLACE(#{w19}, ','))
    , W20 = TO_NUMBER(REPLACE(#{w20}, ','))
    , W21 = TO_NUMBER(REPLACE(#{w21}, ','))
    , W22 = TO_NUMBER(REPLACE(#{w22}, ','))
    , W23 = TO_NUMBER(REPLACE(#{w23}, ','))
    , W24 = TO_NUMBER(REPLACE(#{w24}, ','))
    , W25 = TO_NUMBER(REPLACE(#{w25}, ','))
    , W26 = TO_NUMBER(REPLACE(#{w26}, ','))
    , W27 = TO_NUMBER(REPLACE(#{w27}, ','))
    , W28 = TO_NUMBER(REPLACE(#{w28}, ','))
    , W29 = TO_NUMBER(REPLACE(#{w29}, ','))
    , W30 = TO_NUMBER(REPLACE(#{w30}, ','))
    WHERE PLAN_DTL_ID = #{planDtlId}
  </update>

  <!-- Confirm & Unconfirm -->
  <update id="updateSalesPlanMaster" parameterType="Map">
    UPDATE SCM0001M
    SET PLAN_STUS_ID = #{planStusId}
    WHERE PLAN_ID = #{planId}
  </update>


  <select id="selectSalesPlanSummaryList" parameterType="Map" resultType="egovMap">
    SELECT A.TEAM
    , A.TYPE_NAME
    , A.M0, A.M1, A.M2, A.M3, A.M4
    , A.W01, A.W02, A.W03, A.W04, A.W05, A.W06, A.W07, A.W08, A.W09, A.W10
    , A.W11, A.W12, A.W13, A.W14, A.W15, A.W16, A.W17, A.W18, A.W19, A.W20
    , A.W21, A.W22, A.W23, A.W24, A.W25, A.W26, A.W27, A.W28, A.W29, A.W30
    FROM (
    SELECT 'DST' AS TEAM
    , C.STK_TYPE_ID AS TYPE_ID
    , D.CODE_NAME AS TYPE_NAME
    , SUM(B.M0_ORD_SUM) + SUM(B.M0) AS M0
    , SUM(B.M1) AS M1
    , SUM(B.M2) AS M2
    , SUM(B.M3) AS M3
    , SUM(B.M4) AS M4
    , SUM(B.W01) AS W01, SUM(B.W02) AS W02, SUM(B.W03) AS W03, SUM(B.W04) AS W04, SUM(B.W05) AS W05
    , SUM(B.W06) AS W06, SUM(B.W07) AS W07, SUM(B.W08) AS W08, SUM(B.W09) AS W09, SUM(B.W10) AS W10
    , SUM(B.W11) AS W11, SUM(B.W12) AS W12, SUM(B.W13) AS W13, SUM(B.W14) AS W14, SUM(B.W15) AS W15
    , SUM(B.W16) AS W16, SUM(B.W17) AS W17, SUM(B.W18) AS W18, SUM(B.W19) AS W19, SUM(B.W20) AS W20
    , SUM(B.W21) AS W21, SUM(B.W22) AS W22, SUM(B.W23) AS W23, SUM(B.W24) AS W24, SUM(B.W25) AS W25
    , SUM(B.W26) AS W26, SUM(B.W27) AS W27, SUM(B.W28) AS W28, SUM(B.W29) AS W29, SUM(B.W30) AS W30
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    LEFT OUTER JOIN SYS0026M C ON (B.STOCK_CODE = C.STK_CODE)
    LEFT OUTER JOIN SYS0013M D ON (C.STK_TYPE_ID = D.CODE_ID AND D.CODE_MASTER_ID = 15)
    WHERE A.PLAN_YEAR = #{planYear}
    AND A.PLAN_WEEK = #{planWeek}
    AND A.TEAM = 'DST'
    AND C.STK_TYPE_ID IN (61)
    GROUP BY C.STK_TYPE_ID, D.CODE_NAME
    UNION ALL
    SELECT 'CODY' AS TEAM
    , C.STK_TYPE_ID AS TYPE_ID
    , D.CODE_NAME AS TYPE_NAME
    , SUM(B.M0_ORD_SUM) + SUM(B.M0) AS M0
    , SUM(B.M1) AS M1
    , SUM(B.M2) AS M2
    , SUM(B.M3) AS M3
    , SUM(B.M4) AS M4
    , SUM(B.W01) AS W01, SUM(B.W02) AS W02, SUM(B.W03) AS W03, SUM(B.W04) AS W04, SUM(B.W05) AS W05
    , SUM(B.W06) AS W06, SUM(B.W07) AS W07, SUM(B.W08) AS W08, SUM(B.W09) AS W09, SUM(B.W10) AS W10
    , SUM(B.W11) AS W11, SUM(B.W12) AS W12, SUM(B.W13) AS W13, SUM(B.W14) AS W14, SUM(B.W15) AS W15
    , SUM(B.W16) AS W16, SUM(B.W17) AS W17, SUM(B.W18) AS W18, SUM(B.W19) AS W19, SUM(B.W20) AS W20
    , SUM(B.W21) AS W21, SUM(B.W22) AS W22, SUM(B.W23) AS W23, SUM(B.W24) AS W24, SUM(B.W25) AS W25
    , SUM(B.W26) AS W26, SUM(B.W27) AS W27, SUM(B.W28) AS W28, SUM(B.W29) AS W29, SUM(B.W30) AS W30
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    LEFT OUTER JOIN SYS0026M C ON (B.STOCK_CODE = C.STK_CODE)
    LEFT OUTER JOIN SYS0013M D ON (C.STK_TYPE_ID = D.CODE_ID AND D.CODE_MASTER_ID = 15)
    WHERE A.PLAN_YEAR = #{planYear}
    AND A.PLAN_WEEK = #{planWeek}
    AND A.TEAM = 'CODY'
    AND C.STK_TYPE_ID IN (61, 62)
    GROUP BY C.STK_TYPE_ID, D.CODE_NAME
    UNION ALL
    SELECT 'CS' AS TEAM
    , C.STK_TYPE_ID AS TYPE_ID
    , D.CODE_NAME AS TYPE_NAME
    , SUM(B.M0_ORD_SUM) + SUM(B.M0) AS M0
    , SUM(B.M1) AS M1
    , SUM(B.M2) AS M2
    , SUM(B.M3) AS M3
    , SUM(B.M4) AS M4
    , SUM(B.W01) AS W01, SUM(B.W02) AS W02, SUM(B.W03) AS W03, SUM(B.W04) AS W04, SUM(B.W05) AS W05
    , SUM(B.W06) AS W06, SUM(B.W07) AS W07, SUM(B.W08) AS W08, SUM(B.W09) AS W09, SUM(B.W10) AS W10
    , SUM(B.W11) AS W11, SUM(B.W12) AS W12, SUM(B.W13) AS W13, SUM(B.W14) AS W14, SUM(B.W15) AS W15
    , SUM(B.W16) AS W16, SUM(B.W17) AS W17, SUM(B.W18) AS W18, SUM(B.W19) AS W19, SUM(B.W20) AS W20
    , SUM(B.W21) AS W21, SUM(B.W22) AS W22, SUM(B.W23) AS W23, SUM(B.W24) AS W24, SUM(B.W25) AS W25
    , SUM(B.W26) AS W26, SUM(B.W27) AS W27, SUM(B.W28) AS W28, SUM(B.W29) AS W29, SUM(B.W30) AS W30
    FROM SCM0001M A
    LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
    LEFT OUTER JOIN SYS0026M C ON (B.STOCK_CODE = C.STK_CODE)
    LEFT OUTER JOIN SYS0013M D ON (C.STK_TYPE_ID = D.CODE_ID AND D.CODE_MASTER_ID = 15)
    WHERE A.PLAN_YEAR = #{planYear}
    AND A.PLAN_WEEK = #{planWeek}
    AND A.TEAM = 'CS'
    AND C.STK_TYPE_ID IN (62, 63, 64)
    GROUP BY C.STK_TYPE_ID, D.CODE_NAME
    ) A
    <if test="team == 'DST'">
      ORDER BY DECODE(A.TEAM, 'DST', 1, 'CODY', 2, 'CS', 3), A.TYPE_ID
    </if>
    <if test="team == 'CODY'">
      ORDER BY DECODE(A.TEAM, 'CODY', 1, 'DST', 2, 'CS', 3), A.TYPE_ID
    </if>
    <if test="team == 'CS'">
      ORDER BY DECODE(A.TEAM, 'CS', 1, 'CODY', 2, 'DST', 3), A.TYPE_ID
    </if>
    <if test="team == '' or team == null ">
      ORDER BY DECODE(A.TEAM, 'DST', 1, 'CS', 2, 'CODY', 3), A.TYPE_ID
    </if>
  </select>

  <!-- Sales Plan Accuracy -->
  <!-- Monthly Header -->
  <select id="selectSalesAccuracyMonthlyHeader" parameterType="Map" resultType="egovMap">
    SELECT TEAM
    , TERM
    , MON_ACC
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W1_WEEK_SEQ ,1,5) ELSE SUBSTR(W1_WEEK_SEQ ,1,3) END) AS W1_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W2_WEEK_SEQ ,1,5) ELSE SUBSTR(W2_WEEK_SEQ ,1,3) END) AS W2_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W3_WEEK_SEQ ,1,5) ELSE SUBSTR(W3_WEEK_SEQ ,1,3) END) AS W3_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W4_WEEK_SEQ ,1,5) ELSE SUBSTR(W4_WEEK_SEQ ,1,3) END) AS W4_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W5_WEEK_SEQ ,1,5) ELSE SUBSTR(W5_WEEK_SEQ ,1,3) END) AS W5_WEEK_SEQ
    , (CASE WHEN (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W6_WEEK_SEQ ,1,5) ELSE SUBSTR(W6_WEEK_SEQ ,1,3) END) AS W6_WEEK_SEQ
    FROM (
    SELECT *
    FROM (
    SELECT DECODE(RNO, 1, '1', 2, '2', 3, '3', 4, '4', 5, '5', 6, '6') AS RNO
    , WEEK_SEQ
    , TEAM
    , TERM
    , MON_ACC
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY Z.USE_YN ORDER BY Z.CAL_ID) AS RNO
    , DECODE(LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)
    , NULL
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || '9'
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ || '-' || LEAD(Z.SCM_WEEK_SEQ) OVER (ORDER BY 'W'|| LPAD(Z.SCM_WEEK, 2, 0) || '-' || Z.SCM_WEEK_SEQ)) AS WEEK_SEQ
    , 'team' AS TEAM
    , 'term' AS TERM
    , 'monAcc' AS MON_ACC
    FROM SCM0018M Z
    WHERE Z.SCM_YYYYMM = #{yyyyMm}
    AND Z.USE_YN = 'Y'
    )
    )
    PIVOT (
    MAX(WEEK_SEQ) WEEK_SEQ
    FOR RNO IN (1 AS W1, 2 AS W2, 3 AS W3, 4 AS W4, 5 AS W5, 6 AS W6)
    )
    )
  </select>
  <select id="selectSalesAccuracyweeklyHeader" parameterType="Map" resultType="egovMap">
    SELECT MONTH
    , WEEK
    , TYPE
    , CODE
    , NAME
    , TEAM
    , SALES_ORDER
    , SHO_TERM
    , MID_TERM
    , W1_WEEK_SEQ, W2_WEEK_SEQ, W3_WEEK_SEQ, W4_WEEK_SEQ, W5_WEEK_SEQ, W6_WEEK_SEQ
    , W7_WEEK_SEQ, W8_WEEK_SEQ, W9_WEEK_SEQ, W10_WEEK_SEQ, W11_WEEK_SEQ, W12_WEEK_SEQ
    FROM (
    SELECT DECODE(RNO, 1, '1', 2, '2', 3, '3', 4, '4', 5, '5', 6, '6', 7, '7', 8, '8', 9, '9', 10, '10', 11, '11', 12, '12', 13, '13', 14, '14', 15, '15') AS RNO
    , WEEK_SEQ
    , MONTH
    , WEEK
    , TYPE
    , CODE
    , NAME
    , TEAM
    , SALES_ORDER
    , SHO_TERM
    , MID_TERM
    FROM (
    SELECT ROW_NUMBER() OVER (PARTITION BY X.USE_YN ORDER BY X.CAL_ID) AS RNO
    , 'W' || LPAD(Z.SCM_WEEK, 2, 0) AS WEEK_SEQ
    , 'month' AS MONTH
    , 'week' AS WEEK
    , 'type' AS TYPE
    , 'code' AS CODE
    , 'name' AS NAME
    , 'team' AS TEAM
    , 'salesOrder' AS SALES_ORDER
    , 'shoTerm' AS SHO_TERM
    , 'midTerm' AS MID_TERM
    FROM (
    SELECT SCM_YEAR
    , SCM_MONTH
    , SCM_WEEK
    , SCM_YYYYMM
    FROM SCM0018M
    WHERE SCM_YYYYMM BETWEEN #{fromYyyyMm} AND #{toYyyyMm}
    AND USE_YN = 'Y'
    ) Z
    LEFT OUTER JOIN SCM0018M X ON (Z.SCM_YEAR = X.SCM_YEAR AND Z.SCM_WEEK = X.SCM_WEEK AND Z.SCM_YYYYMM = X.SCM_YYYYMM)
    WHERE X.SCM_WEEK_SEQ = 1
    )
    )
    PIVOT (
    MAX(WEEK_SEQ) WEEK_SEQ
    FOR RNO IN (1 AS W1, 2 AS W2, 3 AS W3, 4 AS W4, 5 AS W5, 6 AS W6, 7 AS W7, 8 AS W8, 9 AS W9, 10 AS W10, 11 AS W11, 12 AS W12, 13 AS W13, 14 AS W14, 15 AS W15)
    )
  </select>
  <!-- Weekly Header -->

</mapper>