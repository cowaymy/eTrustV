<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.scm.impl.SalesPlanManagementMapper">

<select id="selectSalesPlanHeader" parameterType="Map" resultType="egovMap">
SELECT PLAN_ID
     , PLAN_DTL_ID
     , PLAN_STUS_ID
     , STOCK
     , TEAM
     , TYPE_ID
     , TYPE_NAME
     , CATEGORY_ID
     , CATEGORY_NAME
     , CODE
     , NAME
     , PRE_M3_ISS_AVG
     , MONTHLY
     , PRE_M1_ORD_SUM
     , M0_EXP
     , M0_ORD_SUM
     , M0
     , M1
     , M2
     , M3
     , M4
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W1_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W1_WEEK_SEQ ,1,5) ELSE SUBSTR(W1_WEEK_SEQ ,1,3) END) AS W1_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W2_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W2_WEEK_SEQ ,1,5) ELSE SUBSTR(W2_WEEK_SEQ ,1,3) END) AS W2_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W3_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W3_WEEK_SEQ ,1,5) ELSE SUBSTR(W3_WEEK_SEQ ,1,3) END) AS W3_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W4_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W4_WEEK_SEQ ,1,5) ELSE SUBSTR(W4_WEEK_SEQ ,1,3) END) AS W4_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W5_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W5_WEEK_SEQ ,1,5) ELSE SUBSTR(W5_WEEK_SEQ ,1,3) END) AS W5_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W6_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W6_WEEK_SEQ ,1,5) ELSE SUBSTR(W6_WEEK_SEQ ,1,3) END) AS W6_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W7_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W7_WEEK_SEQ ,1,5) ELSE SUBSTR(W7_WEEK_SEQ ,1,3) END) AS W7_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W8_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W8_WEEK_SEQ ,1,5) ELSE SUBSTR(W8_WEEK_SEQ ,1,3) END) AS W8_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W9_WEEK_SEQ ,'-',2) = 2) THEN SUBSTR(W9_WEEK_SEQ ,1,5) ELSE SUBSTR(W9_WEEK_SEQ ,1,3) END) AS W9_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W10_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W10_WEEK_SEQ,1,5) ELSE SUBSTR(W10_WEEK_SEQ,1,3) END) AS W10_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W11_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W11_WEEK_SEQ,1,5) ELSE SUBSTR(W11_WEEK_SEQ,1,3) END) AS W11_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W12_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W12_WEEK_SEQ,1,5) ELSE SUBSTR(W12_WEEK_SEQ,1,3) END) AS W12_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W13_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W13_WEEK_SEQ,1,5) ELSE SUBSTR(W13_WEEK_SEQ,1,3) END) AS W13_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W14_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W14_WEEK_SEQ,1,5) ELSE SUBSTR(W14_WEEK_SEQ,1,3) END) AS W14_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W15_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W15_WEEK_SEQ,1,5) ELSE SUBSTR(W15_WEEK_SEQ,1,3) END) AS W15_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W16_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W16_WEEK_SEQ,1,5) ELSE SUBSTR(W16_WEEK_SEQ,1,3) END) AS W16_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W17_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W17_WEEK_SEQ,1,5) ELSE SUBSTR(W17_WEEK_SEQ,1,3) END) AS W17_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W18_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W18_WEEK_SEQ,1,5) ELSE SUBSTR(W18_WEEK_SEQ,1,3) END) AS W18_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W19_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W19_WEEK_SEQ,1,5) ELSE SUBSTR(W19_WEEK_SEQ,1,3) END) AS W19_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W20_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W20_WEEK_SEQ,1,5) ELSE SUBSTR(W20_WEEK_SEQ,1,3) END) AS W20_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W21_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W21_WEEK_SEQ,1,5) ELSE SUBSTR(W21_WEEK_SEQ,1,3) END) AS W21_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W22_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W22_WEEK_SEQ,1,5) ELSE SUBSTR(W22_WEEK_SEQ,1,3) END) AS W22_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W23_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W23_WEEK_SEQ,1,5) ELSE SUBSTR(W23_WEEK_SEQ,1,3) END) AS W23_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W24_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W24_WEEK_SEQ,1,5) ELSE SUBSTR(W24_WEEK_SEQ,1,3) END) AS W24_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W25_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W25_WEEK_SEQ,1,5) ELSE SUBSTR(W25_WEEK_SEQ,1,3) END) AS W25_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W26_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W26_WEEK_SEQ,1,5) ELSE SUBSTR(W26_WEEK_SEQ,1,3) END) AS W26_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W27_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W27_WEEK_SEQ,1,5) ELSE SUBSTR(W27_WEEK_SEQ,1,3) END) AS W27_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W28_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W28_WEEK_SEQ,1,5) ELSE SUBSTR(W28_WEEK_SEQ,1,3) END) AS W28_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W29_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W29_WEEK_SEQ,1,5) ELSE SUBSTR(W29_WEEK_SEQ,1,3) END) AS W29_WEEK_SEQ
     , (CASE WHEN (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 2 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 1) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 1 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) OR (FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',3) = 9 AND FN_GET_SPLIT_DATA2(W30_WEEK_SEQ,'-',2) = 2) THEN SUBSTR(W30_WEEK_SEQ,1,5) ELSE SUBSTR(W30_WEEK_SEQ,1,3) END) AS W30_WEEK_SEQ
  FROM (
        SELECT *
          FROM (
                SELECT DECODE(RNO, 1,  '1',  2,  '2',  3,  '3',  4,  '4',  5,  '5',  6,  '6',  7,  '7',  8,  '8',  9,  '9',  10, '10'
                                 , 11, '11', 12, '12', 13, '13', 14, '14', 15, '15', 16, '16', 17, '17', 18, '18', 19, '19', 20, '20'
                                 , 21, '21', 22, '22', 23, '23', 24, '24', 25, '25', 26, '26', 27, '27', 28, '28', 29, '29', 30, '30') AS RNO
                     , WEEK_SEQ
                     , PLAN_ID
                     , PLAN_DTL_ID
                     , PLAN_STUS_ID
                     , STOCK
                     , TEAM
                     , TYPE_ID
                     , TYPE_NAME
                     , CATEGORY_ID
                     , CATEGORY_NAME
                     , CODE
                     , NAME
                     , PRE_M3_ISS_AVG
                     , MONTHLY
                     , PRE_M1_ORD_SUM
                     , M0_EXP
                     , M0_ORD_SUM
                     , M0
                     , M1
                     , M2
                     , M3
                     , M4
                  FROM (
                        SELECT ROW_NUMBER() OVER (PARTITION BY Z.SCM_YEAR ORDER BY Z.CAL_ID) AS RNO
                             , DECODE(LEAD(Z.WEEK_TH_SN) OVER (ORDER BY 'W' || LPAD(Z.WEEK_TH, 2, 0) || '-' || Z.WEEK_TH_SN)
                                    , NULL
                                    , 'W' || LPAD(Z.WEEK_TH, 2, 0) || '-' || Z.WEEK_TH_SN || '-' || '9'
                                    , 'W' || LPAD(Z.WEEK_TH, 2, 0) || '-' || Z.WEEK_TH_SN || '-' || LEAD(Z.WEEK_TH_SN) OVER (ORDER BY 'W'|| LPAD(Z.WEEK_TH, 2, 0) || '-' || Z.WEEK_TH_SN)) AS WEEK_SEQ
                             , 'planId' AS PLAN_ID
                             , 'planDtlId' AS PLAN_DTL_ID
                             , 'planStusId' AS PLAN_STUS_ID
                             , 'stock' AS STOCK
                             , 'team' AS TEAM
                             , 'typeId' AS TYPE_ID
                             , 'typeName' AS TYPE_NAME
                             , 'categoryId' AS CATEGORY_ID
                             , 'categoryName' AS CATEGORY_NAME
                             , 'code' AS CODE
                             , 'name' AS NAME
                             , 'monthly' AS MONTHLY
                             , 'preM3IssAvg' AS PRE_M3_ISS_AVG
                             , 'preM1OrdSum' AS PRE_M1_ORD_SUM
                             , 'm0Exp' AS M0_EXP
                             , 'm0OrdSum' AS M0_ORD_SUM
                             , 'm0' AS M0
                             , 'm1' AS M1
                             , 'm2' AS M2
                             , 'm3' AS M3
                             , 'm4' AS M4
                          FROM SCM0018M Z
                         WHERE TO_CHAR(Z.WEEK_TH_SN_START, 'YYYYMM') BETWEEN #{salesPlanFrom} AND #{salesPlanTo}
                        )
                )
         PIVOT (
                MAX(WEEK_SEQ) WEEK_SEQ
                FOR RNO IN (1  AS W1,  2  AS W2,  3  AS W3,  4  AS W4,  5  AS W5,  6  AS W6,  7  AS W7,  8  AS W8,  9  AS W9,  10 AS W10
                          , 11 AS W11, 12 AS W12, 13 AS W13, 14 AS W14, 15 AS W15, 16 AS W16, 17 AS W17, 18 AS W18, 19 AS W19, 20 AS W20
                          , 21 AS W21, 22 AS W22, 23 AS W23, 24 AS W24, 25 AS W25, 26 AS W26, 27 AS W27, 28 AS W28, 29 AS W29, 30 AS W30)
                )
        )
</select>

<select id="selectSalesPlanMonth" parameterType="Map" resultType="egovMap">
SELECT A.SCM_MONTH AS PLAN_MONTH
  FROM SCM0018M A
 WHERE A.SCM_YEAR = #{scmYearCbBox}
   AND A.WEEK_TH = #{scmWeekCbBox}
 ORDER BY A.SCM_MONTH DESC /* SPLIT 마지막 주차를 조회하는 경우 다음달을 월로 던져주기 위해서 ORDER BY 사용 */
</select>

<select id="selectSalesPlanInfo" parameterType="Map" resultType="egovMap">
SELECT A.PLAN_ID
     , A.PLAN_YEAR
     , CASE WHEN A.PLAN_MONTH = A.SCM_MONTH THEN A.PLAN_MONTH ELSE A.SCM_MONTH END AS PLAN_MONTH
     , A.PLAN_WEEK
     , A.TEAM
     , A.PLAN_STUS_ID
     , A.PLAN_STUS_NM
     , A.CRT_DT
     , A.CRT_USER_ID
  FROM (
        SELECT A.PLAN_ID
             , A.PLAN_YEAR
             , A.PLAN_MONTH
             , (SELECT MAX(Z.SCM_MONTH) FROM SCM0018M Z WHERE A.PLAN_YEAR = Z.SCM_YEAR AND A.PLAN_WEEK = Z.WEEK_TH) AS SCM_MONTH
             , A.PLAN_WEEK
             , A.TEAM
             , A.PLAN_STUS_ID
             , B.CODE_NAME AS PLAN_STUS_NM
             , TO_CHAR(A.CRT_DT, 'YYYY/MM/DD HH24:MI:SS') AS CRT_DT
             , A.CRT_USER_ID
          FROM SCM0001M A
          LEFT OUTER JOIN SYS0013M B ON (A.PLAN_STUS_ID = B.CODE AND B.CODE_MASTER_ID = 402) /* 402 : SCM Plan Status Code */
         WHERE A.PLAN_YEAR = #{scmYearCbBox}
           AND A.PLAN_WEEK = #{scmWeekCbBox}
	<if test="scmTeamCbBox != null and scmTeamCbBox !=''">
           AND A.TEAM = #{scmTeamCbBox}
	</if>
        ) A
 ORDER BY A.TEAM
</select>

<select id="selectSplitInfo" parameterType="Map" resultType="egovMap">
SELECT A.WEEK_CNT AS M0_WEEK_CNT
     , B.WEEK_CNT AS M1_WEEK_CNT
     , C.WEEK_CNT AS M2_WEEK_CNT
     , D.WEEK_CNT AS M3_WEEK_CNT
     , E.WEEK_CNT AS M4_WEEK_CNT
  FROM (
        SELECT COUNT(*) AS WEEK_CNT
          FROM SCM0018M Z
         WHERE Z.USE_YN = 'Y'
           AND TO_CHAR(Z.WEEK_TH_SN_END, 'YYYYMM') = #{scmYearCbBox} || LPAD(#{planMonth}, 2, 0)
        ) A
     , (
        SELECT COUNT(*) AS WEEK_CNT
          FROM SCM0018M Z
         WHERE Z.USE_YN = 'Y'
           AND TO_CHAR(Z.WEEK_TH_SN_END, 'YYYYMM') = (SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{scmYearCbBox} || LPAD(#{planMonth}, 2, 0), 'YYYYMM'), 1), 'YYYYMM') FROM DUAL)
        )B
     , (
        SELECT COUNT(*) AS WEEK_CNT
          FROM SCM0018M Z
         WHERE Z.USE_YN = 'Y'
           AND TO_CHAR(Z.WEEK_TH_SN_END, 'YYYYMM') = (SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{scmYearCbBox} || LPAD(#{planMonth}, 2, 0), 'YYYYMM'), 2), 'YYYYMM') FROM DUAL)
        )C
     , (
        SELECT COUNT(*) AS WEEK_CNT
          FROM SCM0018M Z
         WHERE Z.USE_YN = 'Y'
           AND TO_CHAR(Z.WEEK_TH_SN_END, 'YYYYMM') = (SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{scmYearCbBox} || LPAD(#{planMonth}, 2, 0), 'YYYYMM'), 3), 'YYYYMM') FROM DUAL)
        )D
     , (
        SELECT COUNT(*) AS WEEK_CNT
          FROM SCM0018M Z
         WHERE Z.USE_YN = 'Y'
           AND TO_CHAR(Z.WEEK_TH_SN_END, 'YYYYMM') = (SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{scmYearCbBox} || LPAD(#{planMonth}, 2, 0), 'YYYYMM'), 4), 'YYYYMM') FROM DUAL)
        )E
</select>

<select id="selectChildField" parameterType="Map" resultType="egovMap">
SELECT A.SCM_YEAR
     , A.SCM_MONTH
     , A.WEEK_TH
     , A.WEEK_TH_SN
     , A.IS_SRPTD
     , ROW_NUMBER() OVER (PARTITION BY A.SCM_MONTH ORDER BY A.WEEK_TH) AS RN
  FROM SCM0018M A
 WHERE TO_CHAR(A.WEEK_TH_SN_END, 'YYYYMM') = #{scmYearCbBox} || LPAD(#{planMonth}, 2, 0)
   AND A.USE_YN = 'Y'
 ORDER BY A.WEEK_TH
</select>

<select id="selectSalesPlanList" parameterType="Map" resultType="egovMap">
SELECT A.PLAN_ID
     , B.PLAN_DTL_ID
     , A.PLAN_STUS_ID
     , A.TEAM
     , D.STK_TYPE_ID AS TYPE_ID
     , E.CODE_NAME AS CATEGORY_NAME
     , D.STK_CTGRY_ID AS CATEGORY_ID
     , F.CODE_NAME AS TYPE_NAME
     , B.STOCK_CODE AS CODE
     , D.STK_DESC AS NAME
     , NVL(B.PRE_M3_ISS_AVG, 0) AS PRE_M3_ISS_AVG
     , NVL(B.PRE_M1_ORD_SUM, 0) AS PRE_M1_ORD_SUM
     , NVL(B.M0_ORD_SUM, 0) + NVL(B.M0, 0) AS M0_EXP
     , NVL(B.M0_ORD_SUM, 0) AS M0_ORD_SUM
     , NVL(B.M0, 0) AS M0
     , NVL(B.M1, 0) AS M1
     , NVL(B.M2, 0) AS M2
     , NVL(B.M3, 0) AS M3
     , NVL(B.M4, 0) AS M4
     , NVL(B.W01, 0) AS W01
     , NVL(B.W02, 0) AS W02
     , NVL(B.W03, 0) AS W03
     , NVL(B.W04, 0) AS W04
     , NVL(B.W05, 0) AS W05
     , NVL(B.W06, 0) AS W06
     , NVL(B.W07, 0) AS W07
     , NVL(B.W08, 0) AS W08
     , NVL(B.W09, 0) AS W09
     , NVL(B.W10, 0) AS W10
     , NVL(B.W11, 0) AS W11
     , NVL(B.W12, 0) AS W12
     , NVL(B.W13, 0) AS W13
     , NVL(B.W14, 0) AS W14
     , NVL(B.W15, 0) AS W15
     , NVL(B.W16, 0) AS W16
     , NVL(B.W17, 0) AS W17
     , NVL(B.W18, 0) AS W18
     , NVL(B.W19, 0) AS W19
     , NVL(B.W20, 0) AS W20
     , NVL(B.W21, 0) AS W21
     , NVL(B.W22, 0) AS W22
     , NVL(B.W23, 0) AS W23
     , NVL(B.W24, 0) AS W24
     , NVL(B.W25, 0) AS W25
     , NVL(B.W26, 0) AS W26
     , NVL(B.W27, 0) AS W27
     , NVL(B.W28, 0) AS W28
     , NVL(B.W29, 0) AS W29
     , NVL(B.W30, 0) AS W30
     , NVL(B.WS1, 0) AS WS1
     , NVL(B.WS2, 0) AS WS2
     , NVL(B.WS3, 0) AS WS3
     , NVL(B.WS4, 0) AS WS4
     , NVL(B.WS5, 0) AS WS5
  FROM SCM0001M A
  LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
  LEFT OUTER JOIN SCM0008M C ON (B.STOCK_CODE = C.STOCK_CODE)
  LEFT OUTER JOIN SYS0026M D ON (C.STOCK_ID = D.STK_ID)
  LEFT OUTER JOIN SYS0013M E ON (D.STK_CTGRY_ID = E.CODE_ID AND E.CODE_MASTER_ID = 11) /* 11 : Stock Category */
  LEFT OUTER JOIN SYS0013M F ON (D.STK_TYPE_ID = F.CODE_ID AND F.CODE_MASTER_ID = 15) /* 15 : Spare Part Type */
 WHERE A.PLAN_YEAR = #{scmYearCbBox}
   AND A.PLAN_WEEK = #{scmWeekCbBox}
	<if test="scmTeamCbBox != null and scmTeamCbBox != ''">
   AND A.TEAM = #{scmTeamCbBox}
	</if>
 	<if test="scmStockCategoryCbBox != null and ! scmStockCategoryCbBox.isEmpty">
   AND D.STK_CTGRY_ID IN
		<foreach item="item" collection="scmStockCategoryCbBox" index="index" open="(" separator="," close=")">
		#{item}
		</foreach>
	</if>
	<if test="scmStockTypeCbBox != null and ! scmStockTypeCbBox.isEmpty">
   AND D.STK_TYPE_ID IN
		<foreach item="item" collection="scmStockTypeCbBox" index="index" open="(" separator="," close=")">
		#{item}
		</foreach>
	</if>
   AND ((B.STOCK_CODE LIKE '%' || #{scmStockCode} || '%') OR (D.STK_DESC LIKE '%' || #{scmStockCode} || '%'))
 ORDER BY B.PLAN_DTL_ID
</select>

<select id="selectSalesPlanListAll" parameterType="Map" resultType="egovMap">
SELECT A.PLAN_ID
     , B.PLAN_DTL_ID
     , A.PLAN_STUS_ID
     , 'All' AS TEAM
     , D.STK_TYPE_ID AS TYPE_ID
     , E.CODE_NAME AS CATEGORY_NAME
     , D.STK_CTGRY_ID AS CATEGORY_ID
     , F.CODE_NAME AS TYPE_NAME
     , B.STOCK_CODE AS CODE
     , D.STK_DESC AS NAME
     , SUM(NVL(B.PRE_M3_ISS_AVG, 0)) AS PRE_M3_ISS_AVG
     , SUM(NVL(B.PRE_M1_ORD_SUM, 0)) AS PRE_M1_ORD_SUM
     , SUM(NVL(B.M0_ORD_SUM, 0) + NVL(B.M0, 0)) AS M0_EXP
     , SUM(NVL(B.M0_ORD_SUM, 0)) AS M0_ORD_SUM
     , SUM(NVL(B.M0, 0)) AS M0
     , SUM(NVL(B.M1, 0)) AS M1
     , SUM(NVL(B.M2, 0)) AS M2
     , SUM(NVL(B.M3, 0)) AS M3
     , SUM(NVL(B.M4, 0)) AS M4
     , SUM(NVL(B.W01, 0)) AS W01
     , SUM(NVL(B.W02, 0)) AS W02
     , SUM(NVL(B.W03, 0)) AS W03
     , SUM(NVL(B.W04, 0)) AS W04
     , SUM(NVL(B.W05, 0)) AS W05
     , SUM(NVL(B.W06, 0)) AS W06
     , SUM(NVL(B.W07, 0)) AS W07
     , SUM(NVL(B.W08, 0)) AS W08
     , SUM(NVL(B.W09, 0)) AS W09
     , SUM(NVL(B.W10, 0)) AS W10
     , SUM(NVL(B.W11, 0)) AS W11
     , SUM(NVL(B.W12, 0)) AS W12
     , SUM(NVL(B.W13, 0)) AS W13
     , SUM(NVL(B.W14, 0)) AS W14
     , SUM(NVL(B.W15, 0)) AS W15
     , SUM(NVL(B.W16, 0)) AS W16
     , SUM(NVL(B.W17, 0)) AS W17
     , SUM(NVL(B.W18, 0)) AS W18
     , SUM(NVL(B.W19, 0)) AS W19
     , SUM(NVL(B.W20, 0)) AS W20
     , SUM(NVL(B.W21, 0)) AS W21
     , SUM(NVL(B.W22, 0)) AS W22
     , SUM(NVL(B.W23, 0)) AS W23
     , SUM(NVL(B.W24, 0)) AS W24
     , SUM(NVL(B.W25, 0)) AS W25
     , SUM(NVL(B.W26, 0)) AS W26
     , SUM(NVL(B.W27, 0)) AS W27
     , SUM(NVL(B.W28, 0)) AS W28
     , SUM(NVL(B.W29, 0)) AS W29
     , SUM(NVL(B.W30, 0)) AS W30
     , SUM(NVL(B.WS1, 0)) AS WS1
     , SUM(NVL(B.WS2, 0)) AS WS2
     , SUM(NVL(B.WS3, 0)) AS WS3
     , SUM(NVL(B.WS4, 0)) AS WS4
     , SUM(NVL(B.WS5, 0)) AS WS5
  FROM SCM0001M A
  LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
  LEFT OUTER JOIN SCM0008M C ON (B.STOCK_CODE = C.STOCK_CODE)
  LEFT OUTER JOIN SYS0026M D ON (C.STOCK_ID = D.STK_ID)
  LEFT OUTER JOIN SYS0013M E ON (D.STK_CTGRY_ID = E.CODE_ID AND E.CODE_MASTER_ID = 11) /* 11 : Stock Category */
  LEFT OUTER JOIN SYS0013M F ON (D.STK_TYPE_ID = F.CODE_ID AND F.CODE_MASTER_ID = 15) /* 15 : Spare Part Type */
 WHERE A.PLAN_YEAR = #{scmYearCbBox}
   AND A.PLAN_WEEK = #{scmWeekCbBox}
 	<if test="scmStockCategoryCbBox != null and ! scmStockCategoryCbBox.isEmpty">
   AND D.STK_CTGRY_ID IN
		<foreach item="item" collection="scmStockCategoryCbBox" index="index" open="(" separator="," close=")">
		#{item}
		</foreach>
	</if>
	<if test="scmStockTypeCbBox != null and ! scmStockTypeCbBox.isEmpty">
   AND D.STK_TYPE_ID IN
		<foreach item="item" collection="scmStockTypeCbBox" index="index" open="(" separator="," close=")">
		#{item}
		</foreach>
	</if>
   AND ((B.STOCK_CODE LIKE '%' || #{scmStockCode} || '%') OR (D.STK_DESC LIKE '%' || #{scmStockCode} || '%'))
 GROUP BY A.PLAN_ID
     , B.PLAN_DTL_ID
     , A.PLAN_STUS_ID
     , D.STK_TYPE_ID
     , E.CODE_NAME
     , D.STK_CTGRY_ID
     , F.CODE_NAME
     , B.STOCK_CODE
     , D.STK_DESC
 ORDER BY ORDER BY B.PLAN_DTL_ID
</select>

<select id="selectCreateCheck" parameterType="Map" resultType="egovMap">
SELECT A.BEF_PLAN
     , B.THIS_PLAN
  FROM (
        SELECT COUNT(*) AS BEF_PLAN
          FROM SCM0001M Z
         WHERE Z.PLAN_YEAR = #{befPlanYear}
           AND Z.PLAN_WEEK = #{befPlanWeek}
           AND Z.TEAM = #{scmTeamCbBox}
           AND Z.PLAN_STUS_ID = 4
        ) A
     , (
        SELECT COUNT(*) AS THIS_PLAN
          FROM SCM0001M Z
         WHERE Z.PLAN_YEAR = #{scmYearCbBox}
           AND Z.PLAN_WEEK = #{scmWeekCbBox}
           AND Z.TEAM = #{scmTeamCbBox}
           AND Z.PLAN_STUS_ID = 4
        ) B
</select>

<insert id="insertSalesPlanMaster" parameterType="Map">
INSERT INTO SCM0001M
(
       PLAN_ID
     , PLAN_YEAR
     , PLAN_MONTH
     , PLAN_WEEK
     , TEAM
     , CRT_DT
     , CRT_USER_ID
 )
VALUES
(
       SCM0001M_PLAN_ID_SEQ.NEXTVAL
     , #{planYear}
     , #{planMonth}
     , #{planWeek}
     , #{team}
     , SYSDATE
     , #{crtUserId}
 )
</insert>

<insert id="insertSalesPlanDetail" parameterType="Map">
INSERT INTO SCM0002D
(
       PLAN_ID
     , PLAN_DTL_ID
     , STOCK_CODE
     , PRE_M3_ISS_AVG
     , PRE_M1_ORD_SUM
     , M0_ORD_SUM
 )
SELECT (SELECT PLAN_ID FROM SCM0001M WHERE PLAN_YEAR = #{planYear} AND PLAN_WEEK = #{planWeek} AND TEAM = #{team})
     , SCM0002D_PLAN_DTL_ID_SEQ.NEXTVAL
     , A.STOCK_CODE
     , NVL((
            SELECT ROUND(COUNT(*) / 3)
              FROM SCM0051S Z
             WHERE Z.ISS_DT BETWEEN #{issDtFrom} AND #{issDtTo}
               AND Z.TEAM = #{team}
               AND Z.STOCK_CODE = A.STOCK_CODE
            ), 0) AS PRE_M3_ISS_AVG
     , NVL((
            SELECT SUM(Z.ORD_QTY)
              FROM SCM0050S Z
             WHERE Z.ORD_DT BETWEEN #{m1OrdDtFrom} AND #{m1OrdDtTo}
               AND Z.TEAM = #{team}
               AND Z.STOCK_CODE = A.STOCK_CODE
            ), 0) AS PRE_M1_ORD_SUM
     , NVL((
            SELECT SUM(Z.ORD_QTY)
              FROM SCM0050S Z
             WHERE Z.ORD_DT BETWEEN #{m0OrdDtFrom} AND #{m0OrdDtTo}
               AND Z.TEAM = #{team}
               AND Z.STOCK_CODE = A.STOCK_CODE
            ), 0) AS M0_ORD_SUM
  FROM SCM0008M A
 WHERE A.STUS_CODE_ID = 1
   AND A.IS_TRGET = 1
   AND TO_CHAR(A.START_DT, 'YYYYMMDD') <![CDATA[ <= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
   AND TO_CHAR(A.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
</insert>

<select id="selectSalesPlanForUpdate" parameterType="Map" resultType="egovMap">
SELECT A.PLAN_ID
     , B.PLAN_DTL_ID
     , B.STOCK_CODE
     , NVL(B.W01, 0) AS W01
     , NVL(B.W02, 0) AS W02
     , NVL(B.W03, 0) AS W03
     , NVL(B.W04, 0) AS W04
     , NVL(B.W05, 0) AS W05
     , NVL(B.W06, 0) AS W06
     , NVL(B.W07, 0) AS W07
     , NVL(B.W08, 0) AS W08
     , NVL(B.W09, 0) AS W09
     , NVL(B.W10, 0) AS W10
     , NVL(B.W11, 0) AS W11
     , NVL(B.W12, 0) AS W12
     , NVL(B.W13, 0) AS W13
     , NVL(B.W14, 0) AS W14
     , NVL(B.W15, 0) AS W15
     , NVL(B.W16, 0) AS W16
     , NVL(B.W17, 0) AS W17
     , NVL(B.W18, 0) AS W18
     , NVL(B.W19, 0) AS W19
     , NVL(B.W20, 0) AS W20
     , NVL(B.W21, 0) AS W21
     , NVL(B.W22, 0) AS W22
     , NVL(B.W23, 0) AS W23
     , NVL(B.W24, 0) AS W24
     , NVL(B.W25, 0) AS W25
     , NVL(B.W26, 0) AS W26
     , NVL(B.W27, 0) AS W27
     , NVL(B.W28, 0) AS W28
     , NVL(B.W29, 0) AS W29
     , NVL(B.W30, 0) AS W30
     , NVL(B.WS1, 0) AS WS1
     , NVL(B.WS2, 0) AS WS2
     , NVL(B.WS3, 0) AS WS3
     , NVL(B.WS4, 0) AS WS4
     , NVL(B.WS5, 0) AS WS5
  FROM SCM0001M A
  LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_ID)
 WHERE A.PLAN_YEAR = #{year}
   AND A.PLAN_WEEK = #{week}
   AND A.TEAM = #{team}
 ORDER BY B.PLAN_DTL_ID
</select>

<select id="selectSalesPlanForUpdate2" parameterType="Map" resultType="egovMap">
SELECT A.PLAN_ID
     , B.PLAN_DTL_ID
     , B.STOCK_CODE
     , NVL(B.W01, 0) AS W01
     , NVL(B.W02, 0) AS W02
     , NVL(B.W03, 0) AS W03
     , NVL(B.W04, 0) AS W04
     , NVL(B.W05, 0) AS W05
     , NVL(B.W06, 0) AS W06
     , NVL(B.W07, 0) AS W07
     , NVL(B.W08, 0) AS W08
     , NVL(B.W09, 0) AS W09
     , NVL(B.W10, 0) AS W10
     , NVL(B.W11, 0) AS W11
     , NVL(B.W12, 0) AS W12
     , NVL(B.W13, 0) AS W13
     , NVL(B.W14, 0) AS W14
     , NVL(B.W15, 0) AS W15
     , NVL(B.W16, 0) AS W16
     , NVL(B.W17, 0) AS W17
     , NVL(B.W18, 0) AS W18
     , NVL(B.W19, 0) AS W19
     , NVL(B.W20, 0) AS W20
     , NVL(B.W21, 0) AS W21
     , NVL(B.W22, 0) AS W22
     , NVL(B.W23, 0) AS W23
     , NVL(B.W24, 0) AS W24
     , NVL(B.W25, 0) AS W25
     , NVL(B.W26, 0) AS W26
     , NVL(B.W27, 0) AS W27
     , NVL(B.W28, 0) AS W28
     , NVL(B.W29, 0) AS W29
     , NVL(B.W30, 0) AS W30
     , NVL(B.WS1, 0) AS WS1
     , NVL(B.WS2, 0) AS WS2
     , NVL(B.WS3, 0) AS WS3
     , NVL(B.WS4, 0) AS WS4
     , NVL(B.WS5, 0) AS WS5
  FROM SCM0008M A
 WHERE A.STUS_CODE_ID = 1
   AND A.IS_TRGET = 1
   AND TO_CHAR(A.START_DT, 'YYYYMMDD') <![CDATA[ <= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
   AND TO_CHAR(A.END_DT, 'YYYYMMDD') <![CDATA[ >= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
</select>

<resultMap id="insertSalesPlanDetailResultMap" type="egovMap"></resultMap>
<select id="callSpScmInsSalesPlanDetail" statementType="CALLABLE" parameterType="Map">
{ call GBSLCVD.SP_SCM_INS_SALES_PLAN_DETAIL(#{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, #{result, mode=OUT, jdbcType=VARCHAR, javaType=STRING, resultMap=insertSalesPlanDetailResultMap}) }
</select>

<select id="selectSalesPlanDetailSum" parameterType="Map" resultType="egovMap">
SELECT B.PLAN_DTL_ID
     , GBSLCVD.FN_GET_M_PLAN('M0', #{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, B.STOCK_CODE) AS M0
     , GBSLCVD.FN_GET_M_PLAN('M1', #{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, B.STOCK_CODE) AS M1
     , GBSLCVD.FN_GET_M_PLAN('M2', #{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, B.STOCK_CODE) AS M2
     , GBSLCVD.FN_GET_M_PLAN('M3', #{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, B.STOCK_CODE) AS M3
     , GBSLCVD.FN_GET_M_PLAN('M4', #{scmYearCbBox}, #{scmWeekCbBox}, #{scmTeamCbBox}, B.STOCK_CODE) AS M4
  FROM SCM0001M A
  LEFT OUTER JOIN SCM0002D B ON (A.PLAN_ID = B.PLAN_MASTER_ID)
 WHERE A.PLAN_YEAR = #{scmYearCbBox}
   AND A.PLAN_WEEK = #{scmWeekCbBox}
   AND A.TEAM = #{scmTeamCbBox}
</select>

<update id="updateSalesPlanDetailSum" parameterType="Map">
UPDATE SCM0002D
   SET M0_PLAN = TO_NUMBER(REPLACE(#{m0}, ','))
     , M1 = TO_NUMBER(REPLACE(#{m1}, ','))
     , M2 = TO_NUMBER(REPLACE(#{m2}, ','))
     , M3 = TO_NUMBER(REPLACE(#{m3}, ','))
     , M4 = TO_NUMBER(REPLACE(#{m4}, ','))
 WHERE PLAN_DTL_ID = #{planDtlId}
</update>

<update id="updateSalesPlanDetail" parameterType="Map">
UPDATE SCM0002D
   SET M0 = TO_NUMBER(REPLACE(#{m0}, ','))
     , M1 = TO_NUMBER(REPLACE(#{m1}, ','))
     , M2 = TO_NUMBER(REPLACE(#{m2}, ','))
     , M3 = TO_NUMBER(REPLACE(#{m3}, ','))
     , M4 = TO_NUMBER(REPLACE(#{m4}, ','))
     , W01 = TO_NUMBER(REPLACE(#{w01}, ','))
     , W02 = TO_NUMBER(REPLACE(#{w02}, ','))
     , W03 = TO_NUMBER(REPLACE(#{w03}, ','))
     , W04 = TO_NUMBER(REPLACE(#{w04}, ','))
     , W05 = TO_NUMBER(REPLACE(#{w05}, ','))
     , W06 = TO_NUMBER(REPLACE(#{w06}, ','))
     , W07 = TO_NUMBER(REPLACE(#{w07}, ','))
     , W08 = TO_NUMBER(REPLACE(#{w08}, ','))
     , W09 = TO_NUMBER(REPLACE(#{w09}, ','))
     , W10 = TO_NUMBER(REPLACE(#{w10}, ','))
     , W11 = TO_NUMBER(REPLACE(#{w11}, ','))
     , W12 = TO_NUMBER(REPLACE(#{w12}, ','))
     , W13 = TO_NUMBER(REPLACE(#{w13}, ','))
     , W14 = TO_NUMBER(REPLACE(#{w14}, ','))
     , W15 = TO_NUMBER(REPLACE(#{w15}, ','))
     , W16 = TO_NUMBER(REPLACE(#{w16}, ','))
     , W17 = TO_NUMBER(REPLACE(#{w17}, ','))
     , W18 = TO_NUMBER(REPLACE(#{w18}, ','))
     , W19 = TO_NUMBER(REPLACE(#{w19}, ','))
     , W20 = TO_NUMBER(REPLACE(#{w20}, ','))
     , W21 = TO_NUMBER(REPLACE(#{w21}, ','))
     , W22 = TO_NUMBER(REPLACE(#{w22}, ','))
     , W23 = TO_NUMBER(REPLACE(#{w23}, ','))
     , W24 = TO_NUMBER(REPLACE(#{w24}, ','))
     , W25 = TO_NUMBER(REPLACE(#{w25}, ','))
     , W26 = TO_NUMBER(REPLACE(#{w26}, ','))
     , W27 = TO_NUMBER(REPLACE(#{w27}, ','))
     , W28 = TO_NUMBER(REPLACE(#{w28}, ','))
     , W29 = TO_NUMBER(REPLACE(#{w29}, ','))
     , W30 = TO_NUMBER(REPLACE(#{w30}, ','))
 WHERE PLAN_DTL_ID = #{planDtlId}
</update>

<update id="updateSalesPlanMaster" parameterType="Map">
UPDATE SCM0001M
   SET PLAN_STUS_ID = #{planStusId}
 WHERE PLAN_ID = #{planId}
</update>

</mapper>