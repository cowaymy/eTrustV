<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.services.as.impl.ASManagementListMapper">


      
       <resultMap id="callasLogClobMap" type="egovMap">
              <result property="callRem" column="CALL_REM" jdbcType="CLOB" javaType="string"/>
       </resultMap>
         
         

    <select id="selectASManagementList" parameterType="Map" resultType="egovMap">
                     SELECT    S.AS_ID   ,
							       S.AS_NO   ,
							       S.AS_SO_ID   ,
							       S.AS_REQST_DT   ,
							       S.AS_STUS_ID   ,
							       S.AS_TYPE_ID   ,
							       S.CODE   ,
							       S.CODE1   ,
							       S.SALES_ORD_NO   ,
							       S.CODE2, 
							       S.NAME   ,
							       S.NRIC   ,
							       S.C1   ,
							       S.C2   ,
							       S.C3   ,
							       S.C4   ,
							       S.C5   ,
							       S.AS_RESULT_ID ,
							       S.AS_BRNCH_ID ,
							       S.AS_MEM_ID,
							       (SELECT  CODE  FROM  SYS0005M  H WHERE   H.BRNCH_ID =AS_BRNCH_ID) BRNCH_CODE,
                                   S.AS_SLUTN_RESN_ID,
                                   S.IN_HUSE_REPAIR_REPLACE_YN,
                                   S.REF_REQST,
                                   S.AS_MALFUNC_ID,  
                                   S.AS_MALFUNC_RESN_ID,
                                   DECODE(S.AS_IF_FLAG, 'E' ,'logistics err' ,'') AS_IF_FLAG
						  FROM ( SELECT DISTINCT E.AS_ID AS_ID  ,
						                         E.AS_NO AS_NO  ,
						                         E.ASSOID1 AS_SO_ID  ,  
						                         E.AS_REQST_DT AS_REQST_DT  ,
						                         E.AS_STUS_ID AS_STUS_ID  ,
						                         E.AS_TYPE_ID AS_TYPE_ID  ,
						                         E.CODE3 CODE  ,
						                         E.CODE4 CODE1  ,
						                         E.SALES_ORD_NO SALES_ORD_NO  ,
						                         E.CODE5 CODE2  ,
						                         E.NAME1 NAME  ,
						                         E.NRIC NRIC  ,
						                         1 C1  ,
						                         CASE 
						                              WHEN ( E.AS_RESULT_ID IS NOT NULL ) THEN E.AS_RESULT_ID
						                         ELSE 0
						                            END C2  ,
						                         CASE 
						                              WHEN ( E.AS_RESULT_ID IS NOT NULL ) THEN E.AS_RESULT_NO
						                         ELSE '-'
						                            END C3  ,
						                         CASE 
						                              WHEN ( Extent8.USER_ID IS NOT NULL ) THEN Extent8.USER_NAME
						                         ELSE '-'
						                            END C4  ,
						                         CASE 
						                              WHEN ( E.AS_RESULT_ID IS NOT NULL ) THEN E.AS_TOT_AMT
						                         ELSE UTILS.CONVERT_TO_FLOAT(0,53)
						                            END C5  ,
						                         E.AS_RESULT_ID ,
						                         E.AS_BRNCH_ID,
						                         E.AS_MEM_ID,
                                                E.AS_SLUTN_RESN_ID,
                                                E.IN_HUSE_REPAIR_REPLACE_YN,
                                                E.REF_REQST,
                                                E.AS_MALFUNC_ID,  
                                                E.AS_MALFUNC_RESN_ID,
                                                E.AS_IF_FLAG 
						         FROM ( SELECT Extent1.AS_ID AS_ID  ,
						                       Extent1.AS_NO AS_NO  ,
						                       Extent1.AS_SO_ID ASSOID1  ,
						                       Extent1.AS_REQST_DT AS_REQST_DT  ,
						                       Extent1.AS_STUS_ID AS_STUS_ID  ,
						                       Extent1.AS_CRT_USER_ID AS_CRT_USER_ID  ,
						                       Extent1.AS_TYPE_ID AS_TYPE_ID  ,
						                       Extent2.CODE CODE3  ,
						                       Extent3.CODE CODE4  ,
						                       Extent4.SALES_ORD_NO SALES_ORD_NO  ,
						                       Extent5.CODE CODE5  ,
						                       Extent6.NAME NAME1  ,
						                       Extent6.NRIC NRIC  ,
						                       Extent7.AS_RESULT_ID AS_RESULT_ID  ,
						                       Extent7.AS_RESULT_NO AS_RESULT_NO  ,
						                       Extent7.AS_TOT_AMT AS_TOT_AMT ,
						                       Extent1.AS_BRNCH_ID,
						                       Extent1.AS_MEM_ID ,
						                       Extent7.AS_SLUTN_RESN_ID,
						                       Extent7.IN_HUSE_REPAIR_REPLACE_YN,
						                       Extent1.REF_REQST ,
						                       Extent1.AS_MALFUNC_ID,  
						                       Extent1.AS_MALFUNC_RESN_ID,
						                       Extent1.AS_IF_FLAG 
						                FROM SVC0001D Extent1
						                       JOIN SYS0013M Extent2   ON Extent1.AS_TYPE_ID = Extent2.CODE_ID
						                       JOIN SYS0038M Extent3   ON Extent1.AS_STUS_ID = Extent3.STUS_CODE_ID
						                       JOIN SAL0001D Extent4   ON Extent1.AS_SO_ID = Extent4.SALES_ORD_ID
						                       JOIN SYS0013M Extent5   ON Extent4.APP_TYPE_ID = Extent5.CODE_ID
						                       JOIN SAL0029D Extent6   ON Extent4.CUST_ID = Extent6.CUST_ID
						                       <!-- 171114 :: 선한이 (추가) -->
						                       JOIN ORG0001D Extent8   ON Extent8.MEM_ID = Extent1.AS_MEM_ID
						                       LEFT JOIN SYS0005M Extent9   ON Extent9.BRNCH_ID = Extent8.BRNCH
						                       LEFT JOIN SVC0004D Extent7   ON ( Extent1.AS_ID = Extent7.AS_ENTRY_ID )
						                       AND ( 457 = Extent7.AS_RESULT_TYPE_ID )
						                       AND ( 1 = Extent7.AS_RESULT_IS_CURR )
						                 WHERE  ( 8    <![CDATA[ <> ]]> Extent1.AS_STUS_ID )
						                   <if test="asStatusList != null and asStatusList != '' ">
								                    AND Extent1.AS_STUS_ID  IN
									                  <foreach item="item" collection="asStatusList" index="index" open="(" separator="," close=")">
									                       #{item}
									                 </foreach>
								              </if>
						                     <if test="asTypeList != null and asTypeList != '' ">
								                     AND Extent1.AS_TYPE_ID  IN
									                  <foreach item="item" collection="asTypeList" index="index" open="(" separator="," close=")">
									                            #{item}
									                  </foreach>
								              </if>
								              
								              <!-- 171114 :: 선한이 (추가) -->
								              <if test="cmbbranchId != null and cmbbranchId != '' ">
                                                     AND Extent9.CODE  IN #{cmbbranchId}
                                              </if>
                                              <if test="cmbctId != null and cmbctId != '' ">
                                                     AND Extent8.MEM_CODE IN #{cmbctId}
                                              </if>
								              
						               ) E
						                LEFT JOIN SYS0047M Extent8   ON E.AS_CRT_USER_ID = Extent8.USER_ID
						          WHERE  1=1
						                   <if test=" createStrDate  != null  and createStrDate !=''  ">
						                         <![CDATA[ AND ( E.AS_REQST_DT >= to_date(#{createStrDate} ,'dd/mm/yyyy'))  ]]>
						                    </if>
						                   <if test="createEndDate != null   and createEndDate != '' ">
						                        <![CDATA[  AND ( E.AS_REQST_DT  <=  to_date( #{createEndDate},'dd/mm/yyyy') )]]>
						                   </if>
						                    <if test="asNum != null and asNum != '' ">
						                          AND ( E.AS_NO = #{asNum} )
						                    </if>
						                     <if test="resultNum != null and resultNum != '' ">
						                           AND ( (CASE  WHEN ( E.AS_RESULT_ID IS NOT NULL ) THEN E.AS_RESULT_NO  ELSE '-'   END) = #{resultNum})
						                     </if>
						                    
						                      <if test="orderNum != null and orderNum != '' ">
						                            AND ( E.SALES_ORD_NO = #{orderNum} ) 
						                      </if>
						                  
						                    <if test="custName != null and custName != '' ">
                                                    AND ( E.NAME1 LIKE '%'||#{custName}||'%') 									        
                                            </if>
									             
									         <if test="nricNum != null and nricNum != '' ">
								                     AND ( E.NRIC LIKE  '%'||#{nricNum}||'%' ) 
								             </if>
						       )S
    </select>

    <select id="selectASManagementList2" parameterType="Map" resultType="egovMap">
    <![CDATA[
           SELECT 
			D.CODE, C.AS_NO, C.AS_REQST_DT, J.CODE, F.AS_RESULT_NO, H.NAME, B.SALES_ORD_NO, I.CODE APP_TYPE, A.NAME, A.NRIC
			FROM SAL0029D A 
			INNER JOIN SAL0001D B ON B.CUST_ID = A.CUST_ID
			INNER JOIN SVC0001D C ON C.AS_SO_ID = B.SALES_ORD_ID
			INNER JOIN SVC0004D F ON F.AS_ENTRY_ID = C.AS_ID
			INNER JOIN SVC0004D G ON G.AS_RESULT_ID = F.AS_RESULT_ID
			INNER JOIN SYS0038M C ON C.STUS_CODE_ID = F.AS_RESULT_STUS_ID
			INNER JOIN SYS0038M J ON J.STUS_CODE_ID = C.AS_STUS_ID
			INNER JOIN SYS0013M D ON D.CODE_ID = C.AS_TYPE_ID
			INNER JOIN ORG0001D H ON H.MEM_ID = G.AS_CT_ID
			INNER JOIN SYS0013M I ON I.CODE_ID = B.APP_TYPE_ID
			WHERE 1=1
			 ]]> 
			<if test="asNum != null and asNum != '' ">
			  AND  C.AS_NO = #{asNum}
			 </if>
             <if test="asTypeList != null and asTypeList != '' ">
                     AND C.AS_TYPE_ID IN
                  <foreach item="item" collection="asTypeList" index="index" open="(" separator="," close=")">
                  #{item}
                  </foreach>
              </if>
                
                <if test="asStatusList != null and asStatusList != '' ">
                   AND C.AS_STUS_ID IN
                 <foreach item="item" collection="asStatusList" index="index" open="(" separator="," close=")">
                 #{item}
                 </foreach>
              </if>
			 <if test="resultNum != null and resultNum != '' ">
               AND F.AS_RESULT_NO = #{resultNum}
             </if>
			  <if test="orderNum != null and orderNum != '' ">
               AND B.SALES_ORD_NO =#{orderNum}
             </if>
			  <if test="custName != null and custName != '' ">
               AND A.NAME = #{custName}
             </if>
			  <if test="nricNum != null and nricNum != '' ">
              AND A.NRIC = #{nricNum}
             </if>
             
             <if test="createStrDate != '' and createEndDate == '' ">
              <![CDATA[ AND C.AS_REQST_DT  >= TO_DATE(#{createStrDate}, 'DD/MM/YYYY') ]]>
              </if>
              <if test="createEndDate != '' and createStrDate == '' ">
                       <![CDATA[  AND  C.AS_REQST_DT   <=  TO_DATE(#{createEndDate}, 'DD/MM/YYYY') ]]>
              </if>
              <if test="createStrDate != '' and createEndDate != '' ">
                <![CDATA[  AND C.AS_REQST_DT    between TO_DATE(#{createStrDate},  'DD/MM/YYYY') and  TO_DATE(#{createEndDate}, 'DD/MM/YYYY') ]]>
                 </if>
    </select>
    <select id="selectOrderBasicInfo" parameterType="Map" resultType="egovMap">
    <![CDATA[
            SELECT Extent1.ORD_ID ORD_ID  ,
		       Extent1.ORD_NO ORD_NO  ,
		       Extent1.RENTAL_STUS RENTAL_STUS  ,
		       Extent1.ORD_STUS_ID ORD_STUS_ID  ,
		       Extent1.ORD_STUS_CODE ORD_STUS_CODE  ,
		       Extent1.ORD_STUS_NAME ORD_STUS_NAME  ,
		       to_char(Extent1.ORD_DT,'dd/mm/yyyy') ORD_DT  ,
		       Extent1.INSTLMT_PRIOD INSTLMT_PRIOD  ,
		       Extent1.ORD_AMT ORD_AMT  ,
		       Extent1.ORD_MTH_RENTAL ORD_MTH_RENTAL  ,
		       Extent1.ORD_PV ORD_PV  ,
		       Extent1.ORD_PV_MONTH ORD_PV_MONTH  ,
		       Extent1.ORD_PV_YEAR ORD_PV_YEAR  ,
		       Extent1.ORD_REF_NO ORD_REF_NO  ,
		       Extent1.ORD_PO_NO ORD_PO_NO  ,
		       Extent1.ORD_DEPT_CODE ORD_DEPT_CODE  ,
		       Extent1.ORD_GRP_CODE ORD_GRP_CODE  ,
		       Extent1.ORD_ORG_CODE ORD_ORG_CODE  ,
		       Extent1.ORD_CRT_USER_ID ORD_CRT_USER_ID  ,
		       to_char(Extent1.ORD_CRT_DT,'dd/mm/yyyy') ORD_CRT_DT  ,
		       Extent1.APP_TYPE_ID APP_TYPE_ID  ,
		       Extent1.APP_TYPE_CODE APP_TYPE_CODE  ,
		       Extent1.APP_TYPE_DESC APP_TYPE_DESC  ,
		       Extent1.STOCK_ID STOCK_ID  ,
		       Extent1.STOCK_CODE STOCK_CODE  ,
		       Extent1.STOCK_DESC STOCK_DESC  ,
		       Extent1.CUST_ID CUST_ID  ,
		       Extent1.CUST_TYPE CUST_TYPE  ,
		       Extent1.CUST_NAME CUST_NAME  ,
		       Extent1.CUST_NRIC CUST_NRIC  ,
		       Extent1.CUST_DOB CUST_DOB  ,
		       Extent1.CUST_NATION CUST_NATION  ,
		       Extent1.CUST_GENDER CUST_GENDER  ,
		       Extent1.CUST_RACE CUST_RACE  ,
		       Extent1.CUST_EMAIL CUST_EMAIL  ,
		       Extent1.CUST_VA_NO CUST_VA_NO  ,
		       Extent1.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR  ,
		       Extent1.CUST_VISA_EXPR CUST_VISA_EXPR  ,
		       Extent1.ORD_PROMO_ID ORD_PROMO_ID  ,
		       Extent1.ORD_PROMO_CODE ORD_PROMO_CODE  ,
		       Extent1.ORD_PROMO_DESC ORD_PROMO_DESC  ,
		       Extent1.ORD_MEM_ID ORD_MEM_ID  ,
		       Extent1.ORD_MEM_CODE ORD_MEM_CODE  ,
		       Extent1.ORD_MEM_NAME ORD_MEM_NAME  ,
		       Extent1.ORD_MEM_NRIC ORD_MEM_NRIC  ,
		       Extent1.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID  ,
		       Extent1.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE  ,
		       Extent1.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME  ,
		       Extent1.COOL_OFF_PRIOD COOL_OFF_PRIOD  ,
		       Extent1.KEYIN_BRNCH_ID KEYIN_BRNCH_ID  ,
		       Extent1.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE  ,
		       Extent1.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME  ,
		       Extent1.ORD_REM ORD_REM  ,
		       Extent1.RENT_CHK_ID RENT_CHK_ID  ,
		       Extent1.ORD_HM_ID ORD_HM_ID  ,
		       Extent1.ORD_SM_ID ORD_SM_ID  ,
		       Extent1.ORD_GM_ID ORD_GM_ID  ,
		       Extent1.ORD_ADDR_ID ORD_ADDR_ID  ,
		       Extent1.ORD_CNTC_ID ORD_CNTC_ID  ,
		       Extent1.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO  ,
		       Extent1.UPD_DT UPD_DT  ,
		       Extent1.UPD_USER_ID UPD_USER_ID  ,
		       Extent1.JOM_PAY_REF JOM_PAY_REF  ,
		       Extent1.STK_CTGRY_ID STK_CTGRY_ID  ,
		       Extent1.STK_CTGRY_NAME STK_CTGRY_NAME  ,
		       Extent1.CUST_TYPE_ID CUST_TYPE_ID  ,
		       Extent1.CUST_BILL_ID CUST_BILL_ID  ,
		       Extent1.OBLIGT_YEAR OBLIGT_YEAR  
		  FROM ( SELECT vOrderBasicInfo.ORD_ID ORD_ID  ,
		                vOrderBasicInfo.ORD_NO ORD_NO  ,
		                vOrderBasicInfo.RENTAL_STUS RENTAL_STUS  ,
		                vOrderBasicInfo.ORD_STUS_ID ORD_STUS_ID  ,
		                vOrderBasicInfo.ORD_STUS_CODE ORD_STUS_CODE  ,
		                vOrderBasicInfo.ORD_STUS_NAME ORD_STUS_NAME  ,
		                vOrderBasicInfo.ORD_DT ORD_DT  ,
		                vOrderBasicInfo.INSTLMT_PRIOD INSTLMT_PRIOD  ,
		                vOrderBasicInfo.ORD_AMT ORD_AMT  ,
		                vOrderBasicInfo.ORD_MTH_RENTAL ORD_MTH_RENTAL  ,
		                vOrderBasicInfo.ORD_PV ORD_PV  ,
		                vOrderBasicInfo.ORD_PV_MONTH ORD_PV_MONTH  ,
		                vOrderBasicInfo.ORD_PV_YEAR ORD_PV_YEAR  ,
		                vOrderBasicInfo.ORD_REF_NO ORD_REF_NO  ,
		                vOrderBasicInfo.ORD_PO_NO ORD_PO_NO  ,
		                vOrderBasicInfo.ORD_DEPT_CODE ORD_DEPT_CODE  ,
		                vOrderBasicInfo.ORD_GRP_CODE ORD_GRP_CODE  ,
		                vOrderBasicInfo.ORD_ORG_CODE ORD_ORG_CODE  ,
		                vOrderBasicInfo.ORD_CRT_USER_ID ORD_CRT_USER_ID  ,
		                vOrderBasicInfo.ORD_CRT_DT ORD_CRT_DT  ,
		                vOrderBasicInfo.APP_TYPE_ID APP_TYPE_ID  ,
		                vOrderBasicInfo.APP_TYPE_CODE APP_TYPE_CODE  ,
		                vOrderBasicInfo.APP_TYPE_DESC APP_TYPE_DESC  ,
		                vOrderBasicInfo.STOCK_ID STOCK_ID  ,
		                vOrderBasicInfo.STOCK_CODE STOCK_CODE  ,
		                vOrderBasicInfo.STOCK_DESC STOCK_DESC  ,
		                vOrderBasicInfo.CUST_ID CUST_ID  ,
		                vOrderBasicInfo.CUST_TYPE CUST_TYPE  ,
		                vOrderBasicInfo.CUST_NAME CUST_NAME  ,
		                vOrderBasicInfo.CUST_NRIC CUST_NRIC  ,
		                vOrderBasicInfo.CUST_DOB CUST_DOB  ,
		                vOrderBasicInfo.CUST_NATION CUST_NATION  ,
		                vOrderBasicInfo.CUST_GENDER CUST_GENDER  ,
		                vOrderBasicInfo.CUST_RACE CUST_RACE  ,
		                vOrderBasicInfo.CUST_EMAIL CUST_EMAIL  ,
		                vOrderBasicInfo.CUST_VA_NO CUST_VA_NO  ,
		                vOrderBasicInfo.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR  ,
		                vOrderBasicInfo.CUST_VISA_EXPR CUST_VISA_EXPR  ,
		                vOrderBasicInfo.ORD_PROMO_ID ORD_PROMO_ID  ,
		                vOrderBasicInfo.ORD_PROMO_CODE ORD_PROMO_CODE  ,
		                vOrderBasicInfo.ORD_PROMO_DESC ORD_PROMO_DESC  ,
		                vOrderBasicInfo.ORD_MEM_ID ORD_MEM_ID  ,
		                vOrderBasicInfo.ORD_MEM_CODE ORD_MEM_CODE  ,
		                vOrderBasicInfo.ORD_MEM_NAME ORD_MEM_NAME  ,
		                vOrderBasicInfo.ORD_MEM_NRIC ORD_MEM_NRIC  ,
		                vOrderBasicInfo.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID  ,
		                vOrderBasicInfo.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE  ,
		                vOrderBasicInfo.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME  ,
		                vOrderBasicInfo.COOL_OFF_PRIOD COOL_OFF_PRIOD  ,
		                vOrderBasicInfo.KEYIN_BRNCH_ID KEYIN_BRNCH_ID  ,
		                vOrderBasicInfo.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE  ,
		                vOrderBasicInfo.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME  ,
		                vOrderBasicInfo.ORD_REM ORD_REM  ,
		                vOrderBasicInfo.RENT_CHK_ID RENT_CHK_ID  ,
		                vOrderBasicInfo.ORD_HM_ID ORD_HM_ID  ,
		                vOrderBasicInfo.ORD_SM_ID ORD_SM_ID  ,
		                vOrderBasicInfo.ORD_GM_ID ORD_GM_ID  ,
		                vOrderBasicInfo.ORD_ADDR_ID ORD_ADDR_ID  ,
		                vOrderBasicInfo.ORD_CNTC_ID ORD_CNTC_ID  ,
		                vOrderBasicInfo.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO  ,
		                vOrderBasicInfo.UPD_DT UPD_DT  ,
		                vOrderBasicInfo.UPD_USER_ID UPD_USER_ID  ,
		                vOrderBasicInfo.JOM_PAY_REF JOM_PAY_REF  ,
		                vOrderBasicInfo.STK_CTGRY_ID STK_CTGRY_ID  ,
		                vOrderBasicInfo.STK_CTGRY_NAME STK_CTGRY_NAME  ,
		                vOrderBasicInfo.CUST_TYPE_ID CUST_TYPE_ID  ,
		                vOrderBasicInfo.CUST_BILL_ID CUST_BILL_ID  ,
		                vOrderBasicInfo.OBLIGT_YEAR OBLIGT_YEAR  
		         FROM SAL1006V vOrderBasicInfo ) Extent1
		 WHERE  ( Extent1.ORD_NO = #{orderNo} )
		          AND ( Extent1.ORD_STUS_ID = 4 ) AND ROWNUM <= 1
             ]]>
    </select>
    
    
       <select id="getASHistoryList" parameterType="Map" resultType="egovMap">    
	                SELECT S.C1   ,
						       S.AS_NO   ,
						       S.AS_REQST_DT   ,
						       S.CODE   ,
						       S.C2   ,
						       S.AS_SETL_DT   ,
						       S.C3   ,
						       S.C4   ,
						       S.C5   ,
						       S.C6   ,
						       S.C7   
						  FROM ( SELECT DISTINCT Extent1.AS_NO AS_NO  ,
						                         Extent1.AS_REQST_DT AS_REQST_DT  ,
						                         Extent2.CODE CODE  ,
						                         1 C1  ,
						                         CASE 
						                              WHEN ( Extent3.AS_RESULT_ID IS NOT NULL ) THEN Extent3.AS_RESULT_NO
						                         ELSE '-'
						                            END C2  ,
						                         CASE 
						                              WHEN ( Extent4.RESN_ID IS NOT NULL ) THEN Extent4.RESN_DESC
						                         ELSE '-'
						                            END C3  ,
						                         CASE 
						                              WHEN ( Extent5.RESN_ID IS NOT NULL ) THEN Extent5.RESN_DESC
						                         ELSE '-'
						                            END C4  ,
						                         CASE 
						                              WHEN ( Extent6.MEM_ID IS NOT NULL ) THEN Extent6.MEM_CODE
						                         ELSE '-'
						                            END C5  ,
						                         CASE 
						                              WHEN ( Extent7.RESN_ID IS NOT NULL ) THEN Extent7.RESN_DESC
						                         ELSE '-'
						                            END C6  ,
						                         CASE 
						                              WHEN ( Extent3.AS_RESULT_ID IS NOT NULL ) THEN Extent3.AS_TOT_AMT
						                         ELSE UTILS.CONVERT_TO_FLOAT(0,53)
						                            END C7  ,
						                         Extent3.AS_SETL_DT AS_SETL_DT  
						         FROM SVC0001D Extent1
						                JOIN SYS0038M Extent2   ON Extent1.AS_STUS_ID = Extent2.STUS_CODE_ID
						                LEFT JOIN SVC0004D Extent3   ON ( Extent1.AS_ID = Extent3.AS_ENTRY_ID )
						                AND ( 1 = Extent3.AS_RESULT_IS_CURR )
						                AND ( 457 = Extent3.AS_RESULT_TYPE_ID )
						                LEFT JOIN SYS0032M Extent4   ON Extent1.AS_MALFUNC_ID = Extent4.RESN_ID
						                LEFT JOIN SYS0032M Extent5   ON Extent1.AS_MALFUNC_RESN_ID = Extent5.RESN_ID
						                LEFT JOIN ORG0001D Extent6   ON Extent3.AS_CT_ID = Extent6.MEM_ID
						                LEFT JOIN SYS0032M Extent7   ON Extent3.AS_SLUTN_RESN_ID = Extent7.RESN_ID
						          WHERE  Extent1.AS_SO_ID = #{SALES_ORD_ID} ) S
	                
    </select>
    
    
       <select id="getBSHistoryList" parameterType="Map" resultType="egovMap">
        <![CDATA[
        
                SELECT S.E_MONTH   ,
					       S.E_NO   ,
					       S.E_YEAR   ,
					       S.CODE   ,
					       S.CODE1   ,
					       S.NO1   ,
					       S.C1   ,
					       S.CODE2   ,
					       S.CODE3   ,
					       S.MEM_CODE  ,
					       S.E_MONTH||'-'|| S.E_YEAR  EDATE
					  FROM ( SELECT E.NO E_NO  ,
					                E.MONTH E_MONTH  ,
					                E.YEAR E_YEAR  ,
					                E2.CODE CODE  ,
					                E3.CODE CODE1  ,
					                E4.MEM_CODE MEM_CODE  ,
					                E5.SETL_DT C1  ,
					                E5.NO NO1  ,
					                E6.CODE CODE2  ,
					                E7.CODE CODE3  
					         FROM SVC0008D E
					                JOIN SYS0013M E2   ON E.TYPE_ID = E2.CODE_ID
					                JOIN SYS0038M E3   ON E.STUS_CODE_ID = E3.STUS_CODE_ID
					                JOIN ORG0001D E4   ON E.CODY_ID = E4.MEM_ID
					                LEFT JOIN SVC0006D E5   ON ( E.SCHDUL_ID = E5.SCHDUL_ID )
					                AND ( 1 = E5.RESULT_IS_CURR )
					                LEFT JOIN SYS0032M E6   ON E5.REN_COLCT_ID = E6.RESN_ID
					                LEFT JOIN SYS0032M E7   ON E5.FAIL_RESN_ID = E7.RESN_ID
					          WHERE  E.SALES_ORD_ID = #{SALES_ORD_ID} ) S
					  ORDER BY  S.E_NO DESC              
           ]]>
    </select>
    
    
    
     <select id="getBrnchId" parameterType="Map" resultType="egovMap">
                                
                    select code_Id ,code_Name
                    from(
                            SELECT  
                                SYS0005M.BRNCH_ID code_Id  ,
                                CODE ||'-'||SYS0005M.NAME  code_Name
                            FROM SYS0005M 
                            where SYS0005M.STUS_ID =1
                            AND SYS0005M.TYPE_ID   IN (40,43)
                             ORDER BY  SYS0005M.BRNCH_ID  ASC
                     ) A ORDER BY  code_Name  ASC
     
     </select>
     
     
     
     
     
     <select id="getResnCode" parameterType="Map" resultType="egovMap">
                     SELECT S.C1   ,
                                   S.RESN_ID   ,
                                   S.CODE    code_Id ,
                                   S.RESN_DESC code_Name   
                              FROM ( SELECT DISTINCT E5.RESN_ID   ,
                                                     E5.CODE   ,
                                                     E5.RESN_DESC   ,
                                                     1 C1  
                                     FROM SYS0032M Extent1
                                            JOIN SYS0033M Extent2   ON Extent1.RESN_ID = Extent2.RESN_ID
                                            JOIN SYS0033M Extent3   ON ( Extent2.RESN_GRP_ID = Extent3.RESN_PARENT_GRP_ID )
                                            AND ( ( 1 = Extent3.RESN_STUS_ID )
                                            OR ( ( 1 IS NULL )
                                            AND ( Extent3.RESN_STUS_ID IS NULL ) ) )
                                            JOIN SYS0033M Extent4   ON ( Extent3.RESN_GRP_ID = Extent4.RESN_PARENT_GRP_ID )
                                            AND ( ( 1 = Extent4.RESN_STUS_ID )
                                            OR ( ( 1 IS NULL )
                                            AND ( Extent4.RESN_STUS_ID IS NULL ) ) )
                                            JOIN SYS0032M E5   ON Extent4.RESN_ID = E5.RESN_ID
                                      WHERE  ( 340 = Extent1.RESN_TYPE_ID )
                                               AND ( 1 = Extent1.STUS_CODE_ID )
                                               AND ( 0 = (CASE 
                                                               WHEN ( Extent2.RESN_PARENT_GRP_ID IS NOT NULL ) THEN Extent2.RESN_PARENT_GRP_ID
                                             ELSE 0
                                                END) )
                                               AND ( Extent3.RESN_ID = #{RESN_ID} ) ) S

     
     </select>
     
     
     <select id="getResnDetail" parameterType="Map" resultType="egovMap">
	                 SELECT S.C1   ,
							       S.RESN_ID   ,
							       S.CODE    code_Id ,
							       S.RESN_DESC code_Name   
							  FROM ( SELECT DISTINCT E5.RESN_ID   ,
							                         E5.CODE   ,
							                         E5.RESN_DESC   ,
							                         1 C1  
							         FROM SYS0032M Extent1
							                JOIN SYS0033M Extent2   ON Extent1.RESN_ID = Extent2.RESN_ID
							                JOIN SYS0033M Extent3   ON ( Extent2.RESN_GRP_ID = Extent3.RESN_PARENT_GRP_ID )
							                AND ( ( 1 = Extent3.RESN_STUS_ID )
							                OR ( ( 1 IS NULL )
							                AND ( Extent3.RESN_STUS_ID IS NULL ) ) )
							                JOIN SYS0033M Extent4   ON ( Extent3.RESN_GRP_ID = Extent4.RESN_PARENT_GRP_ID )
							                AND ( ( 1 = Extent4.RESN_STUS_ID )
							                OR ( ( 1 IS NULL )
							                AND ( Extent4.RESN_STUS_ID IS NULL ) ) )
							                JOIN SYS0032M E5   ON Extent4.RESN_ID = E5.RESN_ID
							          WHERE  ( 340 = Extent1.RESN_TYPE_ID )
							                   AND ( 1 = Extent1.STUS_CODE_ID )
							                   AND ( 0 = (CASE 
							                                   WHEN ( Extent2.RESN_PARENT_GRP_ID IS NOT NULL ) THEN Extent2.RESN_PARENT_GRP_ID
							                 ELSE 0
							                    END) )
							                   AND ( Extent3.RESN_ID = #{RESN_ID} ) ) S

     
     </select>
     
     
     
       <select id="getMemberBymemberID" parameterType="Map" resultType="egovMap">
	
			     SELECT E1.MEM_ID   ,
						       E4.USER_ID   ,
						       E4.USER_NAME   ,
						       E4.USER_PASSWD   ,
						       E4.USER_FULL_NAME   ,
						       E4.USER_EMAIL   ,
						       E4.USER_STUS_ID   ,
						       E4.USER_BRNCH_ID   ,
						       E4.USER_DEPT_ID   ,
						       E4.USER_UPD_USER_ID   ,
						       E4.USER_UPD_DT   ,
						       E4.USER_SYNC_CHK   ,
						       E4.USER_NRIC   ,
						       E4.USER_DT_JOIN   ,
						       E4.USER_GSEC_SYN_CHK   ,
						       E4.USER_PASSWD_LAST_UPD_DT   ,
						       E4.USER_TYPE_ID   ,
						       E4.USER_VAL_ID_FROM   ,
						       E4.USER_VAL_ID_TO   ,
						       E4.USER_SEC_QUES_ID   ,
						       E4.USER_SEC_QUES_ANS   ,
						       E4.USER_WORK_NO   ,
						       E4.USER_MOBILE_NO   ,
						       E4.USER_EXT_NO   ,
						       E4.USER_IS_PART_TM   ,
						       E4.USER_DEPT_ID   ,
						       E4.USER_IS_EXTRNL   ,
						       E1.MEM_CODE   ,
						       E1.MEM_TYPE   ,
						       E1.NAME   ,
						       E1.FULL_NAME   ,
						       E1.PASSWD   ,
						       E1.NRIC   ,
						       E1.DOB   ,
						       E1.GENDER   ,
						       E1.RACE   ,
						       E1.MARTL   ,
						       E1.NATION   ,
						       <!-- 
						       E1.ADDR1   ,
						       E1.ADDR2   ,
						       E1.ADDR3   ,
						       E1.ADDR4   ,
						       E1.AREAL   ,
						       E1.POST_CODE   ,
						       E1.STATE   ,
						       E1.CNTY   ,
						       -->
						       E1.TEL_OFFICE   ,
						       E1.TEL_HUSE   ,
						       E1.TEL_MOBILE   ,
						       E1.EMAIL   ,
						       E1.SPUSE_CODE   ,
						       E1.SPOUSE_NAME   ,
						       E1.SPOUSE_NRIC   ,
						       E1.SPOUSE_OCPAT   ,
						       E1.SPOUSE_TEL_CNTC   ,
						       E1.SPOUSE_DOB   ,
						       E1.EDC_LEV   ,
						       E1.LANG   ,
						       E1.BANK   ,
						       E1.BANK_ACC_NO   ,
						       E1.SPONS_CODE   ,
						       E1.JOIN_DT   ,
						       E1.RESIGN_DT   ,
						       E1.TRM_DT   ,
						       E1.RENEW_DT   ,
						       E1.AGRMNT_NO   ,
						       E1.BRNCH   ,
						       E1.STUS   ,
						       E1.SYNC_CHK   ,
						       E1.RANK   ,
						       E1.TRNSPRT   ,
						       E1.PROMO_DT   ,
						       E1.TR_NO   ,
						       E1.CRT_DT   ,
						       E1.CRT_USER_ID   ,
						       E1.UPD_DT   ,
						       E1.UPD_USER_ID   ,
						       E1.MEM_IS_OUT_SRC   ,
						       E1.APLICNT_ID   ,
						       E1.BIZ_TYPE   ,
						       E1.HSPTLZ   ,
						       E6.MEM_ID   ,
						       E6.MEM_CODE   ,
						       E6.MEM_LVL   ,
						       E6.DEPT_CODE   ,
						       E6.GRP_CODE   ,
						       E6.ORG_CODE   ,
						       E6.TOP_ORG_CODE   ,
						       E6.MEM_UP_ID   ,
						       E6.LVL3_UP_ID   ,
						       E6.LVL2_UP_ID   ,
						       E6.LVL1_UP_ID   ,
						       E6.LVL0_UP_ID   ,
						       E7.MEM_ID   ,
						       E7.MEM_UP_ID   ,
						       E7.MEM_LVL   ,
						       E7.DEPT_CODE   ,
						       E7.ORG_UPD_USER_ID   ,
						       E7.ORG_UPD_DT   ,
						       E7.PREV_DEPT_CODE   ,
						       E7.PREV_GRP_CODE   ,
						       E7.PREV_MEM_ID_ID   ,
						       E7.PREV_MEM_LVL   ,
						       E7.ORG_STUS_CODE_ID   ,
						       E7.PR_CODE   ,
						       E7.PR_MEM_ID   ,
						       E7.GRAND_PR_CODE   ,
						       E7.GRAND_PR_MEM_ID   ,
						       E7.LAST_DEPT_CODE   ,
						       E7.LAST_GRP_CODE   ,
						       E7.LAST_ORG_CODE   ,
						       E7.LAST_TOP_ORG_CODE   ,
						       E7.BRNCH_ID   
						  FROM ORG0001D E1
						         JOIN SYS0013M Extent2   ON E1.RANK = Extent2.CODE_ID
						         LEFT JOIN SYS0038M Extent3   ON E1.STUS = Extent3.STUS_CODE_ID
						         LEFT JOIN SYS0047M E4   ON E1.CRT_USER_ID = E4.USER_ID
						         LEFT JOIN SYS0047M Extent5   ON E1.UPD_USER_ID = Extent5.USER_ID
						         LEFT JOIN ( SELECT S.MEM_ID MEM_ID  ,
						                            S.MEM_CODE MEM_CODE  ,
						                            S.MEM_LVL MEM_LVL  ,
						                            S.DEPT_CODE DEPT_CODE  ,
						                            S.GRP_CODE GRP_CODE  ,
						                            S.ORG_CODE ORG_CODE  ,
						                            S.TOP_ORG_CODE TOP_ORG_CODE  ,
						                            S.MEM_UP_ID MEM_UP_ID  ,
						                            S.LVL3_UP_ID LVL3_UP_ID  ,
						                            S.LVL2_UP_ID LVL2_UP_ID  ,
						                            S.LVL1_UP_ID LVL1_UP_ID  ,
						                            S.LVL0_UP_ID LVL0_UP_ID  
						                     FROM ORG1001V S ) E6   ON E1.MEM_ID = E6.MEM_ID
						         LEFT JOIN ORG0005D E7   ON E1.MEM_ID = E7.MEM_ID
						 WHERE  E1.MEM_ID = #{MEM_ID} AND ROWNUM   <![CDATA[ <=   ]]>  1
		
     </select>
     
      <select id="getASEntryDocNo" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                SELECT FN_GET_DOCNO(#{DOCNO})  asno  FROM DUAL
        ]]> 
     </select>
     
     <select id="getASEntryId" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                
                 SELECT  SVC0001D_AS_ID_SEQ.nextval   seq FROM DUAL
       
        ]]> 
     </select>
     
     <select id="getResultASEntryId" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                SELECT SVC0004D_AS_RESULT_ID_SEQ.NEXTVAL seq FROM DUAL
        ]]> 
     </select>
     
     
     
      
     <insert id="insertSVC0001D" parameterType="Map" >
       <![CDATA[ 
       INSERT INTO SVC0001D (
						   AS_ID, AS_NO, AS_SO_ID, 
						   AS_MEM_ID, AS_MEM_GRP, AS_REQST_DT, 
						   AS_REQST_TM, AS_APPNT_DT, AS_APPNT_TM, 
						   AS_BRNCH_ID, AS_MALFUNC_ID, AS_MALFUNC_RESN_ID, 
						   AS_REM_REQSTER, AS_REM_REQSTER_CNTC, AS_CALLLOG_ID, 
						   AS_STUS_ID, AS_SMS, AS_CRT_USER_ID, 
						   AS_CRT_DT, AS_UPD_USER_ID, AS_UPD_DT, 
						   AS_ENTRY_IS_SYNCH, AS_ENTRY_IS_EDIT, AS_TYPE_ID, 
						   AS_REQSTER_TYPE_ID, AS_IS_BS_WITHIN_30DAYS, AS_ALLOW_COMM, 
						   AS_PREV_MEM_ID, AS_REM_ADD_CNTC, AS_REM_REQSTER_CNTC_SMS, 
						   AS_REM_ADD_CNTC_SMS, AS_SESION_CODE, CALL_MEM, 
						   REF_REQST
						 ) 
						VALUES (
						   #{AS_ID}, 
						   #{AS_NO}, 
						   #{AS_SO_ID}, 
						   #{AS_MEM_ID}, 
						   #{AS_MEM_GRP}, 
						   TO_DATE(#{AS_REQST_DT},'DD/MM/YYYY'), 
						   #{AS_REQST_TM}, 
						   TO_DATE(#{AS_APPNT_DT},'DD/MM/YYYY'), 
						   #{AS_APPNT_TM}, 
						   #{AS_BRNCH_ID}, 
						   #{AS_MALFUNC_ID}, 
						   #{AS_MALFUNC_RESN_ID}, 
						   #{AS_REM_REQSTER}, 
						   #{AS_REM_REQSTER_CNTC}, 
						   #{AS_CALLLOG_ID}, 
						   #{AS_STUS_ID}, 
						   #{AS_SMS}, 
						   #{USER_ID}, 
						   SYSDATE, 
						   #{USER_ID}, 
						   SYSDATE, 
						   #{AS_ENTRY_IS_SYNCH}, 
						   #{AS_ENTRY_IS_EDIT}, 
						   #{AS_TYPE_ID}, 
						   #{AS_REQSTER_TYPE_ID}, 
						   #{AS_IS_BS_WITHIN_30DAYS}, 
						   #{AS_ALLOW_COMM}, 
						   #{AS_PREV_MEM_ID}, 
						   #{AS_REM_ADD_CNTC}, 
						   #{AS_REM_REQSTER_CNTC_SMS}, 
						   #{AS_REM_ADD_CNTC_SMS}, 
						   #{AS_SESION_CODE}, 
						   #{CALL_MEMBER}, 
						   #{REF_REQUEST}
						   )
        ]]> 
     </insert>
     
     
      
     <insert id="insertSVC0003D" parameterType="Map" >
       <![CDATA[ 
					       INSERT INTO  SVC0003D (
											   AS_PIC_ID, AS_ID, PIC_NAME, 
											   PIC_CNTC, CRT_DT, CRT_USER_ID) 
					           VALUES ( SVC0003D_AS_PIC_ID_SEQ.NEXTVAL , #{AS_ID} , #{PIC_NAME},
					                           #{PIC_CNTC},SYSDATE , #{USER_ID})
        ]]> 
     </insert>
     
      <select id="selASEntryView" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
					               
					 SELECT 
					   S.AS_ID, S.AS_NO, 
					   S.AS_SO_ID, 
					   S.AS_MEM_ID, S.AS_MEM_GRP, 
					   TO_CHAR(S.AS_REQST_DT,'DD/MM/YYYY') AS_REQST_DT, 
					   S.AS_REQST_TM, 
					   TO_CHAR(S.AS_APPNT_DT,'DD/MM/YYYY') AS_APPNT_DT, 
					   S.AS_APPNT_TM, 
					   S.AS_BRNCH_ID, S.AS_MALFUNC_ID, S.AS_MALFUNC_RESN_ID, 
					   S.AS_REM_REQSTER, S.AS_REM_REQSTER_CNTC, S.AS_CALLLOG_ID, 
					   S.AS_STUS_ID, S.AS_SMS, S.AS_CRT_USER_ID, 
					   S.AS_CRT_DT, S.AS_UPD_USER_ID, S.AS_UPD_DT, 
					   S.AS_ENTRY_IS_SYNCH, S.AS_ENTRY_IS_EDIT, S.AS_TYPE_ID, 
					   S.AS_REQSTER_TYPE_ID, S.AS_IS_BS_WITHIN_30DAYS, S.AS_ALLOW_COMM, 
					   S.AS_PREV_MEM_ID, S.AS_REM_ADD_CNTC, S.AS_REM_REQSTER_CNTC_SMS, 
					   S.AS_REM_ADD_CNTC_SMS, S.AS_SESION_CODE, S.CALL_MEM, 
					   S.REF_REQST,
					   B.PIC_NAME ,B.PIC_CNTC, B.AS_PIC_ID,
					   (SELECT  MEM_CODE FROM ORG0001D WHERE MEM_ID =AS_MEM_ID) MEM_CODE
					  FROM  
					    SVC0001D  S ,   
					    SVC0003D  B
					 WHERE  S.AS_ID = B.AS_ID (+)
					 AND  S.AS_NO =#{AS_NO}
        ]]> 
     </select>
     
      <insert id="updateSVC0001D" parameterType="Map" >

			      UPDATE  SVC0001D
						SET  
						       AS_MEM_ID               = #{AS_MEM_ID},
						       AS_MEM_GRP              = #{AS_MEM_GRP},
						       AS_REQST_DT             = TO_DATE(#{AS_REQST_DT},'DD/MM/YYYY'),
						       AS_REQST_TM             = #{AS_REQST_TM},
						       AS_APPNT_DT             = TO_DATE(#{AS_APPNT_DT},'DD/MM/YYYY'),
						       AS_APPNT_TM             = #{AS_APPNT_TM},
						       AS_BRNCH_ID             = #{AS_BRNCH_ID},
						       AS_MALFUNC_ID           = #{AS_MALFUNC_ID},
						       AS_MALFUNC_RESN_ID      = #{AS_MALFUNC_RESN_ID},
						       AS_REM_REQSTER          = #{AS_REM_REQSTER},
						       AS_REM_REQSTER_CNTC     = #{AS_REM_REQSTER_CNTC},
						      <!-- 
						       AS_CALLLOG_ID           = #{AS_CALLLOG_ID},
						       AS_STUS_ID              = #{AS_STUS_ID},
						       AS_SMS                  = #{AS_SMS},
						       AS_UPD_USER_ID          = #{USER_ID},
						       AS_UPD_DT               = SYSDATE,
						       AS_ENTRY_IS_SYNCH       = #{AS_ENTRY_IS_SYNCH},
						       AS_ENTRY_IS_EDIT        = #{AS_ENTRY_IS_EDIT},
						       AS_TYPE_ID              = #{AS_TYPE_ID},
						       AS_PREV_MEM_ID          = #{AS_PREV_MEM_ID},
						       
						       -->
						      
						       AS_REQSTER_TYPE_ID      = #{AS_REQSTER_TYPE_ID},
						       AS_IS_BS_WITHIN_30DAYS  = #{AS_IS_BS_WITHIN_30DAYS},
						       AS_ALLOW_COMM           = #{AS_ALLOW_COMM},
						       AS_REM_ADD_CNTC         = #{AS_REM_ADD_CNTC},
						       AS_REM_REQSTER_CNTC_SMS = #{AS_REM_REQSTER_CNTC_SMS},
						       AS_REM_ADD_CNTC_SMS     = #{AS_REM_ADD_CNTC_SMS},
						       AS_SESION_CODE          = #{AS_SESION_CODE},
						       CALL_MEM             = #{CALL_MEMBER},
						       REF_REQST             = #{REF_REQUEST}
						WHERE  AS_ID                   = #{AS_ID}
     
     </insert>
     
          <insert id="updateSVC0003D" parameterType="Map" >
		       <![CDATA[ 
					        UPDATE  SVC0003D
					                        SET PIC_NAME = #{PIC_NAME} ,
					                              PIC_CNTC =  #{PIC_CNTC} 
		                    WHERE  AS_PIC_ID = #{AS_PIC_ID}
		        ]]> 
         </insert>
         
         
         
         <select id="getASOrderInfo" parameterType="Map" resultType="egovMap">
        
                SELECT S.ORD_ID   ,
							       S.ORD_NO   ,
							       S.APP_TYPE_CODE   ,
							       to_char(S.ORD_DT,'dd/mm/yyyy') C1  ,
							       S.ORD_STUS_CODE   ,
							       S.RENTAL_STUS   ,
							       S.CUST_NAME   ,
							       S.CUST_NRIC   ,
							       S.INST_CNT_NAME   ,
							       S.INST_CNT_TEL_M   ,
							       S.INST_CNT_TEL_O   ,
							       S.INST_CNT_TEL_R   ,
							       S.INST_ADDR1   ,
							       S.INST_ADDR2   ,
							       S.INST_ADDR3   ,
							       S.INST_POST_CODE   ,
							       S.INST_AREA   ,
							       S.INST_STATE   ,
							       S.INST_CNTY   ,
							       S.STOCK_CODE   ,
							       S.STOCK_DESC   ,
							       S.LAST_INSTALL_SIRIM_NO   ,
							       S.LAST_INSTALL_SERIAL_NO   ,
							       CASE 
							            WHEN ( S.CODE_ID IS NOT NULL ) THEN S.CODE_NAME
							       ELSE '-'
							          END C2  ,
							       S.LAST_INSTALL_NO   ,
							       S.LAST_INSTALL_DT C3  ,
							       S.LAST_INSTALL_CT_CODE   ,
							       S.LAST_INSTALL_CT_NAME   ,
							       S.INSTCT   ,
							       CASE 
							            WHEN ( NOT ( ( S.ORDERID1 IS NULL )
							              AND ( S.CONFIG_SETT_INS IS NULL )
							              AND ( S.CONFIG_SETT_BS IS NULL )
							              AND ( S.CONFIG_SETT_AS IS NULL )
							              AND ( S.CONFIG_BS_GEN IS NULL )
							              AND ( S.CONFIG_BS_MEM_ID IS NULL )
							              AND ( S.CONFIG_BS_WEEK IS NULL )
							              AND ( S.CONFIG_BS_REM IS NULL )
							              AND ( S.SRV_MEM_ID IS NULL )
							              AND ( S.SRV_MEM_NO IS NULL )
							              AND ( S.SRV_MEM_BILL_NO IS NULL )
							              AND ( S.SRV_MEM_PAC_ID IS NULL )
							              AND ( S.SRV_MEM_PAC_CODE IS NULL )
							              AND ( S.SRV_MEM_PAC_NAME IS NULL )
							              AND ( S.SRV_MEM_FREQ IS NULL )
							              AND ( S.SRV_MEM_DUR IS NULL )
							              AND ( S.SRV_MEM_SALESMAN_CODE IS NULL )
							              AND ( S.SRV_MEM_SALESMAN_NAME IS NULL ) ) ) THEN S.SRV_MEM_PAC_CODE
							       ELSE ' '
							          END C4  ,
							       CASE 
							            WHEN ( NOT ( ( S.ORDERID1 IS NULL )
							              AND ( S.CONFIG_SETT_INS IS NULL )
							              AND ( S.CONFIG_SETT_BS IS NULL )
							              AND ( S.CONFIG_SETT_AS IS NULL )
							              AND ( S.CONFIG_BS_GEN IS NULL )
							              AND ( S.CONFIG_BS_MEM_ID IS NULL )
							              AND ( S.CONFIG_BS_WEEK IS NULL )
							              AND ( S.CONFIG_BS_REM IS NULL )
							              AND ( S.SRV_MEM_ID IS NULL )
							              AND ( S.SRV_MEM_NO IS NULL )
							              AND ( S.SRV_MEM_BILL_NO IS NULL )
							              AND ( S.SRV_MEM_PAC_ID IS NULL )
							              AND ( S.SRV_MEM_PAC_CODE IS NULL )
							              AND ( S.SRV_MEM_PAC_NAME IS NULL )
							              AND ( S.SRV_MEM_FREQ IS NULL )
							              AND ( S.SRV_MEM_DUR IS NULL )
							              AND ( S.SRV_MEM_SALESMAN_CODE IS NULL )
							              AND ( S.SRV_MEM_SALESMAN_NAME IS NULL ) ) ) THEN S.SRV_MEM_PAC_NAME
							       ELSE ' '
							          END C5  ,
							       to_char(S.SRV_MEM_EXPR_DT ,'dd/mm/yyyy') C6  
							  FROM ( SELECT E.ORD_ID ORD_ID  ,
							                E.ORD_NO ORD_NO  ,
							                E.RENTAL_STUS RENTAL_STUS  ,
							                E.ORD_STUS_CODE ORD_STUS_CODE  ,
							                E.ORD_DT ORD_DT  ,
							                E.APP_TYPE_CODE APP_TYPE_CODE  ,
							                E.STOCK_CODE STOCK_CODE  ,
							                E.STOCK_DESC STOCK_DESC  ,
							                E.CUST_NAME CUST_NAME  ,
							                E.CUST_NRIC CUST_NRIC  ,
							                '' INST_ADDR1  ,
							                '' INST_ADDR2  ,
							                '' INST_ADDR3  ,
							                '' INST_CNTY  ,
							                '' INST_STATE  ,
							                '' INST_AREA  ,
							                '' INST_POST_CODE  ,
							                E2.INST_CNT_NAME INST_CNT_NAME  ,
							                E2.INST_CNT_TEL_M INST_CNT_TEL_M  ,
							                E2.INST_CNT_TEL_O INST_CNT_TEL_O  ,
							                E2.INST_CNT_TEL_R INST_CNT_TEL_R  ,
							                E2.LAST_INSTALL_NO LAST_INSTALL_NO  ,
							                E2.LAST_INSTALL_CT_CODE LAST_INSTALL_CT_CODE  ,
							                E2.LAST_INSTALL_CT_NAME LAST_INSTALL_CT_NAME  ,
							                E2.LAST_INSTALL_DT LAST_INSTALL_DT  ,
							                E2.LAST_INSTALL_SIRIM_NO LAST_INSTALL_SIRIM_NO  ,
							                E2.LAST_INSTALL_SERIAL_NO LAST_INSTALL_SERIAL_NO  ,
							                E2.INSTCT INSTCT  ,
							                E4.ORD_ID ORDERID1  ,
							                E4.CONFIG_SETT_INS CONFIG_SETT_INS  ,
							                E4.CONFIG_SETT_BS CONFIG_SETT_BS  ,
							                E4.CONFIG_SETT_AS CONFIG_SETT_AS  ,
							                E4.CONFIG_BS_GEN CONFIG_BS_GEN  ,
							                E4.CONFIG_BS_MEM_ID CONFIG_BS_MEM_ID  ,
							                E4.CONFIG_BS_WEEK CONFIG_BS_WEEK  ,
							                E4.CONFIG_BS_REM CONFIG_BS_REM  ,
							                E4.SRV_MEM_ID SRV_MEM_ID  ,
							                E4.SRV_MEM_NO SRV_MEM_NO  ,
							                E4.SRV_MEM_BILL_NO SRV_MEM_BILL_NO  ,
							                E4.SRV_MEM_PAC_ID SRV_MEM_PAC_ID  ,
							                E4.SRV_MEM_PAC_CODE SRV_MEM_PAC_CODE  ,
							                E4.SRV_MEM_PAC_NAME SRV_MEM_PAC_NAME  ,
							                E4.SRV_MEM_EXPR_DT SRV_MEM_EXPR_DT  ,
							                E4.SRV_MEM_FREQ SRV_MEM_FREQ  ,
							                E4.SRV_MEM_DUR SRV_MEM_DUR  ,
							                E4.SRV_MEM_SALESMAN_CODE SRV_MEM_SALESMAN_CODE  ,
							                E4.SRV_MEM_SALESMAN_NAME SRV_MEM_SALESMAN_NAME  ,
							                E5.CODE_ID CODE_ID  ,
							                E5.CODE_NAME CODE_NAME  
							         FROM ( SELECT vOrderBasicInfo.*
							                FROM SAL1006V vOrderBasicInfo ) E
							                JOIN ( SELECT vOrderInstallationInfo.*  
							                       FROM SAL1010V vOrderInstallationInfo ) E2   ON E.ORD_ID = E2.ORD_ID
							                JOIN SYS0026M Extent3   ON ( E.STOCK_CODE = Extent3.STK_CODE )
							                OR ( ( E.STOCK_CODE IS NULL )
							                AND ( Extent3.STK_CODE IS NULL ) )
							                LEFT JOIN ( SELECT vOrderSrvMemConfigInfo.*  
							                            FROM SAL1014V vOrderSrvMemConfigInfo ) E4   ON E.ORD_ID = E4.ORD_ID
							                LEFT JOIN SYS0013M E5   ON Extent3.STK_CTGRY_ID = E5.CODE_ID
							          WHERE  E.ORD_ID = #{ORD_ID} AND ROWNUM   <![CDATA[ <=   ]]> 1 ) S
				                
     </select>
     

     <select id="getASEvntsInfo" parameterType="Map" resultType="egovMap">
				     SELECT S.AS_ID AS_ID  ,
							       S.AS_ALLOW_COMM AS_ALLOW_COMM  ,
							       to_char(S.AS_CRT_DT,'dd/mm/yyyy') AS_CRT_DT  ,
							       CASE 
							            WHEN ( S.USER_ID IS NOT NULL ) THEN S.USER_NAME
							       ELSE '-' 
							          END C1  ,
							       S.AS_NO AS_NO  ,
							       S.AS_STUS_ID AS_STUS_ID  ,
							       S.AS_SO_ID AS_SO_ID  ,
							       CASE 
							            WHEN ( S.AS_REQSTER_TYPE_ID IS NOT NULL ) THEN S.AS_REQSTER_TYPE_ID
							       ELSE 0
							          END C2  ,
							       CASE 
							            WHEN ( S.CODE_ID IS NOT NULL ) THEN S.CODE_NAME
							       ELSE ' '
							          END C3  ,
							       S.AS_REM_REQSTER AS_REM_REQSTER  ,
							       S.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC  ,
							       S.CODE CODE  ,
							       S.AS_REQST_DT AS_REQST_DT  ,
							       S.AS_REQST_TM AS_REQST_TM  ,
							       S.AS_APPNT_DT AS_APPNT_DT  ,
							       S.AS_APPNT_TM AS_APPNT_TM  ,
							       S.DISTANCE DISTANCE ,
                                   S.PREV_SVC_AREA PREV_SVC_AREA,
                                   S.NEXT_SVC_AREA NEXT_SVC_AREA,
							       CASE 
							            WHEN ( S.AS_RESULT_ID IS NOT NULL ) THEN S.AS_RESULT_ID
							       ELSE 0
							          END C4  ,
							       CASE 
							            WHEN ( S.AS_RESULT_ID IS NOT NULL ) THEN S.AS_RESULT_NO
							       ELSE '-'
							          END C5  ,
							       S.AS_MEM_GRP AS_MEM_GRP  ,
							       CASE 
							            WHEN ( S.AS_BRNCH_ID IS NOT NULL ) THEN S.AS_BRNCH_ID
							       ELSE 0
							          END C6  ,
							       CASE 
							            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.CODE1
							       ELSE ' '
							          END C7  ,
							       CASE 
							            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.NAME
							       ELSE ' '
							          END C8  ,
							       CASE 
							            WHEN ( S.AS_MEM_ID IS NOT NULL ) THEN S.AS_MEM_ID
							       ELSE 0
							          END C9  ,
							       CASE 
							            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.MEM_CODE
							       ELSE ' '
							          END C10  ,
							       CASE 
							            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.NAME1
							       ELSE ' '
							          END C11  ,
							       CASE 
							            WHEN ( S.AS_MALFUNC_ID IS NOT NULL ) THEN S.AS_MALFUNC_ID
							       ELSE 0
							          END C12  ,
							       CASE 
							            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.CODE2
							       ELSE ' '
							          END C13  ,
							       CASE 
							            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.RESN_DESC
							       ELSE ' '
							          END C14  ,
							       CASE 
							            WHEN ( S.AS_MALFUNC_RESN_ID IS NOT NULL ) THEN S.AS_MALFUNC_RESN_ID
							       ELSE 0
							          END C15  ,
							       CASE 
							            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.CODE3
							       ELSE ' '
							          END C16  ,
							       CASE 
							            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.REASONDESC1
							       ELSE ' '
							          END C17  ,
							       S.AS_SMS AS_SMS  ,
							       S.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS  ,
							      -- CASE 
							      --      WHEN ( S.CALL_RESULT_ID IS NOT NULL ) THEN S.CALL_REM
							       --ELSE ' '
							        --  END C18  ,
							       CASE 
							            WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
							              AND ( S.ACC_BILL_TASK_ID IS NULL ) ) ) THEN S.ACC_BILL_ID
							            WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
							              AND ( S.ACC_BILL_TASK_ID IS NULL ) ) ) THEN S.ACC_BILL_ID
							       ELSE 0
							          END C19  ,
							       CASE 
							            WHEN ( NOT ( ( S.TAX_INVC_ID IS NULL )
							              AND ( S.TAX_INVC_REF_NO IS NULL ) ) ) THEN S.TAX_INVC_REF_NO
							       ELSE ' '
							          END C20  
							  FROM ( SELECT E.AS_ID AS_ID  ,
							                E.AS_NO AS_NO  ,
							                E.AS_SO_ID AS_SO_ID  ,
							                E.AS_MEM_ID AS_MEM_ID  ,
							                E.AS_MEM_GRP AS_MEM_GRP  ,
							                E.AS_REQST_DT AS_REQST_DT  ,
							                E.AS_REQST_TM AS_REQST_TM  ,
							                E.AS_APPNT_DT AS_APPNT_DT  ,
							                E.AS_APPNT_TM AS_APPNT_TM  ,
							                E.AS_BRNCH_ID AS_BRNCH_ID  ,
							                E.AS_MALFUNC_ID AS_MALFUNC_ID  ,
							                E.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID  ,
							                E.AS_REM_REQSTER AS_REM_REQSTER  ,
							                E.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC  ,
							                E.AS_STUS_ID AS_STUS_ID  ,
							                E.AS_SMS AS_SMS  ,
							                E.AS_CRT_DT AS_CRT_DT  ,
							                E.AS_REQSTER_TYPE_ID AS_REQSTER_TYPE_ID  ,
							                E.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS  ,
							                E.AS_ALLOW_COMM AS_ALLOW_COMM  ,
							                E.DISTANCE DISTANCE ,
                                            E.PREV_SVC_AREA PREV_SVC_AREA,
                                            E.NEXT_SVC_AREA NEXT_SVC_AREA,
							                Extent2.CODE CODE  ,
							                Extent3.USER_ID USER_ID  ,
							                Extent3.USER_NAME USER_NAME  ,
							                Extent4.CODE_ID CODE_ID  ,
							                Extent4.CODE_NAME CODE_NAME  ,
							                Extent5.AS_RESULT_ID AS_RESULT_ID  ,
							                Extent5.AS_RESULT_NO AS_RESULT_NO  ,
							                Extent6.BRNCH_ID BRNCH_ID  ,
							                Extent6.CODE CODE1  ,
							                Extent6.NAME NAME  ,
							                Extent7.MEM_ID MEM_ID  ,
							                Extent7.MEM_CODE MEM_CODE  ,
							                Extent7.NAME NAME1  ,
							                Extent8.RESN_ID RESN_ID  ,
							                Extent8.CODE CODE2  ,
							                Extent8.RESN_DESC RESN_DESC  ,
							                Extent9.RESN_ID REASONID1  ,
							                Extent9.CODE CODE3  ,
							                Extent9.RESN_DESC REASONDESC1  ,
							                E1.CALL_RESULT_ID CALL_RESULT_ID  ,
							                E1.CALL_REM CALL_REM  ,
							                E2.TAX_INVC_ID TAX_INVC_ID  ,
							                E2.TAX_INVC_REF_NO TAX_INVC_REF_NO  ,
							                E3.ACC_BILL_ID ACC_BILL_ID  ,
							                E3.ACC_BILL_TASK_ID ACC_BILL_TASK_ID  
							         FROM SVC0001D E
							                JOIN SYS0038M Extent2   ON E.AS_STUS_ID = Extent2.STUS_CODE_ID
							                LEFT JOIN  SYS0047M Extent3   ON E.AS_CRT_USER_ID = Extent3.USER_ID
							                LEFT JOIN SYS0013M Extent4   ON E.AS_REQSTER_TYPE_ID = Extent4.CODE_ID
							                LEFT JOIN SVC0004D Extent5   ON ( E.AS_ID = Extent5.AS_ENTRY_ID )
							                AND ( 457 = Extent5.AS_RESULT_TYPE_ID )
							                AND ( 1 = Extent5.AS_RESULT_IS_CURR )
							                LEFT JOIN SYS0005M Extent6   ON E.AS_BRNCH_ID = Extent6.BRNCH_ID
							                LEFT JOIN ORG0001D Extent7   ON E.AS_MEM_ID = Extent7.MEM_ID
							                LEFT JOIN SYS0032M Extent8   ON E.AS_MALFUNC_ID = Extent8.RESN_ID
							                LEFT JOIN SYS0032M Extent9   ON E.AS_MALFUNC_RESN_ID = Extent9.RESN_ID
							                LEFT JOIN CCR0006D E0   ON E.AS_CALLLOG_ID = E0.CALL_ENTRY_ID
							                LEFT JOIN CCR0007D E1   ON E0.RESULT_ID = E1.CALL_RESULT_ID
							                LEFT JOIN PAY0031D E2   ON ( Extent5.AS_RESULT_NO = E2.TAX_INVC_SVC_NO )
							                OR ( ( Extent5.AS_RESULT_NO IS NULL )
							                AND ( E2.TAX_INVC_SVC_NO IS NULL ) )
							                LEFT JOIN PAY0016D E3   ON E2.TAX_INVC_REF_NO = E3.ACC_BILL_REM
							          WHERE  E.AS_ID = #{AS_ID} AND ROWNUM   <![CDATA[ <=   ]]> 1 ) S
     </select>
     
   <select id="getASHistoryInfo" parameterType="Map" resultType="egovMap">
			     SELECT S.C1 C1  ,
								       S.AS_NO AS_NO  ,
								       S.AS_REQST_DT AS_REQST_DT  ,
								       S.CODE CODE  ,
								       S.C2 C2  ,
								       S.AS_SETL_DT AS_SETL_DT  ,
								       S.C3 C3  ,
								       S.C4 C4  ,
								       S.C5 C5  ,
								       S.C6 C6  ,
								       S.C7 C7  
								  FROM ( SELECT DISTINCT D.AS_NO AS_NO  ,
								                         D.AS_REQST_DT AS_REQST_DT  ,
								                         Extent2.CODE CODE  ,
								                         1 C1  ,
								                         CASE 
								                              WHEN ( Extent3.AS_RESULT_ID IS NOT NULL ) THEN Extent3.AS_RESULT_NO
								                         ELSE '-'
								                            END C2  ,
								                         CASE 
								                              WHEN ( Extent4.RESN_ID IS NOT NULL ) THEN Extent4.RESN_DESC
								                         ELSE '-'
								                            END C3  ,
								                         CASE 
								                              WHEN ( Extent5.RESN_ID IS NOT NULL ) THEN Extent5.RESN_DESC
								                         ELSE '-'
								                            END C4  ,
								                         CASE 
								                              WHEN ( Extent6.MEM_ID IS NOT NULL ) THEN Extent6.MEM_CODE
								                         ELSE '-'
								                            END C5  ,
								                         CASE 
								                              WHEN ( Extent7.RESN_ID IS NOT NULL ) THEN Extent7.RESN_DESC
								                         ELSE '-'
								                            END C6  ,
								                         CASE 
								                              WHEN ( Extent3.AS_RESULT_ID IS NOT NULL ) THEN Extent3.AS_TOT_AMT
								                         ELSE UTILS.CONVERT_TO_FLOAT(0,53)
								                            END C7  ,
								                         Extent3.AS_SETL_DT AS_SETL_DT  
								         FROM SVC0001D D
								                JOIN SYS0038M Extent2   ON D.AS_STUS_ID = Extent2.STUS_CODE_ID
								                LEFT JOIN SVC0004D Extent3   ON ( D.AS_ID = Extent3.AS_ENTRY_ID )
								                AND ( 1 = Extent3.AS_RESULT_IS_CURR )
								                AND ( 457 = Extent3.AS_RESULT_TYPE_ID )
								                LEFT JOIN SYS0032M Extent4   ON D.AS_MALFUNC_ID = Extent4.RESN_ID
								                LEFT JOIN SYS0032M Extent5   ON D.AS_MALFUNC_RESN_ID = Extent5.RESN_ID
								                LEFT JOIN ORG0001D Extent6   ON Extent3.AS_CT_ID = Extent6.MEM_ID
								                LEFT JOIN SYS0032M Extent7   ON Extent3.AS_SLUTN_RESN_ID = Extent7.RESN_ID
								          WHERE  D.AS_SO_ID = #{ORD_ID} ) S
   </select>
   
   
    <select id="getASStockPrice" parameterType="Map" resultType="egovMap">
    		select   NVL(AMT ,0) AMT 
				from SAL0016M A where 1=1
				AND PRC_ID   =#{PRC_ID}
				AND MEM_PAC_ID = 0
    </select>
    
    
       
    <select id="getASReasonCode" parameterType="Map" resultType="egovMap">
		       
		select Distinct RESN_DESC ,RESN_TYPE_ID ,code_Id , code_Name  ,RESN_ID
		from(
		 select RESN_TYPE_ID , 
		                RESN_ID   code_Id,  
		                RESN_DESC ,
		                CODE||'-'||RESN_DESC  code_Name,RESN_ID
		       from SYS0032M  where RESN_TYPE_ID = #{RESN_TYPE_ID}   and  STUS_CODE_ID =1
		        order by RESN_DESC desc
		        )
 </select> 
 
 
  <select id="getASReasonCode2" parameterType="Map" resultType="egovMap">
        select Distinct RESN_DESC ,RESN_TYPE_ID ,code_Id , code_Name  ,RESN_ID
        from(
         select RESN_TYPE_ID ,  RESN_ID,
                        CODE   code_Id,  
                        RESN_DESC ,
                        CODE||'-'||RESN_DESC  code_Name
               from SYS0032M  where RESN_TYPE_ID = #{RESN_TYPE_ID}   and  CODE =  UPPER(#{CODE})
                order by RESN_DESC desc
                )
 </select>
 
 
    <resultMap id="asLogisticRequestMap" type="egovMap" > 
    </resultMap>
    
    <select id="callSP_LOGISTIC_REQUEST " parameterType="Map"  statementType="CALLABLE" >
       <![CDATA[  
            {
                  call SP_LOGISTIC_REQUEST ( #{P_ARR}, #{RETYPE} ,#{P_TYPE} , #{USERID}, #{p1, mode=OUT,  jdbcType=VARCHAR, javaType=String,  resultMap=asLogisticRequestMap})
            }
         ]]>
      </select>     
 
 
 
 
     <select id="getASMember" parameterType="Map" resultType="egovMap">
		 
		  select Distinct MEM_CODE  , code_Id ,MEM_CODE , NAME ,code_Name 
		 from(
		 select MEM_ID     code_Id, 
		        MEM_CODE ,  
		        NAME  ,
		        MEM_CODE||'-'||NAME  code_Name
		         from ORG0001D m   where m.STUS = 1  and  m.MEM_TYPE  = 3
		  order by MEM_CODE desc
		  )
		    
  </select>
 
 
    
    
    <select id="getASFilterInfo" parameterType="Map" resultType="egovMap">
          SELECT      S.C1 C1  ,
					       S.C2 code_Id  ,
					       S.C3 C3  ,
					       S.C4 C4  ,
					       S.C5 C5  ,
					       S.C3 , 
					       C3||'-'||C4 code_Name
					  FROM ( SELECT D.C1 C1  ,
					                D.C2 C2  ,
					                D.C3 C3  ,
					                D.C4 C4  ,
					                D.C5 C5  
					         FROM ( SELECT DISTINCT UnionAll2.C1 C1  ,
					                                UnionAll2.C2 C2  ,
					                                UnionAll2.C3 C3  ,
					                                UnionAll2.C4 C4  ,
					                                UnionAll2.C5 C5  
					                FROM ( SELECT Distinct1.C1 C1  ,
					                              Distinct1.C2 C2  ,
					                              Distinct1.C3 C3  ,
					                              Distinct1.C4 C4  ,
					                              Distinct1.C5 C5  
					                       FROM ( SELECT DISTINCT UnionAll1.C1 C1  ,
					                                              UnionAll1.STK_ID C2  ,
					                                              UnionAll1.STK_CODE C3  ,
					                                              UnionAll1.STK_DESC C4  ,
					                                              UnionAll1.CODE_NAME C5  
					                              FROM ( SELECT 1 C1  ,
					                                            Extent4.STK_ID STK_ID  ,
					                                            Extent4.STK_CODE STK_CODE  ,
					                                            Extent4.STK_DESC STK_DESC  ,
					                                            Extent5.CODE_NAME CODE_NAME  
					                                     FROM SVC0001D Extent1
					                                            JOIN SAL0090D Extent2   ON ( Extent2.SRV_SO_ID = Extent1.AS_SO_ID )
					                                            AND ( 1 = Extent2.SRV_STUS_ID )
					                                            JOIN SAL0087D Extent3   ON ( Extent3.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID )
					                                            AND ( 1 = Extent3.SRV_FILTER_STUS_ID )
					                                            JOIN SYS0026M Extent4   ON Extent4.STK_ID = Extent3.SRV_FILTER_STK_ID
					                                            JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent4.STK_TYPE_ID
					                                      WHERE  Extent1.AS_ID = #{AS_ID}
					                                     UNION ALL 
					                                     SELECT 1 C1  ,
					                                            Extent9.STK_ID STK_ID  ,
					                                            Extent9.STK_CODE STK_CODE  ,
					                                            Extent9.STK_DESC STK_DESC  ,
					                                            Extent10.CODE_NAME CODE_NAME  
					                                     FROM SVC0001D Extent6
					                                            JOIN SAL0002D Extent7   ON Extent7.SALES_ORD_ID = Extent6.AS_SO_ID
					                                            JOIN LOG0001M Extent8   ON ( Extent8.BOM_STK_ID = Extent7.ITM_STK_ID )
					                                            AND ( 1 = Extent8.BOM_PART_STUS_ID )
					                                            AND ( 548 = Extent8.BOM_TYPE_ID )
					                                            JOIN SYS0026M Extent9   ON Extent9.STK_ID = Extent8.BOM_PART_ID
					                                            JOIN SYS0013M Extent10   ON Extent10.CODE_ID = Extent9.STK_TYPE_ID
					                                      WHERE  Extent6.AS_ID = #{AS_ID} ) UnionAll1 ) Distinct1
					                       UNION ALL 
					                       SELECT 1 C1  ,
					                              Extent11.STK_ID STK_ID  ,
					                              Extent11.STK_CODE STK_CODE  ,
					                              Extent11.STK_DESC STK_DESC  ,
					                              Extent12.CODE_NAME CODE_NAME  
					                       FROM SYS0026M Extent11
					                              JOIN SYS0013M Extent12   ON Extent12.CODE_ID = Extent11.STK_TYPE_ID
					                        WHERE  ( 64 = Extent11.STK_TYPE_ID )
					                                 AND ( 1 = Extent11.STUS_CODE_ID )
					                                 AND ( 1 = Extent11.IS_SVC_STK ) ) UnionAll2 ) D ) S
					  ORDER BY  S.C5 ASC
					          
    </select>
    
    
   <insert id="insertSVC0004D" parameterType="Map" >  
    
     INSERT INTO SVC0004D (
									   AS_RESULT_ID, 
									   AS_RESULT_NO, 
									   AS_ENTRY_ID, 
									   AS_SO_ID, 
									   AS_CT_ID, 
									   AS_SETL_DT, 
									   AS_SETL_TM, 
									   AS_RESULT_STUS_ID, 
									   AS_FAIL_RESN_ID, 
									   AS_REN_COLCT_ID, 
									   AS_CMMS, 
									   AS_BRNCH_ID, 
									   AS_WH_ID, 
									   AS_RESULT_REM, 
									   AS_RESULT_CRT_DT, 
									   AS_RESULT_CRT_USER_ID, 
									   AS_MALFUNC_ID, 
									   AS_MALFUNC_RESN_ID, 
									   AS_DEFECT_TYPE_ID, 
									   AS_DEFECT_GRP_ID, 
									   AS_DEFECT_ID, 
									   AS_DEFECT_PART_GRP_ID, 
									   AS_DEFECT_PART_ID, 
									   AS_DEFECT_DTL_RESN_ID, 
									   AS_SLUTN_RESN_ID, 
									   AS_WORKMNSH, 
									   AS_FILTER_AMT, 
									   AS_ACSRS_AMT, 
									   AS_TOT_AMT, 
									   AS_RESULT_IS_SYNCH, 
									   AS_RCALL, 
									   AS_RESULT_STOCK_USE, 
									   AS_RESULT_TYPE_ID, 
									   AS_RESULT_IS_CURR, 
									   AS_RESULT_MTCH_ID, 
									   AS_RESULT_NO_ERR, 
									   AS_RESULT_UPD_DT, 
									   AS_RESULT_UPD_USER_ID, 
									   AS_ENTRY_POINT, 
									   AS_WORKMNSH_TAX_CODE_ID, 
									   AS_WORKMNSH_TXS, 
									   AS_RESULT_MOBILE_ID,
									    APPNT_DT,                   
										APPNT_TM,                   
										IN_HUSE_REPAIR_REM,         
										IN_HUSE_REPAIR_REPLACE_YN,  
										IN_HUSE_REPAIR_PROMIS_DT,   
										IN_HUSE_REPAIR_GRP_CODE,        
										IN_HUSE_REPAIR_PRODUCT_CODE,    
										IN_HUSE_REPAIR_SERIAL_NO,   
										RESULT_CUST_NAME,           
										RESULT_MOBILE_NO,           
										RESULT_REP_EMAIL_NO,            
										RESULT_ACEPT_NAME,          
										SGN_DT,                     
										TRNSC_ID
									 ) 
									VALUES (
									   #{AS_RESULT_ID}, 
									   #{AS_RESULT_NO}, 
									   #{AS_ENTRY_ID}, 
									   #{AS_SO_ID}, 
									   #{AS_CT_ID}, 
									   to_DATE(#{AS_SETL_DT},'dd/mm/yyyy'), 
									   #{AS_SETL_TM}, 
									   NVL(#{AS_RESULT_STUS_ID},0), 
									   NVL(#{AS_FAIL_RESN_ID},0), 
									   NVL(#{AS_REN_COLCT_ID},0), 
									   NVL(#{AS_CMMS},0), 
									   NVL(#{AS_BRNCH_ID},0), 
									   NVL(#{AS_WH_ID},0), 
									   #{AS_RESULT_REM}, 
									   sysdate, 
									   #{updator}, 
									   NVL(#{AS_MALFUNC_ID},0), 
									   NVL(#{AS_MALFUNC_RESN_ID},0), 
									   NVL(#{AS_DEFECT_TYPE_ID},0), 
									   NVL(#{AS_DEFECT_GRP_ID},0), 
									   NVL(#{AS_DEFECT_ID},0), 
									   NVL(#{AS_DEFECT_PART_GRP_ID},0), 
									   NVL(#{AS_DEFECT_PART_ID},0), 
									   NVL(#{AS_DEFECT_DTL_RESN_ID},0), 
									   NVL(#{AS_SLUTN_RESN_ID},0), 
									   NVL(#{AS_WORKMNSH},0), 
									   NVL(#{AS_FILTER_AMT},0), 
									   NVL(#{AS_ACSRS_AMT},0), 
									   NVL(#{AS_TOT_AMT},0), 
									   NVL(#{AS_RESULT_IS_SYNCH},0), 
									   NVL(#{AS_RCALL},0), 
									   NVL(#{AS_RESULT_STOCK_USE},0), 
									   NVL(#{AS_RESULT_TYPE_ID},0), 
									   #{AS_RESULT_IS_CURR}, 
									   #{AS_RESULT_MTCH_ID}, 
									   #{AS_RESULT_NO_ERR}, 
									   sysdate, 
									   #{updator}, 
									   NVL(#{AS_ENTRY_POINT},0), 
									   NVL(#{AS_WORKMNSH_TAX_CODE_ID},0), 
									   NVL(#{AS_WORKMNSH_TXS},0), 
									   #{AS_RESULT_MOBILE_ID},
										to_date(#{APPNT_DT},'dd/mm/yyyy'),                    
										#{APPNT_TM},                    
										#{IN_HUSE_REPAIR_REM},          
										#{IN_HUSE_REPAIR_REPLACE_YN},   
										to_date(#{IN_HUSE_REPAIR_PROMIS_DT},'dd/mm/yyyy'),    
										#{IN_HUSE_REPAIR_GRP_CODE},     
										#{IN_HUSE_REPAIR_PRODUCT_CODE}, 
										#{IN_HUSE_REPAIR_SERIAL_NO},    
										#{RESULT_CUST_NAME},            
										#{RESULT_MOBILE_NO},            
										#{RESULT_REP_EMAIL_NO},         
										#{RESULT_ACEPT_NAME},           
										#{SGN_DT},                      
										#{TRNSC_ID}
									)
        </insert>
        
         <insert id="insertSVC0005D" parameterType="Map" >  
         INSERT INTO SVC0005D (
							   ASR_ITM_ID, 
							   AS_RESULT_ID, 
							   ASR_ITM_PART_ID, 
							   ASR_ITM_PART_DESC, 
							   ASR_ITM_PART_QTY, 
							   ASR_ITM_PART_PRC, 
							   ASR_ITM_CHRG_AMT, 
							   ASR_ITM_REM, 
							   ASR_ITM_CRT_USER_ID, 
							   ASR_ITM_CRT_DT,
							   ASR_ITM_CHRG_FOC, 
							   ASR_ITM_EXCHG_ID, 
							   ASR_ITM_CLM, 
							   ASR_ITM_TAX_CODE_ID, 
							   ASR_ITM_TXS_AMT,
							    SERIAL_NO,         
							    EXCHN_ID,                 
								FILTER_BARCD_SERIAL_NO
							   ) 
							VALUES ( 
							   SVC0005D_ASR_ITM_ID_SEQ.nextval, 
							   #{AS_RESULT_ID}, 
							   #{ASR_ITM_PART_ID}, 
							   (SELECT STK_DESC FROM SYS0026M WHERE STK_ID =#{ASR_ITM_PART_ID}),
							   #{ASR_ITM_PART_QTY}, 
							   nvl(#{ASR_ITM_PART_PRC},0), 
							   nvl(#{ASR_ITM_CHRG_AMT},0), 
							   #{ASR_ITM_REM}, 
							   #{ASR_ITM_CRT_USER_ID}, 
							   sysdate,
							   #{ASR_ITM_CHRG_FOC}, 
							   #{ASR_ITM_EXCHG_ID}, 
							   #{ASR_ITM_CLM}, 
							   #{ASR_ITM_TAX_CODE_ID}, 
							   nvl(#{ASR_ITM_TXS_AMT},0),
							   #{SERIAL_NO},         
                               #{EXCHG_ID},              
                               #{FILTER_BARCD_SERIAL_NO}
							)
         </insert>
         
         
            
            
         <select id="getCallLog" parameterType="Map" resultMap="callasLogClobMap">
         
						   SELECT 
							       S.CALL_RESULT_ID   ,
							       S.CALL_REM   ,
							       S.CALL_CRT_DT   ,
							       S.C2   
							  FROM ( SELECT          E.CALL_RESULT_ID   ,
							                         E.CALL_REM   ,
							                         E.CALL_CRT_DT   ,
							                        CASE   WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME   ELSE '-'  END C2  
							         FROM SVC0001D D
							                JOIN CCR0006D C   ON ( D.AS_CALLLOG_ID = C.CALL_ENTRY_ID )
							                AND ( 339 = C.TYPE_ID )
							                AND ( D.AS_ID = C.DOC_ID )
							                JOIN CCR0007D E   ON C.CALL_ENTRY_ID = E.CALL_ENTRY_ID
							                LEFT JOIN SYS0047M Extent4   ON E.CALL_CRT_USER_ID = Extent4.USER_ID
							          WHERE  D.AS_ID = #{AS_ID}
							) S
            </select>
            
            
            
            <select id="getASRulstEditFilterInfo" parameterType="Map" resultType="egovMap">
            	                       SELECT         S.ASR_ITM_ID   filter_ID,
													       S.STK_ID   ,
													       S.C1  filter_Desc ,
													       S.C2  filter_Type ,
													       S.C3  filter_Ex_Code ,
													       S.C4   ,
													       S.ASR_ITM_PART_QTY  filter_Qty ,
													       S.ASR_ITM_PART_PRC  filter_Price ,
													       S.ASR_ITM_CHRG_AMT   ,
													       S.ASR_ITM_REM    filter_Remark ,
													       S.SERIAL_NO        srv_Filter_Last_Serial
										  FROM ( SELECT E1.ASR_ITM_ID   ,
										                E1.ASR_ITM_PART_QTY   ,
										                E1.ASR_ITM_PART_PRC   ,
										                E1.ASR_ITM_CHRG_AMT   ,
										                E1.ASR_ITM_REM   ,
										                E1.SERIAL_NO,
										                E2.STK_ID   ,
										                E2.STK_CODE || ' - ' || E2.STK_DESC C1  ,
										                CASE  WHEN ( 1 = E1.ASR_ITM_CHRG_FOC ) THEN 'FOC'   ELSE 'CHG' END C2  ,
										                CASE  WHEN ( E3.RESN_ID IS NOT NULL ) THEN E3.CODE  ELSE '-'    END C3  ,
										                CASE  WHEN ( E3.RESN_ID IS NOT NULL ) THEN E3.RESN_ID   ELSE 0    END C4  
										         FROM SVC0005D E1
										                JOIN SYS0026M E2   ON E1.ASR_ITM_PART_ID = E2.STK_ID
										                LEFT JOIN SYS0032M E3   ON E1.ASR_ITM_EXCHG_ID = E3.RESN_ID
										          WHERE  ( 0 <![CDATA[<> ]]>  E1.ASR_ITM_PART_ID )
										                   AND ( E1.ASR_ITM_PART_QTY   <![CDATA[ > ]]> 0 )
										                   AND ( E1.AS_RESULT_ID =  NVL(#{REF_REQST} ,  (select AS_RESULT_ID  from svc0004d where AS_RESULT_NO =#{AS_RESULT_NO})) )
										             ) S
										  ORDER BY  S.ASR_ITM_ID  ASC
            
    </select>
    
    <select id="getASRulstSVC0004DInfo" parameterType="Map" resultType="egovMap">
                        SELECT S.AS_RESULT_ID   ,
							       S.AS_RESULT_NO   ,
							       S.AS_RESULT_STUS_ID   ,
							       S.CODE   ,
							       to_char(AS_SETL_DT,'dd/mm/yyyy' ) AS_SETL_DT ,
							       S.AS_SETL_TM   ,
							       CASE 
							            WHEN ( S.AS_FAIL_RESN_ID IS NOT NULL ) THEN S.AS_FAIL_RESN_ID
							       ELSE 0
							          END C2  ,
							       CASE 
							            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.CODE1
							       ELSE ' '
							          END C3  ,
							       CASE 
							            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.RESN_DESC
							       ELSE ' '
							          END C4  ,
							       S.AS_BRNCH_ID AS_BRNCH_ID  ,
							       CASE 
							            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.CODE2
							       ELSE ' '
							          END C5  ,
							       CASE 
							            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.NAME
							       ELSE ' '
							          END C6  ,
							       S.AS_MALFUNC_ID AS_MALFUNC_ID  ,
							       CASE 
							            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.CODE3
							       ELSE ' '
							          END C7  ,
							       CASE 
							            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.REASONDESC1
							       ELSE ' '
							          END C8  ,
							       S.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID  ,
							       CASE 
							            WHEN ( S.REASONID2 IS NOT NULL ) THEN S.CODE4
							       ELSE ' '
							          END C9  ,
							       CASE 
							            WHEN ( S.REASONID2 IS NOT NULL ) THEN S.REASONDESC2
							       ELSE ' '
							          END C10  ,
							       CASE 
							            WHEN ( S.AS_CT_ID IS NOT NULL ) THEN S.AS_CT_ID
							       ELSE 0
							          END C11  ,
							       CASE 
							            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.MEM_CODE
							       ELSE ' '
							          END C12  ,
							       CASE 
							            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.NAME1
							       ELSE ' '
							          END C13  ,
							       S.AS_WH_ID AS_WH_ID  ,
							       CASE 
							            WHEN ( S.WH_LOC_ID IS NOT NULL ) THEN S.WH_LOC_CODE
							       ELSE ' '
							          END C14  ,
							       CASE 
							            WHEN ( S.WH_LOC_ID IS NOT NULL ) THEN S.WH_LOC_DESC
							       ELSE ' '
							          END C15  ,
							       S.AS_RESULT_REM AS_RESULT_REM  ,
							       S.AS_DEFECT_TYPE_ID AS_DEFECT_TYPE_ID  ,
							       CASE 
							            WHEN ( S.REASONID3 IS NOT NULL ) THEN S.CODE5
							       ELSE ' '
							          END C16  ,
							       CASE 
							            WHEN ( S.REASONID3 IS NOT NULL ) THEN S.REASONDESC3
							       ELSE ' '
							          END C17  ,
							       S.AS_DEFECT_ID AS_DEFECT_ID  ,
							       CASE 
							            WHEN ( S.REASONID4 IS NOT NULL ) THEN S.CODE6
							       ELSE ' '
							          END C18  ,
							       CASE 
							            WHEN ( S.REASONID4 IS NOT NULL ) THEN S.REASONDESC4
							       ELSE ' '
							          END C19  ,
							       S.AS_DEFECT_PART_ID AS_DEFECT_PART_ID  ,
							       CASE 
							            WHEN ( S.REASONID5 IS NOT NULL ) THEN S.CODE7
							       ELSE ' '
							          END C20  ,
							       CASE 
							            WHEN ( S.REASONID5 IS NOT NULL ) THEN S.REASONDESC5
							       ELSE ' '
							          END C21  ,
							       S.AS_DEFECT_DTL_RESN_ID AS_DEFECT_DTL_RESN_ID  ,
							       CASE 
							            WHEN ( S.REASONID6 IS NOT NULL ) THEN S.CODE8
							       ELSE ' '
							          END C22  ,
							       CASE 
							            WHEN ( S.REASONID6 IS NOT NULL ) THEN S.REASONDESC6
							       ELSE ' '
							          END C23  ,
							       CASE 
							            WHEN ( S.AS_SLUTN_RESN_ID IS NOT NULL ) THEN S.AS_SLUTN_RESN_ID
							       ELSE 0
							          END C24  ,
							       CASE 
							            WHEN ( S.REASONID7 IS NOT NULL ) THEN S.CODE9
							       ELSE ' '
							          END C25  ,
							       CASE 
							            WHEN ( S.REASONID7 IS NOT NULL ) THEN S.REASONDESC7
							       ELSE ' '
							          END C26  ,
							       S.AS_TOT_AMT   ,
							       CASE 
							            WHEN ( S.AS_CMMS IS NOT NULL ) THEN S.AS_CMMS
							       ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
							          END C27  ,
							       S.AS_WORKMNSH AS_WORKMNSH  ,
							       S.AS_FILTER_AMT AS_FILTER_AMT  ,
							       S.AS_RESULT_CRT_USER_ID AS_RESULT_CRT_USER_ID  ,
							       CASE 
							            WHEN ( S.USER_ID IS NOT NULL ) THEN S.USER_NAME
							       ELSE ' '
							          END C28  ,
							       to_char(S.AS_RESULT_CRT_DT,'dd/mm/yyyy') AS_RESULT_CRT_DT  ,
							       S.IN_HUSE_REPAIR_REM, 
								   S.IN_HUSE_REPAIR_REPLACE_YN, 
                                   to_char(S.IN_HUSE_REPAIR_PROMIS_DT,'dd/mm/yyyy') IN_HUSE_REPAIR_PROMIS_DT  ,
								   S.IN_HUSE_REPAIR_GRP_CODE, 
								   S.IN_HUSE_REPAIR_PRODUCT_CODE, 
								   S.IN_HUSE_REPAIR_SERIAL_NO,
								   TO_CHAR( (SELECT AS_APPNT_DT    FROM  SVC0001D  X  WHERE  X.AS_ID  =S.AS_ENTRY_ID )  ,'dd/mm/yyyy') APPNT_DT,
								   CASE 
                                        WHEN ( S.AS_RESULT_STUS_ID  ='4' ) THEN  TO_CHAR( S.AS_RESULT_UPD_DT,'dd/mm/yyyy')
                                   ELSE '-'
                                   END AS AS_RESULT_DT  
							  FROM ( SELECT E.AS_RESULT_ID AS_RESULT_ID  ,
							                E.AS_RESULT_NO AS_RESULT_NO  ,
							                E.AS_ENTRY_ID ,
							                E.AS_CT_ID AS_CT_ID  ,
							                E.AS_SETL_DT AS_SETL_DT  ,
							                E.AS_SETL_TM AS_SETL_TM  ,
							                E.AS_RESULT_STUS_ID AS_RESULT_STUS_ID  ,
							                E.AS_FAIL_RESN_ID AS_FAIL_RESN_ID  ,
							                E.AS_CMMS AS_CMMS  ,
							                E.AS_BRNCH_ID AS_BRNCH_ID  ,
							                E.AS_WH_ID AS_WH_ID  ,
							                E.AS_RESULT_REM AS_RESULT_REM  ,
							                E.AS_RESULT_CRT_DT AS_RESULT_CRT_DT  ,
							                E.AS_RESULT_CRT_USER_ID AS_RESULT_CRT_USER_ID  ,
							                E.AS_MALFUNC_ID AS_MALFUNC_ID  ,
							                E.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID  ,
							                E.AS_DEFECT_TYPE_ID AS_DEFECT_TYPE_ID  ,
							                E.AS_DEFECT_ID AS_DEFECT_ID  ,
							                E.AS_DEFECT_PART_ID AS_DEFECT_PART_ID  ,
							                E.AS_DEFECT_DTL_RESN_ID AS_DEFECT_DTL_RESN_ID  ,
							                E.AS_SLUTN_RESN_ID AS_SLUTN_RESN_ID  ,
							                E.AS_WORKMNSH AS_WORKMNSH  ,
							                E.AS_FILTER_AMT AS_FILTER_AMT  ,
							                E.AS_TOT_AMT AS_TOT_AMT  ,
							                Extent2.CODE CODE  ,
							                Extent3.RESN_ID RESN_ID  ,
							                Extent3.CODE CODE1  ,
							                Extent3.RESN_DESC RESN_DESC  ,
							                Extent4.BRNCH_ID BRNCH_ID  ,
							                Extent4.CODE CODE2  ,
							                Extent4.NAME NAME  ,
							                Extent5.RESN_ID REASONID1  ,
							                Extent5.CODE CODE3  ,
							                Extent5.RESN_DESC REASONDESC1  ,
							                Extent6.RESN_ID REASONID2  ,
							                Extent6.CODE CODE4  ,
							                Extent6.RESN_DESC REASONDESC2  ,
							                Extent7.MEM_ID MEM_ID  ,
							                Extent7.MEM_CODE MEM_CODE  ,
							                Extent7.NAME NAME1  ,
							                Extent8.WH_LOC_ID WH_LOC_ID  ,
							                Extent8.WH_LOC_CODE WH_LOC_CODE  ,
							                Extent8.WH_LOC_DESC WH_LOC_DESC  ,
							                Extent9.RESN_ID REASONID3  ,
							                Extent9.CODE CODE5  ,
							                Extent9.RESN_DESC REASONDESC3  ,
							                E0.RESN_ID REASONID4  ,
							                E0.CODE CODE6  ,
							                E0.RESN_DESC REASONDESC4  ,
							                E1.RESN_ID REASONID5  ,
							                E1.CODE CODE7  ,
							                E1.RESN_DESC REASONDESC5  ,
							                E2.RESN_ID REASONID6  ,
							                E2.CODE CODE8  ,
							                E2.RESN_DESC REASONDESC6  ,
							                E3.RESN_ID REASONID7  ,
							                E3.CODE CODE9  ,
							                E3.RESN_DESC REASONDESC7  ,
							                E4.USER_ID USER_ID  ,
							                E4.USER_NAME USER_NAME  ,
							                E.IN_HUSE_REPAIR_REM, 
										    E.IN_HUSE_REPAIR_REPLACE_YN, 
										    E.IN_HUSE_REPAIR_PROMIS_DT, 
										    E.IN_HUSE_REPAIR_GRP_CODE, 
										    E.IN_HUSE_REPAIR_PRODUCT_CODE, 
										    E.IN_HUSE_REPAIR_SERIAL_NO,
										    E.APPNT_DT,
										    E.AS_RESULT_UPD_DT
							         FROM SVC0004D E
							                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = E.AS_RESULT_STUS_ID
							                LEFT JOIN SYS0032M Extent3   ON Extent3.RESN_ID = E.AS_FAIL_RESN_ID
							                LEFT JOIN SYS0005M Extent4   ON Extent4.BRNCH_ID = E.AS_BRNCH_ID
							                LEFT JOIN SYS0032M Extent5   ON Extent5.RESN_ID = E.AS_MALFUNC_ID
							                LEFT JOIN SYS0032M Extent6   ON Extent6.RESN_ID = E.AS_MALFUNC_RESN_ID
							                LEFT JOIN ORG0001D Extent7   ON Extent7.MEM_ID = E.AS_CT_ID
							                LEFT JOIN SYS0028M Extent8   ON Extent8.WH_LOC_ID = E.AS_WH_ID
							                LEFT JOIN SYS0032M Extent9   ON Extent9.RESN_ID = E.AS_DEFECT_TYPE_ID
							                LEFT JOIN SYS0032M E0   ON E0.RESN_ID = E.AS_DEFECT_ID
							                LEFT JOIN SYS0032M E1   ON E1.RESN_ID = E.AS_DEFECT_PART_ID
							                LEFT JOIN SYS0032M E2   ON E2.RESN_ID = E.AS_DEFECT_DTL_RESN_ID
							                LEFT JOIN SYS0032M E3   ON E3.RESN_ID = E.AS_SLUTN_RESN_ID
							                LEFT JOIN SYS0047M E4   ON E4.USER_ID = E.AS_RESULT_CRT_USER_ID
							          WHERE  E.AS_RESULT_ID =  NVL( #{REF_REQST} ,(SELECT   AS_RESULT_ID  FROM  SVC0004D   WHERE  AS_RESULT_NO  =#{AS_RESULT_NO})  )
							          AND ROWNUM   <![CDATA[<= ]]> 1 
							     ) S 
							           
    </select>
    
    <insert id="updateSVC0004D" parameterType="Map" >
			    
			    UPDATE  SVC0004D 
						    SET
						           AS_CT_ID                       =NVL(#{AS_CT_ID},0), 
						           AS_SETL_DT                   =to_DATE(#{AS_SETL_DT},'dd/mm/yyyy'), 
						           AS_SETL_TM                   =#{AS_SETL_TM}, 
						           AS_RESULT_STUS_ID        =NVL(#{AS_RESULT_STUS_ID},0), 
						           AS_FAIL_RESN_ID             =NVL(#{AS_FAIL_RESN_ID},0), 
						           AS_REN_COLCT_ID           =NVL(#{AS_REN_COLCT_ID},0), 
						           AS_CMMS                       =NVL(#{AS_CMMS},0), 
						           AS_BRNCH_ID                  =NVL(#{AS_BRNCH_ID},0), 
						           AS_WH_ID                      =NVL(#{AS_WH_ID},0), 
						           AS_RESULT_REM              =#{AS_RESULT_REM}, 
						           AS_MALFUNC_ID              =NVL(#{AS_MALFUNC_ID},0)    , 
						           AS_MALFUNC_RESN_ID      =NVL(#{AS_MALFUNC_RESN_ID},0), 
						           AS_DEFECT_TYPE_ID        =NVL(#{AS_DEFECT_TYPE_ID},0), 
						           AS_DEFECT_GRP_ID          =NVL(#{AS_DEFECT_GRP_ID},0), 
						           AS_DEFECT_ID                 =NVL(#{AS_DEFECT_ID},0), 
						           AS_DEFECT_PART_GRP_ID  =NVL(#{AS_DEFECT_PART_GRP_ID},0), 
						           AS_DEFECT_PART_ID         =NVL(#{AS_DEFECT_PART_ID},0), 
						           AS_DEFECT_DTL_RESN_ID  =NVL(#{AS_DEFECT_DTL_RESN_ID},0), 
						           AS_SLUTN_RESN_ID          =NVL(#{AS_SLUTN_RESN_ID},0), 
						           AS_WORKMNSH                =NVL(#{AS_WORKMNSH},0), 
						           AS_FILTER_AMT               =NVL(#{AS_FILTER_AMT},0), 
						           AS_ACSRS_AMT               =NVL(#{AS_ACSRS_AMT},0), 
						           AS_TOT_AMT                  =NVL(#{AS_TOT_AMT},0), 
						           AS_RESULT_IS_SYNCH      =NVL(#{AS_RESULT_IS_SYNCH},0), 
						           AS_RCALL                       =NVL(#{AS_RCALL},0), 
						           AS_RESULT_STOCK_USE    =NVL(#{AS_RESULT_STOCK_USE},0), 
						           AS_RESULT_TYPE_ID        =NVL(#{AS_RESULT_TYPE_ID},0), 
						           AS_RESULT_IS_CURR        =NVL(#{AS_RESULT_IS_CURR},0), 
						           AS_RESULT_MTCH_ID       =NVL(#{AS_RESULT_MTCH_ID},0), 
						           AS_RESULT_NO_ERR         =NVL(#{AS_RESULT_NO_ERR},0), 
						           AS_RESULT_UPD_DT         =SYSDATE, 
						           AS_RESULT_UPD_USER_ID = #{updator}, 
						           AS_ENTRY_POINT            =NVL(#{AS_ENTRY_POINT},0), 
						           AS_WORKMNSH_TAX_CODE_ID  =NVL(#{AS_WORKMNSH_TAX_CODE_ID},0), 
						           AS_WORKMNSH_TXS          =NVL(#{AS_WORKMNSH_TXS},0), 
						           AS_RESULT_MOBILE_ID      =NVL(#{AS_RESULT_MOBILE_ID},0)
		      WHERE   AS_RESULT_NO = #{AS_RESULT_NO}  
    </insert>
    
    
    
    <insert id="updateBasicSVC0004D" parameterType="Map" >
                
                UPDATE  SVC0004D 
                            SET
                                   AS_CMMS                       =NVL(#{AS_CMMS},0), 
                                   AS_RESULT_REM              =#{AS_RESULT_REM}, 
                                   AS_MALFUNC_ID              =NVL(#{AS_MALFUNC_ID},0)    , 
                                   AS_MALFUNC_RESN_ID      =NVL(#{AS_MALFUNC_RESN_ID},0), 
                                   AS_DEFECT_TYPE_ID        =NVL(#{AS_DEFECT_TYPE_ID},0), 
                                   AS_DEFECT_ID                 =NVL(#{AS_DEFECT_ID},0), 
                                   AS_DEFECT_PART_ID         =NVL(#{AS_DEFECT_PART_ID},0), 
                                   AS_DEFECT_DTL_RESN_ID  =NVL(#{AS_DEFECT_DTL_RESN_ID},0), 
                                   AS_SLUTN_RESN_ID          =NVL(#{AS_SLUTN_RESN_ID},0)
              WHERE   AS_RESULT_ID = #{AS_RESULT_ID}  
    </insert>
   
    
    <insert id="updateBasicInhouseSVC0004D" parameterType="Map" >
                
                UPDATE  SVC0004D 
                            SET
                                   AS_CMMS                       =NVL(#{AS_CMMS},0), 
                                   AS_RESULT_REM              =#{AS_RESULT_REM}, 
                                   AS_MALFUNC_ID              =NVL(#{AS_MALFUNC_ID},0)    , 
                                   AS_MALFUNC_RESN_ID      =NVL(#{AS_MALFUNC_RESN_ID},0), 
                                   IN_HUSE_REPAIR_REM       =#{IN_HUSE_REPAIR_REM},
                                   IN_HUSE_REPAIR_REPLACE_YN    =#{IN_HUSE_REPAIR_REPLACE_YN},
                                   IN_HUSE_REPAIR_PROMIS_DT =to_date(#{IN_HUSE_REPAIR_PROMIS_DT} ,'dd/mm/yyyy'),
                                   IN_HUSE_REPAIR_GRP_CODE  = #{IN_HUSE_REPAIR_GRP_CODE},
                                   IN_HUSE_REPAIR_PRODUCT_CODE =#{IN_HUSE_REPAIR_PRODUCT_CODE},
                                   IN_HUSE_REPAIR_SERIAL_NO =#{IN_HUSE_REPAIR_SERIAL_NO} ,
                                   AS_RESULT_STUS_ID =4
              WHERE   AS_RESULT_ID = #{AS_RESULT_ID}  
    </insert>
    
     <insert id="updateBasicInhouseSVC0001D" parameterType="Map" >
		                
		        UPDATE SVC0001D 
		               SET  AS_STUS_ID  =  4 ,
		                      AS_UPD_USER_ID = #{updator}, 
		                      AS_UPD_DT = sysdate 
		               WHERE AS_ID =(
		                   SELECT   AS_ENTRY_ID
		                                       FROM   SVC0004D
		                                      WHERE   AS_RESULT_ID =#{AS_RESULT_ID}
		               )
    </insert>
    
    
    
    <insert id="updateSVC0005D" parameterType="Map" >  
			        UPDATE SVC0005D 
						    SET    ASR_ITM_PART_ID      =#{ASR_ITM_PART_ID}, 
						               ASR_ITM_PART_DESC    =#{ASR_ITM_PART_DESC}, 
							           ASR_ITM_PART_QTY     =#{ASR_ITM_PART_QTY}, 
							           ASR_ITM_PART_PRC     =#{ASR_ITM_PART_PRC}, 
							           ASR_ITM_CHRG_AMT     =#{ASR_ITM_CHRG_AMT}, 
							           ASR_ITM_REM          =#{ASR_ITM_REM}, 
							           ASR_ITM_CRT_USER_ID  =#{ASR_ITM_CRT_USER_ID}, 
							           ASR_ITM_CRT_DT       =SYSDATE,
							           ASR_ITM_CHRG_FOC     =#{ASR_ITM_CHRG_FOC}, 
							           ASR_ITM_EXCHG_ID     =#{ASR_ITM_EXCHG_ID}, 
							           ASR_ITM_CLM          =#{ASR_ITM_CLM}, 
							           ASR_ITM_TAX_CODE_ID  =#{ASR_ITM_TAX_CODE_ID}, 
							           ASR_ITM_TXS_AMT      =#{ASR_ITM_TXS_AMT}
						 WHERE ASR_ITM_ID =#{ASR_ITM_ID}
      </insert>
      
      <insert id="deleteSVC0005D" parameterType="Map" >  
            DELETE      SVC0005D  WHERE  ASR_ITM_ID  =    #{ASR_ITM_ID}
      </insert>
                            
      
          
    <insert id="updateStateSVC0001D" parameterType="Map" >  
                    UPDATE SVC0001D 
                         SET       AS_STUS_ID                =#{AS_RESULT_STUS_ID}, 
                                     AS_UPD_USER_ID          =#{USER_ID}, 
                                     AS_UPD_DT                  =SYSDATE
                      WHERE AS_ID                              =#{AS_ENTRY_ID}
   </insert>
      
      
      
     <select id="getCCR0006D_CALL_ENTRY_ID_SEQ" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                SELECT CCR0006D_CALL_ENTRY_ID_SEQ.NEXTVAL seq FROM DUAL
        ]]> 
     </select>
      

     <insert id="insertCCR0006D" parameterType="Map" >
     
				    INSERT INTO  CCR0006D (
							                       CALL_ENTRY_ID, 
							                       SALES_ORD_ID, 
							                       TYPE_ID, 
							                       STUS_CODE_ID, 
							                       RESULT_ID, 
							                       DOC_ID, 
							                       CRT_USER_ID, 
							                       CRT_DT, 
							                       IS_WAIT_FOR_CANCL, 
							                       HAPY_CALLER_ID
				                       ) 
				VALUES ( 
						           #{CALL_ENTRY_ID}, 
						           #{SALES_ORD_ID}, 
						           #{TYPE_ID}, 
						           #{STUS_CODE_ID}, 
						           #{RESULT_ID}, 
						           #{DOC_ID}, 
						           #{USER_ID}, 
						            SYSDATE, 
						           #{IS_WAIT_FOR_CANCL}, 
						           #{HAPY_CALLER_ID}
				)
     </insert>
      
     <insert id="insertCCR0007D" parameterType="Map" >
						    
						INSERT INTO CCR0007D (
						                           CALL_RESULT_ID, 
						                           CALL_ENTRY_ID, 
						                           CALL_STUS_ID, 
						                           CALL_FDBCK_ID, 
						                           CALL_REM, 
						                           CALL_CRT_USER_ID, 
						                           CALL_CRT_DT,  
						                           CALL_HC_ID, 
						                           CALL_ROS_AMT, 
						                           CALL_SMS, 
						                           CALL_SMS_REM) 
						VALUES ( 
						                           CCR0007D_CALL_RESULT_ID_SEQ.nextval, 
						                           #{CALL_ENTRY_ID}, 
						                           #{CALL_STUS_ID}, 
						                           #{CALL_FDBCK_ID}, 
						                           #{CALL_REM}, 
						                           #{USER_ID}, 
						                            SYSDATE, 
						                           #{CALL_HC_ID}, 
						                           #{CALL_ROS_AMT}, 
						                           #{CALL_SMS}, 
						                           #{CALL_SMS_REM}
						)
     </insert>
     
      <insert id="insertAddCCR0007D" parameterType="Map" >
                            
                        INSERT INTO CCR0007D (
                                                   CALL_RESULT_ID, 
                                                   CALL_ENTRY_ID, 
                                                   CALL_STUS_ID, 
                                                   CALL_FDBCK_ID, 
                                                   CALL_REM, 
                                                   CALL_CRT_USER_ID, 
                                                   CALL_CRT_DT,  
                                                   CALL_HC_ID, 
                                                   CALL_ROS_AMT, 
                                                   CALL_SMS, 
                                                   CALL_SMS_REM) 
                        VALUES ( 
                                                   CCR0007D_CALL_RESULT_ID_SEQ.nextval, 
                                                    (SELECT  MAX(CALL_ENTRY_ID)  FROM CCR0006D WHERE DOC_ID =#{AS_ID} AND TYPE_ID ='339'), 
                                                   #{CALL_STUS_ID}, 
                                                   #{CALL_FDBCK_ID}, 
                                                   #{CALL_REM}, 
                                                   #{USER_ID}, 
                                                    SYSDATE, 
                                                   #{CALL_HC_ID}, 
                                                   #{CALL_ROS_AMT}, 
                                                   #{CALL_SMS}, 
                                                   #{CALL_SMS_REM}
                        )
     </insert>
     
      
      
     <insert id="updateCCR0006D" parameterType="Map" >
                        UPDATE CCR0006D
                        SET RESULT_ID = #{CALL_RESULT_ID},
                               UPD_DT =SYSDATE ,
                               UPD_USER_ID =#{USER_ID}
                        WHERE DOC_ID =#{AS_ID}
                                AND TYPE_ID ='339'
     </insert>


    <select id="assignCtList" parameterType="Map" resultType="egovMap">

            SELECT DISTINCT   C.MEM_ID        CT_ID,
		                               C.MEM_CODE   CT_CODE,
		                               B.BRNCH_ID     BRNCH_ID,
		                               B.CODE           BRANCH_CODE , 
		                               B.NAME           BRANCH_NAME,
		                               C.STUS           CT_STUS,
		                               C.NAME           CT_NAME,
                               D.CT_SUB_GRP CT_SUB_GRP
                    FROM ORG0005D  A , SYS0005M B  , ORG0001D  C  ,SYS0064M D
               WHERE  A.BRNCH_ID = #{BRNCH_ID}
                   AND A.BRNCH_ID = B.BRNCH_ID
                   AND A.MEM_ID =C.MEM_ID
                   AND C.MEM_TYPE =3
                   AND A.MEM_LVL  = 4
                   AND B.CODE =D.CT_BRNCH_CODE 
                   AND C.STUS =1
     </select>
     
     
     
    <select id="assignCtOrderList" parameterType="Map" resultType="egovMap">
                 SELECT B.SALES_ORD_NO     SALES_ORD_NO, A.AS_ID,
			                C.NAME                  CUST_NAME, 
			                C.CUST_ID              CUST_ID ,
			                A.AS_MEM_ID          AS_MEM_ID,
			                F.CT_SUB_GRP         CUST_SUB_GRP,
			                 (SELECT MEM_CODE   FROM ORG0001D S WHERE S.MEM_ID = A.AS_MEM_ID ) MEM_CODE
                     FROM SVC0001D A ,         
                          SAL0001D B ,         --ORDER INFO 
                          SAL0029D C ,         --CUST INFO 
                          SAL0045D D ,         --INST ADDRESS  
                          SAL0023D E ,          --HISTORY   OF ADDR
                          SYS0064M F           --MAGIC ADDR 
                   WHERE 1=1
                        <if test="asNo != null and asNo != '' ">
                              AND AS_NO   IN
                              <foreach item="item" collection="asNo" index="index" open="(" separator="," close=")">
                                        #{item}
                              </foreach>
                        </if>
                       AND A.AS_SO_ID      = B.SALES_ORD_ID 
                       AND B.CUST_ID       = C.CUST_ID
                       AND B.SALES_ORD_ID  = D.SALES_ORD_ID 
                       AND D.ADD_ID        = E.CUST_ADD_ID
                       AND E.AREA_ID       = F.AREA_ID(+)
     </select>
     
     
     <insert id="updateAssignCT" parameterType="Map" >
                       UPDATE SVC0001D
                           SET AS_MEM_ID =#{asMemId},
                               AS_UPD_USER_ID =#{updator} ,
                               AS_UPD_DT =SYSDATE
                           WHERE AS_ID =#{asId}
     </insert>
     
          
     <insert id="updateSTATE_CCR0006D" parameterType="Map" >
                        UPDATE CCR0006D
                        SET STUS_CODE_ID =4 ,
                               UPD_DT =SYSDATE ,
                               UPD_USER_ID =#{USER_ID}
                        WHERE CALL_ENTRY_ID =#{CALL_ENTRY_ID}
     </insert>
     
     
     
     <select id="geTtotalAASLeft" parameterType="Map" resultType="egovMap">    
		<![CDATA[		     
				SELECT totalLgAmt,
				           totalUsedLgAmt ,
				           (totalLgAmt - totalUsedLgAmt) totalAASLeft
				FROM(
				    SELECT 
				        (totalLgAmt * -1) totalLgAmt ,
				        0 totalUsedLgAmt
				    FROM (
				        select AS_SO_ID , 
				               sum(AS_LG_AMT)  totalLgAmt  from PAY0006D
				        where AS_SO_ID =#{AS_SO_ID}
				        and AS_LG_DOC_TYPE_ID ='401'
				        and AS_LG_AMT <0
				        group by AS_SO_ID
				    )
				    UNION
				    SELECT 
				        0 totalLgAmt , 
				        (totalLgAmt * -1) totalUsedLgAmt 
				    FROM (
				        select AS_SO_ID , 
				               sum(AS_LG_AMT)  totalLgAmt  from PAY0006D
				        where AS_SO_ID =#{AS_SO_ID}
				        and AS_LG_DOC_TYPE_ID ='163'
				        and AS_ADV_PAY =1
				        group by AS_SO_ID
				    )
				 )
      ]]> 
 </select>
 
 
 
  <select id="geGST_CHK" parameterType="Map" resultType="egovMap">    
		SELECT  A.SALES_ORD_ID ,
		        B.CUST_ID, 
		        C.GST_CHK 
		FROM    SAL0001D A ,  SAL0023D B  ,  SYS0064M C  
		WHERE 1=1
		AND A.SALES_ORD_ID = #{AS_SO_ID}
		AND A.CUST_ADD_ID =B.CUST_ADD_ID
		AND C.AREA_ID   = B.AREA_ID
 </select>
 
 
 
 
      <insert id="insert_Pay0031d" parameterType="Map" >
			 
			INSERT INTO  PAY0031D (
			   TAX_INVC_ID, TAX_INVC_REF_NO, TAX_INVC_REF_DT, 
			   TAX_INVC_SVC_NO, TAX_INVC_TYPE, TAX_INVC_CUST_NAME, 
			   TAX_INVC_CNTC_PERSON, TAX_INVC_ADDR1, TAX_INVC_ADDR2, 
			   TAX_INVC_ADDR3, TAX_INVC_ADDR4, TAX_INVC_POST_CODE, 
			   TAX_INVC_STATE_NAME, TAX_INVC_CNTY, TAX_INVC_TASK_ID, 
			   TAX_INVC_REM, TAX_INVC_CHRG, TAX_INVC_TXS, 
			   TAX_INVC_AMT_DUE, TAX_INVC_CRT_DT, TAX_INVC_CRT_USER_ID) 
			VALUES (
			   #{taxInvcId}, 
			   #{taxInvcRefNo}, 
			   #{taxInvcRefDt}, 
			   #{taxInvcSvcNo}, 
			   #{taxInvcType}, 
			   #{taxInvcCustName}, 
			   #{taxInvcCntcPerson}, 
			   #{taxInvcAddr1}, 
			   #{taxInvcAddr2}, 
			   #{taxInvcAddr3}, 
			   #{taxInvcAddr4}, 
			   #{taxInvcPostCode}, 
			   #{taxInvcStateName}, 
			   #{taxInvcCnty}, 
			   #{taxInvcTaskId}, 
			   #{taxInvcRem}, 
			   #{taxInvcChrg}, 
			   #{taxInvcTxs}, 
			   #{taxInvcAmtDue}, 
			   #{taxInvcCrtDt}, 
			   #{taxInvcCrtUserId}
			 )
		 </insert>	 
		 
		  <insert id="insert_Pay0032d" parameterType="Map" >
		  
				INSERT INTO PAY0032D (
				   INVC_ITM_ID, TAX_INVC_ID, INVC_ITM_TYPE, 
				   INVC_ITM_ORD_NO, INVC_ITM_PO_NO, INVC_ITM_CODE, 
				   INVC_ITM_DESC1, INVC_ITM_DESC2, INVC_ITM_SERIAL_NO, 
				   INVC_ITM_QTY, INVC_ITM_UNIT_PRC, INVC_ITM_GST_RATE, 
				   INVC_ITM_GST_TXS, INVC_ITM_CHRG, INVC_ITM_AMT_DUE, 
				   INVC_ITM_ADD1, INVC_ITM_ADD2, INVC_ITM_ADD3, 
				   INVC_ITM_ADD4, INVC_ITM_POST_CODE, INVC_ITM_AREA_NAME, 
				   INVC_ITM_STATE_NAME, INVC_ITM_CNTY, INVC_ITM_INSTALL_DT, 
				   INVC_ITM_RETN_DT, INVC_ITM_BILL_REF_NO) 
				VALUES (   
				           PAY0032D_SEQ.NEXTVAL, 
				           #{taxInvcId}, 
				           #{invcItmType}, 
				           #{invcItmOrdNo}, 
				           #{invcItmPoNo}, 
				           #{invcItmCode}, 
				           #{invcItmDesc1}, 
				           #{invcItmDesc2}, 
				           #{invcItmSerialNo}, 
				           #{invcItmQty}, 
				           #{invcItmUnitPrc}, 
				           #{invcItmGstRate}, 
				           #{invcItmGstTxs}, 
				           #{invcItmChrg}, 
				           #{invcItmAmtDue}, 
				           #{invcItmAdd1}, 
				           #{invcItmAdd2}, 
				           #{invcItmAdd3}, 
				           #{invcItmAdd4}, 
				           #{invcItmPostCode}, 
				           #{invcItmAreaName}, 
				           #{invcItmStateName}, 
				           #{invcItmCnty}, 
				           #{invcItmInstallDt}, 
				           #{invcItmRetnDt}, 
				           #{invcItmBillRefNo}
				        )
      </insert>
      
      
       <insert id="insert_Pay0016d" parameterType="Map" >
				
				INSERT INTO PAY0016D (
				   ACC_BILL_ID, ACC_BILL_TASK_ID, ACC_BILL_REF_DT, 
				   ACC_BILL_REF_NO, ACC_BILL_ORD_ID, ACC_BILL_ORD_NO, 
				   ACC_BILL_TYPE_ID, ACC_BILL_MODE_ID, ACC_BILL_SCHDUL_ID, 
				   ACC_BILL_SCHDUL_PRIOD, ACC_BILL_ADJ_ID, ACC_BILL_SCHDUL_AMT, 
				   ACC_BILL_ADJ_AMT, ACC_BILL_TXS_AMT, ACC_BILL_NET_AMT, 
				   ACC_BILL_STUS, ACC_BILL_REM, ACC_BILL_CRT_DT, 
				   ACC_BILL_CRT_USER_ID, ACC_BILL_GRP_ID, ACC_BILL_TAX_CODE_ID, 
				   ACC_BILL_TAX_RATE, ACC_BILL_ACCT_CNVR, ACC_BILL_CNTRCT_ID) 
				VALUES (    
				           PAY0016D_SEQ.NEXTVAL, 
				           #{accBillTaskId}, 
				           #{accBillRefDt}, 
				           #{accBillRefNo}, 
				           #{accBillOrdId}, 
				            (SELECT SALES_ORD_NO  FROM SAL0001D WHERE  SALES_ORD_ID =#{accBillOrdId} ) , 
				           #{accBillTypeId}, 
				           #{accBillModeId}, 
				           #{accBillSchdulId}, 
				           #{accBillSchdulPriod}, 
				           #{accBillAdjId}, 
				           #{accBillSchdulAmt}, 
				           #{accBillAdjAmt}, 
				           #{accBillTxsAmt}, 
				           #{accBillNetAmt}, 
				           #{accBillStus}, 
				           #{accBillRem}, 
				           #{accBillCrtDt}, 
				           #{accBillCrtUserId}, 
				           #{accBillGrpId}, 
				           #{accBillTaxCodeId}, 
				           #{accBillTaxRate}, 
				           #{accBillAcctCnvr}, 
				           #{accBillCntrctId}
				       )
       </insert>
       
       
       
       <insert id="insert_Pay0006d" parameterType="Map" >
			       
			INSERT INTO PAY0006D (
											   AS_LDGR_ID, AS_ID, AS_DOC_NO, 
											   AS_LG_DOC_TYPE_ID, AS_LG_DT, AS_LG_AMT, 
											   AS_LG_UPD_USER_ID, AS_LG_UPD_DT, AS_SO_NO, 
											   AS_RESULT_NO, AS_SO_ID, AS_ADV_PAY, 
											   R01) 
											VALUES (    
											   PAY0006D_SEQ.NEXTVAL, 
											   #{asId}, 
											   #{asDocNo}, 
											   #{asLgDocTypeId}, 
											   #{asLgDt}, 
											   #{asLgAmt}, 
											   #{asLgUpdUserId}, 
											   #{asLgUpdDt}, 
                                               (SELECT SALES_ORD_NO  FROM SAL0001D WHERE  SALES_ORD_ID =#{asSoId} ) , 
											   #{asResultNo}, 
											   #{asSoId}, 
											   #{asAdvPay}, 
											   #{r01} 
											)
       </insert>
       
       
       <insert id="insert_Pay0007d" parameterType="Map" >
						INSERT INTO PAY0007D (
						   BILL_ID, BILL_TYPE_ID, BILL_SO_ID, 
						   BILL_MEM_ID, BILL_AS_ID, BILL_PAY_TYPE_ID, 
						   BILL_NO, BILL_MEM_SHIP_NO, BILL_DT, 
						   BILL_AMT, BILL_REM, BILL_IS_PAID, 
						   BILL_IS_COMM, UPD_USER_ID, UPD_DT, 
						   SYNC_CHK, COURS_ID, STUS_ID) 
						VALUES ( 
						   PAY0007D_SEQ.NEXTVAL, 
						   #{billTypeId}, 
						   #{billSoId}, 
						   #{billMemId}, 
						   #{billAsId},   
						   #{billPayTypeId}, 
						   #{billNo}, 
						   #{billMemShipNo}, 
						   #{billDt}, 
						   #{billAmt}, 
						   #{billRem}, 
						   #{billIsPaid}, 
						   #{billIsComm}, 
						   #{updUserId}, 
						   #{updDt}, 
						   #{syncChk}, 
						   #{coursId}, 
						   #{stusId})
     </insert>
       
        <insert id="insert_Ccr0001d" parameterType="Map" >
			        
			INSERT INTO CCR0001D (
														   HC_ID, HCSOID, HC_CALL_ENTRY_ID, 
								   HC_TYPE_NO, HC_TYPE_ID, HC_STUS_ID, 
								   HC_REM, HC_COMMENT_TYPE_ID, HC_COMMENT_GID, 
								   HC_COMMENT_SID, HC_COMMENT_DID, CRT_USER_ID, 
								   CRT_DT, UPD_USER_ID, UPD_DT, 
								   HC_NO_SVC, HC_LOK, HC_CLOS_ID) 
						VALUES (
									(select max(HC_ID)+1  from Ccr0001d), 
									#{hcsoid}, 
									#{hcCallEntryId}, 
									 #{hcTypeNo}, 
									#{hcTypeId}, 
									#{hcStusId}, 
									#{hcRem}, 
									#{hcCommentTypeId}, 
									#{hcCommentGid}, 
									#{hcCommentSid}, 
									#{hcCommentDid}, 
									#{crtUserId}, 
								    SYSDATE, 
									#{updUserId}, 
									SYSDATE, 
									#{hcNoSvc}, 
									#{hcLok}, 
									#{hcClosId})
        
         </insert>
       
       
       

      
       <resultMap id="callasLogClobMapAS" type="egovMap">
              <result property="callRem" column="CALL_REM" jdbcType="CLOB" javaType="java.lang.String"/>
       </resultMap>
         
           
       <select id="selectASDataInfo" parameterType="Map" resultMap="callasLogClobMapAS">
       
				       SELECT S.AS_ID AS_ID  ,
				       S.AS_ALLOW_COMM AS_ALLOW_COMM  ,
				       S.AS_CRT_DT AS_CRT_DT  ,
				       CASE 
				            WHEN ( S.USER_ID IS NOT NULL ) THEN S.USER_NAME
				       ELSE '-'
				          END C1  ,
				       S.AS_NO AS_NO  ,
				       S.AS_STUS_ID AS_STUS_ID  ,
				       S.AS_SO_ID AS_SO_ID  ,
				       CASE 
				            WHEN ( S.AS_REQSTER_TYPE_ID IS NOT NULL ) THEN S.AS_REQSTER_TYPE_ID
				       ELSE 0
				          END C2  ,
				       CASE 
				            WHEN ( S.CODE_ID IS NOT NULL ) THEN S.CODE_NAME
				       ELSE ' '
				          END C3  ,
				       S.AS_REM_REQSTER AS_REM_REQSTER  ,
				       S.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC  ,
				       S.CODE CODE  ,
				       S.AS_REQST_DT AS_REQST_DT  ,
				       S.AS_REQST_TM AS_REQST_TM  ,
				       S.AS_APPNT_DT AS_APPNT_DT  ,
				       S.AS_APPNT_TM AS_APPNT_TM  ,
				       CASE 
				            WHEN ( S.AS_RESULT_ID IS NOT NULL ) THEN S.AS_RESULT_ID
				       ELSE 0
				          END C4  ,
				       CASE 
				            WHEN ( S.AS_RESULT_ID IS NOT NULL ) THEN S.AS_RESULT_NO
				       ELSE '-'
				          END C5  ,
				       S.AS_MEM_GRP AS_MEM_GRP  ,
				       CASE 
				            WHEN ( S.AS_BRNCH_ID IS NOT NULL ) THEN S.AS_BRNCH_ID
				       ELSE 0
				          END C6  ,
				       CASE 
				            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.CODE1
				       ELSE ' '
				          END C7  ,
				       CASE 
				            WHEN ( S.BRNCH_ID IS NOT NULL ) THEN S.NAME
				       ELSE ' '
				          END C8  ,
				       CASE 
				            WHEN ( S.AS_MEM_ID IS NOT NULL ) THEN S.AS_MEM_ID
				       ELSE 0
				          END C9  ,
				       CASE 
				            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.MEM_CODE
				       ELSE ' '
				          END C10  ,
				       CASE 
				            WHEN ( S.MEM_ID IS NOT NULL ) THEN S.NAME1
				       ELSE ' '
				          END C11  ,
				       CASE 
				            WHEN ( S.AS_MALFUNC_ID IS NOT NULL ) THEN S.AS_MALFUNC_ID
				       ELSE 0
				          END C12  ,
				       CASE 
				            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.CODE2
				       ELSE ' '
				          END C13  ,
				       CASE 
				            WHEN ( S.RESN_ID IS NOT NULL ) THEN S.RESN_DESC
				       ELSE ' '
				          END C14  ,
				       CASE 
				            WHEN ( S.AS_MALFUNC_RESN_ID IS NOT NULL ) THEN S.AS_MALFUNC_RESN_ID
				       ELSE 0
				          END C15  ,
				       CASE 
				            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.CODE3
				       ELSE ' '
				          END C16  ,
				       CASE 
				            WHEN ( S.REASONID1 IS NOT NULL ) THEN S.REASONDESC1
				       ELSE ' '
				          END C17  ,
				       S.AS_SMS AS_SMS  ,
				       S.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS  ,
				       CASE 
				            WHEN ( S.CALL_RESULT_ID IS NOT NULL ) THEN S.CALL_REM
				       ELSE S.CALL_REM
				          END CALL_REM  ,
				       CASE 
				            WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
				              AND ( S.ACC_BILL_TASK_ID IS NULL ) ) ) THEN S.ACC_BILL_ID
				            WHEN ( NOT ( ( S.ACC_BILL_ID IS NULL )
				              AND ( S.ACC_BILL_TASK_ID IS NULL ) ) ) THEN S.ACC_BILL_ID
				       ELSE 0
				          END C19  ,
				       CASE 
				            WHEN ( NOT ( ( S.TAX_INVC_ID IS NULL )
				              AND ( S.TAX_INVC_REF_NO IS NULL ) ) ) THEN S.TAX_INVC_REF_NO
				       ELSE ' '
				          END C20  
				  FROM ( SELECT Extent1.AS_ID AS_ID  ,
				                Extent1.AS_NO AS_NO  ,
				                Extent1.AS_SO_ID AS_SO_ID  ,
				                Extent1.AS_MEM_ID AS_MEM_ID  ,
				                Extent1.AS_MEM_GRP AS_MEM_GRP  ,
				                Extent1.AS_REQST_DT AS_REQST_DT  ,
				                Extent1.AS_REQST_TM AS_REQST_TM  ,
				                Extent1.AS_APPNT_DT AS_APPNT_DT  ,
				                Extent1.AS_APPNT_TM AS_APPNT_TM  ,
				                Extent1.AS_BRNCH_ID AS_BRNCH_ID  ,
				                Extent1.AS_MALFUNC_ID AS_MALFUNC_ID  ,
				                Extent1.AS_MALFUNC_RESN_ID AS_MALFUNC_RESN_ID  ,
				                Extent1.AS_REM_REQSTER AS_REM_REQSTER  ,
				                Extent1.AS_REM_REQSTER_CNTC AS_REM_REQSTER_CNTC  ,
				                Extent1.AS_STUS_ID AS_STUS_ID  ,
				                Extent1.AS_SMS AS_SMS  ,
				                Extent1.AS_CRT_DT AS_CRT_DT  ,
				                Extent1.AS_REQSTER_TYPE_ID AS_REQSTER_TYPE_ID  ,
				                Extent1.AS_IS_BS_WITHIN_30DAYS AS_IS_BS_WITHIN_30DAYS  ,
				                Extent1.AS_ALLOW_COMM AS_ALLOW_COMM  ,
				                Extent2.CODE CODE  ,
				                Extent3.USER_ID USER_ID  ,
				                Extent3.USER_NAME USER_NAME  ,
				                Extent4.CODE_ID CODE_ID  ,
				                Extent4.CODE_NAME CODE_NAME  ,
				                Extent5.AS_RESULT_ID AS_RESULT_ID  ,
				                Extent5.AS_RESULT_NO AS_RESULT_NO  ,
				                Extent6.BRNCH_ID BRNCH_ID  ,
				                Extent6.CODE CODE1  ,
				                Extent6.NAME NAME  ,
				                Extent7.MEM_ID MEM_ID  ,
				                Extent7.MEM_CODE MEM_CODE  ,
				                Extent7.NAME NAME1  ,
				                Extent8.RESN_ID RESN_ID  ,
				                Extent8.CODE CODE2  ,
				                Extent8.RESN_DESC RESN_DESC  ,
				                Extent9.RESN_ID REASONID1  ,
				                Extent9.CODE CODE3  ,
				                Extent9.RESN_DESC REASONDESC1  ,
				                Extent11.CALL_RESULT_ID CALL_RESULT_ID  ,
				                Extent11.CALL_REM CALL_REM  ,
				                Extent12.TAX_INVC_ID TAX_INVC_ID  ,
				                Extent12.TAX_INVC_REF_NO TAX_INVC_REF_NO  ,
				                Extent13.ACC_BILL_ID ACC_BILL_ID  ,
				                Extent13.ACC_BILL_TASK_ID ACC_BILL_TASK_ID  
				         FROM SVC0001D Extent1
				                JOIN SYS0038M Extent2   ON Extent1.AS_STUS_ID = Extent2.STUS_CODE_ID
				                LEFT JOIN SYS0047M Extent3   ON Extent1.AS_CRT_USER_ID = Extent3.USER_ID
				                LEFT JOIN SYS0013M Extent4   ON Extent1.AS_REQSTER_TYPE_ID = Extent4.CODE_ID
				                LEFT JOIN SVC0004D Extent5   ON ( Extent1.AS_ID = Extent5.AS_ENTRY_ID )
				                AND ( 457 = Extent5.AS_RESULT_TYPE_ID )
				                AND ( 1 = Extent5.AS_RESULT_IS_CURR )
				                LEFT JOIN SYS0005M Extent6   ON Extent1.AS_BRNCH_ID = Extent6.BRNCH_ID
				                LEFT JOIN ORG0001D Extent7   ON Extent1.AS_MEM_ID = Extent7.MEM_ID
				                LEFT JOIN SYS0032M Extent8   ON Extent1.AS_MALFUNC_ID = Extent8.RESN_ID
				                LEFT JOIN SYS0032M Extent9   ON Extent1.AS_MALFUNC_RESN_ID = Extent9.RESN_ID
				                LEFT JOIN CCR0006D Extent10   ON Extent1.AS_CALLLOG_ID = Extent10.CALL_ENTRY_ID
				                LEFT JOIN CCR0007D Extent11   ON Extent10.RESULT_ID = Extent11.CALL_RESULT_ID
				                LEFT JOIN PAY0031D Extent12   ON ( Extent5.AS_RESULT_NO = Extent12.TAX_INVC_SVC_NO )
				                OR ( ( Extent5.AS_RESULT_NO IS NULL )
				                AND ( Extent12.TAX_INVC_SVC_NO IS NULL ) )
				                LEFT JOIN PAY0016D Extent13   ON Extent12.TAX_INVC_REF_NO = Extent13.ACC_BILL_REM
				          WHERE  Extent1.AS_ID = #{AS_ID} AND ROWNUM  <![CDATA[  <= 1 ]]>
				         ) S
				       
    </select>
       
   <resultMap id="asFilterClaimCheck" type="egovMap" ></resultMap>
   
   <select id="spFilterClaimCheck"  statementType="CALLABLE"   parameterType="Map">
       <![CDATA[  
            {
                  call SP_FILTER_CLM_CHK ( #{asResultId} ,  #{type} , #{p1, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=asFilterClaimCheck})
            }
         ]]>
   </select>   
      
      
      
      
      
      
      
      
      
    <insert id="insert_Pay0017d" parameterType="Map" >
    
			INSERT INTO PAY0017D (
			   ACC_INV_VOID_ID, ACC_INV_VOID_REF_NO, ACC_INV_VOID_INVC_NO, 
			   ACC_INV_VOID_INVC_AMT, ACC_INV_VOID_REM, ACC_INV_VOID_STUS_ID, 
			   ACC_INV_VOID_CRT_USER_ID, ACC_INV_VOID_CRT_DT) 
			VALUES (   
				        PAY0017D_SEQ.NEXTVAL, 
				        #{accInvVoidRefNo}, 
				        #{accInvVoidInvcNo}, 
				        #{accInvVoidInvcAmt}, 
				        #{accInvVoidRem}, 
				        #{accInvVoidStusId}, 
				        #{accInvVoidCrtUserId}, 
				        #{accInvVoidCrtDt}
			 )
       </insert>
       
       
       <select id="getPAY0017SEQ" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                SELECT  PAY0017D_SEQ.NEXTVAL   seq FROM DUAL
        ]]> 
     </select>
     
     
        <select id="getResult_SVC0004D" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
				     SELECT 
				           S.AS_RESULT_ID, S.AS_RESULT_NO, S.AS_ENTRY_ID, 
				           S.AS_SO_ID, S.AS_CT_ID, S.AS_SETL_DT, 
				           S.AS_SETL_TM, S.AS_RESULT_STUS_ID, S.AS_FAIL_RESN_ID, 
				           S.AS_REN_COLCT_ID, S.AS_CMMS, S.AS_BRNCH_ID, 
				           S.AS_WH_ID, S.AS_RESULT_REM, S.AS_RESULT_CRT_DT, 
				           S.AS_RESULT_CRT_USER_ID, S.AS_MALFUNC_ID, S.AS_MALFUNC_RESN_ID, 
				           S.AS_DEFECT_TYPE_ID, S.AS_DEFECT_GRP_ID, S.AS_DEFECT_ID, 
				           S.AS_DEFECT_PART_GRP_ID, S.AS_DEFECT_PART_ID, S.AS_DEFECT_DTL_RESN_ID, 
				           S.AS_SLUTN_RESN_ID, S.AS_WORKMNSH, S.AS_FILTER_AMT, 
				           S.AS_ACSRS_AMT, S.AS_TOT_AMT, S.AS_RESULT_IS_SYNCH, 
				           S.AS_RCALL, S.AS_RESULT_STOCK_USE, S.AS_RESULT_TYPE_ID, 
				           S.AS_RESULT_IS_CURR, S.AS_RESULT_MTCH_ID, S.AS_RESULT_NO_ERR, 
				           S.AS_RESULT_UPD_DT, S.AS_RESULT_UPD_USER_ID, S.AS_ENTRY_POINT, 
				           S.AS_WORKMNSH_TAX_CODE_ID, S.AS_WORKMNSH_TXS, S.AS_RESULT_MOBILE_ID
				FROM  SVC0004D S
				 WHERE AS_ENTRY_ID =#{AS_ID}
				 AND AS_RESULT_IS_CURR =1
				      
        ]]> 
     </select>
     
     
       
       <insert id="insert_Pay0018d" parameterType="Map" >  
			       
			INSERT INTO  PAY0018D (
			   ACC_INV_VOID_SUB_ID, ACC_INV_VOID_ID, ACC_INV_VOID_SUB_ORD_ID, 
			   ACC_INV_VOID_SUB_BILL_ID, ACC_INV_VOID_SUB_BILL_AMT, ACC_INV_VOID_SUB_CRDIT_NOTE, 
			   ACC_INV_VOID_SUB_CRDIT_NOTE_ID, ACC_INV_VOID_SUB_REM) 
			VALUES ( 
			       PAY0018D_SEQ.NEXTVAL,
			       #{accInvVoidId}
			       #{accInvVoidSubOrdId} 
			       #{accInvVoidSubBillId}
			       #{accInvVoidSubBillAmt}
			       #{accInvVoidSubCrditNote}
			       #{accInvVoidSubCrditNoteId}
			       #{accInvVoidSubRem} 
			       )
       </insert>
       
    <insert id="reverse_SVC0004D" parameterType="Map" >      
			     INSERT INTO  SVC0004D (
								       AS_RESULT_ID, AS_RESULT_NO, AS_ENTRY_ID, 
								       AS_SO_ID, AS_CT_ID, AS_SETL_DT, 
								       AS_SETL_TM, AS_RESULT_STUS_ID, AS_FAIL_RESN_ID, 
								       AS_REN_COLCT_ID, AS_CMMS, AS_BRNCH_ID, 
								       AS_WH_ID, AS_RESULT_REM, AS_RESULT_CRT_DT, 
								       AS_RESULT_CRT_USER_ID, AS_MALFUNC_ID, AS_MALFUNC_RESN_ID, 
								       AS_DEFECT_TYPE_ID, AS_DEFECT_GRP_ID, AS_DEFECT_ID, 
								       AS_DEFECT_PART_GRP_ID, AS_DEFECT_PART_ID, AS_DEFECT_DTL_RESN_ID, 
								       AS_SLUTN_RESN_ID, AS_WORKMNSH, AS_FILTER_AMT, 
								       AS_ACSRS_AMT, AS_TOT_AMT, AS_RESULT_IS_SYNCH, 
								       AS_RCALL, AS_RESULT_STOCK_USE, AS_RESULT_TYPE_ID, 
								       AS_RESULT_IS_CURR, AS_RESULT_MTCH_ID, AS_RESULT_NO_ERR, 
								       AS_RESULT_UPD_DT, AS_RESULT_UPD_USER_ID, AS_ENTRY_POINT, 
								       AS_WORKMNSH_TAX_CODE_ID, AS_WORKMNSH_TXS, AS_RESULT_MOBILE_ID) 
					
					SELECT 
					       #{NEW_AS_RESULT_ID}, 
					       #{NEW_AS_RESULT_NO}, 
					       S.AS_ENTRY_ID, 
					       S.AS_SO_ID, 
					       S.AS_CT_ID, 
					       S.AS_SETL_DT, 
					       S.AS_SETL_TM, 
					       S.AS_RESULT_STUS_ID, 
					       S.AS_FAIL_RESN_ID, 
					       S.AS_REN_COLCT_ID, 
					       S.AS_CMMS, 
					       S.AS_BRNCH_ID, 
					       S.AS_WH_ID, 
					       S.AS_RESULT_REM, 
					       SYSDATE, 
					       #{updator}, 
					       S.AS_MALFUNC_ID, 
					       S.AS_MALFUNC_RESN_ID, 
					       S.AS_DEFECT_TYPE_ID, 
					       S.AS_DEFECT_GRP_ID, 
					       S.AS_DEFECT_ID, 
					       S.AS_DEFECT_PART_GRP_ID, 
					       S.AS_DEFECT_PART_ID, 
					       S.AS_DEFECT_DTL_RESN_ID, 
					       S.AS_SLUTN_RESN_ID, 
					       (S.AS_WORKMNSH * -1) , 
					       (S.AS_FILTER_AMT * -1), 
					       (S.AS_ACSRS_AMT * -1), 
					       (S.AS_TOT_AMT * -1), 
					       0, 
					       S.AS_RCALL, 
					       S.AS_RESULT_STOCK_USE, 
					       459, 
					       0, 
					       S.AS_RESULT_MTCH_ID, 
					       '', 
					       S.AS_RESULT_UPD_DT, 
					       S.AS_RESULT_UPD_USER_ID, 
					       S.AS_ENTRY_POINT, 
					       S.AS_WORKMNSH_TAX_CODE_ID, 
					       S.AS_WORKMNSH_TXS, 
					       S.AS_RESULT_MOBILE_ID
					FROM SVC0004D S
					  WHERE  AS_RESULT_ID =#{OLD_AS_RESULT_ID}
					    AND  S.AS_RESULT_IS_CURR =1
          </insert>
          
          
        <insert id="reverse_CURR_SVC0004D" parameterType="Map" >      
				 UPDATE SVC0004D 
				       SET AS_RESULT_IS_CURR =0
				 WHERE  AS_RESULT_ID =#{OLD_AS_RESULT_ID}
        </insert>
        
        <insert id="reverse_CURR_SVC0005D" parameterType="Map" >    
				INSERT INTO SVC0005D (
												   ASR_ITM_ID, AS_RESULT_ID, ASR_ITM_PART_ID, 
												   ASR_ITM_PART_DESC, ASR_ITM_PART_QTY, ASR_ITM_PART_PRC, 
												   ASR_ITM_CHRG_AMT, ASR_ITM_REM, ASR_ITM_CRT_USER_ID, 
												   ASR_ITM_CRT_DT, ASR_ITM_CHRG_FOC, ASR_ITM_EXCHG_ID, 
												   ASR_ITM_CLM, ASR_ITM_TAX_CODE_ID, ASR_ITM_TXS_AMT, 
												   SERIAL_NO
	            ) 
				SELECT 
				   SVC0005D_ASR_ITM_ID_SEQ.NEXTVAL , 
				   #{AS_RESULT_ID}, 
				   S.ASR_ITM_PART_ID, 
				   S.ASR_ITM_PART_DESC, 
				   (S.ASR_ITM_PART_QTY * -1), 
				   S.ASR_ITM_PART_PRC, 
				   S.ASR_ITM_CHRG_AMT, 
				   S.ASR_ITM_REM, 
				   #{updator}, 
				   SYSDATE , 
				   S.ASR_ITM_CHRG_FOC, 
				   S.ASR_ITM_EXCHG_ID, 
				   S.ASR_ITM_CLM, 
				   S.ASR_ITM_TAX_CODE_ID, 
				   S.ASR_ITM_TXS_AMT, 
				   S.SERIAL_NO
				FROM SVC0005D S 
				 WHERE  AS_RESULT_ID = #{OLD_AS_RESULT_ID}
        </insert>
        
        
        
        <select id="getLog0016DCount" parameterType="Map" resultType="egovMap">
			SELECT  COUNT(*) cnt
			    FROM LOG0016D 
			WHERE REQ_ITM_REF_ID  =#{OLD_AS_RESULT_ID}
			    AND REQ_ITM_TYPE_ID ='457'
			    AND REQ_ITM_STUS_ID  ='4'
        </select>
        
        
        
        
         
       <select id="getLOG0015DSEQ" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
                SELECT  LOG0015D_STK_REQ_ID_SEQ.NEXTVAL   seq FROM DUAL
        ]]> 
     </select>
     
     
     <insert id="insert_LOG0015D" parameterType="Map" > 
			INSERT INTO LOG0015D (
			   STK_REQ_ID, STK_REQ_NO, STK_REQ_LOC_FROM_ID, 
			   STK_REQ_LOC_TO_ID, STK_REQ_REM, STK_REQ_CRT_USER_ID, 
			   STK_REQ_CRT_DT) 
			SELECT #{STK_REQ_ID}, 
			           #{STK_REQ_NO}, 
			           STK_REQ_LOC_FROM_ID, 
			           STK_REQ_LOC_TO_ID, 
			           '', 
			           #{updator}, 
			           sysdate
			      FROM LOG0015D  
			    WHERE 1=1
			        AND STK_REQ_ID  = (
			                SELECT  distinct REQ_ID
			                    FROM LOG0016D 
			                  WHERE REQ_ITM_REF_ID  =#{OLD_AS_RESULT_ID}   
			                    AND REQ_ITM_TYPE_ID ='457'
			                    AND REQ_ITM_STUS_ID  ='4'
			        )
			        AND ROWNUM =1
			        
        </insert>
     
      <insert id="insert_LOG0016D" parameterType="Map" > 
		        INSERT INTO  LOG0016D (
		                               REQ_ITM_ID, REQ_ID, REQ_ITM_TYPE_ID, 
		                               REQ_ITM_REF_ID, REQ_ITM_STK_ID, REQ_ITM_STK_DESC, 
		                               REQ_ITM_QTY, REQ_ITM_STUS_ID, REQ_ITM_REM) 
		       SELECT   
		           LOG0016D_REQ_ITM_ID_SEQ.NEXTVAL, 
		           #{STK_REQ_ID}, 
		           459, 
		           #{AS_RESULT_ID}, 
		           REQ_ITM_STK_ID, 
		           REQ_ITM_STK_DESC, 
		           (REQ_ITM_QTY * -1), 
		           1, 
		            ''
		        FROM LOG0016D 
		      WHERE REQ_ITM_REF_ID  =#{OLD_AS_RESULT_ID} 
		        AND REQ_ITM_TYPE_ID ='457'
		        AND REQ_ITM_STUS_ID  ='4'
      </insert>
     
     
      <insert id="insert_LOG0014D" parameterType="Map" > 
				     
				INSERT INTO  LOG0014D (
				                       SR_CARD_ID, LOC_ID, STOCK_ID, 
				                       ENTRY_DT, TYPE_ID, REF_NO, 
				                       SALES_ORD_ID, ITM_NO, SRC_ID, 
				                       PRJCT_ID, BATCH_NO, QTY, 
				                       CURR_ID, CURR_RATE, COST, 
				                       PRC, REM, SERIAL_NO, 
				                       INSTALL_NO, COST_DT, APP_TYPE_ID, 
				                       STK_GRAD, INSTALL_FAIL, IS_SYNCH, 
				                       ENTRY_MTH_ID, ORGN, TRANS_TYPE, 
				                       DOC_LNE_NO, PO_NO, INSERT_DT, 
				                       IS_GR, PO_STUS
				  ) 
				  SELECT  
				           LOG0014D_SR_CARD_ID_SEQ.NEXTVAL, 
				           LOC_ID, 
				           STOCK_ID, 
				           SYSDATE, 
				           TYPE_ID, 
				           #{AS_NO}, 
				           SALES_ORD_ID, 
				           ITM_NO, 
				           SRC_ID, 
				           PRJCT_ID, 
				           BATCH_NO, 
				           (QTY * -1), 
				           CURR_ID, 
				           CURR_RATE, 
				           COST, 
				           PRC, 
				           REM, 
				           SERIAL_NO, 
				           #{AS_RESULT_NO}, 
				           SYSDATE, 
				           APP_TYPE_ID, 
				           STK_GRAD, 
				           INSTALL_FAIL, 
				           0, 
				           ENTRY_MTH_ID, 
				           ORGN, 
				           TRANS_TYPE, 
				           DOC_LNE_NO, 
				           PO_NO, 
				           INSERT_DT, 
				           IS_GR, 
				           PO_STUS
				  FROM   LOG0014D 
				  WHERE 1=1
				    AND INSTALL_NO = #{AS_RESULT_NO}
				    AND REF_NO =#{AS_NO}
				    ORDER BY ITM_NO DESC
     </insert>
  
       
     <insert id="reverse_PAY0007D" parameterType="Map" >      
                 UPDATE PAY0007D 
                       SET BILL_IS_PAID =1 ,
                              UPD_DT =SYSDATE,
                              UPD_USER_ID = #{updator}
                 WHERE  BILL_NO =#{AS_RESULT_NO}
     </insert>
     
     
         
     <insert id="reverse_updatePAY0016D" parameterType="Map" >      
			  UPDATE PAY0016D
			     SET  ACC_BILL_STUS =74
			 WHERE ACC_BILL_ID =  #{ACC_BILL_ID} 
     </insert>
     
            
       <select id="getResult_PAY0016D" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
			                
			 SELECT 
			   P.ACC_BILL_ID, P.ACC_BILL_TASK_ID, P.ACC_BILL_REF_DT, 
			   P.ACC_BILL_REF_NO, P.ACC_BILL_ORD_ID, P.ACC_BILL_ORD_NO, 
			   P.ACC_BILL_TYPE_ID, P.ACC_BILL_MODE_ID, P.ACC_BILL_SCHDUL_ID, 
			   P.ACC_BILL_SCHDUL_PRIOD, P.ACC_BILL_ADJ_ID, P.ACC_BILL_SCHDUL_AMT, 
			   P.ACC_BILL_ADJ_AMT, P.ACC_BILL_TXS_AMT, P.ACC_BILL_NET_AMT, 
			   P.ACC_BILL_STUS, P.ACC_BILL_REM, P.ACC_BILL_CRT_DT, 
			   P.ACC_BILL_CRT_USER_ID, P.ACC_BILL_GRP_ID, P.ACC_BILL_TAX_CODE_ID, 
			   P.ACC_BILL_TAX_RATE, P.ACC_BILL_ACCT_CNVR, P.ACC_BILL_CNTRCT_ID
			FROM  PAY0016D P
			  WHERE  ACC_BILL_ID  = #{ACC_BILL_ID}
        ]]> 
     </select>
     
             
       <select id="getResult_PAY0031D" parameterType="Map" resultType="egovMap">
       <![CDATA[ 
				SELECT 
				       P.TAX_INVC_ID, P.TAX_INVC_REF_NO, P.TAX_INVC_REF_DT, 
				       P.TAX_INVC_SVC_NO, P.TAX_INVC_TYPE, P.TAX_INVC_CUST_NAME, 
				       P.TAX_INVC_CNTC_PERSON, P.TAX_INVC_ADDR1, P.TAX_INVC_ADDR2, 
				       P.TAX_INVC_ADDR3, P.TAX_INVC_ADDR4, P.TAX_INVC_POST_CODE, 
				       P.TAX_INVC_STATE_NAME, P.TAX_INVC_CNTY, P.TAX_INVC_TASK_ID, 
				       P.TAX_INVC_REM, P.TAX_INVC_CHRG, P.TAX_INVC_TXS, 
				       P.TAX_INVC_AMT_DUE, P.TAX_INVC_CRT_DT, P.TAX_INVC_CRT_USER_ID
				FROM PAY0031D P
				WHERE TAX_INVC_REF_NO = #{accBillRem}
          ]]> 
     </select>
     
     
     
     
 <insert id="reverse_PAY0016D" parameterType="Map" >   
			INSERT INTO  PAY0011D (
						   MEMO_ADJ_ID, MEMO_ADJ_REF_NO, MEMO_ADJ_RPT_NO, 
						   MEMO_ADJ_TYPE_ID, MEMO_ADJ_INVC_NO, MEMO_ADJ_INVC_TYPE_ID, 
						   MEMO_ADJ_STUS_ID, MEMO_ADJ_RESN_ID, MEMO_ADJ_REM, 
						   MEMO_ADJ_TXS_AMT, MEMO_ADJ_TOT_AMT, MEMO_ADJ_CRT_DT, 
						   MEMO_ADJ_CRT_USER_ID, MEMO_ADJ_UPD_DT, MEMO_ADJ_UPD_USER_ID, 
						   BATCH_ID) 
			VALUES (   
			   #{memoAdjId},
			   #{memoAdjRefNo}, 
			   #{memoAdjRptNo}, 
			   #{memoAdjTypeId}, 
			   #{memoAdjInvcNo}, 
			   #{memoAdjInvcTypeId}, 
			   #{memoAdjStusId}, 
			   #{memoAdjResnId}, 
			   #{memoAdjRem}, 
			   #{memoAdjTxsAmt}, 
			   #{memoAdjTotAmt}, 
			   #{memoAdjCrtDt}, 
			   #{memoAdjCrtUserId}, 
			   #{memoAdjUpdDt}, 
			   #{memoAdjUpdUserId}, 
			   #{batchId}
			 )
			     
 </insert>
 
 
 <select id="getPAY0016DSEQ" parameterType="Map" resultType="egovMap">
	 <![CDATA[ 
	          SELECT  PAY0016D_SEQ.NEXTVAL    seq FROM DUAL
	  ]]> 
</select>

 <select id="getPAY0017DSEQ" parameterType="Map" resultType="egovMap">
     <![CDATA[ 
              SELECT  PAY0017D_SEQ.NEXTVAL    seq FROM DUAL
      ]]> 
</select>


 <insert id="reverse_PAY0012D" parameterType="Map" > 
		
		INSERT INTO PAY0012D (
		           MEMO_ITM_ID, 
		           MEMO_ADJ_ID, 
		           MEMO_ITM_INVC_ITM_ID, 
		           MEMO_ITM_INVC_ITM_QTY, 
		           MEMO_ITM_CRDIT_ACC_ID, 
		           MEMO_ITM_DEBT_ACC_ID, 
		           MEMO_ITM_TAX_CODE_ID, 
		           MEMO_ITM_STUS_ID, 
		           MEMO_ITM_REM, 
		           MEMO_ITM_GST_RATE, 
		           MEMO_ITM_CHRG, 
		           MEMO_ITM_TXS, 
		           MEMO_ITM_AMT)
		 SELECT  
		   PAY0012D_SEQ.NEXTVAL,
		   #{MEMO_ADJ_ID}, 
		   P.INVC_ITM_ID,
		   P.INVC_ITM_QTY, 
		   39,
		   167,
		   #{MEMO_ITM_TAX_CODE_ID},
		   1,
		    #{MEMO_ITM_REM},
		   P.INVC_ITM_GST_RATE,
		   P.INVC_ITM_CHRG, 
		   P.INVC_ITM_GST_TXS, 
		   P.INVC_ITM_AMT_DUE
		FROM  PAY0031D A, PAY0032D P 
		 WHERE A.TAX_INVC_ID = P.TAX_INVC_ID
		 AND A.TAX_INVC_REF_NO = #{TAX_INVC_REF_NO}
 
</insert>



 <select id="getPAY0027DSEQ" parameterType="Map" resultType="egovMap">
     <![CDATA[ 
              SELECT  PAY0027D_SEQ.NEXTVAL    seq FROM DUAL
      ]]> 
</select>


 
  <insert id="reverse_PAY0027D" parameterType="Map" > 
	 INSERT INTO  PAY0027D (
	   NOTE_ID, NOTE_ENTRY_ID, NOTE_TYPE_ID, 
	   NOTE_GRP_NO, NOTE_REF_NO, NOTE_REF_DT, 
	   NOTE_INVC_NO, NOTE_INVC_TYPE_ID, NOTE_CUST_NAME, 
	   NOTE_CNTC_PERSON, NOTE_ADDR1, NOTE_ADDR2, 
	   NOTE_ADDR3, NOTE_ADDR4, NOTE_POST_CODE, 
	   NOTE_AREA_NAME, NOTE_STATE_NAME, NOTE_CNTY_NAME, 
	   NOTE_TXS, NOTE_CHRG, NOTE_AMT_DUE, 
	   NOTE_REM, NOTE_STUS_ID, NOTE_CRT_DT, 
	   NOTE_CRT_USER_ID) 
	VALUES (  
	   #{noteId}, 
	   #{noteEntryId}, 
	   #{noteTypeId}, 
	   #{noteGrpNo}, 
	   #{noteRefNo}, 
	   #{noteRefDt}, 
	   #{noteInvcNo}, 
	   #{noteInvcTypeId}, 
	   #{noteCustName}, 
	   #{noteCntcPerson}, 
	   #{noteAddr1}, 
	   #{noteAddr2}, 
	   #{noteAddr3}, 
	   #{noteAddr4}, 
	   #{notePostCode}, 
	   #{noteAreaName}, 
	   #{noteStateName}, 
	   #{noteCntyName}, 
	   #{noteTxs}, 
	   #{noteChrg}, 
	   #{noteAmtDue}, 
	   #{noteRem}, 
	   #{noteStusId}, 
	   #{noteCrtDt}, 
	   #{noteCrtUserId} 
	  )
  </insert>
  
  
  
  
 <insert id="reverse_PAY0028D" parameterType="Map" > 
   INSERT INTO  PAY0028D (
                   NOTE_ITM_ID, 
                   NOTE_ID, 
                   NOTE_ITM_INVC_ITM_ID, 
                   NOTE_ITM_ORD_NO, 
                   NOTE_ITM_PRODUCT_MODEL, 
                   NOTE_ITM_SERIAL_NO, 
                   NOTE_ITM_INSTALL_DT, 
                   NOTE_ITM_ADD1, 
                   NOTE_ITM_ADD2, 
                   NOTE_ITM_ADD3, 
                   NOTE_ITM_ADD4, 
                   NOTE_ITM_POST_CODE, 
                   NOTE_ITM_AREA_NAME, 
                   NOTE_ITM_STATE_NAME, 
                   NOTE_ITM_CNTY, 
                   NOTE_ITM_QTY, 
                   NOTE_ITM_UNIT_PRC, 
                   NOTE_ITM_GST_RATE, 
                   NOTE_ITM_GST_TXS, 
                   NOTE_ITM_CHRG, 
                   NOTE_ITM_DUE_AMT
   ) 
  SELECT  
           PAY0028D_SEQ.NEXTVAL,
           #{NOTE_ID}, 
           P.INVC_ITM_ID,
           P.INVC_ITM_ORD_NO, 
           P.INVC_ITM_DESC1,
           P.INVC_ITM_SERIAL_NO,
           P.INVC_ITM_INSTALL_DT,
           P.INVC_ITM_ADD1,
           P.INVC_ITM_ADD2,
           P.INVC_ITM_ADD3,
           P.INVC_ITM_ADD4,
           P.INVC_ITM_POST_CODE,
           P.INVC_ITM_AREA_NAME,
           P.INVC_ITM_STATE_NAME,
           P.INVC_ITM_CNTY,
           P.INVC_ITM_QTY,
           P.INVC_ITM_UNIT_PRC,
           P.INVC_ITM_GST_RATE,
           P.INVC_ITM_GST_TXS, 
           P.INVC_ITM_CHRG,
           P.INVC_ITM_AMT_DUE
        FROM  PAY0031D A, PAY0032D P 
         WHERE A.TAX_INVC_ID = P.TAX_INVC_ID
         AND A.TAX_INVC_REF_NO = #{TAX_INVC_REF_NO}
</insert>
  
  
  
   <insert id="reverse_PAY0006D" parameterType="Map" > 
   
		INSERT INTO PAY0006D (
		   AS_LDGR_ID, AS_ID, AS_DOC_NO, 
		   AS_LG_DOC_TYPE_ID, AS_LG_DT, AS_LG_AMT, 
		   AS_LG_UPD_USER_ID, AS_LG_UPD_DT, AS_SO_NO, 
		   AS_RESULT_NO, AS_SO_ID, AS_ADV_PAY, 
		   R01) 
		VALUES ( 
		   #{asLdgrId}, 
		   #{asId}, 
		   #{asDocNo}, 
		   #{asLgDocTypeId}, 
		   #{asLgDt}, 
		   #{asLgAmt}, 
		   #{asLgUpdUserId}, 
		   #{asLgUpdDt}, 
		   #{asSoNo}, 
		   #{asResultNo}, 
		   #{asSoId}, 
		   #{asAdvPay}, 
		   #{r01} 
		 )
   </insert>
   
   
   
 <select id="getResult_PAY0006D" parameterType="Map" resultType="egovMap">
		<![CDATA[ 
			 SELECT 
			       P.AS_LDGR_ID, P.AS_ID, P.AS_DOC_NO, 
                   P.AS_LG_DOC_TYPE_ID, P.AS_LG_DT, P.AS_LG_AMT, 
                   P.AS_LG_UPD_USER_ID, P.AS_LG_UPD_DT, P.AS_SO_NO, 
                   P.AS_RESULT_NO, P.AS_SO_ID, P.AS_ADV_PAY, 
                   P.R01
			  FROM PAY0006D P
			WHERE P.AS_DOC_NO = #{AS_DOC_NO}
			     AND P.AS_ADV_PAY =0
			     AND P.AS_LG_DOC_TYPE_ID ='163'
			     AND P.AS_LG_AMT < 0
      ]]> 
</select>




  
   
 <select id="getResult_PAY0007D" parameterType="Map" resultType="egovMap">
        <![CDATA[ 
                        SELECT 
                             P.BILL_ID, P.BILL_TYPE_ID, P.BILL_SO_ID, 
                             P.BILL_MEM_ID, P.BILL_AS_ID, P.BILL_PAY_TYPE_ID, 
                             P.BILL_NO, P.BILL_MEM_SHIP_NO, P.BILL_DT, 
                             P.BILL_AMT, P.BILL_REM, P.BILL_IS_PAID, 
                             P.BILL_IS_COMM, P.UPD_USER_ID, P.UPD_DT, 
                             P.SYNC_CHK, P.COURS_ID, P.STUS_ID
                      FROM  PAY0007D P
                       WHERE P.BILL_NO = #{AS_RESULT_NO}
      ]]> 
</select>

  <insert id="reverse_StateUpPAY0007D" parameterType="Map" >      
              UPDATE PAY0007D 
                    SET  BILL_IS_PAID =1 ,
                           STUS_ID =4
                           UPD_DT =SYSDATE,
                           UPD_USER_ID = #{updator}
              WHERE  BILL_NO =#{AS_RESULT_NO}
  </insert>

  
  <select id="getResult_PAY0064D" parameterType="Map" resultType="egovMap">
        <![CDATA[ 
			     SELECT 
			               P.PAY_ID, P.OR_NO, P.SALES_ORD_ID, 
			               P.BILL_ID, P.TR_NO, P.TYPE_ID, 
			               P.PAY_DATA, P.BANK_CHG_AMT, P.BANK_CHG_ACC_ID, 
			               P.COLL_MEM_ID, P.BRNCH_ID, P.BANK_ACC_ID, 
			               P.ALLOW_COMM, P.STUS_CODE_ID, P.UPD_USER_ID, 
			               P.UPD_DT, P.SYNC_HECK, P.CUST_ID_3PARTY, 
			               P.TOT_AMT, P.MTCH_ID, P.CRT_USER_ID, 
			               P.CRT_DT, P.IS_ALLOW_REV_MULTI, P.IS_GL_POST_CLM, 
			               P.GL_POST_CLM_DT, P.TRX_ID, P.ADV_MONTH, 
			               P.ACC_BILL_ID, P.TR_ISSU_DT, P.TAX_INVC_IS_GEN, 
			               P.TAX_INVC_REF_NO, P.TAX_INVC_REF_DT, P.SVC_CNTRCT_ID, 
			               P.BATCH_PAY_ID
			        FROM PAY0064D P
			          WHERE P.BILL_ID =  #{BILL_ID}
			            AND P.TYPE_ID  IN(93,101) 
			            AND P.STUS_CODE_ID =1
                  ]]> 
     </select>
     
     
      <select id="getPAY0069DSEQ" parameterType="Map" resultType="egovMap">
	     <![CDATA[ 
	              SELECT  PAY0069D_SEQ.NEXTVAL    seq FROM DUAL
	      ]]> 
    </select>
    
    <insert id="insert_PAY0069D" parameterType="Map" >      
           INSERT INTO PAY0069D (
                  TRX_ID, 
                  TRX_DT, 
                  TRX_TYPE, 
                  TRX_AMT, 
                  TRX_MTCH_NO) 
           VALUES ( #{trxId},
                    #{trxDt},
                    #{trxType},
                    #{trxAmt},
                    #{trxMtchNo} 
                  )
    </insert>
     
     
      <insert id="insert_PAY0064D" parameterType="Map" >   
			INSERT INTO PAY0064D (
			   PAY_ID, OR_NO, SALES_ORD_ID, 
			   BILL_ID, TR_NO, TYPE_ID, 
			   PAY_DATA, BANK_CHG_AMT, BANK_CHG_ACC_ID, 
			   COLL_MEM_ID, BRNCH_ID, BANK_ACC_ID, 
			   ALLOW_COMM, STUS_CODE_ID, UPD_USER_ID, 
			   UPD_DT, SYNC_HECK, CUST_ID_3PARTY, 
			   TOT_AMT, MTCH_ID, CRT_USER_ID, 
			   CRT_DT, IS_ALLOW_REV_MULTI, IS_GL_POST_CLM, 
			   GL_POST_CLM_DT, TRX_ID, ADV_MONTH, 
			   ACC_BILL_ID, TR_ISSU_DT, TAX_INVC_IS_GEN, 
			   TAX_INVC_REF_NO, TAX_INVC_REF_DT, SVC_CNTRCT_ID, 
			   BATCH_PAY_ID) 
			VALUES (
			   #{payId}, 
			   #{orNo}, 
			   #{salesOrdId}, 
			   #{billId}, 
			   #{trNo}, 
			   #{typeId}, 
			   #{payData}, 
			   #{bankChgAmt}, 
			   #{bankChgAccId}, 
			   #{collMemId}, 
			   #{brnchId}, 
			   #{bankAccId}, 
			   #{allowComm}, 
			   #{stusCodeId}, 
			   #{updUserId}, 
			   #{updDt}, 
			   #{syncHeck}, 
			   #{custId3party}, 
			   #{totAmt}, 
			   #{mtchId}, 
			   #{crtUserId}, 
			   #{crtDt}, 
			   #{isAllowRevMulti}, 
			   #{isGlPostClm}, 
			   #{glPostClmDt}, 
			   #{trxId}, 
			   #{advMonth}, 
			   #{accBillId}, 
			   #{trIssuDt}, 
			   #{taxInvcIsGen}, 
			   #{taxInvcRefNo}, 
			   #{taxInvcRefDt}, 
			   #{svcCntrctId}, 
			   #{batchPayId})
     </insert>
     
     <select id="getPAY0064DSEQ" parameterType="Map" resultType="egovMap">
         <![CDATA[ 
                  SELECT  PAY0064D_SEQ.NEXTVAL    seq FROM DUAL
          ]]> 
    </select>
    
     <select id="getPAY0065DSEQ" parameterType="Map" resultType="egovMap">
         <![CDATA[ 
                  SELECT  PAY0065D_SEQ.NEXTVAL    seq FROM DUAL
          ]]> 
    </select>
    
    
     <select id="getResult_PAY0065D" parameterType="Map" resultType="egovMap">   
     
		 SELECT 
		   P.PAY_ITM_ID, P.PAY_ID, P.PAY_ITM_MODE_ID, 
		   P.PAY_ITM_REF_NO, P.PAY_ITM_CC_NO, P.PAY_ITM_ORI_CC_NO, 
		   P.PAY_ITM_ENCRYPT_CC_NO, P.PAY_ITM_CC_TYPE_ID, P.PAY_ITM_CHQ_NO, 
		   P.PAY_ITM_ISSU_BANK_ID, P.PAY_ITM_AMT, P.PAY_ITM_IS_ONLINE, 
		   P.PAY_ITM_BANK_ACC_ID, P.PAY_ITM_REF_DT, P.PAY_ITM_APPV_NO, 
		   P.PAY_ITM_REM, P.PAY_ITM_STUS_ID, P.PAY_ITM_IS_LOK, 
		   P.PAY_ITM_CC_HOLDER_NAME, P.PAY_ITM_CC_EXPR_DT, P.PAY_ITM_BANK_CHRG_AMT, 
		   P.PAY_ITM_IS_THRD_PARTY, P.PAY_ITM_THRD_PARTY_IC, P.PAY_ITM_BANK_BRNCH_ID, 
		   P.PAY_ITM_BANK_IN_SLIP_NO, P.PAY_ITM_EFT_NO, P.PAY_ITM_CHQ_DEP_RECIPT_NO, 
		   P.ETC1, P.ETC2, P.ETC3, 
		   P.PAY_ITM_MID, P.PAY_ITM_GRP_ID, P.PAY_ITM_REF_ITM_ID, 
		   P.PAY_ITM_BANK_CHRG_ACC_ID, P.PAY_ITM_RUNNG_NO, P.UPD_USER_ID, 
		   P.UPD_DT, P.IS_FUND_TRNSFR, P.SKIP_RECON, 
		   P.PAY_ITM_CARD_TYPE_ID, P.PAY_ITM_CARD_MODE_ID
		FROM PAY0065D P
		WHERE PAY_ID = #{PAY_ID}
		   AND PAY_ITM_STUS_ID =1 
		   ORDER BY PAY_ITM_ID
     </select> 
       
                   
   <insert id="insert_PAY0065D" parameterType="Map" >   
			   
			INSERT INTO PAY0065D (
			   PAY_ITM_ID, PAY_ID, PAY_ITM_MODE_ID, 
			   PAY_ITM_REF_NO, PAY_ITM_CC_NO, PAY_ITM_ORI_CC_NO, 
			   PAY_ITM_ENCRYPT_CC_NO, PAY_ITM_CC_TYPE_ID, PAY_ITM_CHQ_NO, 
			   PAY_ITM_ISSU_BANK_ID, PAY_ITM_AMT, PAY_ITM_IS_ONLINE, 
			   PAY_ITM_BANK_ACC_ID, PAY_ITM_REF_DT, PAY_ITM_APPV_NO, 
			   PAY_ITM_REM, PAY_ITM_STUS_ID, PAY_ITM_IS_LOK, 
			   PAY_ITM_CC_HOLDER_NAME, PAY_ITM_CC_EXPR_DT, PAY_ITM_BANK_CHRG_AMT, 
			   PAY_ITM_IS_THRD_PARTY, PAY_ITM_THRD_PARTY_IC, PAY_ITM_BANK_BRNCH_ID, 
			   PAY_ITM_BANK_IN_SLIP_NO, PAY_ITM_EFT_NO, PAY_ITM_CHQ_DEP_RECIPT_NO, 
			   ETC1, ETC2, ETC3, 
			   PAY_ITM_MID, PAY_ITM_GRP_ID, PAY_ITM_REF_ITM_ID, 
			   PAY_ITM_BANK_CHRG_ACC_ID, PAY_ITM_RUNNG_NO, UPD_USER_ID, 
			   UPD_DT, IS_FUND_TRNSFR, SKIP_RECON, 
			   PAY_ITM_CARD_TYPE_ID, PAY_ITM_CARD_MODE_ID) 
			VALUES ( 
			#{PayItmId}, 
			   #{payId}, 
			   #{payItmModeId}, 
			   #{payItmRefNo}, 
			   #{payItmCcNo}, 
			   #{payItmOriCcNo}, 
			   #{payItmEncryptCcNo}, 
			   #{payItmCcTypeId}, 
			   #{payItmChqNo}, 
			   #{payItmIssuBankId}, 
			   #{payItmAmt}, 
			   #{payItmIsOnline}, 
			   #{payItmBankAccId}, 
			   #{payItmRefDt}, 
			   #{payItmAppvNo}, 
			   #{payItmRem}, 
			   #{payItmStusId}, 
			   #{payItmIsLok}, 
			   #{payItmCcHolderName}, 
			   #{payItmCcExprDt}, 
			   #{payItmBankChrgAmt}, 
			   #{payItmIsThrdParty}, 
			   #{payItmThrdPartyIc}, 
			   #{payItmBankBrnchId}, 
			   #{payItmBankInSlipNo}, 
			   #{payItmEftNo}, 
			   #{payItmChqDepReciptNo}, 
			   #{etc1}, 
			   #{etc2}, 
			   #{etc3}, 
			   #{payItmMid}, 
			   #{payItmGrpId}, 
			   #{payItmRefItmId}, 
			   #{payItmBankChrgAccId}, 
			   #{payItmRunngNo}, 
			   #{updUserId}, 
			   #{updDt}, 
			   #{isFundTrnsfr}, 
			   #{skipRecon}, 
			   #{payItmCardTypeId}, 
			   #{payItmCardModeId})
   </insert>                
   
   
      <insert id="insert_PAY0009D" parameterType="Map" >   
      
	      
	    INSERT INTO  PAY0009D (
                  ID, GLPOSTNGDT, GLFISCALDT, 
                  GLBATCHNO, GLBATCHTYPEDESC, GLBATCHTOT, 
                  GLRECIPTNO, GLRECIPTTYPEID, GLRECIPTBRNCHID, 
                  GLRECIPTSETLACCID, GLRECIPTACCID, GLRECIPTITMID, 
                  GLRECIPTITMMODEID, GLREVRSRECIPTITMID, GLRECIPTITMAMT, 
                  GLRECIPTITMCHRG, GLRECIPTITMRCLSTUS, GLJRNLNO, 
                  GLAUDITREF, GLCNVRSTUS, GLCNVRDT) 
               VALUES ( 
                  PAY0009D_SEQ.nextval, 
                  #{glPostngDt}, 
                  #{glFiscalDt}, 
                  #{glBatchNo}, 
                  #{glBatchTypeDesc}, 
                  #{glBatchTot}, 
                  #{glReciptNo}, 
                  #{glReciptTypeId}, 
                  #{glReciptBrnchId}, 
                  #{glReciptSetlAccId}, 
                  #{glReciptAccId}, 
                  #{glReciptItmId}, 
                  #{glReciptItmModeId}, 
                  #{glRevrsReciptItmId}, 
                  #{glReciptItmAmt}, 
                  #{glReciptItmChrg}, 
                  #{glReciptItmRclStus}, 
                  #{glJrnlNo}, 
                  #{glAuditRef}, 
                  #{glCnvrStus}, 
                  #{glCnvrDt}
               )
	                                        
	                                        
      </insert>                
      
       <select id="getResult_DocNo_PAY0006D" parameterType="Map" resultType="egovMap">   
		    SELECT 
		        AS_ID, 
		        AS_DOC_NO, 
		        AS_LG_DOC_TYPE_ID, 
		        AS_LG_DT, AS_LG_AMT, 
		        AS_LG_UPD_USER_ID, 
		        AS_LG_UPD_DT,
		        AS_SO_NO, 
		        AS_RESULT_NO, 
		        AS_SO_ID, 
		        AS_ADV_PAY, 
		        R01
		    FROM PAY0006D  
		    WHERE AS_DOC_NO  = #{AS_DOC_NO}
		    ORDER BY AS_LDGR_ID
    </select>
    
   
   <insert id="reverse_DocNo_PAY0006D" parameterType="Map" > 
   
        INSERT INTO PAY0006D (
           AS_LDGR_ID, AS_ID, AS_DOC_NO, 
           AS_LG_DOC_TYPE_ID, AS_LG_DT, AS_LG_AMT, 
           AS_LG_UPD_USER_ID, AS_LG_UPD_DT, AS_SO_NO, 
           AS_RESULT_NO, AS_SO_ID, AS_ADV_PAY, 
           R01) 
        VALUES ( 
           PAY0006D_SEQ.NEXTVAL, 
           #{asId}, 
           #{asDocNo}, 
           #{asLgDocTypeId}, 
           #{asLgDt}, 
           #{asLgAmt}, 
           #{asLgUpdUserId}, 
           #{asLgUpdDt}, 
           #{asSoNo}, 
           #{asResultNo}, 
           #{asSoId}, 
           #{asAdvPay}, 
           #{r01} 
         )
   </insert>
   
   
      <insert id="reverse_State_CCR0001D" parameterType="Map" > 
		  UPDATE CCR0001D
		   SET HC_STUS_ID =4,
		       UPD_USER_ID = #{updator},
		       UPD_DT =SYSDATE 
		  WHERE HC_TYPE_NO =#{HC_TYPE_NO} AND HC_STUS_ID='33'
     </insert>
     
     
     <select id="selectCTByDSC" parameterType="Map" resultType="egovMap">
	    SELECT A.MEM_CODE CODE_ID
	           , A.MEM_CODE || '-' || A.NAME CODE_NAME
	    FROM ORG0001D A, SYS0005M B
	    WHERE  A.BRNCH = B.BRNCH_ID 
		AND B.TYPE_ID = '43' 
		AND A.STUS = '1'
	    <if test="groupCode != null and groupCode !='' ">
	           AND    B.CODE = #{groupCode}
	    </if>
	
	</select>
   
   
   <insert id="update_SAL0087D" parameterType="Map" > 
			UPDATE  SAL0087D
			    SET SRV_FILTER_PRV_CHG_DT =  TO_DATE(#{SRV_FILTER_PRV_CHG_DT},'dd/mm/yyyy'),
			          SRV_FILTER_LAST_SERIAL = #{SRV_FILTER_LAST_SERIAL} ,
			          SRV_FILTER_PREV_SERIAL  =  SRV_FILTER_LAST_SERIAL,
			          SRV_FILTER_UPD_DT =SYSDATE,
			          SRV_FILTER_UPD_USER_ID =#{updator}
			where SRV_CONFIG_ID =(
					                        select SRV_CONFIG_ID    
					                        from SAL0090D  
					                        where 1=1 
					                        and SRV_SO_ID =#{SRV_SO_ID}
					                        and SRV_STUS_ID =1
			                        )
			and SRV_FILTER_STUS_ID =1
			and SRV_FILTER_STK_ID = #{SRV_FILTER_STK_ID} 
   </insert>
   
   
   
      <insert id="update_Filter_SAL0087D" parameterType="Map" > 
		UPDATE 
        (
            SELECT D.AS_NO, D.AS_SO_ID, B.SRV_SO_ID, F.ASR_ITM_PART_ID, A.SRV_FILTER_STK_ID, 
            A.SRV_FILTER_PRV_CHG_DT, A.SRV_FILTER_LAST_SERIAL, A.SRV_FILTER_PREV_SERIAL
            FROM SAL0087D A, SAL0090D B, SVC0004D C, SVC0001D D, SVC0005D F
            WHERE A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
            AND   B.SRV_SO_ID = D.AS_SO_ID
            AND   D.AS_ID = C.AS_ENTRY_ID
            AND   C.AS_RESULT_ID = F.AS_RESULT_ID
            AND   A.SRV_FILTER_STK_ID = F.ASR_ITM_PART_ID
            AND   D.AS_ID= #{AS_RESULT_ID}
        )S
        SET SRV_FILTER_LAST_SERIAL  = #{SRV_FILTER_LAST_SERIAL},
            SRV_FILTER_PREV_SERIAL  =  S.SRV_FILTER_LAST_SERIAL,
            SRV_FILTER_PRV_CHG_DT   =  SYSDATE
                  
		          
   </insert>
   
   
   <insert id="updateInHouseSVC0004D" parameterType="Map" >
                UPDATE  SVC0004D 
                              SET
                                   AS_SETL_DT                   =to_DATE(#{AS_SETL_DT},'dd/mm/yyyy'), 
                                   AS_SETL_TM                   =#{AS_SETL_TM}, 
                                   AS_RESULT_STUS_ID        =NVL(#{AS_RESULT_STUS_ID},0), 
                                   AS_FAIL_RESN_ID             =NVL(#{AS_FAIL_RESN_ID},0), 
                                   AS_REN_COLCT_ID           =NVL(#{AS_REN_COLCT_ID},0), 
                                   AS_CMMS                       =NVL(#{AS_CMMS},0), 
                                   AS_BRNCH_ID                  =NVL(#{AS_BRNCH_ID},0), 
                                   AS_WH_ID                      =NVL(#{AS_WH_ID},0), 
                                   AS_RESULT_REM              =#{AS_RESULT_REM}, 
                                   AS_MALFUNC_ID              =NVL(#{AS_MALFUNC_ID},0)    , 
                                   AS_MALFUNC_RESN_ID      =NVL(#{AS_MALFUNC_RESN_ID},0), 
                                   AS_DEFECT_TYPE_ID        =NVL(#{AS_DEFECT_TYPE_ID},0), 
                                   AS_DEFECT_GRP_ID          =NVL(#{AS_DEFECT_GRP_ID},0), 
                                   AS_DEFECT_ID                 =NVL(#{AS_DEFECT_ID},0), 
                                   AS_DEFECT_PART_GRP_ID  =NVL(#{AS_DEFECT_PART_GRP_ID},0), 
                                   AS_DEFECT_PART_ID         =NVL(#{AS_DEFECT_PART_ID},0), 
                                   AS_DEFECT_DTL_RESN_ID  =NVL(#{AS_DEFECT_DTL_RESN_ID},0), 
                                   AS_SLUTN_RESN_ID          =NVL(#{AS_SLUTN_RESN_ID},0), 
                                   AS_WORKMNSH                =NVL(#{AS_WORKMNSH},0), 
                                   AS_FILTER_AMT               =NVL(#{AS_FILTER_AMT},0), 
                                   AS_ACSRS_AMT               =NVL(#{AS_ACSRS_AMT},0), 
                                   AS_TOT_AMT                  =NVL(#{AS_TOT_AMT},0), 
                                   AS_RESULT_IS_SYNCH      =NVL(#{AS_RESULT_IS_SYNCH},0), 
                                   AS_RCALL                       =NVL(#{AS_RCALL},0), 
                                   AS_RESULT_STOCK_USE    =NVL(#{AS_RESULT_STOCK_USE},0), 
                                   AS_RESULT_TYPE_ID        =NVL(#{AS_RESULT_TYPE_ID},0), 
                                   AS_RESULT_IS_CURR        =NVL(#{AS_RESULT_IS_CURR},0), 
                                   AS_RESULT_MTCH_ID       =NVL(#{AS_RESULT_MTCH_ID},0), 
                                   AS_RESULT_NO_ERR         =NVL(#{AS_RESULT_NO_ERR},0), 
                                   AS_RESULT_UPD_DT         =SYSDATE, 
                                   AS_RESULT_UPD_USER_ID = #{updator}, 
                                   AS_ENTRY_POINT            =NVL(#{AS_ENTRY_POINT},0), 
                                   AS_WORKMNSH_TAX_CODE_ID  =NVL(#{AS_WORKMNSH_TAX_CODE_ID},0), 
                                   AS_WORKMNSH_TXS          =NVL(#{AS_WORKMNSH_TXS},0), 
                                   AS_RESULT_MOBILE_ID      =NVL(#{AS_RESULT_MOBILE_ID},0),
								   APPNT_DT                       =to_date(#{APPNT_DT},'dd/mm/yyyy'),
								   IN_HUSE_REPAIR_REM       =#{IN_HUSE_REPAIR_REM},
								   IN_HUSE_REPAIR_REPLACE_YN    =#{IN_HUSE_REPAIR_REPLACE_YN},
								   IN_HUSE_REPAIR_PROMIS_DT =to_date(#{IN_HUSE_REPAIR_PROMIS_DT} ,'dd/mm/yyyy'),
								   IN_HUSE_REPAIR_GRP_CODE  = #{IN_HUSE_REPAIR_GRP_CODE},
								   IN_HUSE_REPAIR_PRODUCT_CODE =#{IN_HUSE_REPAIR_PRODUCT_CODE},
								   IN_HUSE_REPAIR_SERIAL_NO =#{IN_HUSE_REPAIR_SERIAL_NO}
              WHERE   AS_RESULT_NO = #{AS_RESULT_NO}  
    </insert>
    
    
    <insert id="deleteInhouseSVC0005D" parameterType="Map" >
        DELETE  SVC0005D  WHERE  ASR_ITM_ID  = #{ASR_ITM_ID} 
    </insert>
   
    <insert id="updateInhouseSVC0005D" parameterType="Map" >
		UPDATE SVC0005D
			SET      ASR_ITM_PART_DESC      = #{ASR_ITM_PART_DESC},
				       ASR_ITM_PART_QTY        = #{ASR_ITM_PART_QTY},
				       ASR_ITM_PART_PRC         = #{ASR_ITM_PART_PRC},
				       ASR_ITM_CHRG_AMT        = nvl(#{ASR_ITM_CHRG_AMT},0), 
				       ASR_ITM_REM                 = #{ASR_ITM_REM},
				       ASR_ITM_CHRG_FOC         = #{ASR_ITM_CHRG_FOC},
				       ASR_ITM_EXCHG_ID          = #{ASR_ITM_EXCHG_ID},
				       ASR_ITM_CLM                  = #{ASR_ITM_CLM},
				       ASR_ITM_TAX_CODE_ID     = #{ASR_ITM_TAX_CODE_ID},
				       ASR_ITM_TXS_AMT           = #{ASR_ITM_TXS_AMT},
				       SERIAL_NO                       = #{SERIAL_NO},
				       EXCHN_ID                        = #{EXCHN_ID},
				       FILTER_BARCD_SERIAL_NO  = #{FILTER_BARCD_SERIAL_NO}
			WHERE  ASR_ITM_ID             =#{ASR_ITM_ID}
    </insert>
   
   
     <insert id="updateInhouseSVC0001D_appdt" parameterType="Map" >
	   
	    UPDATE SVC0001D 
	           SET  AS_STUS_ID  =  #{AS_STUS_ID} ,
                      AS_UPD_USER_ID = #{updator}, 
                      AS_UPD_DT = sysdate  ,
                      AS_APPNT_DT  =TO_DATE( #{APPNT_DT},'dd/mm/yyyy')
	           WHERE AS_ID =(
	               SELECT   AS_ENTRY_ID
                                       FROM   SVC0004D
                                      WHERE   AS_RESULT_NO =#{AS_RESULT_NO}
	           )
    </insert>
     

    <insert id="updateState_SERIAL_NO_SVC0004D" parameterType="Map" >
			
			UPDATE SVC0004D 
			SET AS_RESULT_UPD_DT                 =SYSDATE
			     , AS_RESULT_UPD_USER_ID       = #{updator}
			     , IN_HUSE_REPAIR_REM             = #{IN_HUSE_REPAIR_REM}
			     , IN_HUSE_REPAIR_SERIAL_NO    = #{IN_HUSE_REPAIR_SERIAL_NO}
			WHERE AS_ENTRY_ID                 =   #{AS_ENTRY_ID}
     
     </insert>
     
            
   
   
   
</mapper>