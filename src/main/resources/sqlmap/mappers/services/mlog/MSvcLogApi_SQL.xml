<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.services.mlog.impl.MSvcLogApiMapper">




  


    <select id="getHeartServiceJobList" parameterType="Map" resultType="egovMap">
                              SELECT 
									DISTINCT
									                /* SVC0008D st */
									       TO_CHAR (A.APPNT_DT, 'YYYYMMDD') AS appointment_Date,
									       A.NO AS service_No,
									       A.STUS_CODE_ID AS job_Status,
									       A.APPNT_TM AS appointment_Time,
									       A.YEAR AS plan_Year,
									       A.MONTH AS plan_Month,
									                       /* SVC0008D end */
									            /*          SAL0001D st */
									       C.SALES_ORD_NO AS sales_Order_No,
									       C.APP_TYPE_ID AS app_Type,
									                        /*            SAL0001D end */ 
									                        /*            SAL0017D st */           
									       T.PROMO_ID AS sales_Promotion,
									                        /*           SAL0017D end */
									                        /*             SAL0022D st */
									       D.CUST_ACC_BANK_ID AS bank_Code,
									       D.CUST_ACC_NO AS card_Account_No,
									                        /*           SAL0022D end */
									                        /*             SAL0027D st */          
									       F.TEL_M1 AS handphone_Tel,
									       F.TEL_O AS home_Tel,
									       F.TEL_R AS office_Tel,
									       F.EMAIL AS mail_Address,
									       F.NRIC AS resultIc_Mobile_No,
									                        /*             SAL0027D end */
									                        /*            SAL0029D st */
									       G.NAME AS cust_Name,
									       G.TYPE_ID AS customer_Type,
									       G.cust_id AS customer_Id,
									       G.CUST_VA_NO AS customer_Va_No,
									                        /*               SAL0029D end */
									                        /*               SAL0045D  st */    
									       H.BRNCH_ID AS dsc_Code,
									       H.INSTCT AS instruction,
									                        /*                 SAL0045D end */
									                        /*            SAL0047D st */
									       J.SIRIM_NO AS sirim_No,
									       J.SERIAL_NO AS serial_No,
									       J.RESULT_CUST_NAME AS result_Cust_Name,
									       J.RESULT_REP_EMAIL_NO AS result_Report_Email_No,
									       J.RESULT_ACEPT_NAME AS result_Acceptance_Name,
									                        /*           SAL0047D  end */
									                        /*           SVC0006D st */
									       B.FAIL_RESN_ID AS fail_Reason_Code,
									       B.RESULT_REM AS result_Remark,
									       B.REN_COLCT_ID AS rc_Code,
									       B.TEMPERATE_SETNG AS temperatureSetting,
									       B.NEXT_APPNT_TM AS nextAppointmentTime,
									       B.OWNER_CODE AS ownerCode,
									       B.RESULT_CUST_NAME AS resultCustName,
									       B.RESULT_MOBILE_NO AS resultIcMobileNo,
									       B.RESULT_RPT_EMAIL_NO AS resultReportEmailNo,
									       B.RESULT_ACEPT_NAME AS resultAcceptanceName,
									       '' AS signData,
									       TO_CHAR (B.NEXT_APPNT_DT, 'YYYYMMDD') AS nextAppointmentDate,
									                    /*               SVC0006D end  */  
									                    /*               ORG0001D st */ 
									       '' AS settled_By,
									                        /*           ORG0001D end */
									                        /*           SYS0026M st */                
									       L.STK_DESC AS product_Name,
									       L.STK_CODE AS product_Code,
									                        /*           SYS0026M end */
									                        /*          SAL0024D st */ 
									       M.CUST_BILL_PAY_REF_NO1 AS customer_Jom_Pay_Ref_No,
									                        /*          SAL0024D end */
									                        /*           SYS0013M st */      
									       P.CODE_NAME AS payment_ModeName,
									       TO_CHAR (P.CODE_ID) AS payment_Mode,
									                        /*           SYS0013M st */                      
									       Q.ADDR_DTL AS install_Address,
									                        /*           SYS0013M end */
									                        /*           SAL0095D at */   
									       TO_CHAR (R.SRV_DUR) AS contract_Duration,
									       TO_CHAR (R.SRV_EXPR_DT, 'YYYYMMDD') AS Membership_Contract_Expiry,
									                        /*           SAL0071D st */                      
									       S.STUS_CODE_ID AS rental_Status,
									                        /*          SAL0071D end */ 
									       CASE  WHEN V.FILT_CNT <![CDATA[ > ]]> 0  THEN '1' ELSE '0' END need_Filter,
									       'HS' as job_Type       
									  FROM (SELECT A.*
									          FROM SVC0008D A,
									               ORG0001D B
									         WHERE A.CODY_ID = B.MEM_ID
									           AND A.YEAR = TO_CHAR(to_date(#{requestDate}  ,'YYYY/MM'),'YYYY')
									           AND A.MONTH = TO_CHAR(to_date(#{requestDate}  ,'YYYY/MM'),'MM')
									           AND B.MEM_CODE = #{userId}
									               ) A ,               
									       SVC0006D B,       
									       SAL0001D C,       
									       (SELECT *
									          FROM (SELECT CUST_ID,
									                       CUST_ACC_BANK_ID,
									                       CUST_ACC_NO,
									                       ROW_NUMBER() OVER(PARTITION BY CUST_ID
									                         ORDER BY CUST_ACC_UPD_DT DESC) AS DUM_SEQ
									                  FROM SAL0022D ) SAL22D
									         WHERE DUM_SEQ = 1 ) D,         
									       (SELECT *
									          FROM (SELECT CUST_ID,
									                       TEL_M1,
									                       TEL_O,
									                       TEL_R,
									                       EMAIL,
									                       NRIC,
									                       ROW_NUMBER() OVER(PARTITION BY CUST_ID
									                         ORDER BY UPD_DT DESC) AS DUM_SEQ
									                  FROM SAL0027D ) SAL27D
									         WHERE DUM_SEQ = 1 ) F,       
									       SAL0029D G ,
									       SAL0045D H ,       
									       (SELECT MAX(INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID, SALES_ORD_ID
									          FROM SAL0046D
									         GROUP BY SALES_ORD_ID ) I,         
									         (SELECT A.ENTRY_ID ,
									                 A.SIRIM_NO ,
									                 A.SERIAL_NO ,
									                 A.RESULT_CUST_NAME ,
									                 A.RESULT_REP_EMAIL_NO ,
									                 A.RESULT_ACEPT_NAME
									            FROM SAL0047D A ,
									               (SELECT MAX(A.RESULT_ID) AS RESULT_ID, A.ENTRY_ID
									                 FROM  SAL0047D A,
									                       (SELECT MAX(C.INSTALL_ENTRY_ID) AS ENTRY_ID, C.SALES_ORD_ID
									                          FROM SVC0008D A INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID 
									                               INNER JOIN SAL0046D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
									                         WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
									                           AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
									                         GROUP BY C.INSTALL_ENTRY_ID, C.SALES_ORD_ID ) B
									                 WHERE A.ENTRY_ID = B.ENTRY_ID
									                 GROUP BY A.ENTRY_ID ) B
									         WHERE A.ENTRY_ID = B.ENTRY_ID
									           AND A.RESULT_ID = B.RESULT_ID ) J,         
									        SAL0002D K, 
									        SYS0026M L,
									        SAL0024D M,
									        SAL0074D O,
									        SYS0013M P,
									        SAL0023D Q,        
									       (SELECT SRV_DUR,
									               SRV_EXPR_DT,
									               A.SRV_SALES_ORD_ID
									          FROM SAL0095D A INNER JOIN (SELECT C.SRV_SALES_ORD_ID, MAX (C.SRV_MEM_ID) AS SRV_MEM_ID
									                  FROM SVC0008D A INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID AND B.MEM_CODE = #{userId}
									                       LEFT OUTER JOIN SAL0095D C ON A.SALES_ORD_ID = C.SRV_SALES_ORD_ID
									                   AND SYSDATE BETWEEN C.SRV_START_DT AND C.SRV_EXPR_DT
									                   AND C.SRV_STUS_CODE_ID = 4
									                 WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
									                   AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
									                 GROUP BY C.SRV_SALES_ORD_ID) B ON A.SRV_SALES_ORD_ID = B.SRV_SALES_ORD_ID
									           AND A.SRV_MEM_ID = B.SRV_MEM_ID ) R,       
									        SAL0071D S,
									        SAL0017D T,
									        SAL0090D U,
									        (
									          SELECT SRV_CONFIG_ID, COUNT (*) AS FILT_CNT
									            FROM SAL0087D
									           WHERE TO_CHAR (ADD_MONTHS (SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD),
									                          'YYYYMM') <![CDATA[ <= ]]> TO_CHAR (SYSDATE, 'YYYYMM')
									            GROUP BY SRV_CONFIG_ID
									        ) V        
									 WHERE A.SCHDUL_ID = B.SCHDUL_ID(+)
									   AND A.SALES_ORD_ID = B.SALES_ORD_ID(+)
									   AND A.SALES_ORD_ID = C.SALES_ORD_ID
									   AND C.CUST_ID = D.CUST_ID(+)
									   AND C.CUST_ID = F.CUST_ID(+)
									   AND C.CUST_ID = G.CUST_ID(+)   
									   AND C.SALES_ORD_ID = H.SALES_ORD_ID
									   AND H.SALES_ORD_ID = I.SALES_ORD_ID
									   AND I.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
									   AND C.SALES_ORD_ID = K.SALES_ORD_ID
									   AND K.ITM_STK_ID = L.STK_ID
									   AND C.CUST_BILL_ID = M.CUST_BILL_ID(+)
									   AND C.SALES_ORD_ID = O.SALES_ORD_ID(+)
									   AND C.SALES_ORD_ID = O.CUST_ID(+) 
									   AND O.MODE_ID = P.CODE_ID(+)
									   AND C.CUST_ID = Q.CUST_ID
									   AND H.ADD_ID = Q.CUST_ADD_ID(+)   AND C.SALES_ORD_ID = R.SRV_SALES_ORD_ID(+)
									   AND C.SALES_ORD_ID = S.SALES_ORD_ID(+)
									   AND C.PROMO_ID = T.PROMO_ID(+)
									   AND C.SALES_ORD_ID = U.SRV_SO_ID
									   AND U.SRV_CONFIG_ID = V.SRV_CONFIG_ID(+)
     </select>



    <select id="getAfterServiceJobList" parameterType="Map" resultType="egovMap">
    SELECT * FROM
(
    SELECT * FROM
    (
        SELECT *
          FROM (SELECT ROW_NUMBER ()
                       OVER (PARTITION BY sales_Order_No, service_No
                             ORDER BY Membership_Contract_Expiry DESC)
                          RNN,
                       sales_Order_No,
                       customer_Id,
                       app_Type,
                       sales_Promotion,
                       monthly_Rental_Fees,
                       registration_Fees,
                       bank_Code,
                       card_Account_No,
                       install_Address,
                       customer_Jom_Pay_Ref_No,
                       handphone_Tel,
                       home_Tel,
                       office_Tel,
                       cust_Name,
                       result_Cust_Name,
                       mail_Address,
                       customer_Va_No,
                       sirim_No,
                       serial_No,
                       installation_Date,
                       rental_Status,
                       contract_Duration,
                       Membership_Contract_Expiry,
                       service_No,
                       job_Status,
                       appointment_Date,
                       appointment_Time,
                       plan_Year,
                       plan_Month,
                       job_Session,
                       requestor_Contact,
                       requestor,
                       settled_By,
                       labour_Charge,
                       defect_Type_Id,
                       defect_Group_Id,
                       defect_Id,
                       defect_Part_Group_Id,
                       defect_Part_Id,
                       defect_Detail_Reason_Id,
                       solution_Reason_Id,
                       result_Remark,
                       resultIc_Mobile_No,
                       malfunction_Code,
                       malfunction_Reason_Code,
                       failReason_Code,
                       settled_Date,
                       settled_Time,
                       ren_Collection_Id,
                       asr_No,
                       filter_Amount,
                       accessories_Amount,
                       total_Amount,
                       result_Report_Email_No,
                       result_Acceptance_Name,
                       product_Name,
                       product_Code,
                       dsc_Code,
                       case when (solution_reason_id =454 OR solution_reason_id =452 ) then 'Y' else 'N'  end inhouserepairyn,
                       reqRefNo,
                       as_type_id
                  FROM (SELECT ROW_NUMBER ()
                               OVER (
                                  PARTITION BY sal0001d.sales_ord_no, svc0001d.as_no
                                  ORDER BY svc0004d.as_result_id DESC)
                                  rn,
                               sal0001d.sales_ord_no AS sales_Order_No,
                               svc0001d.as_no AS service_No,
                               sal0029d.name AS cust_Name,
                               svc0001d.as_stus_id AS job_Status,
                               TO_CHAR (svc0001d.as_appnt_dt, 'YYYYMMDD')
                                  AS appointment_Date,
                               CASE
                                  WHEN svc0001d.as_appnt_tm IS NULL
                                  THEN
                                     DECODE (svc0001d.as_sesion_code,
                                             'M', '1000',
                                             'A', '1400',
                                             'E', '1900',
                                             'O', '2000',
                                             '2000')
                                  ELSE
                                     TO_CHAR (
                                        REPLACE (SUBSTR (svc0001d.as_appnt_tm, 0, 5),
                                                 ':'))
                               END
                                  appointment_Time,
                               TO_CHAR (svc0001d.as_appnt_dt, 'YYYY') AS plan_Year,
                               TO_CHAR (svc0001d.as_appnt_dt, 'MM') AS plan_Month,
                               svc0001d.as_sesion_code AS job_Session,
                               sal0001d.cust_id AS customer_Id,
                               sal0023d.addr_dtl AS install_Address,
                               sal0027d.tel_m1 AS handphone_Tel,
                               sal0027d.tel_r AS home_Tel,
                               sal0027d.tel_o AS office_Tel,
                               sal0029d.email AS mail_Address,
                               sal0029d.cust_va_no AS customer_Va_No,
                               sal0024d.cust_bill_pay_ref_no1
                                  AS customer_Jom_Pay_Ref_No,
                               sys0026m.stk_desc AS product_Name,
                               sys0026m.stk_code AS product_Code,
                               Fn_get_commcd (10, sal0001d.app_type_id) AS app_Type,
                               (SELECT promo_desc
                                  FROM sal0017d
                                 WHERE 1 = 1 AND promo_id = sal0001d.promo_id)
                                  AS sales_Promotion,
                               Fn_get_commcd (24, svc0001d.as_reqster_type_id)
                                  AS requestor,
                               svc0001d.as_rem_reqster_cntc AS requestor_Contact,
                               sal0095d.srv_dur AS contract_Duration,
                               sal0001d.mth_rent_amt AS monthly_Rental_Fees,
                               sal0001d.tot_amt AS registration_Fees,
                               sal0022d.cust_acc_bank_id AS bank_Code,
                               sal0022d.cust_acc_no AS card_Account_No,
                               sal0047d.sirim_no AS sirim_No,
                               sal0047d.serial_no AS serial_No,
                               TO_CHAR (sal0095d.srv_expr_dt, 'YYYYMMDD')
                                  AS Membership_Contract_Expiry,
                               sal0071d.stus_code_id AS rental_Status,
                               sys0005m.code AS dsc_Code,
                               TO_CHAR (sal0047d.install_dt, 'YYYYMMDD')
                                  AS installation_Date,
                               svc0004d.as_workmnsh AS labour_Charge,
                               svc0004d.as_defect_type_id AS defect_Type_Id,
                               svc0004d.as_defect_grp_id AS defect_Group_Id,
                               svc0004d.as_defect_id AS defect_Id,
                               svc0004d.as_defect_part_grp_id AS defect_Part_Group_Id,
                               svc0004d.as_defect_part_id AS defect_Part_Id,
                               svc0004d.as_defect_dtl_resn_id
                                  AS defect_Detail_Reason_Id,
                               svc0004d.as_slutn_resn_id AS solution_Reason_Id,
                               svc0004d.as_result_rem AS result_Remark,
                               sal0029d.name AS result_Cust_Name,
                               svc0004d.as_result_mobile_id AS resultIc_Mobile_No,
                               svc0004d.as_malfunc_id AS malfunction_Code,
                               svc0004d.as_malfunc_resn_id AS malfunction_Reason_Code,
                               svc0004d.as_fail_resn_id AS failReason_Code,
                               org0001d.mem_code AS settled_By,
                               TO_CHAR (svc0004d.as_setl_dt, 'YYYYMMDD')
                                  AS settled_Date,
                               REPLACE (SUBSTR (svc0004d.as_setl_tm, 0, 5), ':')
                                  AS settled_Time,
                               svc0004d.as_ren_colct_id AS ren_Collection_Id,
                               svc0004d.as_result_no AS asr_No,
                               svc0004d.as_filter_amt AS filter_Amount,
                               svc0004d.as_acsrs_amt AS accessories_Amount,
                               svc0004d.as_tot_amt AS total_Amount,
                               TO_CHAR (svc0004d.in_huse_repair_rem)
                                  AS in_House_Repair_Remark,
                               DECODE(TO_CHAR (svc0004d.in_huse_repair_replace_yn),'1','Y','N')  AS inhouserepairreplacementyn,
                               TO_CHAR (svc0004d.in_huse_repair_promis_dt,
                                        'YYYYMMDD')
                                  AS in_House_Repair_Promised_Date,
                               svc0004d.in_huse_repair_grp_code
                                  AS inhouserepairproductgroupcode,
                               TO_CHAR (svc0004d.in_huse_repair_product_code)
                                  AS in_House_Repair_Product_Code,
                               TO_CHAR (svc0004d.in_huse_repair_serial_no)
                                  AS in_House_Repair_Serial_No,
                               TO_CHAR (svc0004d.result_rep_email_no)
                                  AS result_Report_Email_No,
                               TO_CHAR (svc0004d.result_acept_name)
                                  AS result_Acceptance_Name,
                               svc0001d.REF_REQST as reqRefNo,
                               svc0001d.as_type_id 
                          FROM sal0001d,
                               sal0002d,
                               sal0022d,
                               sal0023d,
                               sal0024d,
                               sal0027d,
                               sal0029d,
                               sal0045d,
                               sal0047d,
                               sal0071d,
                               sal0095d,
                               svc0001d,
                               svc0004d,
                               org0001d,
                               sys0005m,
                               sys0026m
                         WHERE     svc0001d.as_mem_id = org0001d.mem_id
                               AND sal0001d.sales_ord_id = sal0002d.sales_ord_id
                               AND sal0001d.sales_ord_id = svc0001d.as_so_id
                               AND sal0001d.sales_ord_id = sal0002d.sales_ord_id
                               AND sal0001d.cust_id = sal0022d.cust_id(+)
                               AND sal0001d.cust_add_id = sal0023d.cust_add_id
                               AND sal0001d.cust_bill_id = sal0024d.cust_bill_id(+)
                               AND sal0001d.cust_id = sal0024d.cust_bill_cust_id(+)
                               AND sal0001d.cust_id = sal0027d.cust_id
                               AND sal0001d.cust_cnt_id = sal0027d.cust_cntc_id
                               AND sal0001d.cust_id = sal0029d.cust_id
                               AND sal0001d.sales_ord_id = sal0045d.sales_ord_id
                               AND sal0045d.install_id = sal0047d.entry_id(+)
                               AND sal0071d.sales_ord_id(+) = sal0001d.sales_ord_id
                               AND sal0001d.sales_ord_id =
                                      sal0095d.srv_sales_ord_id(+)
                               AND svc0001d.as_id = svc0004d.as_entry_id(+)
                               AND org0001d.brnch = sys0005m.brnch_id
                               AND sal0002d.itm_stk_id = sys0026m.stk_id
                               AND ORG0001D.MEM_CODE = #{userId} 
                               AND SVC0001D.AS_APPNT_DT BETWEEN ADD_MONTHS (
                                                                     LAST_DAY (
                                                                        TO_DATE (
                                                                           #{requestDate},
                                                                           'YYYYMM'))
                                                                   + 1,
                                                                   -1)
                                                            AND LAST_DAY (
                                                                   TO_DATE ( #{requestDate},
                                                                            'YYYYMM')))
                 WHERE 1 = 1 AND rn = 1)
         WHERE RNN = 1
    )
    WHERE   as_type_id   <![CDATA[<>]]>  '2173'    /*not inhouse 1 =  (CASE WHEN NVL(reqRefNo,' ') <![CDATA[<>]]> ' ' AND NVL(asr_No, ' ')  = ' ' THEN 0 ELSE 1 END)*/
) A
LEFT OUTER JOIN (
    SELECT DISTINCT * FROM
    (
       SELECT
            A.AS_NO AS AS_NO
            , B.IN_HUSE_REPAIR_REM AS in_House_Repair_Remark
            , DECODE(B.IN_HUSE_REPAIR_REPLACE_YN,'1','Y','N') AS inhouserepairreplacementyn
            , TO_CHAR(B.IN_HUSE_REPAIR_PROMIS_DT, 'YYYYMMDD') AS in_House_Repair_Promised_Date
            , B.IN_HUSE_REPAIR_GRP_CODE AS inhouserepairproductgroupcode
            , B.IN_HUSE_REPAIR_PRODUCT_CODE AS in_House_Repair_Product_Code
            , B.IN_HUSE_REPAIR_SERIAL_NO AS in_House_Repair_Serial_No
        FROM
        SVC0001D A  /* 3rd AS Order - Reference No*/
        INNER JOIN SVC0004D B ON A.AS_ID = B.AS_ENTRY_ID   /*3rd AS Order*/
        WHERE A.REF_REQST IS NULL
        UNION ALL
        SELECT
            A.AS_NO AS AS_NO
            , E.IN_HUSE_REPAIR_REM AS in_House_Repair_Remark
            , DECODE(E.IN_HUSE_REPAIR_REPLACE_YN,'1','Y','N' )AS inhouserepairreplacementyn
            , TO_CHAR(E.IN_HUSE_REPAIR_PROMIS_DT, 'YYYYMMDD') AS in_House_Repair_Promised_Date
            , E.IN_HUSE_REPAIR_GRP_CODE AS inhouserepairproductgroupcode
            , E.IN_HUSE_REPAIR_PRODUCT_CODE AS in_House_Repair_Product_Code
            , E.IN_HUSE_REPAIR_SERIAL_NO AS in_House_Repair_Serial_No
        FROM
        SVC0001D A  /* 3rd AS Order - Reference No*/
        INNER JOIN SVC0004D B ON A.REF_REQST = B.AS_RESULT_ID   /*3rd AS Order*/
        INNER JOIN SVC0001D C ON B.AS_ENTRY_ID = C.AS_ID
        INNER JOIN SVC0001D D ON C.REF_REQST = D.AS_ID
        INNER JOIN SVC0004D E ON D.AS_ID = E.AS_ENTRY_ID
    ) 
) B ON A.service_No = B.AS_NO


  </select>


             <select id="getHsBasic" parameterType="Map" resultType="egovMap">

                            SELECT  distinct Project2.No No  ,
                                        Project2.HS_DATE HS_DATE  ,
                                        Project2.STUS_CODE_ID STUS_CODE_ID  ,
                                        Project2.Code Code  ,
                                        Project2.SALES_ORD_NO SALES_ORD_NO  ,
                                        Project2.ASSIGN_CODY C5  ,
                                        Project2.ACTION_CODY as ACTN_MEM_ID,
                                        Project2.MEM_ID ,
                                        Project2.Name Name  ,
                                        Project2.cust_id,
                                        Project2.cody_status_nm,
                                        Project2.BRNCH_ID as BRNCH_ID,
                                        Project2.SCHDUL_ID SCHDUL_ID   ,
                                        Project2.SALES_ORD_ID,
                                        Project2.branch_cd,
                                        Project2.CODY_MANGR_USER_ID,
                                        Project2.MEM_CODE,
                                        Project2.sal_mem_id
                         from(       SELECT HS.NO AS NO,
                                                   HS.STUS_CODE_ID as STUS_CODE_ID,
                                                   HS.MONTH || '/' || HS.YEAR as HS_DATE ,
                                                   HS.MONTH,
                                                   HS.YEAR,
                                                   ST.CODE,
                                                   HR.NO AS Result,
                                                   SO.SALES_ORD_NO,
                                                   AP.CODE AS AppType,
                                                   CU.NAME,
                                                   CD.MEM_CODE AS ASSIGN_CODY,
                                                   CD.MEM_ID,
                                                   AC.MEM_CODE AS ACTION_CODY,
                                                   MG.STATE,
                                                   MG.AREA,
                                                   cu.CUST_ID as cust_id,
                                                (select code
                                                   from SYS0038M
                                                   where 1=1
                                                   and stus_code_id = cu.STUS_CODE_ID ) as cody_status_nm,
                                                   SO.BRNCH_ID as BRNCH_ID,
                                                   HS.SCHDUL_ID SCHDUL_ID  ,
                                                    SO.SALES_ORD_ID,
                                                   BR.CODE as branch_cd,
                                                   MG.CODY_MANGR_USER_ID  ,
                                                   ( select  MEM_CODE
                                                    from ORG0001D
                                                    where mem_id =  SO.MEM_ID) as MEM_CODE,
                                                    SO.MEM_ID as sal_mem_id
                                              FROM SVC0008D HS
                                                   INNER JOIN SAL0001D SO
                                                      ON SO.SALES_ORD_ID = HS.SALES_ORD_ID
                                                   INNER JOIN SAL0023D AD
                                                      ON AD.CUST_ADD_ID = SO.CUST_ADD_ID
                                                   INNER JOIN SYS0064M MG
                                                      ON MG.AREA_ID = AD.AREA_ID
                                                   left JOIN SVC0006D HR
                                                      ON HR.SCHDUL_ID = HS.SCHDUL_ID
                                                   INNER JOIN SYS0038M ST
                                                      ON ST.STUS_CODE_ID = HS.STUS_CODE_ID
                                                   INNER JOIN SYS0013M AP
                                                      ON AP.CODE_ID = SO.APP_TYPE_ID
                                                   INNER JOIN SAL0029D CU
                                                      ON CU.CUST_ID = SO.CUST_ID
                                                   INNER JOIN ORG0001D CD
                                                      ON CD.MEM_ID = HS.CODY_ID
                                                   left JOIN ORG0001D AC
                                                      ON AC.MEM_ID = HS.ACTN_MEM_ID
                                                   LEFT JOIN SYS0005M BR
                                                      ON BR.CODE = MG.CODY_BRNCH_CODE
                                             WHERE 1=1
                                                    AND SO.SALES_ORD_NO = #{salesOrderNo}
                                                     and HS.no = #{serviceNo}
                        )Project2
          </select>


    <select id="getAsBasic" parameterType="Map" resultType="egovMap">
        select *
          from ( select    Extent4.SALES_ORD_NO
                        ,Extent4.sales_ord_id
                        ,Extent1.as_id
                        ,Extent1.as_no
                        ,Extent7.AS_RESULT_ID
                        ,Extent7.AS_RESULT_NO
                        ,Extent7.AS_ENTRY_ID
                        ,Extent1.AS_SO_ID
                        ,Extent7.AS_CT_ID
                        ,Extent7.AS_SETL_DT
                        ,Extent7.AS_SETL_TM
                        ,Extent7.AS_RESULT_STUS_ID
                        ,Extent7.AS_FAIL_RESN_ID
                        ,Extent7.AS_REN_COLCT_ID
                        ,Extent7.AS_CMMS
                        ,Extent7.AS_BRNCH_ID
                        ,Extent7.AS_WH_ID
                        ,Extent7.AS_RESULT_REM
                        ,Extent7.AS_RESULT_CRT_DT
                        ,Extent7.AS_RESULT_CRT_USER_ID
                        ,Extent7.AS_MALFUNC_ID
                        ,Extent7.AS_MALFUNC_RESN_ID
                        ,Extent7.AS_DEFECT_TYPE_ID
                        ,Extent7.AS_DEFECT_GRP_ID
                        ,Extent7.AS_DEFECT_ID
                        ,Extent7.AS_DEFECT_PART_GRP_ID
                        ,Extent7.AS_DEFECT_PART_ID
                        ,Extent7.AS_DEFECT_DTL_RESN_ID
                        ,Extent7.AS_SLUTN_RESN_ID
                        ,Extent7.AS_WORKMNSH
				        ,nvl(Extent7.AS_FILTER_AMT,0) as AS_FILTER_AMT
				        ,nvl(Extent7.AS_ACSRS_AMT,0) as AS_ACSRS_AMT
				        ,nvl(Extent7.AS_TOT_AMT,0) as AS_TOT_AMT
                        ,Extent7.AS_RESULT_IS_SYNCH
                        ,Extent7.AS_RCALL
                        ,Extent7.AS_RESULT_STOCK_USE
                        ,Extent7.AS_RESULT_TYPE_ID
                        ,Extent7.AS_RESULT_IS_CURR
                        ,Extent7.AS_RESULT_MTCH_ID
                        ,Extent7.AS_RESULT_NO_ERR
                        ,Extent7.AS_RESULT_UPD_DT
                        ,Extent7.AS_RESULT_UPD_USER_ID
                        ,Extent7.AS_ENTRY_POINT
                        ,Extent7.AS_WORKMNSH_TAX_CODE_ID
                        ,Extent7.AS_WORKMNSH_TXS
                        ,Extent7.AS_RESULT_MOBILE_ID
                        ,Extent7.APPNT_DT
                        ,Extent7.APPNT_TM
                        ,Extent7.IN_HUSE_REPAIR_REM
                        ,Extent7.IN_HUSE_REPAIR_REPLACE_YN
                        ,Extent7.IN_HUSE_REPAIR_PROMIS_DT
                        ,Extent7.IN_HUSE_REPAIR_GRP_CODE
                        ,Extent7.IN_HUSE_REPAIR_PRODUCT_CODE
                        ,Extent7.IN_HUSE_REPAIR_SERIAL_NO
                        ,Extent7.RESULT_CUST_NAME
                        ,Extent7.RESULT_MOBILE_NO
                        ,Extent7.RESULT_REP_EMAIL_NO
                        ,Extent7.RESULT_ACEPT_NAME
                        ,Extent7.SGN_DT
                        ,Extent7.TRNSC_ID
                        ,(  select MEM_ID
                              from ORG0001D
                              where mem_code = #{userId}) as user_id
            from SVC0001D Extent1
                    ,SVC0004D Extent7
                    ,SAL0001D Extent4
            where 1=1
            and Extent1.AS_ID = Extent7.AS_ENTRY_ID(+)
            and Extent1.AS_SO_ID = Extent4.SALES_ORD_ID
            and Extent4.SALES_ORD_NO = #{salesOrderNo}
            and Extent1.as_no = #{serviceNo}
        order by Extent7.AS_RESULT_ID desc
       )
       where  ROWNUM = 1
        
            

    </select>




   <select id="selectAsBasicInfo" parameterType="Map" resultType="egovMap">
               select   AS_ID
						,AS_NO
						,AS_SO_ID
						,AS_MEM_ID
						,AS_MEM_GRP
						,AS_REQST_DT
						,AS_REQST_TM
<!-- 						,AS_APPNT_DT
						,AS_APPNT_TM      -->
 						,AS_BRNCH_ID
						,AS_MALFUNC_ID
						,AS_MALFUNC_RESN_ID
						,AS_REM_REQSTER
						,AS_REM_REQSTER_CNTC
						,AS_CALLLOG_ID
						,AS_STUS_ID
						,AS_SMS
						,AS_CRT_USER_ID
						,AS_CRT_DT
						,AS_UPD_USER_ID
						,AS_UPD_DT
						,AS_ENTRY_IS_SYNCH
						,AS_ENTRY_IS_EDIT
						,AS_TYPE_ID
						,AS_REQSTER_TYPE_ID
						,AS_IS_BS_WITHIN_30DAYS
						,AS_ALLOW_COMM
						,AS_PREV_MEM_ID
						,AS_REM_ADD_CNTC
						,AS_REM_REQSTER_CNTC_SMS
						,AS_REM_ADD_CNTC_SMS
						,AS_SESION_CODE
						,CALL_MEM
						,REF_REQST
						,PREV_COMP_SVC
						,NEXT_COMP_SVC
						,SIGN_DT_TIME
						,COMP_DT_SEQ
						,DISTANCE
						,FIRST
						,LAST
						,HOME
						,AS_MOBILE_REQST_ID
						,AS_RQST_REM
            from SVC0001D
            where 1=1
            and as_no = #{serviceNo}
            and rownum = 1

    </select>



    <select id="getInstallationJobList" parameterType="Map" resultType="egovMap">
				SELECT * FROM (
				SELECT ROW_NUMBER() OVER(PARTITION BY SAL0001D.SALES_ORD_NO ORDER BY SAL0095D.SRV_EXPR_DT DESC) rnum,
				        <!-- sal0046d s -->
				       SAL0046D.INSTALL_ENTRY_NO AS service_No,
				       SAL0046D.STUS_CODE_ID AS job_Status,
				       TO_CHAR (SAL0046D.APPNT_DT, 'YYYYMMDD') AS appointment_Date,
				       CASE
				          WHEN SAL0046D.APPNT_TM IS NULL
				          THEN
				             DECODE (SAL0046D.SESION_CODE,
				                     'M', '1000',
				                     'A', '1400',
				                     'E', '1900',
				                     'O', '2000', '2000')
				          ELSE
				             TO_CHAR (REPLACE (SUBSTR (SAL0046D.APPNT_TM, 0, 5), ':'))
				       END
				          appointment_Time,
				       TO_CHAR (SAL0046D.INSTALL_DT, 'YYYY') AS plan_Year,
				       TO_CHAR (SAL0046D.INSTALL_DT, 'MM') AS plan_Month,
				       CASE WHEN SAL0046D.SESION_CODE IS NULL THEN 'O' ELSE SAL0046D.SESION_CODE END AS job_Session,
				       <!--sal0046d e-->
				       <!--org0001d s-->
				       ORG0001D.NAME AS hp_Name,
				       ORG0001D.TEL_MOBILE AS hp_Tel,
				       ORG0001D.NAME AS smName,
				       ORG0001D.TEL_MOBILE AS smTel,
				       ORG0001D.NAME AS hmName,
				       ORG0001D.TEL_MOBILE AS hmTel,
				       ORG0001D.MEM_CODE AS settled_By,
				       <!--org0001d e-->
				       <!--SAL0001D s-->
				       SAL0001D.SALES_ORD_NO AS sales_Order_No,
				       SAL0001D.CUST_ID AS customer_Id,
				       FN_GET_COMMCD (10, SAL0001D.APP_TYPE_ID) AS app_Type,
				       SAL0001D.PROMO_ID AS sales_Promotion,
				       SAL0001D.MTH_RENT_AMT AS monthly_Rental_Fees,
				       SAL0001D.TOT_AMT AS registration_Fees,
				       <!--SAL0001D e-->
				       <!--ORG0005D empty-->
				       <!--SAL0002D empty-->
				       <!--SAL0022D d-->
				       SAL0022D.CUST_ACC_BANK_ID AS bank_Code,
				       SAL0022D.CUST_ACC_NO AS card_Account_No,
				       <!--SAL0022D e-->
				       SAL0023D.ADDR_DTL AS install_Address, --SAL0023D--
				       SAL0024D.CUST_BILL_PAY_REF_NO1 AS customer_Jom_Pay_Ref_No, --SAL0024D--
				       <!--SAL0027D s-->
				       SAL0027D.TEL_M1 AS handphone_Tel,
				       SAL0027D.TEL_R AS home_Tel,
				       SAL0027D.TEL_O AS office_Tel,
				       <!--SAL0027D e-->
				       <!--SAL0029D s-->
				       SAL0029D.NAME AS cust_Name,
				       TO_CHAR (SAL0029D.TYPE_ID) AS customer_Type,
				       SAL0029D.EMAIL AS mail_Address,
				       SAL0029D.CUST_VA_NO AS customer_Va_No,
				       <!--SAL0029D e-->
				       <!--SAL0045D empty-->
				       <!--SAL0047D s-->
				       SAL0047D.SIRIM_NO AS sirim_No,
				       SAL0047D.SERIAL_NO AS serial_No,
				       TO_CHAR (SAL0047D.INSTALL_DT, 'YYYYMMDD') AS settled_Date,
				       <!--SAL0047D e-->
				       <!--SAL0095D s-->
				       TO_CHAR (SAL0095D.SRV_EXPR_DT, 'YYYYMMDD') AS expiry_Date,
				       SAL0095D.SRV_DUR AS contract_Duration,
				       <!--SAL0095D e-->
				       SYS0064M.POSTCODE AS postcode,
				       SYS0064M.STATE AS serviceState,
				       SYS0026M.STK_DESC AS product_Name,
				       SYS0026M.STK_CODE AS product_Code,
				       SYS0005M.CODE AS dsc_Code
				FROM SAL0046D, ORG0001D,SAL0001D
				    ,ORG0005D
				      ,SAL0002D
				      ,SAL0022D
				      ,SAL0023D
				      ,SAL0024D
				      ,SAL0027D
				      ,SAL0029D
				      ,SAL0045D
				      ,SAL0047D
				      ,SAL0095D
				      ,SYS0005M
				      ,SYS0026M
				      ,SYS0064M
				WHERE SAL0046D.CT_ID = ORG0001D.MEM_ID
				AND SAL0001D.SALES_ORD_ID = SAL0046D.SALES_ORD_ID
				AND ORG0005D.MEM_ID = ORG0001D.MEM_ID
				AND SAL0001D.SALES_ORD_ID = SAL0002D.SALES_ORD_ID(+)
				AND SAL0001D.CUST_ID = SAL0022D.CUST_ID(+)
				AND SAL0001D.CUST_ADD_ID = SAL0023D.CUST_ADD_ID(+)
				AND SAL0001D.CUST_BILL_ID = SAL0024D.CUST_BILL_ID(+)
				AND SAL0001D.CUST_ID = SAL0027D.CUST_ID(+)
				AND SAL0001D.CUST_CNT_ID = SAL0027D.CUST_CNTC_ID(+)
				AND SAL0001D.CUST_ID = SAL0029D.CUST_ID(+)
				AND SAL0001D.SALES_ORD_ID = SAL0045D.SALES_ORD_ID(+)
				AND SAL0046D.INSTALL_ENTRY_ID = SAL0047D.ENTRY_ID(+)
				AND SAL0001D.SALES_ORD_ID = SAL0095D.SRV_SALES_ORD_ID(+)
				AND ORG0001D.BRNCH = SYS0005M.BRNCH_ID
				AND SAL0002D.ITM_STK_ID = SYS0026M.STK_ID(+)
				AND SAL0023D.AREA_ID = SYS0064M.AREA_ID(+)
				AND ORG0001D.mem_code = #{userId}
                AND SAL0046D.INSTALL_DT BETWEEN ADD_MONTHS(LAST_DAY(to_date(#{requestDate},'YYYYMM'))+1,-1)
                                                 AND  LAST_DAY(TO_DATE(#{requestDate},'YYYYMM'))
                )
                WHERE rnum = 1

            <!--  SELECT
            SAL0001D.SALES_ORD_NO           AS sales_Order_No,
            SAL0046D.INSTALL_ENTRY_NO       AS service_No,
            SAL0029D.NAME                   AS cust_Name,
            SAL0046D.STUS_CODE_ID           AS job_Status,
            TO_CHAR(SAL0047D.APPNT_DT,'YYYYMMDD')               AS appointment_Date,
            replace(substr(SAL0047D.APPNT_TM, 0,5 ),':')               AS appointment_Time,
            SAL0046D.SESION_CODE            AS job_Session,
            TO_CHAR(SAL0095D.SRV_EXPR_DT,'YYYYMMDD')            AS expiry_Date,
            FN_GET_COMMCD(8,SAL0029D.TYPE_ID)               AS customer_Type,
            SAL0001D.CUST_ID                AS customer_Id,
            SYS0064M.POSTCODE               AS postcode,
            SYS0064M.STATE                  AS serviceState,
            SAL0023D.ADDR_DTL               AS install_Address,
            SAL0027D.TEL_M1                 AS handphone_Tel,
            SAL0027D.TEL_R                  AS home_Tel,
            SAL0027D.TEL_O                  AS office_Tel,
            SAL0029D.EMAIL                  AS mail_Address,
            SAL0029D.CUST_VA_NO             AS customer_Va_No,
            SAL0024D.CUST_BILL_PAY_REF_NO1  AS customer_Jom_Pay_Ref_No,
            SYS0027M.IMG_URL                AS image_Url,
            SYS0026M.STK_DESC               AS product_Name,
            SYS0026M.STK_CODE               AS product_Code,
            FN_GET_COMMCD(10,SAL0001D.APP_TYPE_ID)            AS app_Type,
            SAL0001D.PROMO_ID               AS sales_Promotion,
            SAL0095D.SRV_DUR                AS contract_Duration,
            SAL0001D.MTH_RENT_AMT           AS monthly_Rental_Fees,
            SAL0001D.TOT_AMT                AS registration_Fees,
            SAL0022D.CUST_ACC_BANK_ID       AS bank_Code,
            SAL0022D.CUST_ACC_NO            AS card_Account_No,
            SYS0005M.CODE                   AS dsc_Code,
            SAL0047D.SIRIM_NO               AS sirim_No,
            SAL0047D.SERIAL_NO              AS serial_No,
           ORG0001DA.NAME                  AS hp_Name,
           ORG0001DA.TEL_MOBILE            AS hp_Tel,
            ORG0001DA.NAME                  AS smName,
            ORG0001DA.TEL_MOBILE            AS smTel,
            ORG0001DA.NAME                  AS hmName,
           ORG0001DA.TEL_MOBILE           AS hmTel,
            ORG0001D.MEM_CODE               AS settled_By,
            TO_CHAR(SAL0047D.INSTALL_DT,'YYYYMMDD')             AS settled_Date
            FROM
           ORG0001D,
           ORG0001D ORG0001DA,
            ORG0005D,
            SAL0001D,
            SAL0002D,
            SAL0022D,
            SAL0023D,
            SAL0024D,
            SAL0027D,
            SAL0029D,
            SAL0045D,
            SAL0046D,
            SAL0047D,
            SAL0095D,
            SYS0005M,
            SYS0026M,
            SYS0027M,
            SYS0064M
            WHERE SAL0001D.CUST_ID          = SAL0022D.CUST_ID
            AND   SAL0001D.CUST_ADD_ID      = SAL0023D.CUST_ADD_ID
            AND   SAL0022D.CUST_ID          = SAL0023D.CUST_ID
            AND   SAL0001D.CUST_BILL_ID     = SAL0024D.CUST_BILL_ID
            AND   SAL0001D.CUST_ID          = SAL0024D.CUST_BILL_CUST_ID
            AND   SAL0001D.CUST_ID          = SAL0027D.CUST_ID
            AND   SAL0001D.CUST_CNT_ID      = SAL0027D.CUST_CNTC_ID
            AND   SAL0001D.CUST_ID          = SAL0029D.CUST_ID
            AND   SAL0001D.SALES_ORD_ID     = SAL0045D.SALES_ORD_ID
            AND   SAL0001D.SALES_ORD_ID     = SAL0046D.SALES_ORD_ID
            AND   SAL0001D.SALES_ORD_ID     = SAL0002D.SALES_ORD_ID
            AND   SAL0001D.SALES_ORD_ID     = SAL0095D.SRV_SALES_ORD_ID
            AND   SAL0046D.INSTALL_ENTRY_ID = SAL0047D.ENTRY_ID
            AND   SAL0002D.ITM_STK_ID       = SYS0026M.STK_ID
            AND   SYS0026M.STK_ID           = SYS0027M.STK_ID
            AND   ORG0001D.MEM_ID           = SAL0047D.CT_ID
            AND   ORG0001DA.MEM_ID          = SAL0001D.MEM_ID
            AND   ORG0005D.MEM_ID          = SAL0001D.MEM_ID
            AND   ORG0005D.MEM_ID          = ORG0001DA.MEM_ID
            AND   SAL0045D.BRNCH_ID         = SYS0005M.BRNCH_ID
            AND   SAL0023D.AREA_ID          = SYS0064M.AREA_ID(+)
            AND TO_CHAR(SAL0047D.INSTALL_DT,'YYYYMM') = #{requestDate}
            AND ORG0001D.mem_code = #{userId} -->


     </select>

    <select id="getProductRetrunJobList" parameterType="Map" resultType="egovMap">
				SELECT
						    TO_CHAR(C.SALES_ORD_NO) AS sales_Order_No
						    , A.RETN_NO AS service_No
						    , NVL(F.NAME, '') AS cust_Name
						    , 'PR' AS job_Type
						    , TO_CHAR(A.STUS_CODE_ID) AS job_Status
						    , NVL(TO_CHAR(A.APP_DT, 'YYYYMMDD'), '') AS appointment_Date
						    , CASE WHEN NVL(TO_CHAR(A.APP_TM, 'HHMM'), ' ') = ' ' THEN
						        DECODE (NVL(TO_CHAR(A.APP_TM, 'HHMM'), ''),
						                         'M', '1000',
						                         'A', '1400',
						                         'E', '1900',
						                         'O', '2000', '2000')
						      ELSE NVL(TO_CHAR(A.APP_TM, 'HHMM'), '')
						      END AS appointment_Time
						    , A.RT_SESION_CODE AS job_Session
						    , CASE WHEN (TO_CHAR(A.STUS_CODE_ID) <![CDATA[ <> ]]> '1' AND NVL(TO_CHAR(E.CHECKIN_DT), ' ') = ' ') THEN NVL(TO_CHAR(A.APP_DT, 'YYYYMMDD'), ' ')
						            ELSE NVL(TO_CHAR(E.CHECKIN_DT), '')
						            END AS check_In_Date
						    , CASE WHEN (TO_CHAR(A.STUS_CODE_ID) <![CDATA[ <> ]]> '1' AND NVL(TO_CHAR(E.CHECKIN_TM), ' ') = ' ') THEN
						            CASE WHEN NVL(TO_CHAR(A.APP_TM, 'HHMM'), ' ') = ' ' THEN
						                DECODE (NVL(TO_CHAR(A.APP_TM, 'HHMM'), ''),
						                                 'M', '1000',
						                                 'A', '1400',
						                                 'E', '1900',
						                                 'O', '2000', '2000')
						            ELSE NVL(TO_CHAR(A.APP_TM, 'HHMM'), '')
						            END
						          ELSE SUBSTR(NVL(TO_CHAR(E.CHECKIN_TM), ''), 1, 4)
						          END  AS check_In_Time
						    , NVL(TO_CHAR(E.CHECKIN_GPS), '') AS check_In_Gps
						    , NVL(TO_CHAR(F.TYPE_ID), '') AS customer_Type
						    , NVL(TO_CHAR(C.CUST_ID), '') AS customer_Id
						    , '' AS service_State
						    , NVL(TO_CHAR(A.APP_DT, 'YYYY'), '') AS plan_Year
						    , NVL(TO_CHAR(A.APP_DT, 'MM'), '') AS plan_Month
						    , '' AS install_Address
						    , '' AS postcode
						    , NVL(TO_CHAR(N.TEL_M1), '') AS handphone_Tel
						    , NVL(TO_CHAR(N.TEL_R), '') AS home_Tel
						    , NVL(TO_CHAR(N.TEL_O), '') AS office_Tel
						    , NVL(TO_CHAR(F.EMAIL), '') AS mail_Address
						    , NVL(TO_CHAR(F.CUST_VA_NO), '') AS customer_Va_No
						    , NVL(TO_CHAR(G.CUST_BILL_PAY_REF_NO1), '') AS customer_Jom_Pay_Ref_No
						    , TO_CHAR(D.STK_CODE) AS product_Code
						    , TO_CHAR(D.STK_DESC) AS product_Name
						    , NVL(FN_GET_COMMCD (10, C.APP_TYPE_ID), '') AS app_Type
						    , NVL(K.INSTCT, '') AS instruction
						    , NVL(TO_CHAR(I.INSTALL_DT, 'YYYYMMDD'), '') AS installation_Date
						    , NVL(TO_CHAR(J.MEM_CODE), '') AS installed_By
						    , '' AS prev_Outstanding
						    , '' AS penalty_Charges
						    , '' AS unbilled_Amount
						    , '' AS outstanding
						    , NVL(TO_CHAR(L.CODE), '') AS dsc_Code
						    , NVL(I.SIRIM_NO, '') AS sirim_No
						    , NVL(I.SERIAL_NO, '') AS serial_No
						    , '' AS hp_Name
						    , '' AS hp_Tel
						    , NVL(TO_CHAR(M.NAME), '') AS hm_Name
						    , NVL(TO_CHAR(M.TEL_MOBILE), '') AS hm_Tel
						    , TO_CHAR(E.STK_RETN_CC_ID) AS cc_Code
						    , TO_CHAR(E.STK_RETN_RESN_ID) AS result_Code
						    , TO_CHAR(E.STK_RETN_REM) AS result_Remark
						    , NVL(TO_CHAR(E.OWNER_CODE), '') AS owner_Code
						    , NVL(FN_GET_COMMCD (376, TO_CHAR(E.OWNER_CODE)), '') AS owner_Code_Nm
						    , NVL(TO_CHAR(E.RESULT_CUST_NAME), '') AS result_Cust_Name
						    , NVL(TO_CHAR(E.RESULT_ICMOBILE_NO), '') AS result_Ic_Mobile_No
						    , NVL(TO_CHAR(E.RESULT_RPT_EMAIL_NO), '') AS result_Report_Email_No
						    , NVL(TO_CHAR(E.RESULT_ACEPT_NAME), '') AS result_Acceptance_Name
						    , NVL(TO_CHAR(A.FAIL_RESN_ID), '') AS fail_Reason_Id
						    , NVL(TO_CHAR(A.FAIL_RESN_CODE), '') AS fail_Reason_Code
						    , '' AS fail_Reason_Name
						    , TO_CHAR(E.STK_RETN_DT, 'YYYYMMDD') AS complete_Ret_Date
						    , TO_CHAR(E.STK_RETN_DT, 'HHMM') AS complete_Ret_Time
						    , '' AS last_Payment_Date
						    , NVL(TO_CHAR(I.NEXT_CALL_DT, 'YYYYMMDD'), '') AS next_Call_Date
						    , NVL(TO_CHAR(I.NEXT_CALL_DT, 'HHMM'), '') AS next_Call_Time
						  FROM LOG0038D A
						  INNER JOIN ORG0001D B ON A.CT_ID = B.MEM_ID
						  INNER JOIN SAL0001D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
						  INNER JOIN SYS0026M D ON A.STOCK_ID = D.STK_ID
						  LEFT OUTER JOIN (
						        SELECT
						            A.*
						            , B.RETN_RESULT_ID AS RETN_RESULT_ID
						        FROM LOG0039D A
						        INNER JOIN (
						            SELECT
						                STK_RETN_ID
						                , MAX(STK_RETN_RESULT_ID) AS RETN_RESULT_ID
						            FROM LOG0039D
						            GROUP BY STK_RETN_ID
						        ) B ON A.STK_RETN_ID = B.STK_RETN_ID AND A.STK_RETN_RESULT_ID = B.RETN_RESULT_ID
						    ) E ON A.STK_RETN_ID = E.STK_RETN_ID
						  LEFT OUTER JOIN SAL0029D F ON C.CUST_ID = F.CUST_ID
						  LEFT OUTER JOIN SAL0024D G ON C.CUST_BILL_ID = G.CUST_BILL_ID
						  LEFT OUTER JOIN (
						    SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID, SALES_ORD_ID
						    FROM SAL0046D
						    GROUP BY SALES_ORD_ID
						  ) H ON C.SALES_ORD_ID = H.SALES_ORD_ID
						  INNER JOIN (
						    SELECT A.*
						      FROM SAL0047D A
						           INNER JOIN (  SELECT ENTRY_ID, MAX (RESULT_ID) AS RESULT_ID
						                           FROM SAL0047D
						                       GROUP BY ENTRY_ID) B
						              ON A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID
						  ) I ON H.INSTALL_ENTRY_ID = I.ENTRY_ID
						  INNER JOIN ORG0001D J ON I.CT_ID = J.MEM_ID
						  INNER JOIN SAL0045D K ON A.SALES_ORD_ID = K.SALES_ORD_ID
						  INNER JOIN SYS0005M L ON B.BRNCH = L.BRNCH_ID
						  LEFT OUTER JOIN ORG0001D M ON C.SALES_HM_ID = M.MEM_ID
						  LEFT OUTER JOIN SAL0027D N ON C.CUST_ID = N.CUST_ID AND C.CUST_CNT_ID = N.CUST_CNTC_ID
						 WHERE A.APP_DT BETWEEN ADD_MONTHS (LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')) + 1, -1) AND LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM'))
						 AND B.MEM_CODE = #{userId}
				                
     </select>

		<select id="heartServiceParts" parameterType="Map" resultType="egovMap">
			SELECT *
			  FROM (SELECT ROW_NUMBER ()
			                  OVER (PARTITION BY S01A.SALES_ORD_NO,
			                                     S08A.NO,
			                                     S26A.STK_CODE,
			                                     S26B.STK_CODE
			                        ORDER BY S26B.STK_CODE DESC)
			                  rn,
			               S01A.SALES_ORD_NO AS sales_Order_No,
			               S08A.NO AS service_No,
			               S08A.YEAR,
			               S08A.MONTH,
			               S26A.STK_CODE AS product_Code,
			               S26B.STK_CODE AS part_Code,
			               S26B.STK_DESC AS part_Name,
			               S87A.SRV_FILTER_STK_ID AS part_Id,
			               L44A.BOM_COMPNT,
			               L44A.COMPNT_QTY AS quanity,
			               /*                                         S07A.EXCH_REASON_ID, */
			               TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD')
			                  AS last_Chg_Date,
			               S87A.SRV_FILTER_PRIOD AS parts_Period,
			               NVL2 (L44A.ALTER_ITM_GRP, 'N', 'Y') AS alternative_YN,
			               S06A.RESULT_ID,
			               S07A.BS_RESULT_PART_ID,
			               S07A.BS_RESULT_PART_QTY,
			               CASE
			                  WHEN TO_NUMBER(S07A.BS_RESULT_PART_QTY, '99999') <![CDATA[ > ]]> 0 THEN 'Y'
			                  ELSE 'N'
			               END
			                  AS chg_YN,
			               NULL AS ex_Chgid,
			               NULL AS chg_Qty,
			               TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'HHMM') AS last_Chg_Time,
			               NULL AS alternative_Used_YN,
			               NULL AS alternative_Filter_Code,
			               NULL AS alternative_Filter_Id,
			               NULL AS alternative_Filter_Name,
			               TO_CHAR (NVL (H.SERIALCHK, '')) AS filter_Barcd_Chk_YN,
			               NULL AS filterBarcd_Serial_No,
			               S90A.SRV_CODY_ID,
			               (SELECT MEM_CODE
			                  FROM ORG0001D ME
			                 WHERE 1 = 1 AND ME.MEM_ID = S90A.SRV_CODY_ID)
			                  AS cody_cd
			          FROM SAL0001D S01A
			               INNER JOIN SAL0002D S02A
			                  ON S02A.SALES_ORD_ID = S01A.SALES_ORD_ID
			               INNER JOIN SYS0026M S26A ON S26A.STK_ID = S02A.ITM_STK_ID
			               INNER JOIN SAL0090D S90A ON S90A.SRV_SO_ID = S01A.SALES_ORD_ID
			               INNER JOIN SAL0087D S87A
			                  ON S87A.SRV_CONFIG_ID = S90A.SRV_CONFIG_ID
			               INNER JOIN SYS0026M S26B
			                  ON S26B.STK_ID = S87A.SRV_FILTER_STK_ID
			               INNER JOIN LOG0043M L43A ON L43A.MATRL_NO = S26A.STK_CODE
			               LEFT OUTER JOIN LOG0044D L44A ON L44A.BOM = L43A.BOM /* AND L44A.BOM_COMPNT = S26B.STK_CODE */
			               INNER JOIN SVC0008D S08A
			                  ON S08A.SALES_ORD_ID = S01A.SALES_ORD_ID
			               LEFT JOIN SVC0006D S06A ON S06A.SCHDUL_ID = S08A.SCHDUL_ID
			               LEFT JOIN SVC0007D S07A ON S07A.BS_RESULT_ID = S06A.RESULT_ID
			               INNER JOIN ORG0001D O1DA ON O1DA.MEM_ID = S08A.CODY_ID
			               LEFT OUTER JOIN      /*BARCODE_CHECK_YN BY LOGISTRICS_FILTER*/
			               (SELECT S26.STK_CODE,
			                       S28.WH_LOC_CODE,
			                       CASE
			                          WHEN S26.STK_TYPE_ID = 61
			                          THEN
			                             CASE
			                                WHEN     S26.SERIAL_CHK = 'Y'
			                                     AND S28.SERIAL_PD_CHK = 'Y'
			                                THEN
			                                   'Y'
			                                ELSE
			                                   'N'
			                             END
			                          WHEN S26.STK_TYPE_ID = 62
			                          THEN
			                             CASE
			                                WHEN     S26.SERIAL_CHK = 'Y'
			                                     AND S28.SERIAL_FT_CHK = 'Y'
			                                THEN
			                                   'Y'
			                                ELSE
			                                   'N'
			                             END
			                          WHEN S26.STK_TYPE_ID = 63
			                          THEN
			                             CASE
			                                WHEN     S26.SERIAL_CHK = 'Y'
			                                     AND S28.SERIAL_PT_CHK = 'Y'
			                                THEN
			                                   'Y'
			                                ELSE
			                                   'N'
			                             END
			                          ELSE
			                             'N'
			                       END
			                          AS SERIALCHK
			                  FROM SYS0028M S28, SYS0026M S26
			                 WHERE 1 = 1) H
			                  ON     S26B.STK_CODE = H.STK_CODE
			                     AND H.WH_LOC_CODE = #{userId}
			         WHERE     S08A.YEAR =
			                      TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
			               AND S08A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
			               AND O1DA.MEM_CODE = #{userId})
			 WHERE 1 = 1 AND rn = 1
		</select>





        <select id="afterServiceParts" parameterType="Map" resultType="egovMap">
		
		           SELECT
					    MST.*
					    , TO_CHAR(SUB.PRC_CHRG) AS sales_Price
					FROM
					(
					    SELECT
					        DISTINCT MST.*
					        , TO_CHAR (A.SRV_FILTER_LAST_SERIAL) AS filter_Barcd_Serial_No
					        , TO_CHAR (A.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Chg_Date
					        , TO_CHAR (A.SRV_FILTER_PRV_CHG_DT, 'HHMM') AS last_Chg_Time
					        , TO_CHAR (A.SRV_FILTER_EXPR_DT, 'YYYYMMDD') AS last_Chg_Date_Origin
					        , TO_CHAR (A.SRV_FILTER_EXPR_DT, 'HHMM') AS last_Chg_Time_Origin
					    FROM
					    (
					        SELECT
					            TO_CHAR (B.CUST_ID) as CUST_ID,
					            TO_CHAR (B.SALES_ORD_ID) AS sales_Orderid,
					            TO_CHAR (B.SALES_ORD_NO) AS sales_Order_No,
					            TO_CHAR (A.AS_NO) AS service_No,
					            TO_CHAR (D.STK_CODE) AS product_Code,
					            TO_CHAR (F.STK_CODE) AS part_Code,
					            TO_CHAR (F.STK_ID) AS part_Id,
					            TO_CHAR (F.STK_DESC) AS part_Name,
					            TO_CHAR (NVL(H.SERIALCHK, '')) AS filter_Barcd_Chk_YN,
					            TO_CHAR (F.STK_TYPE_ID) AS part_Type,
					            TO_CHAR (E.INTNL_CNTR) AS parts_Period,
					            TO_CHAR (E.COMPNT_QTY) AS quanity
					        FROM
					        (
					            SELECT
					                *
					            FROM
					                SVC0001D
					            WHERE AS_MEM_ID = (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE = #{userId})
					            AND AS_APPNT_DT BETWEEN ADD_MONTHS( LAST_DAY( TO_DATE(#{requestDate}, 'YYYYMM' )) + 1, - 1 ) AND LAST_DAY( TO_DATE(#{requestDate}, 'YYYYMM' ))
					        ) A
					        INNER JOIN SAL0001D B ON A.AS_SO_ID = B.SALES_ORD_ID
					        INNER JOIN SAL0002D C ON B.SALES_ORD_ID = C.SALES_ORD_ID
					        INNER JOIN SYS0026M D ON C.ITM_STK_ID = D.STK_ID
					        INNER JOIN (
					            SELECT
					                LOG43.MATRL_NO
					                , LOG44.*
					            FROM 
					                LOG0043M LOG43 INNER JOIN LOG0044D LOG44 ON LOG43.BOM = LOG44.BOM
					        ) E ON D.STK_CODE = E.MATRL_NO
					        INNER JOIN SYS0026M F ON E.BOM_COMPNT = F.STK_CODE
					        LEFT OUTER JOIN SVC0004D G ON A.AS_ID = G.AS_ENTRY_ID AND A.AS_SO_ID = G.AS_SO_ID
					        LEFT OUTER JOIN (
					            SELECT 
					               S26.STK_CODE,
					               S28.WH_LOC_CODE,
					               CASE 
					                  WHEN S26.STK_TYPE_ID = 61 THEN
					                     CASE WHEN S26.SERIAL_CHK = 'Y' AND S28.SERIAL_PD_CHK = 'Y' THEN 'Y' ELSE 'N'
					                     END
					                  WHEN S26.STK_TYPE_ID = 62 THEN
					                     CASE WHEN S26.SERIAL_CHK = 'Y' AND S28.SERIAL_FT_CHK = 'Y' THEN 'Y' ELSE 'N'
					                     END
					                  WHEN S26.STK_TYPE_ID = 63 THEN
					                     CASE WHEN S26.SERIAL_CHK = 'Y' AND S28.SERIAL_PT_CHK = 'Y' THEN 'Y' ELSE 'N'
					                     END
					                  ELSE 'N'
					               END AS SERIALCHK
					            FROM SYS0028M S28, SYS0026M S26
					            WHERE 1 = 1
					         ) H ON F.STK_CODE = H.STK_CODE AND H.WH_LOC_CODE = #{userId}
					    ) MST
					    LEFT OUTER JOIN (
					        SELECT
					            A.SRV_SO_ID
					            , B.*
					        FROM
					            SAL0090D A
					            , SAL0087D B
					        WHERE A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
					    ) A ON MST.sales_Orderid = A.SRV_SO_ID AND MST.part_Id = A.SRV_FILTER_STK_ID
					    ORDER BY MST.sales_Orderid
					) MST
					LEFT OUTER JOIN (
					    SELECT STK_ID, PRC_CHRG FROM SAL0016M
					    WHERE APP_TYPE_ID = '67'
					    AND STUS_CODE_ID = 1
					    AND PRC_CHRG > 0
					) SUB ON MST.part_Id = SUB.STK_ID

         </select>  




	    <insert id="insertHeatLog" parameterType="Map">
	        INSERT INTO SVC0023T (
	           RESULT_SEQ
	           , RESULT_CRT_USER_ID
	           , SALES_ORD_ID
	           , SVC_NO
	           , TEMPER_SETTING
	           , NORESULT_REM
	           , NEXT_APPT_DATE
	           , NEXT_APPT_TIME
	           , OWNER_CODE
	           , RESULT_CUST_NAME
	           , RESULT_IC_MOBILE_NO
	           , RESULT_EMAIL_NO
	           , ACCEPTANCE_NAME
	           , REN_COLCT_ID
	           , SIGN_DATA
	           , BS_RESULT_PART_ID
	           , EXCH_REASON_ID
	           , BS_RESULT_PART_QTY
	           ,CRT_USER_ID
	           , CRT_DT
	           , TRNSC_ID
	           , TRAN_STUS_CD
               ,CHECKIN_DT
               ,CHECKIN_TM
               ,CHECKIN_GPS	           
	        ) VALUES (
	           SVC0023T_RESULT_SEQ.NEXTVAL
	           , #{userId}
	           , #{salesOrderNo}
	           , #{serviceNo}
	           , #{temperatureSetting}
	           , #{resultRemark}
	           , #{nextAppointmentDate}
	           , #{nextAppointmentTime}
	           , #{ownerCode}
	           , #{resultCustName}
	           , #{resultIcMobileNo}
	           , #{resultReportEmailNo}
	           , #{resultAcceptanceName}
	           , #{rcCode}
	           , #{signData}
	           , #{filterCode}
	           , #{exchangeId}
	           , #{filterChangeQty}
	           , #{userId}
	           , SYSDATE
	           , #{transactionId}
	           , 'N'
               , #{checkInDate}
               , #{checkInTime}
               , #{checkInGps}	           
	        )
	    </insert>




        <insert id="insertAsResultLog" parameterType="Map">
            INSERT INTO SVC0024T (
				RESULT_SEQ
				,RESULT_CRT_USER_ID
				,SALES_ORD_ID
				,SVC_NO
				,LABOUR_CHRG
				,AS_DEFECT_ID
				,AS_DEFECT_PART_ID
				,AS_DEFECT_DTL_RESN_ID
				,AS_SLUTN_RESN_ID
				,AS_DEFECT_TYPE_ID
				,IN_HUSE_REPAIR_REM
				,IN_HUSE_REPAIR_REP_YN
				,IN_HUSE_REPAIR_PROMS_DATE
				,IN_HUSE_REPAIR_PROD_GRP_CODE
				,IN_HUSE_REPAIR_PROD_CODE
				,IN_HUSE_REPAIR_SERIAL_NO
				,RESULT_REM
				,OWNER_CODE
				,RESULT_CUST_NAME
				,RESULT_IC_MOBILE_NO
				,RESULT_EMAIL_NO
				,ACCEPTANCE_NAME
				,SIGN_DATA
				,TRNSC_ID
				,AS_RESULT_PART_ID
				,CHRG_FOC
				,EXCH_REASON_ID
				,SALES_PRC
				,AS_RESULT_PART_QTY
				,PART_TYPE
<!-- 				,filterBarcdSerialNo -->
				,CRT_USER_ID
				,CRT_DT
				,TRAN_STUS_CD
               ,CHECKIN_DT
               ,CHECKIN_TM
               ,CHECKIN_GPS 				
            ) VALUES (
               SVC0024T_RESULT_SEQ.NEXTVAL
				,#{userId}
				,#{salesOrderNo}
				,#{serviceNo}
				,#{labourCharge}
				,#{defectId}
				,#{defectPartId}
				,#{defectDetailReasonId}
				,#{solutionReasonId}
				,#{defectTypeId}
				,#{inHouseRepairRemark}
				,#{inHouseRepairReplacementYN}
				,#{inHouseRepairPromisedDate}
				,#{inHouseRepairProductGroupCode}
				,#{inHouseRepairProductCode}
				,#{inHouseRepairSerialNo}
				,#{resultRemark}
				,#{ownerCode}
				,#{resultCustName}
				,#{resultIcMobileNo}
				,#{resultReportEmailNo}
				,#{resultAcceptanceName}
				,#{signData}
				,#{transactionId}
				,#{filterCode}
				,#{chargesFoc}
				,#{exchangeId}
				,#{salesPrice}
				,#{filterChangeQty}
				,#{partsType}
<!-- 				,#{filterBarcdSerialNo} -->
               ,#{userId}
               , SYSDATE
               , 'N'
               , #{checkInDate}
               , #{checkInTime}
               , #{checkInGps}               
            )
        </insert>


            <insert id="insertInstallServiceLog" parameterType="Map">

		             INSERT INTO SVC0025T (
						 RESULT_SEQ
						,RESULT_CRT_USER_ID
						,SALES_ORD_ID
						,SVC_NO
						,SIRIM_NO
						,SERIAL_NO
						,AS_EXCHG_YN
						,BEFOR_PRODUCT_SIRIM_NO
						,RESULT_REM
						,OWNER_CODE
						,RESULT_CUST_NAME
						,RESULT_IC_MOBILE_NO
						,RESULT_EMAIL_NO
						,ACCEPTANCE_NAME
						,SIGN_DATA
						,CRT_USER_ID
						,CRT_DT
						,TRNSC_ID
						,TRAN_STUS_CD
		               ,CHECKIN_DT
		               ,CHECKIN_TM
		               ,CHECKIN_GPS 						
		            ) VALUES (
		               SVC0025T_RESULT_SEQ.NEXTVAL
		                ,#{userId}
						,#{salesOrderNo}
						,#{serviceNo}
						,#{sirimNo}
						,#{serialNo}
						,#{asExchangeYN}
						,#{beforeProductSerialNo}
						,#{resultRemark}
						,#{ownerCode}
						,#{resultCustName}
						,#{resultIcMobileNo}
						,#{resultReportEmailNo}
						,#{resultAcceptanceName}
						,#{signData}
						,#{userId}
						, SYSDATE
						,#{transactionId}
                        , 'N'
                       , #{checkInDate}
                       , #{checkInTime}
                       , #{checkInGps}                           
		            )

            </insert>



	   <update id="updateSuccessStatus" parameterType="string">
	      UPDATE SVC0023T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
	   </update>


       <update id="updateSuccessASStatus" parameterType="string">
          UPDATE SVC0024T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>



       <update id="updateSuccessInstallStatus" parameterType="string">
          UPDATE SVC0025T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>


       <update id="updateSuccessHsReStatus" parameterType="string">
          UPDATE SVC0036T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>


       <update id="updateSuccessAsReStatus" parameterType="string">
          UPDATE SVC0037T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>


       <update id="updateSuccessInsReStatus" parameterType="string">
          UPDATE SVC0038T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>


       <update id="updateSuccessRequestRegiStatus" parameterType="string">
          UPDATE SVC0049T SET   TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
       </update>


        <select id="getNextSvc006dSeq"  resultType="int">
             select GBSLCVD.SVC0006D_RESULT_ID_SEQ.NEXTVAL
                from dual
        </select>



         <insert id="insertHsResultD" parameterType="Map">

              insert into SVC0007D (
                         BS_RESULT_ITM_ID
                        ,BS_RESULT_ID
                        ,BS_RESULT_PART_ID
                        ,BS_RESULT_PART_QTY
                        ,BS_RESULT_CRT_DT
                        ,BS_RESULT_CRT_USER_ID
                        )
                 values (
                      GBSLCVD.SVC0007D_BS_RESULT_ITM_ID_SEQ.nextval
                    , #{bsResultId}
                    , #{filterCode}
                    , #{filterChangeQty}
                    , sysdate
                    , #{memId}
            )
            </insert>


             <select id="selectHSScheduleMCnt"  parameterType="Map" resultType="int">
                        SELECT count(*) cnt
                          FROM SVC0008D Extent1
                        WHERE  Extent1.SCHDUL_ID = #{schdulId}
              </select>


             <select id="selectHSResultMList"  parameterType="Map" resultType="egovMap">
                        SELECT Extent1.RESULT_ID RESULT_ID  ,
                               Extent1.NO NO  ,
                               Extent1.TYPE_ID TYPE_ID  ,
                               Extent1.SCHDUL_ID SCHDUL_ID  ,
                               Extent1.SALES_ORD_ID SALES_ORD_ID  ,
                               Extent1.CODY_ID CODY_ID  ,
                               Extent1.SETL_DT SETL_DT  ,
                               Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID  ,
                               Extent1.FAIL_RESN_ID FAIL_RESN_ID  ,
                               Extent1.REN_COLCT_ID REN_COLCT_ID  ,
                               Extent1.WH_ID WH_ID  ,
                               Extent1.RESULT_REM RESULT_REM  ,
                               Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                               Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
                               Extent1.RESULT_UPD_DT RESULT_UPD_DT  ,
                               Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID  ,
                               Extent1.RESULT_IS_SYNC RESULT_IS_SYNC  ,
                               Extent1.RESULT_IS_EDIT RESULT_IS_EDIT  ,
                               Extent1.RESULT_STOCK_USE RESULT_STOCK_USE  ,
                               Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                               Extent1.RESULT_MTCH_ID RESULT_MTCH_ID  ,
                               Extent1.RESULT_IS_ADJ RESULT_IS_ADJ  ,
                               Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT  ,
                               Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
                          FROM SVC0006D Extent1
                <![CDATA[        WHERE  Extent1.SCHDUL_ID = #{schdulId}  AND ROWNUM <= 1    ]]>

                    </select>




                  <update id="updateHsSVC0008D" parameterType="Map">
                        UPDATE SVC0008D
                           SET STUS_CODE_ID = #{resultStusCodeId}
                                ,ACTN_MEM_ID = #{memId}
                                ,CODY_ID = #{memId}
                         WHERE   SCHDUL_ID = #{schdulId}
                    </update>



                    <select id="selectSrvConfiguration" parameterType="Map" resultType="egovMap">
                                SELECT Extent1.RESULT_ID RESULT_ID  ,
                                       Extent1.NO NO  ,
                                       Extent1.TYPE_ID TYPE_ID  ,
                                       Extent1.SCHDUL_ID SCHDUL_ID  ,
                                       Extent1.SALES_ORD_ID SALES_ORD_ID  ,
                                       Extent1.CODY_ID CODY_ID  ,
                                       Extent1.SETL_DT SETL_DT  ,
                                       Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID  ,
                                       Extent1.FAIL_RESN_ID FAIL_RESN_ID  ,
                                       Extent1.REN_COLCT_ID REN_COLCT_ID  ,
                                       Extent1.WH_ID WH_ID  ,
                                       Extent1.RESULT_REM RESULT_REM  ,
                                       Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                       Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
                                       Extent1.RESULT_UPD_DT RESULT_UPD_DT  ,
                                       Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID  ,
                                       Extent1.RESULT_IS_SYNC RESULT_IS_SYNC  ,
                                       Extent1.RESULT_IS_EDIT RESULT_IS_EDIT  ,
                                       Extent1.RESULT_STOCK_USE RESULT_STOCK_USE  ,
                                       Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                       Extent1.RESULT_MTCH_ID RESULT_MTCH_ID  ,
                                       Extent1.RESULT_IS_ADJ RESULT_IS_ADJ  ,
                                       Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT  ,
                                       Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
                                  FROM SVC0006D Extent1
                            <![CDATA[    WHERE  Extent1.SALES_ORD_ID = #{salesOrdId} AND ROWNUM <= 1 ]]>
                            </select>


             <insert id="insertHsResultSVC0006D" parameterType="Map" >
               INSERT INTO GBSLCVD.SVC0006D (
                       RESULT_ID, NO, TYPE_ID, SCHDUL_ID, SALES_ORD_ID , CODY_ID
                      ,SETL_DT,RESULT_STUS_CODE_ID,FAIL_RESN_ID  , REN_COLCT_ID,WH_ID
                      ,RESULT_REM,RESULT_CRT_DT,RESULT_CRT_USER_ID,RESULT_UPD_DT,RESULT_UPD_USER_ID
                      ,RESULT_IS_SYNC,RESULT_IS_EDIT,RESULT_STOCK_USE,RESULT_IS_CURR,RESULT_MTCH_ID
                      ,RESULT_IS_ADJ
                       )
                VALUES ( #{bsResultId}, #{docNo} , #{typeId},#{schdulId} ,#{salesOrdId} ,#{memId}
                             ,SYSDATE,#{resultStusCodeId},#{failResnId} ,#{renColctId},#{whId}
                            ,#{resultRemark} ,SYSDATE,#{memId},SYSDATE ,#{memId}
                            ,#{resultIsSync},#{resultIsEdit},#{resultStockUse},#{resultIsCurr},#{resultMtchId}
                            ,#{resultIsAdj}
                 )
             </insert>


             <select id="selectHsAssiinlList" parameterType="Map" resultType="egovMap">

                            SELECT  distinct Project2.No No  ,
                                        Project2.HS_DATE HS_DATE  ,
                                        Project2.STUS_CODE_ID STUS_CODE_ID  ,
                                        Project2.Code Code  ,
                                        Project2.SALES_ORD_NO SALES_ORD_NO  ,
                                        Project2.ASSIGN_CODY C5  ,
                                        Project2.ACTION_CODY as ACTN_MEM_ID,
                                        Project2.MEM_ID ,
                                        Project2.Name Name  ,
                                        Project2.cust_id,
                                        Project2.cody_status_nm,
                                        Project2.BRNCH_ID as BRNCH_ID,
                                        Project2.SCHDUL_ID SCHDUL_ID   ,
                                        Project2.SALES_ORD_ID,
                                        Project2.branch_cd,
                                        Project2.CODY_MANGR_USER_ID,
                                        Project2.MEM_CODE,
                                        Project2.sal_mem_id
                         from(       SELECT HS.NO AS NO,
                                                   HS.STUS_CODE_ID as STUS_CODE_ID,
                                                   HS.MONTH || '/' || HS.YEAR as HS_DATE ,
                                                   HS.MONTH,
                                                   HS.YEAR,
                                                   ST.CODE,
                                                   HR.NO AS Result,
                                                   SO.SALES_ORD_NO,
                                                   AP.CODE AS AppType,
                                                   CU.NAME,
                                                   CD.MEM_CODE AS ASSIGN_CODY,
                                                   CD.MEM_ID,
                                                   AC.MEM_CODE AS ACTION_CODY,
                                                   MG.STATE,
                                                   MG.AREA,
                                                   cu.CUST_ID as cust_id,
                                                (select code
                                                   from SYS0038M
                                                   where 1=1
                                                   and stus_code_id = cu.STUS_CODE_ID ) as cody_status_nm,
                                                   SO.BRNCH_ID as BRNCH_ID,
                                                   HS.SCHDUL_ID SCHDUL_ID  ,
                                                    SO.SALES_ORD_ID,
                                                   BR.CODE as branch_cd,
                                                   MG.CODY_MANGR_USER_ID  ,
                                                   ( select  MEM_CODE
                                                    from ORG0001D
                                                    where mem_id =  SO.MEM_ID) as MEM_CODE,
                                                    SO.MEM_ID as sal_mem_id
                                              FROM SVC0008D HS
                                                   INNER JOIN SAL0001D SO
                                                      ON SO.SALES_ORD_ID = HS.SALES_ORD_ID
                                                   INNER JOIN SAL0023D AD
                                                      ON AD.CUST_ADD_ID = SO.CUST_ADD_ID
                                                   INNER JOIN SYS0064M MG
                                                      ON MG.AREA_ID = AD.AREA_ID
                                                   left JOIN SVC0006D HR
                                                      ON HR.SCHDUL_ID = HS.SCHDUL_ID
                                                   INNER JOIN SYS0038M ST
                                                      ON ST.STUS_CODE_ID = HS.STUS_CODE_ID
                                                   INNER JOIN SYS0013M AP
                                                      ON AP.CODE_ID = SO.APP_TYPE_ID
                                                   INNER JOIN SAL0029D CU
                                                      ON CU.CUST_ID = SO.CUST_ID
                                                   INNER JOIN ORG0001D CD
                                                      ON CD.MEM_ID = HS.CODY_ID
                                                   left JOIN ORG0001D AC
                                                      ON AC.MEM_ID = HS.ACTN_MEM_ID
                                                   LEFT JOIN SYS0005M BR
                                                      ON BR.CODE = MG.CODY_BRNCH_CODE
                                             WHERE 1=1
                                                    AND SO.SALES_ORD_NO = #{salesOrderNo}
                                                     and HS.no = #{serviceNo}
                        )Project2
          </select>


        <select id="getUseridToMemid" parameterType="Map" resultType="String">
				select MEM_ID
				from ORG0001D
				where mem_code = #{userId}
          </select>



    <select id="getInstallResultByInstallEntryID" parameterType="Map" resultType="egovMap">
        SELECT Extent1.INSTALL_ENTRY_ID INSTALL_ENTRY_ID  ,
		           Extent1.INSTALL_ENTRY_NO INSTALL_ENTRY_NO  ,
		           Extent3.SALES_ORD_ID SALES_ORD_ID  ,
		           Extent3.SALES_ORD_NO SALES_ORD_NO  ,
		           Extent3.REF_NO REF_NO  ,
		           Extent3.CUST_PO_NO CUST_PO_NO  ,
		           TO_CHAR(Extent3.SALES_DT,'DD-MM-YYYY') SALES_DT  ,
		           TO_CHAR(Extent1.INSTALL_DT,'DD-MM-YYYY')  C1  ,
		           Extent1.INSTALL_STK_ID INSTALL_STK_ID  ,
		           Extent9.STK_CODE STK_CODE  ,
		           Extent9.STK_DESC STK_DESC  ,
		           Extent10.NAME NAME  ,
		           Extent8.CODE_ID CODE_ID  ,
		           Extent8.CODE_NAME CODE_NAME  ,
		           Extent7.CODE_ID CODEID1  ,
		           Extent7.CODE CODE  ,
		           Extent7.CODE_NAME CODENAME1  ,
		           Extent13.STUS_CODE_ID STUS_CODE_ID  ,
		           Extent13.CODE CODE1  ,
		           Extent13.NAME NAME1  ,
		           Extent14.BRNCH_ID BRNCH_ID  ,
		           Extent10.CUST_ID CUST_ID  ,
		           Extent10.NRIC NRIC  ,
		           CASE
		                WHEN ( Extent3.CUST_ADD_ID IS NOT NULL ) THEN Extent3.CUST_ADD_ID
		           ELSE 0
		              END C2  ,
		           Extent3.CUST_CNT_ID CUST_CNT_ID  ,
		           Extent2.SIRIM_NO SIRIM_NO  ,
		           Extent2.SERIAL_NO SERIAL_NO  ,
		           Extent11.USER_NAME USER_NAME  ,
		           Extent9.IS_SIRIM IS_SIRIM  ,
		           Extent9.STK_GRAD STK_GRAD  ,
		           TO_CHAR(Extent2.CRT_DT,'DD-MM-YYYY') C3  ,
		           Extent9.STK_CTGRY_ID STK_CTGRY_ID  ,
		           Extent2.DOC_REF_NO1 DOC_REF_NO1  ,
		           Extent2.DOC_REF_NO2 DOC_REF_NO2  ,
		           Extent2.ALLOW_COMM ALLOW_COMM  ,
		           Extent2.IS_TRADE_IN IS_TRADE_IN  ,
		           Extent2.REQUIRE_SMS REQUIRE_SMS  ,
		           CASE
		                WHEN ( Extent12.USER_ID IS NOT NULL ) THEN Extent12.USER_NAME
		           ELSE ' '
		              END C4  ,
		           Extent2.CRT_DT C5  ,
		           CASE
		                WHEN ( Extent2.RESULT_ID IS NOT NULL ) THEN Extent2.CT_ID
		           ELSE 0
		              END C6  ,
		           Extent15.MEM_CODE MEM_CODE  ,
		           Extent15.NAME NAME2  ,
		           Extent16.WH_LOC_ID WH_LOC_ID  ,
		           Extent4.DOC_ID DOC_ID  ,
		           Extent2.INSTALL_DT INSTALL_DT  ,
		           Extent2.NEXT_CALL_DT NEXT_CALL_DT  ,
		           Extent2.REM REM  ,
		           CASE
		                WHEN ( Extent3.CUST_BILL_ID IS NOT NULL ) THEN Extent3.CUST_BILL_ID
		           ELSE 0
		              END C7  ,
		           Extent6.CODE_NAME CODENAME2
		      FROM SAL0046D Extent1
		             LEFT JOIN SAL0047D Extent2   ON Extent1.INSTALL_ENTRY_ID = Extent2.ENTRY_ID
		             JOIN SAL0001D Extent3   ON Extent1.SALES_ORD_ID = Extent3.SALES_ORD_ID
		             LEFT JOIN CCR0006D Extent4   ON Extent1.CALL_ENTRY_ID = Extent4.CALL_ENTRY_ID
		             LEFT JOIN SAL0074D Extent5   ON Extent3.SALES_ORD_ID = Extent5.SALES_ORD_ID
		             LEFT JOIN SYS0013M Extent6   ON Extent5.MODE_ID = Extent6.CODE_ID
		             LEFT JOIN SYS0013M Extent7   ON Extent4.TYPE_ID = Extent7.CODE_ID
		             LEFT JOIN SYS0013M Extent8   ON Extent3.APP_TYPE_ID = Extent8.CODE_ID
		             LEFT JOIN SYS0026M Extent9   ON Extent1.INSTALL_STK_ID = Extent9.STK_ID
		             LEFT JOIN SAL0029D Extent10   ON Extent3.CUST_ID = Extent10.CUST_ID
		             LEFT JOIN SYS0047M  Extent11   ON Extent3.UPD_USER_ID = Extent11.USER_ID
		             LEFT JOIN SYS0047M  Extent12   ON Extent2.CRT_USER_ID = Extent12.USER_ID
		             LEFT JOIN SYS0038M Extent13   ON Extent1.STUS_CODE_ID = Extent13.STUS_CODE_ID
		             JOIN SAL0045D Extent14   ON Extent3.SALES_ORD_ID = Extent14.SALES_ORD_ID
		             LEFT JOIN ORG0001D Extent15   ON Extent2.CT_ID = Extent15.MEM_ID
		             LEFT JOIN SYS0028M Extent16   ON ( Extent15.MEM_CODE = Extent16.WH_LOC_CODE )
		             OR ( ( Extent15.MEM_CODE IS NULL )
		             AND ( Extent16.WH_LOC_CODE IS NULL ) )
		        WHERE  1=1
                    and Extent3.SALES_ORD_NO = #{salesOrderNo}
                    and Extent1.INSTALL_ENTRY_NO = #{serviceNo}
                    and rownum =1

    </select>





         <insert id="insertInstallResult" parameterType="Map">
               INSERT INTO SAL0047D  (
               RESULT_ID
               , ENTRY_ID
               , STUS_CODE_ID
               , CT_ID
               , INSTALL_DT
               , REM
               , GL_POST
               , CRT_USER_ID
               , CRT_DT
               , SIRIM_NO
               , SERIAL_NO
               , FAIL_ID
               , NEXT_CALL_DT
               , ALLOW_COMM
               , IS_TRADE_IN
               , REQUIRE_SMS
               , DOC_REF_NO1
               , DOC_REF_NO2
               , UPD_DT
               , UPD_USER_ID
               , ADJ_AMT
               , MOBILE_ID
               ,APPNT_DT
			   ,APPNT_TM
				,AS_EXCHN_YN
				,BEFOR_PRODUCT_SERIAL_NO
				,RESULT_CUST_NAME
				,RESULT_REP_EMAIL_NO
				,RESULT_ACEPT_NAME
				,SGN_DT
				,TRNSC_ID
               )
                VALUES (
                SAL0047D_RESULT_ID_SEQ.NEXTVAL
                , #{entryId}
                , #{statusCodeId}
                , #{ctid}
                , TO_DATE(#{installDate},'YYYY-MM-DD')
                , #{remark}
                , #{glpost}
                , #{creator}
                , SYSDATE
                , #{sirimNo}
                , #{serialNo}
                , #{failId}
                , TO_DATE(#{nextCallDate},'YYYY-MM-DD')
                , #{allowComm}
                , #{inTradeIn}
                , #{reqSms}
                , #{docRefNo1}
                , #{docRefNo2}
                , SYSDATE
                , #{updator}
                , #{adjAmount}
                , NULL
                ,#{appointmentDate}
				,#{appointmentTime}
				,#{asExchangeYN}
				,#{beforeProductSerialNo}
				,#{resultCustName}
				,#{resultReportEmailNo}
				,#{resultAcceptanceName}
				,#{signData}
				,#{transactionId}
                )
         </insert>



<select id="serviceHistory" parameterType="Map" resultType="egovMap">
	SELECT sales_ord_no,
	       job_Status,
	       service_No,
	       settle_Date,
	       hsr_Asr_No,
	       action_Member,
	       job_Type,
	       fail_Reason,
	       collection_Code,
	       collection_Name,
	       result_Remark,
	       filter_Code,
	       filter_Name,
	       last_Change_Date,
	       filter_Period,
	       TO_CHAR (next_Change_Date) AS next_Change_Date,
	       change_Qty,
	       part_Code,
	       part_Name,
	       part_Change_Qty,
	       AS_RESULT_ID
	  FROM (SELECT DISTINCT
	               b.SALES_ORD_NO,
	               S.AS_RESULT_STUS_ID job_Status,
	               H.AS_NO service_No,
	               TO_CHAR (S.AS_SETL_DT, 'YYYYMMDD') settle_Date,
	               S.AS_RESULT_NO hsr_Asr_No,
	               S.AS_CT_ID,
	               (SELECT MEM_CODE
	                  FROM org0001d d
	                 WHERE 1 = 1 AND d.mem_id = S.AS_CT_ID)
	                  action_Member,
	               'AS' job_Type,
	               (SELECT Extent1.RESN_DESC
	                  FROM SYS0032M Extent1
	                 WHERE     Extent1.RESN_TYPE_ID = '166'
	                       AND Extent1.STUS_CODE_ID = 1
	                       AND RESN_ID = S.AS_FAIL_RESN_ID)
	                  AS fail_Reason,
	               /*                      FN_GET_COMMCD (167, S.AS_FAIL_RESN_ID) AS fail_Reason,*/
	               S.AS_RESULT_REM result_Remark,
	               TO_NUMBER ('') collection_Code,
	               TO_CHAR ('') collection_Name,
	               C.ASR_ITM_PART_ID filter_Code,
	               C.ASR_ITM_PART_DESC filter_Name,
	               TO_CHAR (E.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD')
	                  AS last_Change_Date,
	               E.SRV_FILTER_PRIOD filter_Period,
	               C.ASR_ITM_PART_QTY change_Qty,
	               '' next_Change_Date,
	               G.STK_CODE AS part_Code,
	               G.STK_DESC part_Name,
	               BOM_DTL.COMPNT_QTY part_Change_Qty,
	               c.AS_RESULT_ID
	          FROM SVC0004D S,
	               SAL0001D B,
	               SAL0002D H,
	               SVC0005D C,
	               SAL0087D E,
	               (SELECT LOG43.MATRL_NO, LOG44.*
	                  FROM LOG0043M LOG43, LOG0044D LOG44
	                 WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
	               SYS0026M G,
	               SVC0001D H
	         WHERE     S.AS_SO_ID = B.SALES_ORD_ID
	               AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
	               AND C.ASR_ITM_PART_ID = E.SRV_FILTER_ID(+)
	               AND B.SALES_ORD_ID = H.SALES_ORD_ID
	               AND G.STK_ID = H.ITM_STK_ID
	               AND G.STK_CODE = BOM_DTL.MATRL_NO
	               AND B.SALES_ORD_ID = H.AS_SO_ID
	               AND B.SALES_ORD_NO = #{salesOrderNo}
	               AND ROWNUM <![CDATA[ < ]]> 4)
	UNION ALL
	SELECT sales_ord_no,
	       STUS_CODE_ID,
	       SVC_NO AS service_No,
	       SETL_DT AS settle_Date,
	       RST_NO AS hsr_Asr_No,
	       MEM_CODE AS action_Member,
	       'HS' AS job_Type,
	       (SELECT Extent1.RESN_DESC
	          FROM SYS0032M Extent1
	         WHERE     Extent1.RESN_TYPE_ID = '167'
	               AND Extent1.STUS_CODE_ID = 1
	               AND RESN_ID = FAIL_RESN_ID)
	          AS fail_Reason/*                                 ,FN_GET_COMMCD(167, FAIL_RESN_ID) as fail_Reason */
	       ,
	       REN_COLCT_ID AS collection_Code,
	       (SELECT Extent1.RESN_DESC
	          FROM SYS0032M Extent1
	         WHERE Extent1.resn_type_id = 174 AND resn_id = REN_COLCT_ID)
	          AS collection_Name,
	       RESULT_REM AS result_Remark,
	       BS_RESULT_PART_ID AS filter_Code,
	       BS_RESULT_PART_DESC AS filter_Name,
	       BS_RESULT_CRT_DT AS last_Change_Date,
	       SRV_FILTER_PRIOD AS filter_Period,
	       TO_CHAR (next_Change_Date) next_Change_Date,
	       BS_RESULT_PART_QTY change_Qty,
	       part_Code,
	       part_Name,
	       part_Change_Qty,
	       BS_RESULT_ID
	  FROM (  SELECT DISTINCT
	                 b.STUS_CODE_ID,
	                 b.SCHDUL_ID,
	                 b.SALES_ORD_ID,
	                 c.SALES_ORD_NO,
	                 TO_CHAR (a.SETL_DT, 'YYYYMMDD') AS SETL_DT,
	                 a.NO AS RST_NO,
	                 B.NO AS SVC_NO,
	                 a.CODY_ID,
	                 d.MEM_CODE,
	                 a.FAIL_RESN_ID,
	                 a.RESULT_REM,
	                 a.REN_COLCT_ID,
	                 e.BS_RESULT_PART_ID,
	                 e.BS_RESULT_PART_DESC,
	                 TO_CHAR (e.BS_RESULT_CRT_DT, 'YYYYMMDD') AS BS_RESULT_CRT_DT,
	                 F.SRV_FILTER_PRIOD,
	                 E.BS_RESULT_PART_QTY,
	                 '' next_Change_Date,
	                 G.STK_CODE AS part_Code,
	                 G.STK_DESC part_Name,
	                 BOM_DTL.COMPNT_QTY part_Change_Qty,
	                 e.BS_RESULT_ID
	            FROM SVC0006D a,
	                 SVC0008D b,
	                 sal0001d c,
	                 SAL0002D H,
	                 org0001d d,
	                 SVC0007D e,
	                 sal0087d f,
	                 (SELECT LOG43.MATRL_NO, LOG44.*
	                    FROM LOG0043M LOG43, LOG0044D LOG44
	                   WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
	                 SYS0026M G,
	                 svc0001d I
	           WHERE     1 = 1
	                 AND a.SCHDUL_ID = b.SCHDUL_ID
	                 AND a.sales_ord_id = c.sales_ord_id
	                 AND C.SALES_ORD_ID = H.SALES_ORD_ID
	                 AND a.CODY_ID = d.mem_id
	                 AND a.RESULT_ID = e.BS_RESULT_ID
	                 AND e.BS_RESULT_ITM_ID = f.SRV_FILTER_ID(+)
	                 AND G.STK_ID = H.ITM_STK_ID
	                 AND G.STK_CODE = BOM_DTL.MATRL_NO
	                 AND B.SALES_ORD_ID = I.AS_SO_ID
	                 AND c.sales_ord_no = #{salesOrderNo}
	        ORDER BY SETL_DT DESC) x
	 WHERE 1 = 1 AND ROWNUM <![CDATA[ < ]]> 4
</select>


<select id="getAsFilterHistoryDList" parameterType="Map" resultType="egovMap">

         SELECT     filter_Code,
                    filter_Name,
                    last_Change_Date,
                    filter_Period,
                    TO_CHAR (next_Change_Date, 'yyyymmdd') AS next_Change_Date,
                    change_Qty
            FROM(
 SELECT          C.ASR_ITM_PART_ID filter_Code,
                 C.ASR_ITM_PART_DESC filter_Name,
                 to_char(E.SRV_FILTER_PRV_CHG_DT,'YYYYMMDD') as  last_Change_Date,
                 E.SRV_FILTER_PRIOD filter_Period,
                 C.ASR_ITM_PART_QTY change_Qty,
                 add_months(E.SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD)  AS next_Change_Date
                FROM  SVC0004D S ,
                               SAL0001D B ,
                               SVC0005D C ,
                               SAL0087D E
               WHERE S.AS_SO_ID = B.SALES_ORD_ID
               AND c.AS_RESULT_ID = #{asResultId}
               AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
               AND C.ASR_ITM_PART_ID =SRV_FILTER_ID(+)
              <![CDATA[  AND ROWNUM < 4]]>
               ORDER BY S.AS_RESULT_ID ASC
               )

           </select>





<select id="getAsPartsHistoryDList" parameterType="Map" resultType="egovMap">

			SELECT  TO_CHAR (next_Change_Date) AS next_Change_Date,
			       part_Code,
			       part_Name,
			       part_Change_Qty
            FROM(
						SELECT distinct '' next_Change_Date,
						                 G.STK_CODE AS part_Code,
						                 G.STK_DESC AS part_Name,
						                 BOM_DTL.COMPNT_QTY AS  part_Change_Qty
                FROM  SVC0004D S ,
                               SAL0001D B ,
                               SVC0005D C ,
                               SAL0087D E ,
				                 SAL0002D H,
				                 ( SELECT LOG43.MATRL_NO, LOG44.*
				                      FROM LOG0043M LOG43, LOG0044D LOG44
				                     WHERE LOG43.BOM = LOG44.BOM ) BOM_DTL ,
				                 SYS0026M G                                    
               WHERE S.AS_SO_ID = B.SALES_ORD_ID
               AND c.AS_RESULT_ID = #{asResultId}
               AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
               AND C.ASR_ITM_PART_ID =SRV_FILTER_ID(+)
               AND B.SALES_ORD_ID = H.SALES_ORD_ID
               AND G.STK_ID = H.ITM_STK_ID
               and  G.STK_CODE =  BOM_DTL.MATRL_NO      
              <![CDATA[  AND ROWNUM < 4]]>               
               )

           </select>

<select id="getHsFilterHistoryDList" parameterType="Map" resultType="egovMap">

                   select     BS_RESULT_PART_ID as filter_Code
                                ,BS_RESULT_PART_DESC as filter_Name
                                ,BS_RESULT_CRT_DT as last_Change_Date
                                ,SRV_FILTER_PRIOD as filter_Period
                                ,to_char(to_date(next_Change_Date,'yy/mm/dd'),'yyyymmdd') as next_Change_Date
                                ,BS_RESULT_PART_QTY change_Qty
                    from (select distinct a.SETL_DT
                                ,a.NO
                                ,e.BS_RESULT_PART_ID
                                ,e.BS_RESULT_PART_DESC
                                ,to_char(e.BS_RESULT_CRT_DT,'YYYYMMDD')as BS_RESULT_CRT_DT
                                ,F.SRV_FILTER_PRIOD
                                ,E.BS_RESULT_PART_QTY
                                ,to_char(add_months(e.BS_RESULT_CRT_DT, SRV_FILTER_PRIOD))  AS next_Change_Date
                        from SVC0006D a
                                ,SVC0008D b
                                ,sal0001d c
                                ,org0001d d
                                ,SVC0007D e
                                ,sal0087d f
                        where 1=1
                        and a.SCHDUL_ID = b.SCHDUL_ID
                        and a.sales_ord_id = c.sales_ord_id
                        and a.CODY_ID = d.mem_id
                        and a.RESULT_ID = e.BS_RESULT_ID
                        AND e.BS_RESULT_PART_ID =f.SRV_FILTER_ID(+)
                        and e.BS_RESULT_ID = #{bsResultId}
                        order by SETL_DT desc ) x
                  where 1=1
                               <![CDATA[  AND ROWNUM < 4]]>

           </select>

<select id="getHsPartsHistoryDList" parameterType="Map" resultType="egovMap">

            select              to_char(next_Change_Date) next_Change_Date
                                ,part_Code
                                ,part_Name
                                ,part_Change_Qty
                    from (select distinct '' next_Change_Date,
							                 G.STK_CODE AS  part_Code,
							                 G.STK_DESC AS part_Name,
							                 BOM_DTL.COMPNT_QTY  AS part_Change_Qty
                        from SVC0006D a
                                ,SVC0008D b
                                ,sal0001d c
                                ,SAL0002D H 
                                ,org0001d d
                                ,SVC0007D e
                                ,sal0087d f
				                ,( SELECT LOG43.MATRL_NO, LOG44.*
				                      FROM LOG0043M LOG43, LOG0044D LOG44
				                     WHERE LOG43.BOM = LOG44.BOM ) BOM_DTL
				                ,SYS0026M G                     
				                ,svc0001d I  
                        where 1=1
                        and a.SCHDUL_ID = b.SCHDUL_ID
                        and a.sales_ord_id = c.sales_ord_id
                        AND C.SALES_ORD_ID = H.SALES_ORD_ID
                        and a.CODY_ID = d.mem_id
                        and a.RESULT_ID = e.BS_RESULT_ID
                        AND e.BS_RESULT_ITM_ID =f.SRV_FILTER_ID(+)
                        <!-- and c.sales_ord_no = #{SALES_ORD_NO} -->
                        AND G.STK_ID = H.ITM_STK_ID
                        and  G.STK_CODE =  BOM_DTL.MATRL_NO 
                        AND B.SALES_ORD_ID = I.AS_SO_ID 
                        and e.BS_RESULT_ID = #{bsResultId}
                         ) x
                  where 1=1
                               <![CDATA[  AND ROWNUM < 4]]>

           </select>


 <!--          <resultMap id="rcListMap" type="egovMap"></resultMap>
           <select id="getRentalCustomerList" parameterType="Map"  statementType="CALLABLE">
                 {
                    call  SP_MOBILE_SELT_RC_TRGET(
                      #{userId},
                      #{searchType},
                      #{searchKeyword},
                      #{cv_1, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=rcListMap})

                } -->

            <select id="getRentalCustomerList" parameterType="Map" resultType="egovMap">
        <![CDATA[ 
				    SELECT A.NAME AS cust_Name
				          , SOM.SALES_ORD_NO AS sales_Order_No
				          , CD.CODE_NAME AS payment_Mode  
				          , X.TARGET AS target_Amount
				          , X.AMT AS amount
				          , B.MODE_ID AS payment_Mode_Id
				       FROM ( SELECT A.ACC_DEBT_ORD_ID SALES_ORD_ID  ,
				                     A.ACC_DEBT_SRV_CNTRCT_ID CNTRCT_ID  ,
				                     (CASE 
				                           WHEN A.ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN A.ACC_DEBT_SRV_CNTRCT_NO
				                           ELSE A.ACC_DEBT_ORD_NO
				                        END) REF_NO  ,
				                     A.ACC_DEBT_YEAR   ,
				                     A.ACC_DEBT_MONTH  ,
				                     TRUNC(S.ACC_DEBT_SUB_OPNG_COLCT_TRGET,2) TARGET  , 
				                     TRUNC(S.ACC_DEBT_SUB_CURR_COLCT,2) + TRUNC(S.ACC_DEBT_SUB_CURR_ADJ,2) AMT  ,
				                     A.ACC_DEBT_ORD_TRGET_CODY_ID MEM_ID  ,
				                     TRUNC(A.ACC_DEBT_COLCT_UPD_DT) UPD_DT ,
				                     B.MEM_CODE 
				                FROM PAY0052S A
				                     JOIN PAY0053S S   ON S.ACC_DEBT_ORD_ID = A.ACC_DEBT_ORD_ID
				                     AND S.ACC_DEBT_SRV_CNTRCT_ID = A.ACC_DEBT_SRV_CNTRCT_ID
				                     JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID
				               WHERE A.ACC_DEBT_OPNG_RENTAL_STUS = 'REG'
				                 AND A.ACC_DEBT_OPNG_APP_TYPE_ID = 66
				                 AND S.ACC_DEBT_SUB_OPNG_OTSTND_AGING < 5
				                 AND S.ACC_DEBT_SUB_OPNG_COLCT_TRGET > 0
				              UNION ALL 
				              SELECT ACC_DEBT_ORD_ID ,
				                     ACC_DEBT_SRV_CNTRCT_ID ,
				                     (CASE 
				                           WHEN ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN ACC_DEBT_SRV_CNTRCT_NO
				                           ELSE ACC_DEBT_ORD_NO
				                     END) ,
				                     ACC_DEBT_YEAR ,
				                     ACC_DEBT_MONTH ,
				                     TRUNC(ACC_DEBT_SUB_OPNG_COLCT_TRGET,2) ,
				                     TRUNC(ACC_DEBT_SUB_CURR_COLCT,2) ,
				                     ACC_DEBT_ORD_TRGET_CODY_ID ,
				                     TRUNC(ACC_DEBT_COLCT_UPD_DT) ,
				                     B.MEM_CODE
				                FROM ( SELECT *
				                         FROM PAY0150D A
				                        WHERE A.ACC_YM BETWEEN  TO_CHAR(FN_GET_LAST_DAY_MONTH(ADD_MONTHS(SYSDATE, -2)),'YYYYMM')  AND  TO_CHAR(FN_GET_LAST_DAY_MONTH(ADD_MONTHS(SYSDATE, -1)),'YYYYMM') ) A
				                      JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID ) X 
				            LEFT JOIN SAL0074D RPS   ON RPS.SALES_ORD_ID = X.SALES_ORD_ID
				            AND RPS.SVC_CNTRCT_ID = X.CNTRCT_ID
				            LEFT JOIN SYS0013M CD   ON Cd.CODE_ID = RPS.MODE_ID
				            LEFT JOIN SAL0001D SOM   ON SOM.SALES_ORD_ID = X.SALES_ORD_ID    
				            LEFT JOIN SAL0027D CC   ON CC.CUST_CNTC_ID = SOM.CUST_CNT_ID
				            LEFT JOIN SAL0071D SC   ON SC.SALES_ORD_ID = X.SALES_ORD_ID
				            LEFT JOIN SAL0029D A    ON A.CUST_ID = SOM.CUST_ID 
				            JOIN SAL0074D B ON B.SALES_ORD_ID = SOM.SALES_ORD_ID 
				      WHERE 1 = 1
				        AND X.ACC_DEBT_YEAR = EXTRACT(YEAR FROM SYSDATE)   
				        AND X.ACC_DEBT_MONTH = EXTRACT(MONTH FROM SYSDATE)
				        AND X.MEM_CODE = #{userId}
				        ]]>
                   <if test="searchKeyword != null and searchKeyword != ''">
                    <choose>
                        <when test="searchType == 2">
                             AND A.NAME = LIKE  '%'||#{searchKeyword}||'%'
                        </when>
                        <when test="searchType == 1">
                            AND SOM.SALES_ORD_NO like '%'|| #{searchKeyword} ||'%'
                        </when>
                        <otherwise>
                          AND 1 = 1
                        </otherwise>
                    </choose>
                   </if>      
				         
				        

                        
<!--             SELECT C.NAME as cust_name,
                   B.SALES_ORD_NO as sales_order_no,
                   E.CODE_NAME as payment_mode,
                   NVL(B.MTH_RENT_AMT , 0) as target_amount,
                   NVL(A.RENT_AMT , 0) as amount,
                   to_char(E.CODE_ID)  as payment_Mode_Id
              FROM PAY0022D A,
                   SAL0001D B,
                   SAL0029D C,
                   SAL0074D D,
                   SYS0013M E,
                   ORG0001D F
             WHERE     A.rent_so_id = B.sales_ord_id
                   AND B.cust_id = C.cust_id
                   AND B.sales_ord_id = D.sales_ord_id
                   AND D.MODE_ID = E.CODE_ID(+)
                   AND E.CODE_MASTER_ID = 19
                   AND B.MEM_ID = F.MEM_ID
                   AND F.MEM_CODE = #{userId}
                   <if test="searchKeyword != null and searchKeyword != ''">
                    <choose>
                        <when test="searchType == 2">
                            AND C.NAME LIKE  '%'||#{searchKeyword}||'%'
                        </when>
                        <when test="searchType == 1">
                            AND B.sales_ord_no like '%'|| #{searchKeyword} ||'%'
                        </when>
                        <otherwise>
                          AND 1 = 1
                        </otherwise>
                    </choose>
                   </if> -->
         </select>


         <select id="selectOutstandingResult" parameterType="Map" resultType="egovMap">
             <![CDATA[      select *
                    from (   SELECT A.SALES_ORD_ID ,
                               A.SALES_ORD_NO ,
                              A.LAST_UP_DT ,
                              SUM(NVL(B.AMT, 0))  sum_Rpf  ,
                              SUM(NVL(C.AMT, 0))  sum_Rpt  ,
                              SUM(NVL(D.AMT, 0))  sum_Rhf  ,
                              SUM(NVL(E.AMT, 0))  sum_Rental  ,
                              SUM(NVL(F.AMT, 0))  sum_Adjust  ,
                              SUM(A.TOT)  TOT  
                         FROM ( SELECT M.SALES_ORD_ID ,m.sales_ord_no,
                                       UTILS.CONVERT_TO_NUMBER(SUM(L.RENT_AMT) ,10,2) TOT  ,
                                       MAX(L.RENT_DT_TM)  LAST_UP_DT  
                                FROM SAL0001D M
                                       JOIN PAY0022D L   ON L.RENT_SO_ID = M.SALES_ORD_ID
                                 WHERE  M.APP_TYPE_ID = 66
                                  and m.mem_id = (select MEM_id
                                        from org0001d 
                                        where mem_code = #{userId})
                                  GROUP BY M.SALES_ORD_ID,m.sales_ord_no ) A
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT  
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 161 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                        and m.mem_id = (select MEM_id
                                                                        from org0001d 
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) B   ON B.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT  
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 162 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d 
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) C   ON C.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT  
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 1059 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d 
                                                                        where mem_code = #{userId})                                  
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) D   ON D.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT X.RENT_SO_ID ,
                                                   SUM(X.AMT)  AMT  
                                            FROM ( SELECT L.RENT_SO_ID ,
                                                          SUM(L.RENT_AMT)  AMT  
                                                   FROM PAY0022D L
                                                          JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                    WHERE  L.RENT_DOC_TYPE_ID NOT IN ( 155,157,161,162,1059 )
                                                             AND L.RENT_SO_ID <> 0
                                                             AND M.APP_TYPE_ID = 66
                                                              and m.mem_id = (select MEM_id
                                                                                from org0001d 
                                                                                where mem_code = #{userId})                                         
                                                     GROUP BY L.RENT_SO_ID
                                                   UNION ALL 
                                                   SELECT L.RENT_SO_ID ,
                                                          SUM(L.RENT_AMT)  AMT  
                                                   FROM PAY0022D L
                                                          JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                    WHERE  L.RENT_DOC_NO LIKE 'ACN%'
                                                             AND L.RENT_SO_ID <> 0
                                                             AND M.APP_TYPE_ID = 66
                                                              and m.mem_id = (select MEM_id
                                                                                from org0001d 
                                                                                where mem_code = #{userId})                                         
                                                     GROUP BY L.RENT_SO_ID ) X
                                              GROUP BY X.RENT_SO_ID ) E   ON E.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   SUM(L.RENT_AMT)  AMT  
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 155,157 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      AND L.RENT_DOC_NO NOT LIKE 'ACN%'
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d 
                                                                        where mem_code = #{userId})                                     
                                              GROUP BY L.RENT_SO_ID ) F   ON F.RENT_SO_ID = A.SALES_ORD_ID
                         GROUP BY A.SALES_ORD_ID,A.LAST_UP_DT, a.sales_ord_no
                         )
                         where 1=1
                         and SALES_ORD_NO = #{salesOrderNo}    ]]>
         </select>



         <select id="selectOutstandingResultDetailList" parameterType="Map" resultType="egovMap">
            SELECT A.CODE_NAME AS TYPE,
                   A.RENT_DOC_NO AS DOC_NO,
                   0 AS NALANCE_AMT,
                   NVL (SUM (CASE WHEN A.MODE_ID = '132' THEN A.RENT_AMT  END ), 0) DEBIT_AMT,
                   NVL(SUM (CASE WHEN A.MODE_ID = '131' THEN A.RENT_AMT END ) , 0) CREDIT_AMT,
                   SUM (NVL(A.RENT_INST_AMT , 0)) amount,               
                   TO_CHAR (INSTALL_ENTRY_NO) AS INSTALL_NO,
                    TO_CHAR (A.INSTALL_DT, 'YYYYMMDD') as EVENT_DATE
              FROM (SELECT /*+ USE_NL(A B C  D E )     */
                            C.CODE_NAME,
                             D.RENT_DOC_NO,
                             D.RENT_AMT,
                             A.RENT_INST_AMT,
                             A.RENT_INST_DT,
                             E.MODE_ID,
                             a.RENT_INST_NO,
                             g.INSTALL_ENTRY_NO,
                             g.INSTALL_DT
                        FROM SAL0070D A,
                             SAL0001D B,
                             SYS0013M C,
                             PAY0022D D,
                             SAL0074D E,
                             ORG0001D F,
                             SAL0046D g
                       WHERE     a.sales_ord_id = b.sales_ord_id
                             AND a.rent_inst_insert_year = 2017
                             AND A.SALES_ORD_ID = D.RENT_SO_ID
                             AND A.RENT_INST_TYPE_ID = C.CODE_ID(+)
                             AND b.app_type_id = 66
                             AND C.CODE_MASTER_ID = 37
                             AND D.RENT_AMT > 0
                             AND E.SALES_ORD_ID = A.sales_ord_id
                             AND B.MEM_ID = F.MEM_ID
                             AND A.SALES_ORD_ID = g.SALES_ORD_ID
                             AND F.MEM_CODE LIKE ('CD%')
                             AND F.MEM_CODE = #{userId}
                             AND B.sales_ord_ID =  (SELECT SALES_ORD_ID
                                                    FROM SAL0001D
                                                    WHERE SALES_ORD_NO = #{salesOrderNo}) 
                                                          ) A
            GROUP BY A.CODE_NAME, A.RENT_DOC_NO ,A.INSTALL_DT,a.INSTALL_ENTRY_NO
         </select>





                   <insert id="insertHsReServiceLog" parameterType="Map">
                            INSERT INTO SVC0036T (
                               RESULT_SEQ
                                ,CRT_USER_ID
                                ,SALES_ORD_ID
                                ,SVC_NO
                                ,AS_APPNT_DT
                                ,AS_APPNT_TM
<!--                                ,TRNSC_ID -->
                                ,TRAN_STUS_CD
                            ) VALUES (
                               SVC0036T_ID_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               ,  to_date(#{appointmentDate},'YYYYMMDD')
                               , #{appointmentTime}
                               , 'N'
                            )
                    </insert>



                    <insert id="insertAsReServiceLog" parameterType="Map">
				            INSERT INTO SVC0037T (
				               RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,AS_APPNT_DT
								,AS_APPNT_TM
<!-- 								,TRNSC_ID -->
								,TRAN_STUS_CD
				            ) VALUES (
				               SVC0037T_ID_SEQ.NEXTVAL
				               , #{userId}
				               , #{salesOrderNo}
				               , #{serviceNo}
				               ,  to_date(#{appointmentDate},'YYYYMMDD')
				               , #{appointmentTime}
				               , 'N'
				            )
                    </insert>



                <insert id="insertInsReServiceLog" parameterType="Map">
                            INSERT INTO SVC0038T (
                               RESULT_SEQ
                                ,CRT_USER_ID
                                ,SALES_ORD_ID
                                ,SVC_NO
                                ,AS_APPNT_DT
                                ,AS_APPNT_TM
<!--                                ,TRNSC_ID -->
                                ,TRAN_STUS_CD
                            ) VALUES (
                               SVC0038T_ID_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               ,  to_date(#{appointmentDate},'YYYYMMDD')
                               , #{appointmentTime}
                               , 'N'
                            )
                </insert>


                <insert id="insertPrReServiceLog" parameterType="Map">
                            INSERT INTO SVC0040T (
                               RESULT_SEQ
                                ,CRT_USER_ID
                                ,SALES_ORD_ID
                                ,SVC_NO
                                ,AS_APPNT_DT
                                ,AS_APPNT_TM
<!--                                ,TRNSC_ID -->
                                ,TRAN_STUS_CD
                            ) VALUES (
                               SVC0040T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               ,  to_date(#{appointmentDate},'YYYYMMDD')
                               , #{appointmentTime}
                               , 'N'
                            )
                </insert>

                <insert id="insertHsFailServiceLog" parameterType="Map">
                            INSERT INTO SVC0041T (
                               RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,FAIL_RESN_CODE
						<!-- 		,TRNSC_ID -->
								,TRAN_STUS_CD
                            ) VALUES (
                               SVC0041T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               , #{failReasonCode}
                               , 'N'
                            )
                </insert>

                <insert id="insertAsFailServiceLog" parameterType="Map">
                            INSERT INTO SVC0042T (
                               RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,FAIL_RESN_CODE
						<!-- 		,TRNSC_ID -->
								,TRAN_STUS_CD
                            ) VALUES (
                               SVC0042T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               , #{failReasonCode}
                               , 'N'
                            )
                </insert>

                <insert id="insertInsFailServiceLog" parameterType="Map">
                            INSERT INTO SVC0043T (
                               RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,FAIL_RESN_CODE
						<!-- 		,TRNSC_ID -->
								,TRAN_STUS_CD
                            ) VALUES (
                               SVC0043T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               , #{failReasonCode}
                               , 'N'
                            )
                </insert>

                <insert id="insertPrFailServiceLog" parameterType="Map">
                            INSERT INTO SVC0044T (
                               RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,FAIL_RESN_CODE
						<!-- 		,TRNSC_ID -->
								,TRAN_STUS_CD
                            ) VALUES (
                               SVC0044T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               , #{failReasonCode}
                               , 'N'
                            )
                </insert>

                <insert id="insertCanSMSServiceLog" parameterType="Map">
                            INSERT INTO SVC0045T (
                                RESULT_SEQ
								,CRT_USER_ID
								,SALES_ORD_ID
								,SVC_NO
								,SENDER_TEL_NO
								,RCIVER_TEL_NO
								<!-- ,TRNSC_ID -->
								,TRAN_STUS_CD
                            ) VALUES (
                               SVC0045T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{serviceNo}
                               , #{senderTelNo}
                               , #{receiverTelNo}
                               , 'N'
                            )
                </insert>

                <insert id="insertASRequestRegistrationLogs" parameterType="Map">
                            INSERT INTO SVC0049T (
                                RESULT_SEQ
								,USER_ID
								,SALES_ORD_NO
								,CUST_ID
								,PRODUCT_CODE
								,DEFECT_CODE_ID
								,RESULT_REM
							<!-- 	,TRNSC_ID -->
								,TRAN_STUS_CD

                            ) VALUES (
                               SVC0049T_RESULT_SEQ.NEXTVAL
                               , #{userId}
                               , #{salesOrderNo}
                               , #{customerId}
                               , #{productCode}
                               , #{defectCodeId}
                               , #{resultRemark}
                               , 'N'
                            )

                </insert>

               <insert id="insertASRequestRegist" parameterType="Map">
					insert into SVC0001D (
					                AS_ID,AS_NO,AS_SO_ID
					                ,AS_MEM_ID,AS_REQST_DT,AS_RQST_REM
					                ,AS_MALFUNC_ID,AS_MALFUNC_RESN_ID,AS_TYPE_ID
					                ,AS_CRT_USER_ID,AS_CRT_DT ,AS_UPD_USER_ID
					                ,AS_UPD_DT,AS_STUS_ID
					)
					values( SVC0001D_AS_ID_SEQ.nextval , FN_GET_DOCNO(17)  ,(select SALES_ORD_ID from sal0001d where SALES_ORD_NO = #{salesOrderNo})
					            ,(select mem_id from org0001d where mem_code = #{userId}),  sysdate, #{resultRemark}
					            ,#{errReasonId}, #{errTypeId}, '2703'
					            ,(select mem_id from org0001d where mem_code = #{userId}),sysdate,(select mem_id from org0001d where mem_code = #{userId})
					            ,sysdate,'1'
                            )

                </insert>

                  <update id="updateInsReAppointmentReturnResult" parameterType="Map">
                         update SAL0046D
                            set APPNT_DT = to_date(#{appointmentDate},'YYYYMMDD'),
                                APPNT_TM = #{appointmentTime},
                                SESION_CODE = #{sesionCode},
                                UPD_DT = sysdate,
                                UPD_USER_ID = (select mem_id
                                                            from org0001d
                                                            where mem_code = #{userId})
                            where 1=1
                              and SAL0046D.INSTALL_ENTRY_NO = #{serviceNo}
                              and SAL0046D.SALES_ORD_ID = (select sales_ord_id
                                                                                 from sal0001d
                                                                                 where sales_ord_no =  #{salesOrderNo})

                    </update>

                   <update id="updateHsReAppointmentReturnResult" parameterType="Map">
                        update SVC0008D
                            set APPNT_DT = to_date(#{appointmentDate},'YYYYMMDD'),
                                APPNT_TM = #{appointmentTime},
                                UPD_DT = sysdate,
                                UPD_USER_ID = (select mem_id
                                               from org0001d
                                               where mem_code = #{userId})
                            where 1=1
                              and SVC0008D.NO = #{serviceNo}
                              and SVC0008D.SALES_ORD_ID = (select sales_ord_id
                                                           from sal0001d
                                                           where sales_ord_no =  #{salesOrderNo})
                    </update>




                   <update id="insertHsFailJobResult" parameterType="Map">
						 update SVC0006D
						    set  FAIL_RESN_ID = #{failReasonCode},
						          RESULT_STUS_CODE_ID = '21',
						        RESULT_UPD_DT = sysdate,
						        RESULT_UPD_USER_ID = (select mem_id
						                                   from org0001d
						                                   where mem_code = #{userId})
						    where 1=1
					        and result_id = (select b.RESULT_ID
					                                    from (
					                                        select a.SCHDUL_ID
					                                        from SVC0008D a
					                                        where 1=1
					                                        and a.NO = #{serviceNo}
					                                        and a.SALES_ORD_ID =  (select sales_ord_id
					                                                                           from sal0001d
					                                                                           where sales_ord_no =  #{salesOrderNo})
                                                            and a.CODY_ID = (select mem_id
                                                                               from org0001d
                                                                               where mem_code =#{userId})                                    
					                                    )a
					                                    ,  SVC0006D b
					                             where 1=1
					                             and a.SCHDUL_ID    = b.SCHDUL_ID)
                    </update>



                   <update id="upDateHsFailJobResultM" parameterType="Map">
							 update SVC0008D
							    set STUS_CODE_ID = '21',
							        CRT_DT = sysdate,
							        CRT_USER_ID = (select mem_id
							                                   from org0001d
							                                   where mem_code = #{userId})
							where 1=1
							and NO = #{serviceNo}
							and SALES_ORD_ID =  (select sales_ord_id
							                                   from sal0001d
							                                   where sales_ord_no =  #{salesOrderNo}      )
                    </update>




                    <update id="insertAsFailJobResult" parameterType="Map">
						update SVC0004D
						 set  AS_FAIL_RESN_ID = #{failReasonCode},
						               AS_RESULT_STUS_ID = '21',
						              AS_RESULT_UPD_DT = sysdate,
						              AS_RESULT_UPD_USER_ID = (select mem_id
						                                       from org0001d
						                                       where mem_code = #{userId})
						  where AS_ENTRY_ID = (
						                        select AS_ID
						                        from SVC0001D
						                        where 1=1
						                        and as_so_id  = (select sales_ord_id
						                                                    from sal0001d
						                                                    where 1=1
						                                                    and sales_ord_no = #{salesOrderNo})
                                                 and as_no  = #{serviceNo}
                                                 and as_mem_id = (select as_mem_id
                                                                    from org0001d
                                                                    where mem_code = #{userId})
                                                )                    

                    </update>


                   <update id="upDatetAsFailJobResultM" parameterType="Map">
						 update SVC0001D
						        set AS_STUS_ID = '21',
						            AS_UPD_DT = sysdate,
						            AS_UPD_USER_ID = (select mem_id
						                                       from org0001d
						                                       where mem_code = #{userId})
						    where 1=1
						    and AS_NO = #{serviceNo}
						    and AS_SO_ID =  (select sales_ord_id
						                                       from sal0001d
						                                       where sales_ord_no =  #{salesOrderNo} )

                    </update>



                    <update id="insertInstallFailJobResult" parameterType="Map">
					        update SAL0047D
					        set  FAIL_ID = #{failReasonCode},
					              STUS_CODE_ID = '21',
                                  SERIAL_NO = #{serialNo},
					              UPD_DT = sysdate,
					              UPD_USER_ID = (select mem_id
					                                       from org0001d
					                                       where mem_code = #{userId})
					    where entry_id = (    select INSTALL_ENTRY_ID
					                                        from     SAL0046D a
					                                        where 1=1
					                                         and sales_ord_id  = (select sales_ord_id
			                                                                        from sal0001d
			                                                                        where 1=1
			                                                                        and sales_ord_no = #{salesOrderNo})
                                                               and INSTALL_ENTRY_NO = #{serviceNo}
                                                               and CT_ID = (select mem_id
                                                                              from org0001d
                                                                              where mem_code = #{userId})
                                                                   )
                    </update>

                   <update id="upDateInstallFailJobResultM" parameterType="Map">
						 update SAL0046D
						        set STUS_CODE_ID = '21',
						            UPD_DT = sysdate,
						            UPD_USER_ID = (select mem_id
						                                       from org0001d
						                                       where mem_code = #{userId})
						    where 1=1
						    and INSTALL_ENTRY_NO = #{serviceNo}
						    and SALES_ORD_ID =  (select sales_ord_id
						                                       from sal0001d
						                                       where sales_ord_no =  #{salesOrderNo}  )
                    </update>

       <select id="getASRequestResultList" parameterType="Map" resultType="egovMap">
					SELECT
					 to_char(B.MEM_CODE) as MEM_CODE
					 , to_char(F.NAME) AS cust_Name
					 , to_char(A.AS_NO) AS as_request_No
					 , TO_CHAR(A.AS_REQST_DT, 'YYYYMMDD') AS as_request_Date
					 , to_char(C.SALES_ORD_NO) AS sales_Order_No
					 , decode(A.AS_STUS_ID, '1', 'Active', '4', 'Completed', '21', 'Failed', '10', 'Cancelled', A.AS_STUS_ID) AS as_Request_Status
					 , to_char(E.STK_DESC) AS product_Name
					 , to_char(E.STK_CODE) AS product_Code
					 , to_char(C.CUST_ID) AS customer_Id
					FROM
					 SVC0001D A
					 , ORG0001D B
					 , SAL0001D C
					 , SAL0002D D
					 , SYS0026M E
					 , SAL0029D F
					WHERE A.AS_MEM_ID = B.MEM_ID
					AND A.AS_SO_ID = C.SALES_ORD_ID
					AND C.SALES_ORD_ID = D.SALES_ORD_ID
					AND D.ITM_STK_ID = E.STK_ID
					AND C.CUST_ID = F.CUST_ID
					AND A.AS_TYPE_ID = '2703'
					AND B.MEM_CODE = #{userId}
					AND trunc(A.AS_REQST_DT) between  to_date(#{searchFromDate},'yyyymmdd') AND  to_date(#{searchToDate},'yyyymmdd')


<!-- 					SELECT to_char(D.NAME) AS cust_Name
					        ,to_char(B.SALES_ORD_NO) AS sales_Order_No
					        ,to_char(D.CUST_ID) AS customer_Id
					        ,to_char(A.AS_NO) AS AS_Request_No
					        ,to_char(A.AS_REQST_DT) AS as_Request_Date
					        ,to_char(A.AS_STUS_ID) AS as_Request_Status
					        ,to_char(F.STK_CODE) AS product_Code
					        ,to_char(F.STK_DESC) AS   product_Name
					        ,to_char(A.AS_MEM_ID)
					FROM SVC0001D A
					        , SAL0001D B
					        , SAL0002D C
					        ,SAL0029D D
					        ,LOG0001M E
					        ,SYS0026M F
					WHERE 1=1
					AND A.AS_SO_ID = B.SALES_ORD_ID
					AND B.SALES_ORD_ID = C.SALES_ORD_ID
					AND B.CUST_ID = D.CUST_ID
					AND C.ITM_STK_ID = E.BOM_STK_ID
					AND E.BOM_PART_ID = F.STK_ID
					and a.AS_REQST_DT BETWEEN to_date(#{searchFromDate},'yyyymmdd') AND  to_date(#{searchToDate},'yyyymmdd')
					AND A.AS_MEM_ID = (SELECT MEM_ID
	                                    FROM ORG0001D
	                                    WHERE 1=1
	                                    AND MEM_CODE = #{userId}) -->

         </select>

       <select id="getASRequestCustList" parameterType="Map" resultType="egovMap">
				SELECT
				   to_char(C.MEM_CODE) AS USER_ID
				   , to_char(E.NAME) AS cust_Name
				   , to_char(E.CUST_ID) AS customer_Id
				   , CASE WHEN E.TYPE_ID = 964 THEN to_char(E.NRIC)
				     ELSE ''
				     END AS cust_Nric_No
				   , CASE WHEN E.TYPE_ID = 965 THEN to_char(E.NRIC)
				     ELSE ''
				     END AS cust_Company_No
				   , TO_CHAR(E.TYPE_ID) AS customer_Type
				   , to_char(A.SALES_ORD_NO) AS sales_Order_No
				   , to_char(D.STK_CODE) AS product_Code
				   , to_char(D.STK_ID) AS product_Id
				   , to_char(D.STK_DESC) AS product_Name
				   , UPPER(to_char(J.SERIAL_NO)) AS serial_No
				FROM
				 SAL0001D A
				 , SAL0002D B
				 , ORG0001D C
				 , SYS0026M D
				 , SAL0029D E
				 , (SELECT * FROM
				  (
				   SELECT SALES_ORD_ID, INSTALL_ENTRY_ID,
				    ROW_NUMBER() OVER(PARTITION BY SALES_ORD_ID ORDER BY CRT_DT DESC) AS DUM_SEQ
				   FROM SAL0046D
				  ) SAL46D
				 WHERE DUM_SEQ = 1 ) F
				 , (SELECT * FROM
				  (
				   SELECT ENTRY_ID, SERIAL_NO,
				    ROW_NUMBER() OVER(PARTITION BY ENTRY_ID ORDER BY CRT_DT DESC) AS DUM_SEQ
				   FROM SAL0047D
				  ) SAL47D
				 WHERE DUM_SEQ = 1 ) J
				WHERE A.SALES_ORD_ID = B.SALES_ORD_ID
				AND A.MEM_ID = C.MEM_ID
				AND B.ITM_STK_ID = D.STK_ID
				AND A.CUST_ID = E.CUST_ID
				AND B.SALES_ORD_ID = F.SALES_ORD_ID(+)
				AND F.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
				AND ROWNUM <![CDATA[< ]]> 201
                <choose>
                   <when test= 'searchType == "1" and searchType != null and searchType != "" '>
                        AND A.SALES_ORD_NO LIKE (#{searchKeyword})  || '%'
                   </when>
                   <when test ='searchType == "2" and searchType != null and searchType != "" '>
                        AND E.NAME LIKE (#{searchKeyword}) || '%'
                   </when>
                   <when test ='searchType == "3" and searchType != null and searchType != "" '>
                        AND E.NRIC LIKE (#{searchKeyword}) || '%'
                   </when>
                   <when test ='searchType == "4" and searchType != null and searchType != "" '>
                        AND E.NAME LIKE (#{searchKeyword}) || '%'
                   </when>
                    <otherwise>

				    </otherwise>
<!--                    <if test="searchType != null and   searchType != '' and  ">

                   </if>
                    <if test="searchType != null and   searchType != '' and searchType == '2' ">
                       AND E.NAME LIKE #{searchKeyword}
                    </if>
                    <if test="searchType != null and   searchType != '' and searchType == '3' ">
                       AND E.NRIC LIKE #{searchKeyword}
                    </if>
                    <if test="searchType != null and   searchType != '' and searchType == '4' ">
                       AND E.NRIC LIKE #{searchKeyword}
                    </if> -->


                </choose>
         </select>
         
         
       <update id="updateState_LOG0038D" parameterType="Map">
				UPDATE  LOG0038D
					SET    STUS_CODE_ID   = '4',
					         UPD_DT             = sysdate,
					         UPD_USER_ID     = (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId})
				WHERE  retn_no   = #{serviceNo}
       </update>
       
       <select id="getRetnCrtUserId" parameterType="Map" resultType="java.lang.String">
         SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{stkRetnCrtUserId}
      </select>
          
       <insert  id="insert_LOG0039D" parameterType="Map">
                INSERT INTO LOG0039D (
							   STK_RETN_RESULT_ID, STK_RETN_ID, STK_RETN_STUS_ID, 
							   STK_RETN_STK_IS_RET, STK_RETN_DT, STK_RETN_REM, 
							   STK_RETN_RESN_ID, STK_RETN_CC_ID, STK_RETN_CRT_DT, 
							   STK_RETN_CRT_USER_ID, STK_RETN_UPD_DT, STK_RETN_UPD_USER_ID, 
							   STK_RETN_RESULT_IS_SYNCH, STK_RETN_ALLOW_COMM, STK_RETN_CT_MEM_ID, 
							   CHECKIN_DT, CHECKIN_TM, CHECKIN_GPS, 
							   SIGN_DATA, SIGN_REG_DT, SIGN_REG_TM, 
							   OWNER_CODE, RESULT_CUST_NAME, RESULT_ICMOBILE_NO, 
							   RESULT_RPT_EMAIL_NO, RESULT_ACEPT_NAME) 
							VALUES (
									       LOG0039D_STK_RETN_RESULT_ID.nextval, 
									       (select  STK_RETN_ID  from LOG0038D where  retn_no =#{serviceNo}), 
									       #{stkRetnStusId}, 
									       #{stkRetnStkIsRet}, 
									       sysdate, 
									       #{stkRetnRem}, 
									       #{stkRetnResnId}, 
									       #{stkRetnCcId}, 
									       sysdate, 
									       (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{stkRetnCrtUserId}) , 
									       sysdate, 
									      (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{stkRetnCrtUserId}) , 
									       #{stkRetnResultIsSynch}, 
									       #{stkRetnAllowComm}, 
									       (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{stkRetnCrtUserId}) , 
									       to_char( to_date(#{checkinDt},'yyyymmdd') ,'yyyymmdd'), 
									       #{checkinTm}, 
									       #{checkinGps}, 
									       #{signData},   
									       to_char( to_date( #{signRegDt},'yyyymmdd') ,'yyyymmdd'), 
									       #{signRegTm}, 
									       #{ownerCode}, 
									       #{resultCustName},    
									       #{resultIcmobileNo}, 
									       #{resultRptEmailNo},    
									       #{resultAceptName}
							   )
       </insert>
         
         
     <update id="updateAppTm_LOG0038D" parameterType="Map">
            UPDATE LOG0038D
               SET APP_DT = TO_DATE (#{appointmentDate}, 'YYYYMMDD'),
                   APP_TM =
                      TO_DATE ( (#{appointmentDate} || ' ' || #{appointmentTime} || '00'),
                               'YYYYMMDD HH24MISS'),
                   UPD_DT = SYSDATE,
                   UPD_USER_ID =
                      (SELECT MEM_ID
                         FROM ORG0001D
                        WHERE MEM_CODE = #{userId}),
                   RT_SESION_CODE =
                      (CASE
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 0
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 10)
                          THEN
                             'M'
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 10
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 14)
                          THEN
                             'A'
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 14
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 19)
                          THEN
                             'E'
                          ELSE
                             'O'
                       END)
             WHERE STK_RETN_ID = (SELECT STK_RETN_ID
                                    FROM LOG0038D
                                   WHERE RETN_NO = #{serviceNo}) 
                
       </update>
       
              
       <insert id="insertFailed_LOG0039D" parameterType="Map">
       
             INSERT INTO LOG0039D (
					   STK_RETN_RESULT_ID, 
					   STK_RETN_ID, 
					   STK_RETN_STUS_ID, 
					   STK_RETN_CT_MEM_ID,
					   STK_RETN_CRT_DT, 
					   STK_RETN_CRT_USER_ID) 
					VALUES ( 
					   LOG0039D_STK_RETN_RESULT_ID.nextval, 
					   (select  STK_RETN_ID  from LOG0038D where  retn_no =#{serviceNo}) , 
					   '21', 
					   (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId}),
					   sysdate, 
					   (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId})
					 )
       </insert>
         
          
       <update id="updateFailed_LOG0038D" parameterType="Map">
                UPDATE  LOG0038D
                    SET    STUS_CODE_ID   = '21',
                             UPD_DT             = sysdate,
                             UPD_USER_ID     = (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId}),
                             FAIL_RESN_ID     =#{failReasonCode}
                WHERE  retn_no = #{serviceNo}
       </update>
       
         
         
         
      <select id="getcancReqNo" parameterType="Map" resultType="java.lang.String">
         select GBSLCVD.FN_GET_CANC_REQ_NO  canc_Req_No  from dual
      </select>
      
      
       <insert id="insertCancelSMS" parameterType="Map">
       
           update svc0008d
               set CANC_REQ_NO =  #{cancReqNo}
              where SALES_ORD_ID = (select sales_ord_id
                                        from sal0001d
                                        where 1=1
                                        and SALES_ORD_NO = #{salesOrderNo}  )
                and NO =   #{serviceNo}                                 
                                                
                                                
                                                
<!--                  INSERT INTO svc0008d ( SCHDUL_ID
                                        ,NO
                                        ,SALES_ORD_ID
                                        ,MONTH
                                        ,YEAR
                                        ,TYPE_ID
                                        ,CODY_ID
                                        ,STUS_CODE_ID
                                        ,LAST_SVC
                                        ,CRT_DT
                                        ,CRT_USER_ID
                                        ,LOK
                                        ,PREV_CODY_ID
                                        ,CANC_REQ_NO) 
                           SELECT  SVC0008D_SCHDUL_ID_SEQ.NEXTVAL 
                                        ,(select GBSLCVD.FN_GET_DOCNO('10')
                                            from dual) no 
                                        ,SALES_ORD_ID
                                        ,MONTH
                                        ,YEAR
                                        ,TYPE_ID
                                        ,CODY_ID
                                        ,STUS_CODE_ID
                                        ,LAST_SVC
                                        ,CRT_DT
                                        ,CRT_USER_ID
                                        ,LOK
                                        ,PREV_CODY_ID
                                        ,(select GBSLCVD.FN_GET_CANC_REQ_NO
                                            from dual )  CANC_REQ_NO
                            FROM (SELECT SALES_ORD_ID
                                        ,NO
                                        ,MONTH
                                        ,YEAR
                                        ,TYPE_ID
                                        ,CODY_ID
                                        ,STUS_CODE_ID
                                        ,LAST_SVC
                                        ,CRT_DT
                                        ,CRT_USER_ID
                                        ,LOK
                                        ,PREV_CODY_ID
                                        ,CANC_REQ_NO
                      FROM svc0008d 
                       where SALES_ORD_ID = (select sales_ord_id
                                                            from sal0001d
                                                            where 1=1
                                                            and SALES_ORD_NO = #{salesOrderNo}  )
                            and NO =   #{serviceNo}                           ) -->
       </insert>    
       
                
</mapper>