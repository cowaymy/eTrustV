<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.services.mlog.impl.MSvcLogApiMapper">

  <select id="getHeartServiceJobList" parameterType="Map" resultType="egovMap">

    SELECT A.appointment_Date,
           A.service_No,
           A.job_Status,
           A.appointment_Time,
           A.plan_Year,
           A.plan_Month,
           A.sales_Order_No,
           A.sales_Order_Id,
           A.app_Type,
           A.sales_Promotion,
           A.bank_Code,
           A.card_Account_No,
           A.handphone_Tel,
           A.home_Tel,
           A.office_Tel,
           A.mail_Address,
           A.resultIc_Mobile_No,
           A.cust_Name,
           A.customer_Type,
           A.customer_Id,
           A.customer_Va_No,
           A.dsc_Code,
           A.sirim_No,
           fn_get_order_serial(A.sales_Order_Id, A.product_Code) AS serial_No,
           A.result_Cust_Name,
           A.result_Report_Email_No,
           A.result_Acceptance_Name,
           A.fail_Reason_Code,
           A.result_Remark,
           A.rc_Code,
           A.temperatureSetting,
           A.nextAppointmentTime,
           A.ownerCode,
           A.resultCustName,
           A.resultIcMobileNo,
           A.resultReportEmailNo,
           A.resultAcceptanceName,
           A.signData,
           A.nextAppointmentDate,
           A.settled_By,
           A.product_Name,
           A.product_Code,
           A.customer_Jom_Pay_Ref_No,
           A.payment_ModeName AS payment_Mode_Name,
           A.payment_Mode,
           A.contract_Duration,
           A.Membership_Contract_Expiry,
           A.rental_Status,
           A.job_Type,
           A.postcode,
           A.service_State,
           A.install_Address,
           TO_CHAR (NVL(B.ACC_DEBT_SUB_CURR_OTSTND_AGING,0)) AS outstanding,
           A.SERIAL_CHK,
           A.HS_CHK_LST,
           A.SWITCH_CHK_LST,
           A.VOUCHER ,
           A.REDEEM_DT,
           A.REDEEM_WARRANTY,
           A.CODE_FAIL_REMARK,
           A.VOUCHER_REDEMPTION,
           A.IS_VOUCHER,
           CASE WHEN EXISTS (
            SELECT 1 FROM SAL0087D  WHERE TO_CHAR (ADD_MONTHS (SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD), 'YYYYMM')   <![CDATA[ <= ]]>   TO_CHAR (SYSDATE, 'YYYYMM')
           ) THEN  '1'  ELSE '0' END AS need_Filter ,
           TO_CHAR( NVL((SELECT FAUCET_EXCH FROM SAL0090D WHERE SRV_STUS_ID = 1 AND sales_Order_Id = SRV_SO_ID GROUP BY SRV_SO_ID, FAUCET_EXCH ) ,0)) AS warranty ,
          (SELECT SRV_REM FROM SAL0090D WHERE SRV_STUS_ID = 1 AND sales_Order_Id = SRV_SO_ID GROUP BY SRV_SO_ID, SRV_REM)  AS instruction,
          A.prodCat
           <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
          ,A.NEW_HANDPHONE_TEL,
          A.NEW_HOME_TEL,
          A.NEW_OFFICE_TEL,
          A.NEW_EMAIL,
          A.LATITUDE,
          A.LONGITUDE
          <!--  /*  20221108 CELESTE [E] Edit Customer Contact Info */ -->
        FROM ( SELECT appointment_Date,
                  service_No,
                  job_Status,
                  appointment_Time,
                  plan_Year,
                  plan_Month,
                  sales_Order_No,
                  sales_Order_Id,
                  app_Type,
                  sales_Promotion,
                  bank_Code,
                  card_Account_No,
                  handphone_Tel,
                  home_Tel,
                  office_Tel,
                  mail_Address,
                  resultIc_Mobile_No,
                  cust_Name,
                  customer_Type,
                  customer_Id,
                  customer_Va_No,
                  dsc_Code,
                  sirim_No,
                  serial_No,
                  result_Cust_Name,
                  result_Report_Email_No,
                  result_Acceptance_Name,
                  fail_Reason_Code,
                  result_Remark,
                  rc_Code,
                  temperatureSetting,
                  nextAppointmentTime,
                  ownerCode,
                  resultCustName,
                  resultIcMobileNo,
                  resultReportEmailNo,
                  resultAcceptanceName,
                  signData,
                  nextAppointmentDate,
                  settled_By,
                  product_Name,
                  product_Code,
                  customer_Jom_Pay_Ref_No,
                  payment_ModeName,
                  payment_Mode,
                  contract_Duration,
                  Membership_Contract_Expiry,
                  rental_Status,
                  job_Type,
                  postcode,
                  service_State,
                  install_Address,
                  srv_mem_cntrct_id,
                  SERIAL_CHK,
                  HS_CHKLIST AS HS_CHK_LST,
                  SWITCH_CHK_LST AS SWITCH_CHK_LST,
                  VOUCHER ,
                  REDEEM_DT,
                  REDEEM_WARRANTY,
                  CODE_FAIL_REMARK,
                  VOUCHER_REDEMPTION,
                  IS_VOUCHER,
                  prodCat
                  <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
                  ,NEW_HANDPHONE_TEL,
                  NEW_HOME_TEL,
                  NEW_OFFICE_TEL,
                  NEW_EMAIL,
                  LATITUDE,
                  LONGITUDE
                  <!-- /*   20221108 CELESTE [E] Edit Customer Contact Info */ -->
           FROM ( SELECT DISTINCT TO_CHAR (A.APPNT_DT, 'YYYYMMDD') AS appointment_Date,
                                  A.NO AS service_No,
                                  A.STUS_CODE_ID AS job_Status,
                                  A.APPNT_TM AS appointment_Time,
                                  A.YEAR AS plan_Year,
                                  A.MONTH AS plan_Month,
                                  C.SALES_ORD_NO AS sales_Order_No,
                                  C.SALES_ORD_ID AS sales_Order_Id,
                                  C.APP_TYPE_ID AS app_Type,
                                  T.PROMO_DESC AS sales_Promotion,
                                  D.CUST_ACC_BANK_ID AS bank_Code,
                                  D.CUST_ACC_NO AS card_Account_No,
                                  F.TEL_M1 AS handphone_Tel,
                                  F.TEL_R AS home_Tel, <!-- CELESTE 20221219: Change top TEL_R from TEL_O  -->
                                  F.TEL_O AS office_Tel, <!-- CELESTE 20221219: Change top TEL_O from TEL_R  -->
                                  F.EMAIL AS mail_Address,
                                  F.NRIC AS resultIc_Mobile_No,
                                  G.NAME AS cust_Name,
                                  G.TYPE_ID AS customer_Type,
                                  G.cust_id AS customer_Id,
                                  G.CUST_VA_NO AS customer_Va_No,
                                  H.BRNCH_ID AS dsc_Code,
                                  J.SIRIM_NO AS sirim_No,
                                  J.SERIAL_NO AS serial_No,
                                  J.RESULT_CUST_NAME AS result_Cust_Name,
                                  J.RESULT_REP_EMAIL_NO AS result_Report_Email_No,
                                  J.RESULT_ACEPT_NAME AS result_Acceptance_Name,
                                  B.FAIL_RESN_ID AS fail_Reason_Code,
                                  B.RESULT_REM AS result_Remark,
                                  B.REN_COLCT_ID AS rc_Code,
                                  B.TEMPERATE_SETNG AS temperatureSetting,
                                  B.NEXT_APPNT_TM AS nextAppointmentTime,
                                  B.OWNER_CODE AS ownerCode,
                                  B.RESULT_CUST_NAME AS resultCustName,
                                  B.RESULT_MOBILE_NO AS resultIcMobileNo,
                                  B.RESULT_RPT_EMAIL_NO AS resultReportEmailNo,
                                  B.RESULT_ACEPT_NAME AS resultAcceptanceName,
                                  '' AS signData,
                                  TO_CHAR (B.NEXT_APPNT_DT, 'YYYYMMDD') AS nextAppointmentDate,
                                  '' AS settled_By,
                                  L.STK_DESC AS product_Name,
                                  L.STK_CODE AS product_Code,
                                  M.CUST_BILL_PAY_REF_NO1 AS customer_Jom_Pay_Ref_No,
                                  CASE WHEN P.CODE_ID = '131' THEN X.CODE_NAME || ' (Auto Debit)' ELSE P.CODE_NAME END AS payment_ModeName,
                                  TO_CHAR (P.CODE_ID) AS payment_Mode,
                                  TO_CHAR (R.SRV_DUR) AS contract_Duration,
                                  TO_CHAR (R.SRV_EXPR_DT, 'YYYYMMDD') AS Membership_Contract_Expiry,
                                  S.STUS_CODE_ID AS rental_Status,
                                  'HS' AS job_Type,
                                  (SELECT NVL (POSTCODE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) postcode,
                                  (SELECT NVL (STATE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) service_State,
                                  (SELECT (Q.ADDR_DTL || ' ' || Q.STREET || ' ' || AREA || ' ' || POSTCODE || ' ' || CITY || ' ' || STATE || ' ' || COUNTRY) AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) install_Address,
                                   R.SRV_MEM_CNTRCT_ID,
                                   NVL(L.SERIAL_CHK, 'N') AS SERIAL_CHK,
                                   B.HS_CHKLIST,
                                   B.SWITCH_CHK_LST,
                                   B.CODE_FAIL_REMARK,
                                   B.VOUCHER_REDEMPTION,
                                   A.IS_VOUCHER,
                                   NVL(Y.VOUCHER, '') AS VOUCHER,
                                    CASE WHEN Y.REDEEM_HS = 0 OR Y.REDEEM_HS = '0' OR Y.REDEEM_HS = '' THEN ''
                                    ELSE TO_CHAR(Y.REDEEM_MTH || '-' || Y.REDEEM_YEAR) END AS REDEEM_DT,
                                    TO_CHAR(Y.REDEEM_WARRANTY) AS REDEEM_WARRANTY,
                                    Z.CODE AS prodCat
                                    <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
                                    ,CUST.NEW_HP_NO AS NEW_HANDPHONE_TEL,
                                    CUST.NEW_HOME_NO AS NEW_HOME_TEL,
                                    CUST.NEW_OFFICE_NO AS NEW_OFFICE_TEL,
                                    CUST.NEW_EMAIL AS NEW_EMAIL,
                                    Q.LATITUDE,
                                    Q.LONGITUDE
                                   <!--  /*  20221108 CELESTE [E] Edit Customer Contact Info */ -->
                  FROM (SELECT
                                 A.NO ,
                                 A.STUS_CODE_ID ,
                                 A.APPNT_TM ,
                                 A.YEAR ,
                                 A.MONTH ,
                                 A.IS_VOUCHER,
                                 A.SALES_ORD_ID,
                                 A.SCHDUL_ID,
                                 A.APPNT_DT
                        FROM SVC0008D A,
                        ORG0001D B
                        WHERE A.CODY_ID = B.MEM_ID
                          AND A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                          AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                          AND B.MEM_CODE = #{userId}) A,
                  SVC0006D B,
                  SAL0001D C,
                  (SELECT *
                   FROM (SELECT CUST_ID,
                                CUST_ACC_BANK_ID,
                                CUST_ACC_NO,
                                ROW_NUMBER () OVER (PARTITION BY CUST_ID ORDER BY CUST_ACC_UPD_DT DESC) AS DUM_SEQ
                         FROM SAL0022D) SAL22D
                         WHERE DUM_SEQ = 1) D,
                  SAL0027D F,
                  SAL0029D G,
                  SAL0045D H,
                  (
                               SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID ,
                                    A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                               FROM SAL0046D A,   SVC0008D B
                               WHERE A.SALES_ORD_ID  = B.SALES_ORD_ID
                               AND B.CODY_ID  = (SELECT MEM_ID FROM  ORG0001D WHERE MEM_CODE = #{userId})
                               AND A.STUS_CODE_ID = 4
                           GROUP BY A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                              ) I,
                  ( SELECT A.ENTRY_ID,
                           A.SIRIM_NO,
                           A.SERIAL_NO,
                           A.RESULT_CUST_NAME,
                           A.RESULT_REP_EMAIL_NO,
                           A.RESULT_ACEPT_NAME
                    FROM SAL0047D A,
                  ( SELECT MAX (A.RESULT_ID) AS RESULT_ID,
                           A.ENTRY_ID
                    FROM SAL0047D A
                    <!-- ,( SELECT MAX (C.INSTALL_ENTRY_ID) AS ENTRY_ID,
                             C.SALES_ORD_ID
                      FROM SVC0008D A
                      INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID   AND B.MEM_CODE = #{userId}
                      INNER JOIN SAL0046D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
                      WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                        AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                      GROUP BY C.INSTALL_ENTRY_ID, C.SALES_ORD_ID) B
                   WHERE A.ENTRY_ID = B.ENTRY_ID -->
                   GROUP BY A.ENTRY_ID) B
                 WHERE A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID) J,
                 SAL0002D K,
                 SYS0026M L,
                 SAL0024D M,
                 SAL0074D O,
                 SYS0013M P,
                 SAL0023D Q,
                ( SELECT SRV_DUR,
                         SRV_EXPR_DT,
                         A.SRV_MEM_CNTRCT_ID,
                         A.SRV_SALES_ORD_ID
                  FROM SAL0095D A
                  INNER JOIN
                  (
                    SELECT Z.SRV_SALES_ORD_ID,
                               Z.SRV_MEM_ID FROM ( SELECT
                                                                RANK() OVER (PARTITION BY SRV_SALES_ORD_ID ORDER BY SRV_EXPR_DT DESC ) AS RANK_NUM,
                                                                C.SRV_SALES_ORD_ID,
                                                                C.SRV_MEM_ID
                    FROM SVC0008D A
                    INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID AND B.MEM_CODE = #{userId}
                    LEFT OUTER JOIN SAL0095D C ON A.SALES_ORD_ID = C.SRV_SALES_ORD_ID

                                        AND C.SRV_STUS_CODE_ID = 4
                    WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                      AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')

                    GROUP BY C.SRV_SALES_ORD_ID, C.SRV_MEM_ID, C.SRV_EXPR_DT
                    ) Z WHERE Z.RANK_NUM = 1
                   ) B ON A.SRV_SALES_ORD_ID = B.SRV_SALES_ORD_ID AND A.SRV_MEM_ID = B.SRV_MEM_ID
                 ) R,
                 SAL0071D S,
                 SAL0017D T,
                 SAL0028D W,
                 SYS0013M X ,
                 SAL0261D Y,
                 SYS0013M Z
                 <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
                 ,(SELECT HS_NO, ORDER_ID, NEW_HP_NO, NEW_HOME_NO, NEW_OFFICE_NO, NEW_EMAIL
                 FROM SAL0329D) CUST
                 <!-- /*  20221108 CELESTE [E] Edit Customer Contact Info */ -->
                 WHERE A.SCHDUL_ID = B.SCHDUL_ID(+)
                    AND A.SALES_ORD_ID = B.SALES_ORD_ID(+)
                    AND A.SALES_ORD_ID = C.SALES_ORD_ID
                    AND C.CUST_ID = D.CUST_ID(+)
                    AND H.CNT_ID = F.CUST_CNTC_ID(+)
                    AND C.CUST_ID = G.CUST_ID(+)
                    AND C.SALES_ORD_ID = H.SALES_ORD_ID
                    AND H.SALES_ORD_ID = I.SALES_ORD_ID
                    AND I.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
                    AND C.SALES_ORD_ID = K.SALES_ORD_ID
                    AND K.ITM_STK_ID = L.STK_ID
                    AND C.CUST_BILL_ID = M.CUST_BILL_ID(+)
                    AND R.SRV_SALES_ORD_ID = O.SALES_ORD_ID(+)
                    AND R.SRV_MEM_CNTRCT_ID = O.SVC_CNTRCT_ID(+)
                    AND O.CUST_CRC_ID = W.CUST_CRC_ID(+)
                    AND W.CARD_TYPE_ID = X.CODE_ID(+)
                    AND O.MODE_ID = P.CODE_ID(+)
                    AND C.CUST_ID = Q.CUST_ID
                    AND H.ADD_ID = Q.CUST_ADD_ID(+)
                    AND C.SALES_ORD_ID = R.SRV_SALES_ORD_ID(+)
                    AND C.SALES_ORD_ID = S.SALES_ORD_ID(+)
                    AND C.PROMO_ID = T.PROMO_ID(+)
                    AND EXISTS  (
                      SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID, SRV_SO_ID, FAUCET_EXCH FROM SAL0090D WHERE SRV_STUS_ID = 1 AND C.SALES_ORD_ID = SRV_SO_ID GROUP BY SRV_SO_ID, FAUCET_EXCH
                    )
                    AND B.RESULT_IS_CURR(+) = 1
                    AND C.SALES_ORD_ID = Y.SALES_ORD_ID(+)
                    AND Z.CODE_ID = L.STK_CTGRY_ID(+)
                    <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
                    AND CUST.ORDER_ID(+) = A.SALES_ORD_ID
                    AND CUST.HS_NO(+) = A.NO
                     <!-- /*  20221108 CELESTE [S] Edit Customer Contact Info */ -->
                  )AA
       ) A LEFT JOIN PAY0053S B ON B.ACC_DEBT_ORD_ID = A.SALES_ORDER_ID AND B.ACC_DEBT_SRV_CNTRCT_ID = A.SRV_MEM_CNTRCT_ID
  </select>

  <select id="getHeartServiceJobList_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(SALES_ORD_NO)          AS      sales_Order_No
          ,TO_CHAR(SVC_NO)                AS      service_No
          ,TO_CHAR(CUST_NAME)             AS      cust_Name
          ,TO_CHAR(JOB_TYPE)              AS      job_Type
          ,TO_CHAR(JOB_STUS)              AS      job_Status
          ,TO_CHAR(APPNT_DT)              AS      appointment_Date
          ,TO_CHAR(APPNT_TM)              AS      appointment_Time
          ,TO_CHAR(CHECKIN_DT)            AS      check_In_Date
          ,TO_CHAR(CHECKIN_TM)            AS      check_In_Time
          ,TO_CHAR(CHECKIN_GPS)           AS      check_In_Gps
          ,TO_CHAR(CUST_TYPE)             AS      customer_Type
          ,TO_CHAR(CUST_ID)               AS      customer_Id
          ,TO_CHAR(SVC_STATE)             AS      service_State
          ,TO_CHAR(PLAN_YEAR)             AS      plan_Year
          ,TO_CHAR(PLAN_MONTH)            AS      plan_Month
          ,TO_CHAR(INSTALL_ADDR)          AS      install_Address
          ,TO_CHAR(POST_CODE)             AS      postcode
          ,TO_CHAR(HANDPHONE_TEL)         AS      handphone_Tel
          ,TO_CHAR(HOME_TEL)              AS      home_Tel
          ,TO_CHAR(OFFICE_TEL)            AS      office_Tel
          ,TO_CHAR(MAIL_ADDR)             AS      mail_Address
          ,TO_CHAR(CUST_VA_NO)            AS      customer_Va_No
          ,TO_CHAR(CUST_JOM_PAY_REF_NO)   AS      customer_Jom_Pay_Ref_No
          ,TO_CHAR(PRODUCT_NAME)          AS      product_Name
          ,TO_CHAR(PRODUCT_CODE)          AS      product_Code
          ,TO_CHAR(APP_TYPE)              AS      app_Type
          ,TO_CHAR(INSTCT)                AS      instruction
          ,TO_CHAR(SALES_PROMT)           AS      sales_Promotion
          ,TO_CHAR(CNTRCT_DUR)            AS      contract_Duration
          ,TO_CHAR(MONTH_RENTAL_FEES)     AS      monthly_Rental_Fees
          ,TO_CHAR(RGIST_FEES)            AS      registration_Fees
          ,TO_CHAR(PAY_MODE)              AS      payment_Mode
          ,TO_CHAR(PAY_MODE_NAME)         AS      payment_Mode_Name
          ,TO_CHAR(BANK_CODE)             AS      bank_Code
          ,TO_CHAR(BANK_NAME)             AS      bank_Name
          ,TO_CHAR(CARD_ACC_NO)           AS      card_AccountNo
          ,TO_CHAR(OTSTND)                AS      outstanding
          ,TO_CHAR(SIRIM_NO)              AS      sirim_No
          ,TO_CHAR(SERIAL_NO)             AS      serial_No
          ,TO_CHAR(WRANTY)                AS      warranty
          ,TO_CHAR(MBRSH_CNTRCT_EXPR)     AS      Membership_Contract_Expiry
          ,TO_CHAR(RENTAL_STUS)           AS      rental_Status
          ,TO_CHAR(DSC_CODE)              AS      dsc_Code
          ,TO_CHAR(LAST_PAY_DT)           AS      last_Payment_Date
          ,TO_CHAR(TEMPER_SETTING)        AS      temperature_Setting
          ,TO_CHAR(RESULT_REM)            AS      result_Remark
          ,TO_CHAR(OWNER_CODE)            AS      owner_Code
          ,TO_CHAR(OWNER_CODE_NM)         AS      owner_Code_Nm
          ,TO_CHAR(RESULT_CUST_NAME)      AS      result_Cust_Name
          ,TO_CHAR(RESULT_ICMOBILE_NO)    AS      result_Ic_Mobile_No
          ,TO_CHAR(RESULT_RPT_EMAIL_NO)   AS      result_Report_Email_No
          ,TO_CHAR(RESULT_ACEPT_NAME)     AS      result_Acceptance_Name
          ,TO_CHAR(RC_CODE)               AS      rc_Code
          ,TO_CHAR(FAIL_RESN_CODE)        AS      fail_Reason_Code
          ,TO_CHAR(FAIL_RESN_NAME)        AS      fail_Reason_Name
          ,TO_CHAR(REN_COLCT_ID)          AS      ren_Collection_Id
          ,TO_CHAR(BS_R_NO )              AS      bsr_No
          ,TO_CHAR(NEED_FILTER)           AS      need_Filter
          ,TO_CHAR(NEXT_APPNT_DT)         AS      next_Appointment_Date
          ,TO_CHAR(NEXT_APPNT_TM)         AS      next_Appointment_Time
          ,TO_CHAR(CRT_USER_ID)           AS      Create_User_ID
          ,TO_CHAR(CRT_DT)                AS      Create_Date
          ,TO_CHAR(HOME_CARE_ORDER_YN) AS home_Care_Order_Yn
          , TO_CHAR(SERIAL_CHK) AS serial_Chk
          , TO_CHAR(MATSIZE) AS matsize
          , TO_CHAR(HCSALESORDERNO) AS HC_SALES_ORDER_NO
          , TO_CHAR(HCREFNO) AS HC_REF_NO
          , TO_CHAR(HCREFCAT) AS HC_REF_CAT
          , TO_CHAR(HCREFPRD) AS HC_REF_PROD
          , TO_CHAR(SRV_PAC_ID) AS SRV_PAC_ID
          , TO_CHAR(DISINF_SRV) AS DISINFEC_SERV
          , TO_CHAR(HS_CHK_LST) AS HS_CHK_LST
          , TO_CHAR(SWITCH_CHK_LST) AS SWITCH_CHK_LST
          , TO_CHAR(VOUCHER) AS VOUCHER
          , TO_CHAR(REDEEM_DT) AS REDEEM_DT
          , TO_CHAR(REDEEM_WARRANTY) AS REDEEM_WARRANTY
          , TO_CHAR(CODE_FAIL_REMARK) AS CODE_FAIL_REMARK
          , TO_CHAR(VOUCHER_REDEMPTION) AS VOUCHER_REDEMPTION
          , TO_CHAR(IS_VOUCHER) AS IS_VOUCHER
          , TO_CHAR(PRODCAT) AS prodcat
          , LATITUDE AS LATITUDE
          , LONGITUDE AS LONGITUDE
    FROM SVC0101T
    WHERE MEM_CODE = #{userId}
  </select>

  <select id="getAfterServiceJobList" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT
             SUB2.Membership_Contract_Expiry AS MEMBERSHIP_CONTRACT_EXPIRY,
             MST1.*,
             NULL AS warranty,
             /* TO_CHAR (SUB1.SRV_PRD_EXPR_DT, 'YYYYMMDD') AS warranty, */
             /* FN_GET_SVC_MADDRESS (sales_Order_No, 'POST') postcode, */
             /* FN_GET_SVC_MADDRESS (sales_Order_No, 'STATE') service_State, */
             /* FN_GET_SVC_MADDRESS (sales_Order_No, 'FULL_ADDR') install_Address, */
             (SELECT NVL (POSTCODE, '') AS POSTCODE
              FROM SYS0064M
              WHERE STATUS_ID = 1
                AND AREA_ID = MST1.AREA_ID) postcode,
             (SELECT NVL (STATE, '') AS POSTCODE
              FROM SYS0064M
              WHERE STATUS_ID = 1
                AND AREA_ID = MST1.AREA_ID) service_State,
             (SELECT (MST1.ADDR_DTL || ' ' || MST1.STREET || ' ' || AREA || ' ' || POSTCODE || ' ' || CITY || ' ' || STATE || ' ' || COUNTRY) AS POSTCODE
              FROM SYS0064M
              WHERE STATUS_ID = 1
                AND AREA_ID = MST1.AREA_ID) install_Address
      FROM (SELECT A.*,
                   B.*,
                   CASE WHEN B.AS_SLUTN_RESN_ID IN ('454', '452')
                     THEN 'Y'
                     ELSE 'N'
                   END inhouserepairyn
            FROM (SELECT *
                  FROM (SELECT *
                        FROM (SELECT ROW_NUMBER () OVER (PARTITION BY sales_Order_No, service_No ORDER BY Membership_Contract_Expiry1 DESC) RNN,
                                     sales_Order_No,
                                     customer_Id,
                                     app_Type,
                                     sales_Promotion,
                                     monthly_Rental_Fees,
                                     registration_Fees,
                                     bank_Code,
                                     ( SELECT NAME
                                       FROM SYS0004M
                                       WHERE BANK_ID = bank_Code) bank_Name,
                                      card_Account_No,
                                      customer_Jom_Pay_Ref_No,
                                      handphone_Tel,
                                      home_Tel,
                                      office_Tel,
                                      cust_Name,
                                      result_Cust_Name,
                                      mail_Address,
                                      customer_Va_No,
                                      sirim_No,
                                      fn_get_order_serial(sales_Order_Id, NULL) as serial_No,
                                      installation_Date,
                                      rental_Status,
                                      contract_Duration,
                                      Membership_Contract_Expiry1,
                                      service_No,
                                      job_Status,
                                      appointment_Date,
                                      appointment_Time,
                                      plan_Year,
                                      plan_Month,
                                      job_Session,
                                      requestor_Contact,
                                      requestor,
                                      settled_By,
                                      labour_Charge,
                                      defect_Type_Id,
                                      defect_Group_Id,
                                      defect_Id,
                                      defect_Part_Group_Id,
                                      defect_Part_Id,
                                      defect_Detail_Reason_Id,
                                      solution_Reason_Id,
                                      result_Remark,
                                      resultIc_Mobile_No,
                                      malfunction_Code,
                                      malfunction_Reason_Code,
                                      failReason_Code,
                                      settled_Date,
                                      settled_Time,
                                      ren_Collection_Id,
                                      asr_No,
                                      filter_Amount,
                                      accessories_Amount,
                                      total_Amount,
                                      result_Report_Email_No,
                                      result_Acceptance_Name,
                                      product_Name,
                                      product_Code,
                                      dsc_Code,
                                      reqRefNo,
                                      as_type_id,
                                      customer_Type,
                                      'AS' AS job_Type,
                                      instct AS instruction,
                                      area_id AS area_id,
                                      addr_dtl AS addr_dtl,
                                      street AS street,
                                      latitude AS latitude,
                                      longitude AS longitude,
                                      NVL(Serial_Chk, 'N') AS Serial_Chk,
                                      psi AS psi,
                                      lpm AS lpm,
                                      as_unmatch_reason AS as_unmatch_reason,
                                      rework_proj AS rework_proj,
                                      WATER_SRC_TYPE AS WATER_SRC_TYPE,
                                      prodCat AS prodCat,
                                      PARTNER_CODE AS PARTNER_CODE,
                                      MEM_CODE as MEM_CODE,
                                      NTU AS NTU

                              FROM (SELECT /*+ leading(SVC0001D) index( SVC0001D , SVC0001D_IDX12) */
                                           ROW_NUMBER () OVER (PARTITION BY sal0001d.sales_ord_no, svc0001d.as_no ORDER BY svc0004d.as_result_id DESC) rn,
                                           sal0001d.sales_ord_no AS sales_Order_No,
                                           sal0001d.sales_ord_id AS sales_Order_Id,
                                           svc0001d.as_no AS service_No,
                                           sal0029d.name AS cust_Name,
                                           TO_CHAR (sal0029d.TYPE_ID) AS customer_Type,
                                           svc0001d.as_stus_id AS job_Status,
                                           TO_CHAR (svc0001d.as_appnt_dt, 'YYYYMMDD') AS appointment_Date,
                                           CASE WHEN svc0001d.as_appnt_tm IS NULL
                                             THEN DECODE (svc0001d.as_sesion_code,
                                                          'M', '1000',
                                                          'A', '1400',
                                                          'E', '1900',
                                                          'O', '2000',
                                                          '2000')
                                             ELSE TO_CHAR (REPLACE (SUBSTR (svc0001d.as_appnt_tm, 0, 5), ':')) END appointment_Time,
                                           TO_CHAR (svc0001d.as_appnt_dt, 'YYYY') AS plan_Year,
                                           TO_CHAR (svc0001d.as_appnt_dt, 'MM') AS plan_Month,
                                           svc0001d.as_sesion_code AS job_Session,
                                           sal0001d.cust_id AS customer_Id,
                                           sal0023d.addr_dtl AS addr_dtl,
                                           sal0023d.area_id AS area_id,
                                           sal0023d.street AS street,
                                           sal0023d.latitude AS latitude,
                                           sal0023d.longitude AS longitude,
                                           sal0027d.tel_m1 AS handphone_Tel,
                                           sal0027d.tel_r AS home_Tel,
                                           sal0027d.tel_o AS office_Tel,
                                           sal0027d.email AS mail_Address,
                                           sal0029d.cust_va_no AS customer_Va_No,
                                           sal0024d.cust_bill_pay_ref_no1 AS customer_Jom_Pay_Ref_No,
                                           sys0026m.stk_desc AS product_Name,
                                           sys0026m.stk_code AS product_Code,
                                           sys0026m.Serial_Chk,
                                           Fn_get_commcd (10, sal0001d.app_type_id) AS app_Type,
                                           (SELECT promo_desc
                                            FROM sal0017d
                                            WHERE 1 = 1
                                              AND promo_id = sal0001d.promo_id) AS sales_Promotion,
                                           Fn_get_commcd (24, svc0001d.as_reqster_type_id) AS requestor,
                                           svc0001d.as_rem_reqster_cntc AS requestor_Contact,
                                           sal0095d.srv_dur AS contract_Duration,
                                           sal0001d.mth_rent_amt AS monthly_Rental_Fees,
                                           sal0001d.tot_amt AS registration_Fees,
                                           sal0022d.cust_acc_bank_id AS bank_Code,
                                           sal0022d.cust_acc_no AS card_Account_No,
                                           sal0047d.sirim_no AS sirim_No,
                                           sal0047d.serial_no AS serial_No,
                                           TO_CHAR (sal0095d.srv_expr_dt, 'YYYYMMDD') AS Membership_Contract_Expiry1,
                                           sal0071d.stus_code_id AS rental_Status,
                                           sys0005m.code AS dsc_Code,
                                           TO_CHAR (sal0047d.install_dt, 'YYYYMMDD') AS installation_Date,
                                           svc0004d.as_workmnsh AS labour_Charge,
                                           svc0004d.as_defect_type_id AS defect_Type_Id,
                                           svc0004d.as_defect_grp_id AS defect_Group_Id,
                                           svc0004d.as_defect_id AS defect_Id,
                                           svc0004d.as_defect_part_grp_id AS defect_Part_Group_Id,
                                           svc0004d.as_defect_part_id AS defect_Part_Id,
                                           svc0004d.as_defect_dtl_resn_id AS defect_Detail_Reason_Id,
                                           svc0004d.as_slutn_resn_id AS solution_Reason_Id,
                                           svc0004d.as_result_rem AS result_Remark,
                                           sal0029d.name AS result_Cust_Name,
                                           svc0004d.as_result_mobile_id AS resultIc_Mobile_No,
                                           svc0001d.as_malfunc_id AS malfunction_Code,
                                           svc0001d.as_malfunc_resn_id AS malfunction_Reason_Code,
                                           svc0004d.as_fail_resn_id AS failReason_Code,
                                           org0001d.mem_code AS settled_By,
                                           TO_CHAR (svc0004d.as_setl_dt, 'YYYYMMDD') AS settled_Date,
                                           REPLACE (SUBSTR (svc0004d.as_setl_tm, 0, 5), ':') AS settled_Time,
                                           svc0004d.as_ren_colct_id AS ren_Collection_Id,
                                           svc0004d.as_result_no AS asr_No,
                                           svc0004d.as_filter_amt AS filter_Amount,
                                           svc0004d.as_acsrs_amt AS accessories_Amount,
                                           svc0004d.as_tot_amt AS total_Amount,
                                           TO_CHAR (svc0004d.in_huse_repair_rem) AS in_House_Repair_Remark,
                                           DECODE (TO_CHAR (svc0004d.in_huse_repair_replace_yn),
                                                   '1', 'Y',
                                                   'N') AS inhouserepairreplacementyn,
                                           TO_CHAR (svc0004d.in_huse_repair_promis_dt, 'YYYYMMDD') AS in_House_Repair_Promised_Date,
                                           svc0004d.in_huse_repair_grp_code AS inhouserepairproductgroupcode,
                                           TO_CHAR (svc0004d.in_huse_repair_product_code) AS in_House_Repair_Product_Code,
                                           TO_CHAR (svc0004d.in_huse_repair_serial_no) AS in_House_Repair_Serial_No,
                                           TO_CHAR (svc0004d.result_rep_email_no) AS result_Report_Email_No,
                                           TO_CHAR (svc0004d.result_acept_name) AS result_Acceptance_Name,
                                           svc0001d.REF_REQST AS reqRefNo,
                                           svc0001d.as_type_id,
                                           DBMS_LOB.SUBSTR(CCR0007D.CALL_REM, 4000, 1) AS instct,
                                           TO_CHAR(svc0004d.PSI) AS psi,
                                           TO_CHAR(svc0004d.LPM) AS lpm,
                                           TO_CHAR (svc0004d.as_unmatch_reason) AS as_unmatch_reason,
                                           TO_CHAR (svc0004d.rework_proj) AS rework_proj,
                                           TO_CHAR (SVC0004D.WATER_SRC_TYPE) AS WATER_SRC_TYPE,
                                           TO_CHAR(sys0026m.STK_CTGRY_ID) AS prodCat,
                                           NVL (SVC0004d.PARTNER_CODE, '') AS PARTNER_CODE,
                                           CASE WHEN SVC0004d.PARTNER_CODE IS NOT NULL
                                           THEN (SELECT MEM_CODE FROM ORG0001D WHERE ORG0001D.MEM_ID = SVC0004d.PARTNER_CODE)
                                           ELSE '' END AS MEM_CODE,
                                           NVL (SVC0004d.NTU, '') AS NTU

                                    FROM sal0001d,
                                         sal0002d,
                                         sal0022d,
                                         sal0023d,
                                         sal0024d,
                                         sal0027d,
                                         sal0029d,
                                         sal0045d,
                                         sal0046d,
                                         sal0047d,
                                         sal0071d,
                                         sal0095d,
                                         svc0001d,
                                         svc0004d,
                                         org0001d,
                                         sys0005m,
                                         sys0026m,
                                         CCR0006D,
                                         CCR0007D
                                    WHERE svc0001d.as_mem_id = org0001d.mem_id
                                      AND sal0001d.sales_ord_id = sal0002d.sales_ord_id
                                      AND sal0001d.sales_ord_id = svc0001d.as_so_id
                                      AND sal0001d.sales_ord_id = sal0002d.sales_ord_id
                                      AND sal0001d.cust_id = sal0022d.cust_id(+)
                                      AND sal0045d.ADD_ID = sal0023d.cust_add_id
                                      AND sal0001d.cust_bill_id = sal0024d.cust_bill_id(+)
                                      AND sal0001d.cust_id = sal0024d.cust_bill_cust_id(+)
                                      AND sal0045d.cnt_id = sal0027d.cust_cntc_id(+)
                                      AND sal0001d.cust_id = sal0029d.cust_id
                                      AND sal0001d.sales_ord_id = sal0045d.sales_ord_id
                                      AND sal0001d.sales_ord_id = sal0046d.SALES_ORD_ID(+)
                                      AND sal0046d.INSTALL_ENTRY_ID = sal0047d.entry_id(+)
                                      AND sal0071d.sales_ord_id(+) = sal0001d.sales_ord_id
                                      AND sal0001d.sales_ord_id = sal0095d.srv_sales_ord_id(+)
                                      AND svc0001d.as_id = svc0004d.as_entry_id(+)
                                      AND org0001d.brnch = sys0005m.brnch_id
                                      AND sal0002d.itm_stk_id = sys0026m.stk_id
                                      AND svc0001d.AS_CALLLOG_ID = CCR0006D.CALL_ENTRY_ID
                                      AND CCR0006D.CALL_ENTRY_ID = CCR0007D.CALL_ENTRY_ID
                                      AND ORG0001D.MEM_CODE = #{userId}
                                      AND SVC0001D.AS_APPNT_DT BETWEEN ADD_MONTHS (LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')) + 1, -1)
                                      AND LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')))
                              WHERE 1 = 1 AND rn = 1)
                       WHERE RNN = 1)
                     WHERE as_type_id <> '2173') A
            LEFT OUTER JOIN (SELECT DISTINCT *
                             FROM (SELECT A.AS_NO AS AS_NO,
                                          B.IN_HUSE_REPAIR_REM AS in_House_Repair_Remark,
                                          DECODE (B.IN_HUSE_REPAIR_REPLACE_YN, '1', 'Y', 'N') AS inhouserepairreplacementyn,
                                          TO_CHAR (B.IN_HUSE_REPAIR_PROMIS_DT, 'YYYYMMDD') AS in_House_Repair_Promised_Date,
                                          B.IN_HUSE_REPAIR_GRP_CODE AS inhouserepairproductgroupcode,
                                          B.IN_HUSE_REPAIR_PRODUCT_CODE AS in_House_Repair_Product_Code,
                                          B.IN_HUSE_REPAIR_SERIAL_NO AS in_House_Repair_Serial_No,
                                          B.AS_SLUTN_RESN_ID AS AS_SLUTN_RESN_ID
                                   FROM SVC0001D A INNER JOIN SVC0004D B ON A.AS_ID = B.AS_ENTRY_ID
                                   JOIN ORG0001D C ON A.as_mem_id = C.mem_id
                                   WHERE A.REF_REQST IS NULL AND B.AS_SLUTN_RESN_ID <> 0 AND C.MEM_CODE = #{userId}
                                   UNION ALL
                                   SELECT /*+ ORDERED */
                                          A.AS_NO AS AS_NO,
                                          B.IN_HUSE_REPAIR_REM AS in_House_Repair_Remark,
                                          DECODE (B.IN_HUSE_REPAIR_REPLACE_YN, '1', 'Y', 'N') AS inhouserepairreplacementyn,
                                          TO_CHAR (B.IN_HUSE_REPAIR_PROMIS_DT, 'YYYYMMDD')
                                          AS in_House_Repair_Promised_Date,
                                          B.IN_HUSE_REPAIR_GRP_CODE AS inhouserepairproductgroupcode,
                                          B.IN_HUSE_REPAIR_PRODUCT_CODE AS in_House_Repair_Product_Code,
                                          B.IN_HUSE_REPAIR_SERIAL_NO AS in_House_Repair_Serial_No,
                                          B.AS_SLUTN_RESN_ID AS AS_SLUTN_RESN_ID
                                   FROM SVC0001D  A
                                       JOIN SVC0004D B ON A.AS_ID = B.AS_ENTRY_ID
                                       /* JOIN SVC0001D C ON B.AS_ENTRY_ID = C.AS_ID */
                                       /* JOIN SVC0001D D ON C.REF_REQST = to_char(D.AS_ID) */
                                       /* JOIN SVC0004D E ON D.AS_ID = E.AS_ENTRY_ID*/
                                      JOIN ORG0001D F ON A.as_mem_id = F.mem_id
                                   WHERE 1=1
                                     AND B.AS_SLUTN_RESN_ID <> 0
                                     AND F.MEM_CODE = #{userId}
                                      )) B
           ON A.service_No = B.AS_NO) MST1
           /* LEFT OUTER JOIN
           (SELECT *
            FROM (SELECT ROW_NUMBER () OVER (PARTITION BY Project1.SALES_ORD_ID, Project1.SRV_PRD_EXPR_DT ORDER BY Project1.SRV_PRD_EXPR_DT DESC) RNUM,
                         Project1.SRV_PRD_START_DT SRV_PRD_START_DT,
                         Project1.SRV_PRD_EXPR_DT SRV_PRD_EXPR_DT,
                         Project1.SALES_ORD_ID SALES_ORD_ID,
                         Project1.SALES_ORD_NO SALES_ORD_NO,
                         Project1.CUST_ID CUST_ID
                  FROM (SELECT Extent7.SRV_PRD_START_DT SRV_PRD_START_DT,
                               Extent7.SRV_PRD_EXPR_DT SRV_PRD_EXPR_DT,
                               Extent3.SALES_ORD_ID SALES_ORD_ID,
                               Extent3.SALES_ORD_NO SALES_ORD_NO,
                               Extent4.CUST_ID CUST_ID
                        FROM SAL0077D Extent1
                        JOIN SAL0078D Extent2 ON Extent2.SRV_CNTRCT_ID = Extent1.SRV_CNTRCT_ID
                        JOIN SAL0001D Extent3 ON Extent3.SALES_ORD_ID = Extent1.SRV_CNTRCT_ORD_ID
                        JOIN SAL0029D Extent4 ON Extent4.CUST_ID = Extent3.CUST_ID
                        JOIN SAL0081D Extent5 ON Extent5.SRV_CNTRCT_PAC_ID = Extent1.SRV_CNTRCT_PCKG_ID
                        JOIN SYS0047M Extent6 ON Extent6.USER_ID = Extent1.SRV_CNTRCT_CRT_USER_ID
                        JOIN SAL0088D Extent7 ON Extent7.SRV_PRD_CNTRCT_ID = Extent1.SRV_CNTRCT_ID
                                             AND Extent7.SRV_PRD_EXPR_DT >= TO_DATE (TO_CHAR (SYSDATE, 'YYYY') || '/' || TO_CHAR (SYSDATE, 'MM') || '/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
                                             AND Extent7.SRV_PRD_EXPR_DT < ADD_MONTHS (TO_DATE (TO_CHAR (SYSDATE, 'YYYY') || '/' || TO_CHAR (SYSDATE, 'MM') || '/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), 1)
                        JOIN SYS0038M Extent8 ON Extent8.STUS_CODE_ID = Extent1.SRV_CNTRCT_STUS_ID
                  WHERE 1 = 1) Project1)
             WHERE RNUM = 1) SUB1
           ON MST1.SALES_ORDER_NO = SUB1.SALES_ORD_NO */
            LEFT JOIN
           (select
           TO_CHAR(MAX(A.SRV_EXPR_DT),'YYYYMMDD') AS Membership_Contract_Expiry ,
           B.SALES_ORD_NO
           from sal0095d A
           join sal0001d B on A.SRV_SALES_ORD_ID = B.SALES_ORD_ID
           group by A.SRV_SALES_ORD_ID,B.SALES_ORD_NO) SUB2
           ON MST1.SALES_ORDER_NO = SUB2.SALES_ORD_NO
    ]]>
  </select>

  <select id="getHsBasic" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT Project2.No No ,
                   Project2.HS_DATE HS_DATE ,
                   Project2.STUS_CODE_ID STUS_CODE_ID ,
                   Project2.Code Code ,
                   Project2.SALES_ORD_NO SALES_ORD_NO ,
                   Project2.ASSIGN_CODY C5 ,
                   Project2.ACTION_CODY as ACTN_MEM_ID,
                   Project2.MEM_ID ,
                   Project2.Name Name ,
                   Project2.cust_id,
                   Project2.cody_status_nm,
                   Project2.BRNCH_ID as BRNCH_ID,
                   Project2.SCHDUL_ID SCHDUL_ID  ,
                   Project2.SALES_ORD_ID,
                   Project2.branch_cd,
                   Project2.CODY_MANGR_USER_ID,
                   Project2.MEM_CODE,
                   Project2.sal_mem_id
    FROM (SELECT HS.NO AS NO,
                 HS.STUS_CODE_ID as STUS_CODE_ID,
                 HS.MONTH || '/' || HS.YEAR as HS_DATE ,
                 HS.MONTH,
                 HS.YEAR,
                 ST.CODE,
                 HR.NO AS Result,
                 SO.SALES_ORD_NO,
                 AP.CODE AS AppType,
                 CU.NAME,
                 CD.MEM_CODE AS ASSIGN_CODY,
                 CD.MEM_ID,
                 AC.MEM_CODE AS ACTION_CODY,
                 MG.STATE,
                 MG.AREA,
                 cu.CUST_ID as cust_id,
                 (SELECT code
                  FROM SYS0038M
                  WHERE 1=1
                    AND stus_code_id = cu.STUS_CODE_ID ) as cody_status_nm,
                 SO.BRNCH_ID as BRNCH_ID,
                 HS.SCHDUL_ID SCHDUL_ID ,
                  SO.SALES_ORD_ID,
                 BR.CODE as branch_cd,
                 MG.CODY_MANGR_USER_ID ,
                 (SELECT MEM_CODE
                  FROM ORG0001D
                  WHERE mem_id = SO.MEM_ID) as MEM_CODE,
                 SO.MEM_ID as sal_mem_id
          FROM SVC0008D HS
          INNER JOIN SAL0001D SO ON SO.SALES_ORD_ID = HS.SALES_ORD_ID
          INNER JOIN SAL0023D AD ON AD.CUST_ADD_ID = SO.CUST_ADD_ID
          INNER JOIN SYS0064M MG ON MG.AREA_ID = AD.AREA_ID
          LEFT JOIN SVC0006D HR ON HR.SCHDUL_ID = HS.SCHDUL_ID
          INNER JOIN SYS0038M ST ON ST.STUS_CODE_ID = HS.STUS_CODE_ID
          INNER JOIN SYS0013M AP ON AP.CODE_ID = SO.APP_TYPE_ID
          INNER JOIN SAL0029D CU ON CU.CUST_ID = SO.CUST_ID
          INNER JOIN ORG0001D CD ON CD.MEM_ID = HS.CODY_ID
          LEFT JOIN ORG0001D AC ON AC.MEM_ID = HS.ACTN_MEM_ID
          LEFT JOIN SYS0005M BR ON BR.CODE = MG.CODY_BRNCH_CODE
          WHERE 1=1
            AND SO.SALES_ORD_NO = #{salesOrderNo}
            AND HS.no = #{serviceNo}
    ) Project2
  </select>

  <select id="getAsBasic" parameterType="Map" resultType="egovMap">
    SELECT *
    FROM (SELECT Extent4.SALES_ORD_NO
               , Extent4.sales_ord_id
               , Extent1.as_id
               , Extent1.as_no
               , Extent7.AS_RESULT_ID
               , Extent7.AS_RESULT_NO
               , Extent7.AS_ENTRY_ID
               , Extent1.AS_SO_ID
               , Extent7.AS_CT_ID
               , Extent7.AS_SETL_DT
               , Extent7.AS_SETL_TM
               , Extent7.AS_RESULT_STUS_ID
               , Extent7.AS_FAIL_RESN_ID
               , Extent7.AS_REN_COLCT_ID
               , CASE WHEN Extent7.AS_CMMS IS NULL
                   THEN Extent1.AS_ALLOW_COMM
                   ELSE Extent7.AS_CMMS END AS AS_CMMS
               , Extent7.AS_BRNCH_ID
               , Extent7.AS_WH_ID
               , Extent7.AS_RESULT_REM
               , Extent7.AS_RESULT_CRT_DT
               , Extent7.AS_RESULT_CRT_USER_ID
               , CASE WHEN Extent7.AS_MALFUNC_ID IS NULL
                   THEN Extent1.AS_MALFUNC_ID
                   ELSE Extent7.AS_MALFUNC_ID END AS AS_MALFUNC_ID
               , CASE WHEN Extent7.AS_MALFUNC_RESN_ID IS NULL
                   THEN Extent1.AS_MALFUNC_RESN_ID
                   ELSE Extent7.AS_MALFUNC_RESN_ID END AS AS_MALFUNC_RESN_ID
               , Extent7.AS_DEFECT_TYPE_ID
               , Extent7.AS_DEFECT_GRP_ID
               , Extent7.AS_DEFECT_ID
               , Extent7.AS_DEFECT_PART_GRP_ID
               , Extent7.AS_DEFECT_PART_ID
               , Extent7.AS_DEFECT_DTL_RESN_ID
               , Extent7.AS_SLUTN_RESN_ID
               , Extent7.AS_WORKMNSH
               , nvl(Extent7.AS_FILTER_AMT,0) as AS_FILTER_AMT
               , nvl(Extent7.AS_ACSRS_AMT,0) as AS_ACSRS_AMT
               , nvl(Extent7.AS_TOT_AMT,0) as AS_TOT_AMT
               , Extent7.AS_RESULT_IS_SYNCH
               , Extent7.AS_RCALL
               , Extent7.AS_RESULT_STOCK_USE
               , Extent7.AS_RESULT_TYPE_ID
               , Extent7.AS_RESULT_IS_CURR
               , Extent7.AS_RESULT_MTCH_ID
               , Extent7.AS_RESULT_NO_ERR
               , Extent7.AS_RESULT_UPD_DT
               , Extent7.AS_RESULT_UPD_USER_ID
               , Extent7.AS_ENTRY_POINT
               , Extent7.AS_WORKMNSH_TAX_CODE_ID
               , Extent7.AS_WORKMNSH_TXS
               , Extent7.AS_RESULT_MOBILE_ID
               , Extent7.APPNT_DT
               , Extent7.APPNT_TM
               , Extent7.IN_HUSE_REPAIR_REM
               , Extent7.IN_HUSE_REPAIR_REPLACE_YN
               , Extent7.IN_HUSE_REPAIR_PROMIS_DT
               , Extent7.IN_HUSE_REPAIR_GRP_CODE
               , Extent7.IN_HUSE_REPAIR_PRODUCT_CODE
               , Extent7.IN_HUSE_REPAIR_SERIAL_NO
               , Extent7.RESULT_CUST_NAME
               , Extent7.RESULT_MOBILE_NO
               , Extent7.RESULT_REP_EMAIL_NO
               , Extent7.RESULT_ACEPT_NAME
               , Extent7.SGN_DT
               , Extent7.TRNSC_ID
               , (SELECT MEM_ID
                  FROM ORG0001D
                  WHERE mem_code = #{userId}) as user_id
               , (SELECT USER_ID
                  FROM SYS0047M
                  WHERE USER_NAME = #{userId}) as upd_usr_id
          FROM SVC0001D Extent1
             , SVC0004D Extent7
             , SAL0001D Extent4
          WHERE 1=1
            AND Extent1.AS_ID = Extent7.AS_ENTRY_ID(+)
            AND Extent1.AS_SO_ID = Extent4.SALES_ORD_ID
            AND Extent4.SALES_ORD_NO = #{salesOrderNo}
            AND Extent1.as_no = #{serviceNo}
          ORDER BY Extent7.AS_RESULT_ID DESC
       )
    WHERE ROWNUM = 1
  </select>

  <select id="selectAsBasicInfo" parameterType="Map" resultType="egovMap">
    SELECT AS_ID
         , AS_NO
         , AS_SO_ID
         , AS_MEM_ID
         , AS_MEM_GRP
         , AS_REQST_DT
         , AS_REQST_TM
         <!-- , AS_APPNT_DT
              , AS_APPNT_TM -->
         , AS_BRNCH_ID
         , AS_MALFUNC_ID
         , AS_MALFUNC_RESN_ID
         , AS_REM_REQSTER
         , AS_REM_REQSTER_CNTC
         , AS_CALLLOG_ID
         , AS_STUS_ID
         , AS_SMS
         , AS_CRT_USER_ID
         , AS_CRT_DT
         , AS_UPD_USER_ID
         , AS_UPD_DT
         , AS_ENTRY_IS_SYNCH
         , AS_ENTRY_IS_EDIT
         , AS_TYPE_ID
         , AS_REQSTER_TYPE_ID
         , AS_IS_BS_WITHIN_30DAYS
         , AS_ALLOW_COMM
         , AS_PREV_MEM_ID
         , AS_REM_ADD_CNTC
         , AS_REM_REQSTER_CNTC_SMS
         , AS_REM_ADD_CNTC_SMS
         , AS_SESION_CODE
         , CALL_MEM
         , REF_REQST
         , PREV_COMP_SVC
         , NEXT_COMP_SVC
         , SIGN_DT_TIME
         , COMP_DT_SEQ
         , DISTANCE
         , FIRST
         , LAST
         , HOME
         , AS_MOBILE_REQST_ID
         , AS_RQST_REM
    FROM SVC0001D
    WHERE 1=1
      AND as_no = #{serviceNo}
      AND rownum = 1
  </select>

  <select id="getInstallationJobList" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT * FROM (SELECT ROW_NUMBER () OVER (PARTITION BY SAL0001D.SALES_ORD_NO ORDER BY SAL0095D.SRV_EXPR_DT, SAL0046D.INSTALL_ENTRY_NO DESC) rnum,
                                         SAL0046D.INSTALL_ENTRY_NO AS service_No,
                                         SAL0046D.STUS_CODE_ID AS job_Status,
                                         NVL (TO_CHAR (SAL0046D.APPNT_DT, 'YYYYMMDD'), '') AS appointment_Date,
                                         CASE WHEN SAL0046D.APPNT_TM IS NULL
                                                 THEN DECODE (SAL0046D.SESION_CODE, 'M', '1000', 'A', '1400', 'E', '1900', 'O', '2000', '2000')
                                                 ELSE TO_CHAR (REPLACE (SUBSTR (SAL0046D.APPNT_TM, 0, 5), ':')) END appointment_Time,
                                         NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'YYYY'), '') AS plan_Year,
                                         NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'MM'), '') AS plan_Month,
                                         CASE WHEN SAL0046D.SESION_CODE IS NULL
                                                 THEN 'O'
                                                 ELSE SAL0046D.SESION_CODE END AS job_Session,
                                         ( SELECT NAME FROM ORG0001D
                                                               WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID) AS hp_Name,
                                         ( SELECT TEL_MOBILE FROM ORG0001D
                                                                        WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID) AS hp_Tel,
                                         CASE WHEN TO_CHAR(ORG1001V.LVL3_UP_ID) = '0'
                                                 THEN ( SELECT NAME FROM ORG0001D
                                                                               WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID)
                                                 ELSE (SELECT NAME FROM ORG0001D
                                                                             WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID) END AS hm_Name,
                                         CASE WHEN TO_CHAR(ORG1001V.LVL3_UP_ID) = '0'
                                                 THEN (SELECT TEL_MOBILE FROM ORG0001D
                                                                                       WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID)
                                                 ELSE ( SELECT TEL_MOBILE FROM ORG0001D
                                                           WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID) END AS hm_Tel,
                                         CASE WHEN TO_CHAR(ORG1001V.LVL2_UP_ID) = '0'
                                                 THEN (SELECT NAME FROM ORG0001D
                                                                              WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID)
                                                 ELSE ( SELECT NAME FROM ORG0001D
                                                           WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID) END AS sm_Name,
                                         CASE WHEN TO_CHAR(ORG1001V.LVL2_UP_ID) = '0'
                                                 THEN ( SELECT TEL_MOBILE FROM ORG0001D
                                                            WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID)
                                                 ELSE ( SELECT TEL_MOBILE FROM ORG0001D
                                                           WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID) END AS sm_Tel,
                                         NVL (ORG0001D.MEM_CODE, '') AS settled_By,
                                         NVL (SAL0001D.SALES_ORD_NO, '') AS sales_Order_No,
                                         NVL (SAL0001D.CUST_ID, '') AS customer_Id,
                                         FN_GET_COMMCD (10, SAL0001D.APP_TYPE_ID) AS app_Type,
                                         NVL (TO_CHAR (SAL0017D.PROMO_DESC), '') AS sales_Promotion,
                                         NVL (TO_CHAR (SAL0017D.PROMO_ID), '') AS sales_Promotion_Cde,
                                         NVL (TO_CHAR (SAL0001D.MTH_RENT_AMT), '0') AS monthly_Rental_Fees,
                                         NVL (SAL0001D.TOT_AMT, '') AS registration_Fees,
                                         NVL (SAL0022D.CUST_ACC_BANK_ID, '') AS bank_Code,
                                         NVL (SAL0022D.CUST_ACC_NO, '') AS card_Account_No,
                                         NVL (SAL0024D.CUST_BILL_PAY_REF_NO1, '') AS customer_Jom_Pay_Ref_No,
                                         NVL (SAL0027D.TEL_M1, '') AS handphone_Tel,
                                         NVL (SAL0027D.TEL_R, '') AS home_Tel,
                                         NVL (SAL0027D.TEL_O, '') AS office_Tel,
                                         NVL (SAL0029D.NAME, '') AS cust_Name,
                                         NVL (TO_CHAR (SAL0029D.TYPE_ID), '') AS customer_Type,
                                         NVL (SAL0027D.EMAIL, '') AS mail_Address,
                                         NVL (SAL0029D.CUST_VA_NO, '') AS customer_Va_No,
                                         NVL (SAL0047D.SIRIM_NO, '') AS sirim_No,
                                         NVL (SAL0047D.SERIAL_NO, '') AS serial_No,
                                         NVL (TO_CHAR (SAL0047D.INSTALL_DT, 'YYYYMMDD'), '') AS settled_Date,
                                         NVL (TO_CHAR (SAL0095D.SRV_EXPR_DT, 'YYYYMMDD'), '') AS expiry_Date,
                                         NVL (SAL0095D.SRV_DUR, '') AS contract_Duration,
                                         NVL (SYS0064M.POSTCODE, '') postcode,
                                         NVL (SYS0064M.STATE, '') service_State,
                                         (SAL0023D.ADDR_DTL || ' ' || SAL0023D.STREET || ' ' || SYS0064M.AREA || ' ' || SYS0064M.POSTCODE || ' ' || SYS0064M.CITY || ' ' || SYS0064M.STATE || ' ' || SYS0064M.COUNTRY) install_Address,
                                         NVL (SAL0023D.LATITUDE, '') AS latitude,
                                         NVL (SAL0023D.LONGITUDE, '') AS longitude,
                                         NVL (SYS0026M.STK_DESC, '') AS product_Name,
                                         NVL (SYS0026M.STK_CODE, '') AS product_Code,
                                         NVL (SYS0005M.CODE, '') AS dsc_Code,
                                         NVL (TO_CHAR (CCR0007D.CALL_REM), '') AS instruction,
                                         SAL0047D.REM AS RESULT_REMARK,
                                         NVL (SYS0026M.SERIAL_CHK, 'N') AS SERIAL_CHK,
                                         NVL (TO_CHAR (SAL0233M.AREA_COVRG_ID), '') AS before_Product_Code,
                                         NVL (TO_CHAR (SVC0113D.MATT_SZ), '') AS before_Product_Serial_No,
                                         CASE WHEN CCR0006D.TYPE_ID = '258' AND ( SELECT COUNT(*) AS CNT
                                                                                                          FROM SAL0046D A
                                                                                                          JOIN SAL0002D B ON A.SALES_ORD_ID = B.SALES_ORD_ID
                                                                                                          JOIN SYS0026M C ON B.ITM_STK_ID = C.STK_ID
                                                                                                          WHERE A.SALES_ORD_ID = SAL0001D.SALES_ORD_ID
                                                                                                              AND A.STUS_CODE_ID = '4'
                                                                                                              AND C.STK_CTGRY_ID IN (5706, 5707)
                                         ) > 0 THEN 'Y' ELSE 'N' END AS real_As_Exchange_Yn
                                         , FN_GET_ORDER_SERIAL(SAL0001D.SALES_ORD_ID, NULL) AS real_Before_Product_Serial_No
                                         , SYS0026M.STK_CODE AS REAL_BEFORE_PRODUCT_CODE
                                         , SYS0026M.STK_DESC AS REAL_BEFORE_PRODUCT_NAME
                                         , TO_CHAR (SAL0047D.PSI) AS psi
                                         , TO_CHAR (SAL0047D.LPM) AS lpm
                                         , TO_CHAR (SYS0026M.STK_CTGRY_ID) AS prodCat
                                         , TO_CHAR (SAL0047D.VOLT) AS voltage
                                         , TO_CHAR (SAL0047D.TDS) AS tds
                                         , TO_CHAR (SAL0047D.ROOM_TEMP) AS room_Temp
                                         , TO_CHAR (SAL0047D.WATER_SRC_TEMP) AS water_Src_Temp
                                         , TO_CHAR (SAL0047D.ADPT_USED) AS adpt_Used
                                         , TO_CHAR (SAL0047D.INST_CHKLST) AS inst_Chk_Lst
                                         , TO_CHAR (SAL0047D.BOOSTER_PUMP) AS booster_Pump
                                         , TO_CHAR (SAL0047D.AFT_PSI) AS aft_Psi
                                         , TO_CHAR (SAL0047D.AFT_LPM) AS aft_Lpm
                                         , TO_CHAR (SAL0047D.TURB_LVL) AS turb_Lvl
                                         , TO_CHAR (SAL0047D.WATER_SRC_TYPE) AS water_src_type
                                         , (SAL0047D.NTU) AS ntu
                                         , TO_CHAR (SAL0046D.OWNER_CODE) AS OWNER_CODE
                                         , TO_CHAR (SAL0046D.RESULT_CUST_NAME) AS RESULT_CUST_NAME
                                         , TO_CHAR (SAL0046D.RESULT_ICMOBILE_NO) AS RESULT_IC_MOBILE_NO
                                         , TO_CHAR (SAL0046D.RESULT_RPT_EMAIL_NO) AS RESULT_REPORT_EMAIL_NO
                                         , TO_CHAR (SAL0046D.RESULT_ACEPT_NAME) AS RESULT_ACCEPTANCE_NAME
                                         , TO_CHAR (SAL0046D.CHK_SMS) AS CHK_SMS
                                         , TO_CHAR (SAL0046D.CUST_MOBILE_NO) AS CUST_MOBILE_NO
                                         , TO_CHAR (SAL0046D.CHECK_SEND) AS CHECK_SEND
                                         , TO_CHAR (SAL0047D.INST_NOTECHK) AS INST_NOTE_CHK
                                         , TO_CHAR (SAL0001D.EX_TRADE) AS IS_JOM_TUKAR
                                         , TO_CHAR (SAL0047D.COMP_YN) AS IS_COMPT_PROD
                                         , TO_CHAR (SAL0047D.COMP_BRAND) AS COMPT_BRND
                                         , TO_CHAR (SAL0045D.SRV_TYPE) AS SRV_TYP
      FROM SAL0046D,
               ORG0001D,
               ORG0005D,
               ORG1001V,
               SAL0001D,
               SAL0002D,
               (SELECT CUST_ID AS CUST_ID,
                           MAX(CUST_ACC_BANK_ID) AS CUST_ACC_BANK_ID,
                           MAX(CUST_ACC_NO) AS CUST_ACC_NO
                FROM SAL0022D
                GROUP BY CUST_ID) SAL0022D,
               SAL0023D,
               SAL0024D,
               SAL0027D,
               SAL0029D,
               SAL0045D,
               SAL0047D,
               SAL0095D,
               SYS0005M,
               SYS0026M,
               CCR0006D,
               CCR0007D,
               (SELECT *
                FROM SYS0064M
                WHERE STATUS_ID = 1) SYS0064M,
               SAL0233M,
               SVC0113D,
               SAL0017D
      WHERE SAL0046D.CT_ID = ORG0001D.MEM_ID
          AND ORG0005D.MEM_ID = ORG0001D.MEM_ID
          AND SAL0001D.MEM_ID = ORG1001V.MEM_ID
          AND SAL0001D.SALES_ORD_ID = SAL0046D.SALES_ORD_ID
          AND SAL0001D.SALES_ORD_ID = SAL0002D.SALES_ORD_ID(+)
          AND SAL0001D.CUST_ID = SAL0022D.CUST_ID(+)
          AND SAL0045D.ADD_ID = SAL0023D.CUST_ADD_ID(+)
          AND SAL0023D.AREA_ID = SAL0233M.AREA_ID(+) AND SAL0233M.STUS_CODE_ID(+) = 1
          AND SAL0001D.CUST_BILL_ID = SAL0024D.CUST_BILL_ID(+)
          AND SAL0045D.CNT_ID = SAL0027D.CUST_CNTC_ID(+)
          AND SAL0001D.CUST_ID = SAL0029D.CUST_ID(+)
          AND SAL0001D.SALES_ORD_ID = SAL0045D.SALES_ORD_ID(+)
          AND SAL0046D.INSTALL_ENTRY_ID = SAL0047D.ENTRY_ID(+)
          AND SAL0001D.SALES_ORD_ID = SAL0095D.SRV_SALES_ORD_ID(+)
          AND ORG0001D.BRNCH = SYS0005M.BRNCH_ID
          AND SAL0046D.INSTALL_STK_ID = SYS0026M.STK_ID(+)
          AND SAL0023D.AREA_ID = SYS0064M.AREA_ID(+)
          AND CCR0006D.SALES_ORD_ID = SAL0001D.SALES_ORD_ID
          AND CCR0006D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
          AND CCR0007D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
          AND CCR0006D.RESULT_ID = CCR0007D.CALL_RESULT_ID
          AND ORG0001D.mem_code = #{userId}
          AND SAL0046D.INSTALL_DT BETWEEN ADD_MONTHS (LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')) + 1, -1)
          AND LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM'))
          AND SAL0046D.INSTALL_ENTRY_NO = SVC0113D.SVC_NO(+)
          AND SAL0001D.PROMO_ID = SAL0017D.PROMO_ID(+)
    ]]>
    ) WHERE rnum = 1
  </select>

  <select id="getInstallationJobList_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(SALES_ORD_NO) AS sales_Order_No
             , TO_CHAR(SVC_NO) AS service_No
             , TO_CHAR(CUST_NAME) AS cust_Name
             , TO_CHAR(JOB_TYPE) AS job_Type
             , TO_CHAR(JOB_STUS) AS job_Status
             , TO_CHAR(APPNT_DT) AS appointment_Date
             , TO_CHAR(APPNT_TM) AS appointment_Time
             , TO_CHAR(JOB_SESION) AS job_Session
             , TO_CHAR(CHECKIN_DT) AS check_In_Date
             , TO_CHAR(CHECKIN_TM) AS check_In_Time
             , TO_CHAR(CHECKIN_GPS) AS check_In_Gps
             , TO_CHAR(CUST_TYPE) AS customer_Type
             , TO_CHAR(CUST_ID) AS customer_Id
             , TO_CHAR(SVC_STATE) AS service_State
             , TO_CHAR(PLAN_YEAR) AS plan_Year
             , TO_CHAR(PLAN_MONTH) AS plan_Month
             , TO_CHAR(INSTALL_ADDR) AS install_Address
             , TO_CHAR(POST_CODE) AS postcode
             , TO_CHAR(HANDPHONE_TEL) AS handphone_Tel
             , TO_CHAR(HOME_TEL) AS home_Tel
             , TO_CHAR(OFFICE_TEL) AS office_Tel
             , TO_CHAR(MAIL_ADDR) AS mail_Address
             , TO_CHAR(CUST_VA_NO) AS customer_Va_No
             , TO_CHAR(CUST_JOM_PAY_REF_NO) AS customer_Jom_Pay_Ref_No
             , TO_CHAR(PRODUCT_NAME) AS product_Name
             , TO_CHAR(PRODUCT_CODE) AS product_Code
             , TO_CHAR(APP_TYPE) AS app_Type
             , TO_CHAR(INSTCT) AS instruction
             , TO_CHAR(SALES_PROMT) AS sales_Promotion
             , TO_CHAR(CNTRCT_DUR) AS contract_Duration
             , TO_CHAR(MONTH_RENTAL_FEES) AS monthly_Rental_Fees
             , TO_CHAR(RGIST_FEES) AS registration_Fees
             , TO_CHAR(PAY_MODE) AS payment_Mode
             , TO_CHAR(BANK_CODE) AS bank_Code
             , TO_CHAR(BANK_NAME) AS bank_Name
             , TO_CHAR(CARD_ACC_NO) AS card_AccountNo
             , TO_CHAR(OTSTND) AS outstanding
             , TO_CHAR(EXPR_DT) AS expiry_Date
             , TO_CHAR(DSC_CODE) AS dsc_Code
             , TO_CHAR(SIRIM_NO) AS sirim_No
             , TO_CHAR(SERIAL_NO) AS serial_No
             , TO_CHAR(HP_NAME) AS hp_Name
             , TO_CHAR(HP_TEL) AS hp_Tel
             , TO_CHAR(HM_NAME) AS hm_Name
             , TO_CHAR(HM_TEL) AS hm_Tel
             , TO_CHAR(BILL_AMT) AS bill_Amount
             , TO_CHAR(PAID_AMT) AS paid_Amount
             , TO_CHAR(ADJ_AMT) AS adjustment_Amount
             , TO_CHAR(RESULT_REM) AS result_Remark
             , TO_CHAR(OWNER_CODE) AS owner_Code
             , TO_CHAR(OWNER_CODE_NM) AS owner_Code_Nm
             , TO_CHAR(RESULT_CUST_NAME) AS result_Cust_Name
             , TO_CHAR(RESULT_ICMOBILE_NO) AS result_Ic_Mobile_No
             , TO_CHAR(RESULT_RPT_EMAIL_NO) AS result_Report_Email_No
             , TO_CHAR(RESULT_ACEPT_NAME) AS result_Acceptance_Name
             , TO_CHAR(FAIL_RESN_CODE) AS fail_Reason_Code
             , TO_CHAR(FAIL_RESN_NAME) AS fail_Reason_Name
             , TO_CHAR(LAST_PAY_DT) AS last_Payment_Date
             , TO_CHAR(NEXT_CALL_DT) AS next_Call_Date
             , TO_CHAR(NEXT_CALL_TM) AS next_Call_Time
             , TO_CHAR(AS_EXCHN_YN) AS as_Exchange_Y_N
             , TO_CHAR(BEFORE_PRODUCT_CODE) AS before_Product_Code
             , TO_CHAR(BEFORE_PRODUCT_SERIAL_NO) AS before_Product_Serial_No
             , TO_CHAR(CRT_USER_ID) AS Create_User_ID
             , TO_CHAR(CRT_DT) AS Create_Date
             , TO_CHAR(FRA_YN) AS fra_Yn
             , TO_CHAR(FRA_ORD_NO) AS fra_Ord_No
             , TO_CHAR(FRA_PRODUCT_CODE) AS fra_Product_Code
             , TO_CHAR(FRA_PRODUCT_NAME) AS fra_Product_Name
             , TO_CHAR(RESULT_REMARK) AS result_Result
             , TO_CHAR(SERIAL_CHK) AS serial_Chk
             , TO_CHAR(FRA_SERIAL_CHK) AS fra_Serial_Chk
             , TO_CHAR(SEL_FRA_SERIAL_NO) AS sel_Fra_Serial_No
             , TO_CHAR(REAL_AS_EXCHN_YN) AS real_As_Exchn_Yn
             , TO_CHAR(REAL_BEFORE_PRODUCT_CODE) AS real_Before_Product_Code
             , TO_CHAR(REAL_BEFORE_PRODUCT_NAME) AS real_Before_Porduct_Name
             , TO_CHAR(REAL_BEFORE_PRODUCT_SERIAL_NO) AS real_Before_Product_Serial_No
             , TO_CHAR(PSI) AS psi
             , TO_CHAR(LPM) AS lpm
             , TO_CHAR(PRODCAT) AS prodcat
             , TO_CHAR(SALES_PROMT_CDE) AS sales_Promotion_Cde
             , TO_CHAR(VOLT) AS voltage
             , TO_CHAR(TDS) AS tds
             , TO_CHAR(ROOM_TEMP) AS room_Temp
             , TO_CHAR(WATER_SRC_TEMP) AS water_Src_Temp
             , TO_CHAR(ADPT_USED) AS adpt_Used
             , TO_CHAR(INST_CHKLST) AS inst_Chk_Lst
             , TO_CHAR(BOOSTER_PUMP) AS booster_Pump
             , TO_CHAR(AFT_PSI) AS aft_Psi
             , TO_CHAR(AFT_LPM) AS aft_Lpm
             , TO_CHAR(TURB_LVL) AS turb_Lvl
             , TO_CHAR(WATER_SRC_TYPE) AS water_src_type
             , NTU AS ntu
             , TO_CHAR(CHK_SMS) AS chk_sms
             , TO_CHAR(CUST_MOBILE_NO) AS cust_mobile_no
             , TO_CHAR(CHECK_SEND) AS check_send
             , LATITUDE AS LATITUDE
             , LONGITUDE AS LONGITUDE
             , TO_CHAR(INST_NOTECHK) AS INST_NOTE_CHK
             , TO_CHAR(SRV_TYPE) AS SRV_TYP
             , TO_CHAR(IS_JOM_TUKAR) AS IS_JOM_TUKAR
             , TO_CHAR(COMP_YN) AS IS_COMPT_PROD
             , TO_CHAR(COMP_BRAND) AS COMPT_BRND
    FROM SVC0103T
    WHERE MEM_CODE = #{userId}
  </select>

  <select id="getProductRetrunJobList" parameterType="Map" resultType="egovMap">
    <![CDATA[
        SELECT A.*
           , CASE WHEN FRA_ORD_NO IS NULL THEN 'N' ELSE 'Y' END AS FRA_YN
           , (SELECT MAX(T3.STK_CODE)
               FROM SAL0001D T1
                            , SAL0002D T2
                            , SYS0026M T3
                        WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                          AND T2.ITM_STK_ID = T3.STK_ID(+)
                          AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_PRODUCT_CODE
                    , (SELECT MAX(T3.STK_DESC)
                         FROM SAL0001D T1
                            , SAL0002D T2
                            , SYS0026M T3
                        WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                          AND T2.ITM_STK_ID = T3.STK_ID(+)
                          AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_PRODUCT_NAME
                    , (SELECT MAX(T3.SERIAL_CHK)
                         FROM SAL0001D T1
                            , SAL0002D T2
                            , SYS0026M T3
                        WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                          AND T2.ITM_STK_ID = T3.STK_ID(+)
                          AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_SERIAL_CHK
                    , (SELECT MAX(AF_SERIAL_NO) AS AF_SERIAL_NO
                            FROM LOG0102H T1
                               , SAL0001D T2
                           WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID
                             AND T2.SALES_ORD_NO = A.sales_Order_No) AS SEL_SERIAL_NO
                       , (SELECT MAX(AF_SERIAL_NO) AS AF_SERIAL_NO
                            FROM LOG0102H T1
                               , SAL0001D T2
                           WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID
                             AND T2.SALES_ORD_NO = A.FRA_ORD_NO) AS SEL_FRA_SERIAL_NO
       FROM (
              SELECT TO_CHAR (C.SALES_ORD_NO) AS sales_Order_No,
                     A.RETN_NO AS service_No,
                     NVL (F.NAME, '') AS cust_Name,
                     'PR' AS job_Type,
                     TO_CHAR (A.STUS_CODE_ID) AS job_Status,
                     NVL (TO_CHAR (A.APP_DT, 'YYYYMMDD'), '') AS appointment_Date,
                     CASE WHEN NVL (TO_CHAR (A.APP_TM, 'HHMM'), ' ') = ' '
                       THEN DECODE (NVL (TO_CHAR (A.APP_TM, 'HHMM'), ''),
                                    'M', '1000',
                                    'A', '1400',
                                    'E', '1900',
                                    'O', '2000',
                                    '2000')
                       ELSE NVL (TO_CHAR (A.APP_TM, 'HHMM'), '') END AS appointment_Time,
                     A.RT_SESION_CODE AS job_Session,
                     CASE WHEN (TO_CHAR (A.STUS_CODE_ID) <> '1'
                       AND NVL (TO_CHAR (E.CHECKIN_DT), ' ') = ' ')
                       THEN NVL (TO_CHAR (A.APP_DT, 'YYYYMMDD'), ' ')
                       ELSE NVL (TO_CHAR (E.CHECKIN_DT), '') END AS check_In_Date,
                     CASE WHEN (TO_CHAR (A.STUS_CODE_ID) <> '1'
                      AND NVL (TO_CHAR (E.CHECKIN_TM), ' ') = ' ')
                       THEN CASE WHEN NVL (TO_CHAR (A.APP_TM, 'HHMM'), ' ') = ' '
                                 THEN DECODE (NVL (TO_CHAR (A.APP_TM, 'HHMM'), ''),
                                              'M', '1000',
                                              'A', '1400',
                                              'E', '1900',
                                              'O', '2000',
                                              '2000')
                                 ELSE NVL (TO_CHAR (A.APP_TM, 'HHMM'), '') END
                       ELSE SUBSTR (NVL (TO_CHAR (E.CHECKIN_TM), ''), 1, 4) END AS check_In_Time,
                     NVL (TO_CHAR (E.CHECKIN_GPS), '') AS check_In_Gps,
                     NVL (TO_CHAR (F.TYPE_ID), '') AS customer_Type,
                     NVL (TO_CHAR (C.CUST_ID), '') AS customer_Id,
                     NVL (TO_CHAR (A.APP_DT, 'YYYY'), '') AS plan_Year,
                     NVL (TO_CHAR (A.APP_DT, 'MM'), '') AS plan_Month,
                     /* FN_GET_SVC_MADDRESS (C.SALES_ORD_NO, 'POST') postcode, */
                     /* FN_GET_SVC_MADDRESS (C.SALES_ORD_NO, 'STATE') service_State, */
                     /* FN_GET_SVC_MADDRESS (C.SALES_ORD_NO, 'FULL_ADDR') install_Address, */
                     NVL (P.POSTCODE, '') postcode,
                     NVL (P.STATE, '') service_State,
                     ( O.ADDR_DTL || ' ' || O.STREET || ' ' || P.AREA || ' ' || P.POSTCODE || ' ' || P.CITY || ' ' || P.STATE || ' ' || P.COUNTRY) install_Address,
                     NVL (O.LATITUDE, '') AS latitude,
                     NVL (O.LONGITUDE, '') AS longitude,
                     NVL (TO_CHAR (N.TEL_M1), '') AS handphone_Tel,
                     NVL (TO_CHAR (N.TEL_R), '') AS home_Tel,
                     NVL (TO_CHAR (N.TEL_O), '') AS office_Tel,
                     NVL (TO_CHAR (N.EMAIL), '') AS mail_Address,
                     NVL (TO_CHAR (F.CUST_VA_NO), '') AS customer_Va_No,
                     NVL (TO_CHAR (G.CUST_BILL_PAY_REF_NO1), '') AS customer_Jom_Pay_Ref_No,
                     TO_CHAR (D.STK_CODE) AS product_Code,
                     TO_CHAR (D.STK_DESC) AS product_Name,
                     NVL (D.SERIAL_CHK, 'N') AS SERIAL_CHK,
                     NVL (FN_GET_COMMCD (10, C.APP_TYPE_ID), '') AS app_Type,
                     NVL (R.SO_REQ_REM, '') AS instruction,
                     NVL (K.INSTCT, '') AS instruction_ins,
                     NVL (TO_CHAR (I.INSTALL_DT, 'YYYYMMDD'), '') AS installation_Date,
                     NVL (TO_CHAR (J.MEM_CODE), '') AS installed_By,
                     '' AS prev_Outstanding,
                     '' AS penalty_Charges,
                     '' AS unbilled_Amount,
                     '' AS outstanding,
                     NVL (TO_CHAR (L.CODE), '') AS dsc_Code,
                     NVL (I.SIRIM_NO, '') AS sirim_No,
                     fn_get_order_serial(C.SALES_ORD_ID, NULL) AS serial_No,
                     '' AS hp_Name,
                     '' AS hp_Tel,
                     NVL (TO_CHAR (M.NAME), '') AS hm_Name,
                     NVL (TO_CHAR (M.TEL_MOBILE), '') AS hm_Tel,
                     TO_CHAR (E.STK_RETN_CC_ID) AS cc_Code,
                     TO_CHAR (E.STK_RETN_RESN_ID) AS result_Code,
                     TO_CHAR (E.STK_RETN_REM) AS result_Remark,
                     TO_CHAR (E.RETN_CODE_FAIL_REMARK) AS retn_code_fail_remark,
                     NVL (TO_CHAR (E.OWNER_CODE), '') AS owner_Code,
                     NVL (FN_GET_COMMCD (376, TO_CHAR (E.OWNER_CODE)), '') AS owner_Code_Nm,
                     NVL (TO_CHAR (E.RESULT_CUST_NAME), '') AS result_Cust_Name,
                     NVL (TO_CHAR (E.RESULT_ICMOBILE_NO), '') AS result_Ic_Mobile_No,
                     NVL (TO_CHAR (E.RESULT_RPT_EMAIL_NO), '') AS result_Report_Email_No,
                     NVL (TO_CHAR (E.RESULT_ACEPT_NAME), '') AS result_Acceptance_Name,
                     NVL (TO_CHAR (A.FAIL_RESN_ID), '') AS fail_Reason_Id,
                     NVL (TO_CHAR (A.FAIL_RESN_CODE), '') AS fail_Reason_Code,
                     '' AS fail_Reason_Name,
                     TO_CHAR (E.STK_RETN_DT, 'YYYYMMDD') AS complete_Ret_Date,
                     TO_CHAR (E.STK_RETN_DT, 'HHMM') AS complete_Ret_Time,
                     '' AS last_Payment_Date,
                     NVL (TO_CHAR (I.NEXT_CALL_DT, 'YYYYMMDD'), '') AS next_Call_Date,
                     NVL (TO_CHAR (I.NEXT_CALL_DT, 'HHMM'), '') AS next_Call_Time,
                     (SELECT FRA_ORD_NO FROM HMC0011D WHERE MAT_ORD_NO = C.SALES_ORD_NO AND ROWNUM = 1) AS FRA_ORD_NO,
                     '(' || Q.PROMO_CODE || ') ' || Q.PROMO_DESC AS SALES_PROMOTION
              FROM LOG0038D A
              INNER JOIN ORG0001D B ON A.CT_ID = B.MEM_ID
              INNER JOIN SAL0001D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
              INNER JOIN SYS0026M D ON A.STOCK_ID = D.STK_ID
              LEFT OUTER JOIN (SELECT A.*,
                                                   B.RETN_RESULT_ID AS RETN_RESULT_ID
                                        FROM LOG0039D A
                                        INNER JOIN ( SELECT STK_RETN_ID,
                                                                      MAX (STK_RETN_RESULT_ID) AS RETN_RESULT_ID
                                                            FROM LOG0039D
                                                            GROUP BY STK_RETN_ID) B ON A.STK_RETN_ID = B.STK_RETN_ID
                                                                                                  AND A.STK_RETN_RESULT_ID = B.RETN_RESULT_ID
                                       /* SQL TUNING ML_AWR_20240118_0kcr0wz4avjn4 */
                                        WHERE A.STK_RETN_ID IN (SELECT A.STK_RETN_ID
                                                                               FROM LOG0038D A
                                                                               INNER JOIN ORG0001D B ON A.CT_ID = B.MEM_ID
                                                                               WHERE B.MEM_CODE = #{userId})
                                                                   ) E ON A.STK_RETN_ID = E.STK_RETN_ID
              LEFT OUTER JOIN SAL0029D F ON C.CUST_ID = F.CUST_ID
              LEFT OUTER JOIN SAL0024D G ON C.CUST_BILL_ID = G.CUST_BILL_ID
              LEFT OUTER JOIN ( SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID, SALES_ORD_ID
                                FROM SAL0046D
                                WHERE STUS_CODE_ID = 4
                                GROUP BY SALES_ORD_ID) H ON C.SALES_ORD_ID = H.SALES_ORD_ID
              INNER JOIN (SELECT A.*
                          FROM SAL0047D A
                          INNER JOIN ( SELECT ENTRY_ID, MAX (RESULT_ID) AS RESULT_ID
                                       FROM SAL0047D
                                       GROUP BY ENTRY_ID) B ON A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID) I ON H.INSTALL_ENTRY_ID = I.ENTRY_ID
              INNER JOIN ORG0001D J ON I.CT_ID = J.MEM_ID
              INNER JOIN SAL0045D K ON A.SALES_ORD_ID = K.SALES_ORD_ID
              INNER JOIN SYS0005M L ON B.BRNCH = L.BRNCH_ID
              LEFT OUTER JOIN ORG0001D M ON C.SALES_HM_ID = M.MEM_ID
              LEFT OUTER JOIN SAL0027D N ON K.CNT_ID = N.CUST_CNTC_ID
              LEFT OUTER JOIN SAL0023D O ON K.ADD_ID = O.CUST_ADD_ID
              LEFT OUTER JOIN SYS0064M P ON O.AREA_ID = P.AREA_ID AND P.STATUS_ID = 1
              LEFT JOIN SAL0017D Q ON C.PROMO_ID = Q.PROMO_ID
              LEFT JOIN SAL0020D R ON A.REF_ID = R.SO_REQ_ID AND A.SALES_ORD_ID = R.SO_REQ_SO_ID
              WHERE A.APP_DT BETWEEN ADD_MONTHS (LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')) + 1, -1)
                AND LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM'))
                AND B.MEM_CODE = #{userId}
                AND D.STK_CTGRY_ID NOT IN (SELECT A.CODE_ID
                                                             FROM SYS0013M A, SYS0094M B
                                                             WHERE A.CODE = B.CODE
                                                             AND A.CODE_MASTER_ID = 11
                                                             AND B.IND = 'HOMECARE'
                                                             AND A.CODE IN ('FRM','ACO'))
    ) A
    ]]>
  </select>

  <select id="getProductRetrunJobList_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(SALES_ORD_NO        )         AS        sales_Order_No
         , TO_CHAR(SVC_NO              )         AS        service_No
         , TO_CHAR(CUST_NAME           )         AS        cust_Name
         , TO_CHAR(JOB_TYPE            )         AS        job_Type
         , TO_CHAR(JOB_STUS            )         AS        job_Status
         , TO_CHAR(APPNT_DT            )         AS        appointment_Date
         , TO_CHAR(APPNT_TM            )         AS        appointment_Time
         , TO_CHAR(JOB_SESION          )         AS        job_Session
         , TO_CHAR(CHECKIN_DT          )         AS        check_In_Date
         , TO_CHAR(CHECKIN_TM          )         AS        check_In_Time
         , TO_CHAR(CHECKIN_GPS         )         AS        check_In_Gps
         , TO_CHAR(CUST_TYPE           )         AS        customer_Type
         , TO_CHAR(CUST_ID             )         AS        customer_Id
         , TO_CHAR(SVC_STATE           )         AS        service_State
         , TO_CHAR(PLAN_YEAR           )         AS        plan_Year
         , TO_CHAR(PLAN_MONTH          )         AS        plan_Month
         , TO_CHAR(INSTALL_ADDR        )         AS        install_Address
         , TO_CHAR(POST_CODE           )         AS        postcode
         , TO_CHAR(HANDPHONE_TEL       )         AS        handphone_Tel
         , TO_CHAR(HOME_TEL            )         AS        home_Tel
         , TO_CHAR(OFFICE_TEL          )         AS        office_Tel
         , TO_CHAR(MAIL_ADDR           )         AS        mail_Address
         , TO_CHAR(CUST_VA_NO          )         AS        customer_Va_No
         , TO_CHAR(CUST_JOM_PAY_REF_NO )         AS        customer_Jom_Pay_Ref_No
         , TO_CHAR(PRODUCT_NAME        )         AS        product_Name
         , TO_CHAR(PRODUCT_CODE        )         AS        product_Code
         , TO_CHAR(APP_TYPE            )         AS        app_Type
         , TO_CHAR(INSTCT              )         AS        instruction
         , TO_CHAR(INSTALL_DT          )         AS        installation_Date
         , TO_CHAR(INSTALL             )         AS        installed_By
         , TO_CHAR(PREV_OTSTND         )         AS        prev_Outstanding
         , TO_CHAR(PNALTY_CHRG         )         AS        penalty_Charges
         , TO_CHAR(UNBILLED_AMT        )         AS        unbilled_Amount
         , TO_CHAR(OTSTND              )         AS        outstanding
         , TO_CHAR(DSC_CODE            )         AS        dsc_Code
         , TO_CHAR(SIRIM_NO            )         AS        sirim_No
         , TO_CHAR(SERIAL_NO           )         AS        serial_No
         , TO_CHAR(HP_NAME             )         AS        hp_Name
         , TO_CHAR(HP_TEL              )         AS        hp_Tel
         , TO_CHAR(HM_NAME             )         AS        hm_Name
         , TO_CHAR(HM_TEL              )         AS        hm_Tel
         , TO_CHAR(CC_CODE             )         AS        cc_Code
         , TO_CHAR(RESULT_CODE         )         AS        result_Code
         , TO_CHAR(RESULT_REM          )         AS        result_Remark
         , TO_CHAR(RETN_CODE_FAIL_REMARK)         AS        retn_code_fail_remark
         , TO_CHAR(OWNER_CODE          )         AS        owner_Code
         , TO_CHAR(OWNER_CODE_NM       )         AS        owner_Code_Nm
         , TO_CHAR(RESULT_CUST_NAME    )         AS        result_Cust_Name
         , TO_CHAR(RESULT_ICMOBILE_NO  )         AS        result_Ic_Mobile_No
         , TO_CHAR(RESULT_RPT_EMAIL_NO )         AS        result_Report_Email_No
         , TO_CHAR(RESULT_ACEPT_NAME   )         AS        result_Acceptance_Name
         , TO_CHAR(FAIL_RESN_CODE      )         AS        fail_Reason_Code
         , TO_CHAR(FAIL_RESN_NAME      )         AS        fail_Reason_Name
         , TO_CHAR(CMPLT_RET_DT        )         AS        complete_Ret_Date
         , TO_CHAR(CMPLT_RET_TM        )         AS        complete_Ret_Time
         , TO_CHAR(LAST_PAY_DT         )         AS        last_Payment_Date
         , TO_CHAR(NEXT_CALL_DT        )         AS        next_Call_Date
         , TO_CHAR(NEXT_CALL_TM        )         AS        next_Call_Time
         , TO_CHAR(CRT_USER_ID         )         AS        Create_User_ID
         , TO_CHAR(CRT_DT              )         AS        Create_Date
         , TO_CHAR(SERIAL_CHK) AS serial_Chk
         , TO_CHAR(FRA_YN) AS fra_Yn
         , TO_CHAR(FRA_ORD_NO) AS fra_Ord_No
         , TO_CHAR(FRA_PRODUCT_CODE) AS fra_Product_Code
         , TO_CHAR(FRA_PRODUCT_NAME) AS fra_Product_Name
         , TO_CHAR(FRA_SERIAL_CHK) AS fra_Serial_Chk
         , TO_CHAR(SEL_SERIAL_NO) AS sel_Serial_No
         , TO_CHAR(SEL_FRA_SERIAL_NO) AS sel_Fra_Serial_No
         , LATITUDE AS LATITUDE
         , LONGITUDE AS LONGITUDE
     <!--   , TO_CHAR(SALES_PROMT) AS sales_Promotion -->
    FROM SVC0104T
    WHERE MEM_CODE =  #{userId}
  </select>

  <select id="heartServiceParts_BAK" parameterType="Map" resultType="egovMap">
    SELECT *
    FROM (SELECT ROW_NUMBER () OVER (PARTITION BY S01A.SALES_ORD_NO,
                                                  S08A.NO,
                                                  S26A.STK_CODE,
                                                  S26B.STK_CODE
                                     ORDER BY S26B.STK_CODE DESC) rn,
                 S01A.SALES_ORD_NO AS sales_Order_No,
                 S08A.NO AS service_No,
                 S08A.YEAR,
                 S08A.MONTH,
                 S26A.STK_CODE AS product_Code,
                 S26B.STK_CODE AS part_Code,
                 S26B.STK_DESC AS part_Name,
                 S87A.SRV_FILTER_STK_ID AS part_Id,
                 L44A.BOM_COMPNT,
                 L44A.COMPNT_QTY AS quanity,
                 /* S07A.EXCH_REASON_ID, */
                 TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Chg_Date,
                 S87A.SRV_FILTER_PRIOD AS parts_Period,
                 NVL2 (L44A.ALTER_ITM_GRP, 'N', 'Y') AS alternative_Y_N,
                 S06A.RESULT_ID,
                 S07A.BS_RESULT_PART_ID,
                 S07A.BS_RESULT_PART_QTY,
                 CASE WHEN TO_NUMBER(S07A.BS_RESULT_PART_QTY, '99999') <![CDATA[ > ]]> 0
                   THEN 'Y'
                   ELSE 'N' END AS chg_Y_N,
                 '' AS ex_Chgid,
                 TO_char(S07A.BS_RESULT_PART_QTY) AS chg_Qty,
                 TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'HHMM') AS last_Chg_Time,
                 NULL AS alternative_Used_Y_N,
                 NULL AS alternative_Filter_Code,
                 NULL AS alternative_Filter_Id,
                 NULL AS alternative_Filter_Name,
                 TO_CHAR (NVL (H.SERIALCHK, 'N')) AS filter_Barcd_Chk_Y_N,
                 NULL AS filterBarcd_Serial_No,
                 S90A.SRV_CODY_ID,
                (SELECT MEM_CODE
                 FROM ORG0001D ME
                 WHERE 1 = 1
                   AND ME.MEM_ID = S90A.SRV_CODY_ID) AS cody_cd
          FROM SAL0001D S01A
          INNER JOIN SAL0002D S02A ON S02A.SALES_ORD_ID = S01A.SALES_ORD_ID
          INNER JOIN SYS0026M S26A ON S26A.STK_ID = S02A.ITM_STK_ID
          INNER JOIN SAL0090D S90A ON S90A.SRV_SO_ID = S01A.SALES_ORD_ID
          INNER JOIN SAL0087D S87A ON S87A.SRV_CONFIG_ID = S90A.SRV_CONFIG_ID AND S87A.SRV_FILTER_STUS_ID = 1
          INNER JOIN SYS0026M S26B ON S26B.STK_ID = S87A.SRV_FILTER_STK_ID
          INNER JOIN LOG0043M L43A ON L43A.MATRL_NO = S26A.STK_CODE OR L43A.MATRL_NO = (SELECT STK_CODE FROM SYS0026M WHERE STK_ID = S26A.MASTER_STK_ID)
          INNER JOIN LOG0044D L44A ON S26B.STK_CODE = L44A.BOM_COMPNT AND L44A.BOM = L43A.BOM AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(L44A.VALID_FROM_DT, 'YYYYMMDD') AND TO_CHAR(L44A.VALID_TO_DT, 'YYYYMMDD')
          INNER JOIN SVC0008D S08A ON S08A.SALES_ORD_ID = S01A.SALES_ORD_ID
          LEFT JOIN SVC0006D S06A ON S06A.SCHDUL_ID = S08A.SCHDUL_ID
          LEFT JOIN SVC0007D S07A ON S07A.BS_RESULT_ID = S06A.RESULT_ID AND S87A.SRV_FILTER_STK_ID = S07A.BS_RESULT_PART_ID
          INNER JOIN ORG0001D O1DA ON O1DA.MEM_ID = S08A.CODY_ID
          LEFT OUTER JOIN ( SELECT S26.STK_CODE,
                                                NVL(S26.SERIAL_CHK , 'N') AS SERIALCHK
                                      FROM SYS0026M S26
                                      WHERE 1 = 1
                                       AND S26.STUS_CODE_ID = 1
                                    ) H ON S26B.STK_CODE = H.STK_CODE
           WHERE S08A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
           AND S08A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
           AND O1DA.MEM_CODE = #{userId})
    WHERE 1 = 1 AND rn = 1
  </select>

  <select id="heartServiceParts" parameterType="Map" resultType="egovMap">
    SELECT A.*,
           S06A.RESULT_ID,
           S07A.BS_RESULT_PART_ID,
           S07A.BS_RESULT_PART_QTY,
           CASE WHEN TO_NUMBER(S07A.BS_RESULT_PART_QTY, '99999') > 0
                  THEN 'Y'
                  ELSE 'N' END AS chg_Y_N,
           '' AS ex_Chgid,
           case WHEN A.STUS_CODE_ID = 1 THEN
           TO_CHAR(A.quanity)
           else
           TO_CHAR(S07A.BS_RESULT_PART_QTY) end AS chg_Qty,
           TO_CHAR (NVL (H.SERIALCHK, 'N')) AS filter_Barcd_Chk_Y_N,
           1
           ,TO_CHAR(NVL(S07A.FILTER_BARCD_SERIAL_NO,'')) filter_Barcd_Serial_No /*  Hui Ding - Added previous used filter serial 2021-11-24 */
           ,TO_CHAR(NVL(S07A.FILTER_SRL_UNMATCH_RSN,'')) filter_Serial_Unmatch_Reason /*  Hui Ding - Added previous used filter serial 2021-11-24 */
           ,TO_CHAR(NVL(S07A.OLD_FILTER_BARCD_SERIAL_NO,'')) filter_Barcd_Serial_No_OLD /*  Hui Ding - Added previous used filter serial 2021-11-24 */
           <!--   20220914 CELESTE [S] Edit Customer Contact Info -->
           ,CUSTDT.OLD_HP_NO
           ,CUSTDT.OLD_HOME_NO
           ,CUSTDT.OLD_OFFICE_NO
           ,CUSTDT.OLD_EMAIL
           ,CUSTDT.NEW_HP_NO AS NEW_HANDPHONE_TEL
           ,CUSTDT.NEW_HOME_NO AS NEW_HOME_TEL
           ,CUSTDT.NEW_OFFICE_NO AS NEW_OFFICE_TEL
           ,CUSTDT.NEW_EMAIL
           ,CUSTDT.STATUS AS APPR_STATUS
           <!--   20220914 CELESTE [E] Edit Customer Contact Info -->
    FROM ( SELECT ROW_NUMBER () OVER (PARTITION BY S01A.SALES_ORD_NO,
                                                   S08A.NO,
                                                   S26A.STK_CODE,
                                                   S26B.STK_CODE
                                       ORDER BY S26B.STK_CODE DESC) rn,
                  S01A.SALES_ORD_NO AS sales_Order_No,
                  S08A.NO AS service_No,
                  S08A.YEAR,
                  S08A.MONTH,
                  S26A.STK_CODE AS product_Code,
                  S26B.STK_CODE AS part_Code,
                  S26B.STK_DESC AS part_Name,
                  S87A.SRV_FILTER_STK_ID AS part_Id,
                  L44A.BOM_COMPNT,
                  L44A.COMPNT_QTY AS quanity,
                  /* S07A.EXCH_REASON_ID, */
                  TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Chg_Date,
                  S87A.SRV_FILTER_PRIOD AS parts_Period,
                  NVL2 (L44A.ALTER_ITM_GRP, 'N', 'Y') AS alternative_Y_N,
                  /*S06A.RESULT_ID,
                  S07A.BS_RESULT_PART_ID,
                  S07A.BS_RESULT_PART_QTY,
                  CASE WHEN TO_NUMBER(S07A.BS_RESULT_PART_QTY, '99999') > 0
                         THEN 'Y'
                         ELSE 'N' END AS chg_Y_N,
                  '' AS ex_Chgid,
                  TO_char(S07A.BS_RESULT_PART_QTY) AS chg_Qty,*/
                  TO_CHAR (S87A.SRV_FILTER_PRV_CHG_DT, 'HHMM') AS last_Chg_Time,
                  NULL AS alternative_Used_Y_N,
                  NULL AS alternative_Filter_Code,
                  NULL AS alternative_Filter_Id,
                  NULL AS alternative_Filter_Name,
                  /* TO_CHAR (NVL (H.SERIALCHK, 'N')) AS filter_Barcd_Chk_Y_N, */
                  <!-- NULL AS filterBarcd_Serial_No,  /*  Hui Ding - Added previous used filter serial 2021-11-24 */-->
                  S90A.SRV_CODY_ID,
                  S08A.SCHDUL_ID,
                  S87A.SRV_FILTER_STK_ID,
                  S87A.SRV_FILTER_LAST_SERIAL AS sys_Filter_Barcd_Serial_No_Old,  /*  Hui Ding - Added previous used filter serial 2021-11-24 */
                  NULL AS is_Fill_Filter_Info, /* Hui Ding - Added previous used filter serial 2021-11-24 */
                  S08A.CODY_ID,
                  S26B.STK_CODE
                  ,S08A.STUS_CODE_ID
                  ,S13M.CODE AS PROD_CAT
           FROM SAL0001D S01A
           INNER JOIN SAL0002D S02A ON S02A.SALES_ORD_ID = S01A.SALES_ORD_ID
           INNER JOIN SYS0026M S26A ON S26A.STK_ID = S02A.ITM_STK_ID
           INNER JOIN SAL0090D S90A ON S90A.SRV_SO_ID = S01A.SALES_ORD_ID
           INNER JOIN SAL0087D S87A ON S87A.SRV_CONFIG_ID = S90A.SRV_CONFIG_ID AND S87A.SRV_FILTER_STUS_ID = 1
           INNER JOIN SYS0026M S26B ON S26B.STK_ID = S87A.SRV_FILTER_STK_ID
           INNER JOIN LOG0043M L43A ON L43A.MATRL_NO = S26A.STK_CODE OR L43A.MATRL_NO = (SELECT STK_CODE FROM SYS0026M WHERE STK_ID = S26A.MASTER_STK_ID)
           INNER JOIN LOG0044D L44A ON S26B.STK_CODE = L44A.BOM_COMPNT AND L44A.BOM = L43A.BOM AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(L44A.VALID_FROM_DT, 'YYYYMMDD') AND TO_CHAR(L44A.VALID_TO_DT, 'YYYYMMDD')
           INNER JOIN SVC0008D S08A ON S08A.SALES_ORD_ID = S01A.SALES_ORD_ID
           INNER JOIN ORG0001D O1DA ON O1DA.MEM_ID = S08A.CODY_ID
           LEFT JOIN SYS0013M S13M ON S26A.STK_CTGRY_ID = S13M.CODE_ID AND S13M.CODE_MASTER_ID = 11
           WHERE S08A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
            AND S08A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
            AND O1DA.MEM_CODE = #{userId}
         ) A
        LEFT JOIN SVC0006D S06A ON S06A.SCHDUL_ID = a.SCHDUL_ID  and S06A.RESULT_IS_CURR = 1
        LEFT JOIN SVC0007D S07A ON S07A.BS_RESULT_ID = S06A.RESULT_ID AND a.SRV_FILTER_STK_ID = S07A.BS_RESULT_PART_ID
        LEFT OUTER JOIN ( SELECT S26.STK_CODE,
                                               NVL(S26.SERIAL_CHK , 'N') AS SERIALCHK
                                    FROM SYS0026M S26
                                    WHERE 1 = 1
                                    AND S26.STUS_CODE_ID = 1
        ) H ON a.STK_CODE = H.STK_CODE
        <!--   20220914 CELESTE [S] Edit Customer Contact Info -->
        LEFT JOIN SAL0329D CUSTDT ON CUSTDT.ORDER_ID = S06A.SALES_ORD_ID AND CUSTDT.HS_NO = A.SERVICE_NO
        WHERE 1 = 1
         AND rn = 1
  </select>

  <select id="heartServiceParts_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(SALES_ORD_NO          )     AS     sales_Order_No
         , TO_CHAR(SVC_NO                )    AS     service_No
         , TO_CHAR(PRODUCT_CODE          )    AS     product_Code
         , TO_CHAR(PART_CODE             )    AS     part_Code
         , TO_CHAR(PART_ID               )    AS     part_Id
         , TO_CHAR(PART_NAME             )    AS     part_Name
         , TO_CHAR(QTY                   )    AS     quanity
         , TO_CHAR(EXCHG_ID              )    AS     ex_Chg_id
         , TO_CHAR(CHG_QTY               )    AS     chg_Qty
         , TO_CHAR(CHG_YN                )    AS     chg_Y_N
         , TO_CHAR(LAST_CHG_DT           )    AS     last_Chg_Date
         , TO_CHAR(LAST_CHG_TM           )    AS     last_Chg_Time
         , TO_CHAR(PART_PRIOD            )    AS     parts_Period
         , TO_CHAR(ALTRTIV_YN            )    AS     alternative_Y_N
         , TO_CHAR(ALTRTIV_USED_YN       )    AS     alternative_Used_Y_N
         , TO_CHAR(ALTRTIV_FILTER_CODE   )    AS     alternative_Filter_Code
         , TO_CHAR(ALTRTIV_FILTER_ID     )    AS     alternative_Filter_Id
         , TO_CHAR(ALTRTIV_FILTER_NAME   )    AS     alternative_Filter_Name
         , TO_CHAR(FILTER_BARCD_CHK_YN   )    AS     filter_Barcd_Chk_Y_N
         , TO_CHAR(FILTER_BARCD_SERIAL_NO)    AS     filter_Barcd_Serial_No
         , TO_CHAR(CRT_USER_ID           )    AS     Create_User_ID
         , TO_CHAR(CRT_DT                )    AS     Create_Date
         , TO_CHAR(SRV_FILTER_PREV_SERIAL) AS filter_Barcd_Serial_No_Old   /* Hui Ding - Added previous used filter serial 2021-11-24 */
         , TO_CHAR(FILTER_SRL_UNMATCH_RSN) AS filter_Serial_Unmatch_Reason /* Hui Ding - Added previous used filter serial 2021-11-24 */
         , TO_CHAR(IS_FILL_FILTER_INFO) AS is_Fill_Filter_Info /* Hui Ding - Added previous used filter serial 2021-11-24 */
         , TO_CHAR(SYS_SRV_FILTER_PREV_SERIAL) AS sys_Filter_Barcd_Serial_No_Old   /* Hui Ding - Added previous used filter serial 2021-11-24 */
    FROM SVC0105T
    WHERE MEM_CODE = #{userId}
  </select>

  <select id="getAfterServiceJobList_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR (SALES_ORD_NO) AS sales_Order_No,
           TO_CHAR (SVC_NO) AS service_No,
           TO_CHAR (CUST_NAME) AS cust_Name,
           TO_CHAR (JOB_TYPE) AS job_Type,
           NVL(TO_CHAR (JOB_STUS), '0') AS job_Status,
           TO_CHAR (APPNT_DT) AS appointment_Date,
           TO_CHAR (APPNT_TM) AS appointment_Time,
           TO_CHAR (JOB_SESION) AS job_Session,
           TO_CHAR (CHECKIN_DT) AS check_In_Date,
           TO_CHAR (CHECKIN_TM) AS check_In_Time,
           TO_CHAR (CHECKIN_GPS) AS check_In_Gps,
           NVL(TO_CHAR (CUST_TYPE), '0') AS customer_Type,
           NVL(TO_CHAR (CUST_ID), '0') AS customer_Id,
           TO_CHAR (SVC_STATE) AS service_State,
           TO_CHAR (PLAN_YEAR) AS plan_Year,
           TO_CHAR (PLAN_MONTH) AS plan_Month,
           TO_CHAR (INSTALL_ADDR) AS install_Address,
           TO_CHAR (POST_CODE) AS postcode,
           TO_CHAR (HANDPHONE_TEL) AS handphone_Tel,
           TO_CHAR (HOME_TEL) AS home_Tel,
           TO_CHAR (OFFICE_TEL) AS office_Tel,
           TO_CHAR (MAIL_ADDR) AS mail_Address,
           TO_CHAR (CUST_VA_NO) AS customer_Va_No,
           TO_CHAR (CUST_JOM_PAY_REF_NO) AS customer_Jom_Pay_Ref_No,
           TO_CHAR (PRODUCT_NAME) AS product_Name,
           TO_CHAR (PRODUCT_CODE) AS product_Code,
           TO_CHAR (APP_TYPE) AS app_Type,
           TO_CHAR (INSTCT) AS instruction,
           TO_CHAR (SALES_PROMT) AS sales_Promotion,
           TO_CHAR (REQSTER) AS requestor,
           TO_CHAR (REQSTER_CNTC) AS requestor_Contact,
           NVL(TO_CHAR (CNTRCT_DUR), '0') AS contract_Duration,
           NVL(TO_CHAR (MONTH_RENTAL_FEES), '0') AS monthly_Rental_Fees,
           NVL(TO_CHAR (RGIST_FEES), '0') AS registration_Fees,
           TO_CHAR (PAY_MODE) AS payment_Mode,
           NVL(TO_CHAR (BANK_CODE), '0') AS bank_Code,
           TO_CHAR (BANK_NAME) AS bank_Name,
           TO_CHAR (CARD_ACC_NO) AS card_AccountNo,
           TO_CHAR (OTSTND) AS outstanding,
           TO_CHAR (SIRIM_NO) AS sirim_No,
           TO_CHAR (SERIAL_NO) AS serial_No,
           TO_CHAR (WRANTY) AS warranty,
           TO_CHAR (MBRSH_CNTRCT_EXPR) AS Membership_Contract_Expiry,
           TO_CHAR (RENTAL_STUS) AS rental_Status,
           TO_CHAR (DSC_CODE) AS dsc_Code,
           TO_CHAR (INSTALL_DT) AS installation_Date,
           NVL(TO_CHAR (LABOUR_CHRG), '0') AS labour_Charge,
           NVL(TO_CHAR (DEFECT_TYPE_ID), '0') AS defect_Type_Id,
           NVL(TO_CHAR (DEFECT_GRP_ID), '0') AS defect_Group_Id,
           NVL(TO_CHAR (DEFECT_ID), '0') AS defect_Id,
           NVL(TO_CHAR (DEFECT_PART_GRP_ID), '0') AS defect_Part_Group_Id,
           NVL(TO_CHAR (DEFECT_PART_ID), '0') AS defect_Part_Id,
           NVL(TO_CHAR (DEFECT_DTL_RESN_ID), '0') AS defect_Detail_Reason_Id,
           NVL(TO_CHAR (SLUTN_RESN_ID), '0') AS solution_Reason_Id,
           TO_CHAR (RESULT_REM) AS result_Remark,
           TO_CHAR (OWNER_CODE) AS owner_Code,
           TO_CHAR (OWNER_CODE_NM) AS owner_Code_Nm,
           TO_CHAR (RESULT_CUST_NAME) AS result_Cust_Name,
           TO_CHAR (RESULT_ICMOBILE_NO) AS result_Ic_Mobile_No,
           TO_CHAR (RESULT_RPT_EMAIL_NO) AS result_Report_Email_No,
           TO_CHAR (RESULT_ACEPT_NAME) AS result_Acceptance_Name,
           NVL(TO_CHAR (MALFUNC_CODE), '0') AS malfunction_Code,
           TO_CHAR (MALFUNC_NAME) AS malfunction_Name,
           NVL(TO_CHAR (MALFUNC_RESN_CODE), '0') AS malfunction_Reason_Code,
           TO_CHAR (MALFUNC_RESN_NAME) AS malfunction_Reason_Name,
           NVL(TO_CHAR (FAIL_RESN_CODE), '0') AS fail_Reason_Code,
           TO_CHAR (FAIL_RESN_NAME) AS fail_Reason_Name,
           TO_CHAR (REPAIR_REM) AS in_House_Repair_Remark,
           TO_CHAR (REPAIR_REPLACE_YN) AS inhouserepairreplacementyn,
           TO_CHAR (REPAIR_PROMIS_DT) AS in_House_Repair_Promised_Date,
           TO_CHAR (REPAIR_PRODUCT_GRP_CODE) AS in_House_Repair_Product_Group,
           TO_CHAR (REPAIR_PRODUCT_CODE) AS in_House_Repair_Product_Code,
           TO_CHAR (REPAIR_SERIAL_NO) AS in_House_Repair_Serial_No,
           TO_CHAR (REPAIR_YN) AS inhouserepairyn,
           NVL(TO_CHAR (REN_COLCT_ID), '0') AS ren_Collection_Id,
           TO_CHAR (LAST_PAY_DT) AS last_Payment_Date,
           TO_CHAR (AS_RESULT_NO) AS asr_No,
           NVL(TO_CHAR (FILTER_AMT), '0') AS filter_Amount,
           TO_CHAR (ACSRS_AMT) AS accessories_Amount,
           NVL(TO_CHAR (TOT_AMT), '0') AS total_Amount,
           TO_CHAR (CRT_USER_ID) AS Create_User_ID,
           TO_CHAR (CRT_DT) AS Create_Date,
           TO_CHAR(SERIAL_CHK) AS serial_Chk,
           TO_CHAR(PSI) AS psi,
           TO_CHAR(LPM) AS lpm,
           TO_CHAR(PRODCAT) AS prodcat,
           TO_CHAR(AS_UNMATCH_REASON) AS AS_UNMATCH_REASON,
           TO_CHAR(REWORK_PROJ) AS REWORK_PROJ,
           TO_CHAR(WATER_SRC_TYPE) AS WATER_SRC_TYPE,
           LATITUDE AS LATITUDE,
           LONGITUDE AS LONGITUDE,
           PARTNER_CODE AS PARTNER_CODE,
           NTU AS NTU
    FROM SVC0102T
    WHERE MEM_CODE = #{userId}
  </select>

  <select id="afterServiceParts" parameterType="Map" resultType="egovMap">
SELECT MST.*
         , TO_CHAR(SUB.AMT) AS sales_Price
    FROM (SELECT DISTINCT MST.*
               , TO_CHAR (A.SRV_FILTER_LAST_SERIAL) AS filter_Barcd_Serial_No
               , TO_CHAR (A.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Chg_Date
               , TO_CHAR (A.SRV_FILTER_PRV_CHG_DT, 'HHMM') AS last_Chg_Time
               , TO_CHAR (A.SRV_FILTER_EXPR_DT, 'YYYYMMDD') AS last_Chg_Date_Origin
               , TO_CHAR (A.SRV_FILTER_EXPR_DT, 'HHMM') AS last_Chg_Time_Origin
          FROM (SELECT TO_CHAR (B.CUST_ID) as CUST_ID,
                       TO_CHAR (B.SALES_ORD_ID) AS sales_Orderid,
                       TO_CHAR (B.SALES_ORD_NO) AS sales_Order_No,
                       TO_CHAR (A.AS_NO) AS service_No,
                       TO_CHAR (D.STK_CODE) AS product_Code,
                       TO_CHAR (F.STK_CODE) AS part_Code,
                       TO_CHAR (F.STK_ID) AS part_Id,
                       TO_CHAR (F.STK_DESC) AS part_Name,
                       TO_CHAR (NVL(H.SERIALCHK, '')) AS filter_Barcd_Chk_YN,
                       TO_CHAR (NVL(H.IS_SMO, '')) AS is_Smo,
                       TO_CHAR (NVL(H.IS_SERIAL_REPLC, '')) AS is_Serial_Replace,
                       TO_CHAR (F.STK_TYPE_ID) AS part_Type,
                       TO_CHAR (E.INTNL_CNTR) AS parts_Period,
                       TO_CHAR (E.COMPNT_QTY) AS quanity,
                       TO_CHAR(S5D.ASR_ITM_PART_QTY) AS chg_Qty ,
                       TO_CHAR(S5D.ASR_ITM_CHRG_FOC) AS charges_Foc ,
                       CASE WHEN TO_NUMBER(S5D.ASR_ITM_PART_QTY, '99999') <![CDATA[ > ]]> 0
                         THEN 'Y'
                         ELSE 'N' END AS chg_Y_N,
                       ''  AS ex_Chgid,
                       CASE WHEN X2.ASR_ITM_PART_ID in ('1917','1915') THEN 'PS2'
                        ELSE ''
                        END AS PS_REMARK
                FROM ( SELECT *
                       FROM SVC0001D
                       WHERE AS_MEM_ID = (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE = #{userId})
                         AND AS_APPNT_DT BETWEEN ADD_MONTHS( LAST_DAY( TO_DATE(#{requestDate}, 'YYYYMM' )) + 1, - 1 ) AND LAST_DAY( TO_DATE(#{requestDate}, 'YYYYMM' ))
                         AND AS_STUS_ID <![CDATA[ <> ]]> 4
                ) A
                INNER JOIN SAL0001D B ON A.AS_SO_ID = B.SALES_ORD_ID
                INNER JOIN SAL0002D C ON B.SALES_ORD_ID = C.SALES_ORD_ID
                INNER JOIN SYS0026M D ON C.ITM_STK_ID = D.STK_ID
                INNER JOIN ( SELECT LOG43.MATRL_NO
                                  , LOG44.*
                             FROM LOG0043M LOG43
                             INNER JOIN LOG0044D LOG44 ON LOG43.BOM = LOG44.BOM
                               AND TRUNC(SYSDATE) BETWEEN LOG44.VALID_FROM_DT AND LOG44.VALID_TO_DT
                               AND NVL(LOG44.DEL_INDICT,'N') != 'Y'
                           ) E ON D.STK_CODE = E.MATRL_NO OR E.MATRL_NO = (SELECT STK_CODE FROM SYS0026M WHERE STK_ID = D.MASTER_STK_ID)
                INNER JOIN SYS0026M F ON E.BOM_COMPNT = F.STK_CODE
                LEFT OUTER JOIN SVC0004D G ON A.AS_ID = G.AS_ENTRY_ID AND A.AS_SO_ID = G.AS_SO_ID
                LEFT OUTER JOIN SVC0005D S5D  ON S5D.AS_RESULT_ID = G.AS_RESULT_ID    AND  S5D.ASR_ITM_PART_ID=    F.STK_ID
                LEFT OUTER JOIN ( SELECT S26.STK_CODE,
                                                     S26.IS_SMO,
                                                     S26.IS_SERIAL_REPLC,
                                               CASE WHEN STK_TYPE_ID = '62' THEN 'N' ELSE NVL(S26.SERIAL_CHK , 'N') END AS SERIALCHK
                                        FROM SYS0026M S26
                                        WHERE 1 = 1
                                          AND S26.STUS_CODE_ID = 1
                ) H ON F.STK_CODE = H.STK_CODE

                LEFT OUTER JOIN (
                select  ase.AS_ID, ase.AS_SO_ID, asd.ASR_ITM_PART_ID
            FROM SVC0001D ase
                 JOIN SVC0004D asm   ON ase.AS_ID = asm.AS_ENTRY_ID AND AS_STUS_ID = 4
                 JOIN SVC0005D asd   ON asm.AS_RESULT_ID = asd.AS_RESULT_ID  AND asm.AS_RESULT_STUS_ID = 4
                 JOIN ORG0001D M   ON M.MEM_ID = asm.AS_CT_ID WHERE asm.AS_RESULT_ID in
                 (
                  SELECT *  FROM (
                    SELECT DISTINCT asm.AS_RESULT_ID
                FROM SVC0001D ase JOIN SVC0004D asm ON ase.AS_ID = asm.AS_ENTRY_ID AND AS_STUS_ID = 4
               JOIN SVC0005D asd ON asm.AS_RESULT_ID = asd.AS_RESULT_ID AND asm.AS_RESULT_STUS_ID = 4 AND asd.ASR_ITM_PART_ID in ('1917','1915') -- 116 NEO SENSE FILTER 11'
                 AND asm.AS_RESULT_NO = (
                 SELECT (SELECT MAX(AS_RESULT_NO) FROM SVC0004D WHERE AS_ENTRY_ID = ase.AS_ID) FROM DUAL )
                    ORDER BY AS_RESULT_ID DESC )
                                    )
                )X2 ON A.AS_SO_ID = X2.AS_SO_ID

           ) MST LEFT OUTER JOIN (SELECT A.SRV_SO_ID
                                       , B.*
                                  FROM SAL0090D A
                                     , SAL0087D B
                                  WHERE A.SRV_CONFIG_ID = B.SRV_CONFIG_ID
                                    AND B.SRV_FILTER_STUS_ID = 1
                                  ) A ON MST.sales_Orderid = A.SRV_SO_ID AND MST.part_Id = A.SRV_FILTER_STK_ID
                        ORDER BY MST.sales_Orderid
    ) MST LEFT OUTER JOIN (SELECT STK_ID,
                                  AMT
                           FROM SAL0016M
                           WHERE APP_TYPE_ID = '67'
                             AND STUS_CODE_ID = 1
                             AND AMT > 0
    ) SUB ON MST.part_Id = SUB.STK_ID
  </select>

  <select id="afterServiceParts_b" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(SALES_ORD_NO          )   AS        sales_Order_No
         , TO_CHAR(SVC_NO                )   AS        service_No
         , TO_CHAR(PRODUCT_CODE          )   AS        product_Code
         , TO_CHAR(PART_CODE             )   AS        part_Code
         , TO_CHAR(PART_ID               )   AS        part_Id
         , TO_CHAR(PART_NAME             )   AS        part_Name
         , TO_CHAR(QTY                   )   AS        quanity
         , TO_CHAR(CHG_QTY               )   AS        chg_Qty
         , TO_CHAR(CHRG_FOC              )   AS        charges_Foc
         , TO_CHAR(EXCHG_ID              )   AS        ex_Chgid
         , TO_CHAR(SALES_PRC             )   AS        sales_Price
         , TO_CHAR(CHG_YN                )   AS        chg_YN
         , TO_CHAR(LAST_CHG_DT           )   AS        last_Chg_Date
         , TO_CHAR(LAST_CHG_TM           )   AS        last_Chg_Time
         , TO_CHAR(LAST_CHG_DT_ORGN      )   AS        last_Chg_Date_Origin
         , TO_CHAR(LAST_CHG_TM_ORGN      )   AS        last_Chg_Time_Origin
         , TO_CHAR(PART_TYPE             )   AS        part_Type
         , TO_CHAR(PART_PRIOD            )   AS        parts_Period
         , TO_CHAR(FILTER_BARCD_CHK_YN   )   AS        filter_Barcd_Chk_YN
         , TO_CHAR(FILTER_BARCD_SERIAL_NO)   AS        filter_Barcd_Serial_No
         , TO_CHAR(CHRG_YN               )   AS        chg_Y_N
         , TO_CHAR(CRT_USER_ID           )   AS        Create_User_ID
         , TO_CHAR(CRT_DT                )   AS        Create_Date
         , TO_CHAR(IS_SMO)   AS        is_Smo
         , TO_CHAR(IS_SERIAL_REPLC)   AS        is_Serial_Replace
    FROM SVC0106T
    WHERE MEM_CODE = #{userId}
  </select>

  <insert id="insertHeatLog" parameterType="Map">
    INSERT INTO SVC0023T (RESULT_SEQ
                        , RESULT_CRT_USER_ID
                        , SALES_ORD_ID
                        , SVC_NO
                        , TEMPER_SETTING
                        , NORESULT_REM
                        , NEXT_APPT_DATE
                        , NEXT_APPT_TIME
                        , OWNER_CODE
                        , RESULT_CUST_NAME
                        , RESULT_IC_MOBILE_NO
                        , RESULT_EMAIL_NO
                        , ACCEPTANCE_NAME
                        , REN_COLCT_ID
                        , SIGN_DATA
                        , BS_RESULT_PART_ID
                        , EXCH_REASON_ID
                        , BS_RESULT_PART_QTY
                        , CRT_USER_ID
                        , CRT_DT
                        , TRNSC_ID
                        , TRAN_STUS_CD
                        , CHECKIN_DT
                        , CHECKIN_TM
                        , CHECKIN_GPS
                        , FAUCET_EXCH
    ) VALUES (SVC0023T_RESULT_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , #{temperatureSetting}
            , #{resultRemark}
            , #{nextAppointmentDate}
            , #{nextAppointmentTime}
            , #{ownerCode}
            , #{resultCustName}
            , #{resultIcMobileNo}
            , #{resultReportEmailNo}
            , #{resultAcceptanceName}
            , #{rcCode}
            , #{signData}
            , #{filterCode}
            , #{exchangeId}
            , #{filterChangeQty}
            , #{userId}
            , SYSDATE
            , #{transactionId}
            , 'N'
            , #{checkInDate}
            , #{checkInTime}
            , #{checkInGps}
            , NVL(#{warranty}, 0)
    )
  </insert>

  <insert id="insertAsResultLog" parameterType="Map">
    INSERT INTO SVC0024T (RESULT_SEQ
                         ,RESULT_CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,LABOUR_CHRG
                         ,AS_DEFECT_ID
                         ,AS_DEFECT_PART_ID
                         ,AS_DEFECT_DTL_RESN_ID
                         ,AS_SLUTN_RESN_ID
                         ,AS_DEFECT_TYPE_ID
                         ,IN_HUSE_REPAIR_REM
                         ,IN_HUSE_REPAIR_REP_YN
                         ,IN_HUSE_REPAIR_PROMS_DATE
                         ,IN_HUSE_REPAIR_PROD_GRP_CODE
                         ,IN_HUSE_REPAIR_PROD_CODE
                         ,IN_HUSE_REPAIR_SERIAL_NO
                         ,RESULT_REM
                         ,OWNER_CODE
                         ,RESULT_CUST_NAME
                         ,RESULT_IC_MOBILE_NO
                         ,RESULT_EMAIL_NO
                         ,ACCEPTANCE_NAME
                         ,SIGN_DATA
                         ,TRNSC_ID
                         ,AS_RESULT_PART_ID
                         ,CHRG_FOC
                         ,EXCH_REASON_ID
                         ,SALES_PRC
                         ,AS_RESULT_PART_QTY
                         ,PART_TYPE
                         <!-- ,filterBarcdSerialNo -->
                         ,CRT_USER_ID
                         ,CRT_DT
                         ,TRAN_STUS_CD
                         ,CHECKIN_DT
                         ,CHECKIN_TM
                         ,CHECKIN_GPS
    ) VALUES (SVC0024T_RESULT_SEQ.NEXTVAL
             ,#{userId}
             ,#{salesOrderNo}
             ,#{serviceNo}
             ,#{labourCharge}
             ,#{defectId}
             ,#{defectPartId}
             ,#{defectDetailReasonId}
             ,#{solutionReasonId}
             ,#{defectTypeId}
             ,#{inHouseRepairRemark}
             ,#{inHouseRepairReplacementYN}
             ,#{inHouseRepairPromisedDate}
             ,#{inHouseRepairProductGroupCode}
             ,#{inHouseRepairProductCode}
             ,#{inHouseRepairSerialNo}
             ,#{resultRemark}
             ,#{ownerCode}
             ,#{resultCustName}
             ,#{resultIcMobileNo}
             ,#{resultReportEmailNo}
             ,#{resultAcceptanceName}
             ,#{signData}
             ,#{transactionId}
             ,#{filterCode}
             ,#{chargesFoc}
             ,#{exchangeId}
             ,#{salesPrice}
             ,#{filterChangeQty}
             ,#{partsType}
             <!-- ,#{filterBarcdSerialNo} -->
             ,#{userId}
             ,SYSDATE
             ,'N'
             ,#{checkInDate}
             ,#{checkInTime}
             ,#{checkInGps}
    )
  </insert>

  <insert id="insertInstallServiceLog" parameterType="Map">
    INSERT INTO SVC0025T ( RESULT_SEQ
                          ,RESULT_CRT_USER_ID
                          ,SALES_ORD_ID
                          ,SVC_NO
                          ,SIRIM_NO
                          ,SERIAL_NO
                          ,AS_EXCHG_YN
                          ,BEFOR_PRODUCT_SIRIM_NO
                          ,RESULT_REM
                          ,OWNER_CODE
                          ,RESULT_CUST_NAME
                          ,RESULT_IC_MOBILE_NO
                          ,RESULT_EMAIL_NO
                          ,ACCEPTANCE_NAME
                          ,SIGN_DATA
                          ,CRT_USER_ID
                          ,CRT_DT
                          ,TRNSC_ID
                          ,TRAN_STUS_CD
                          ,CHECKIN_DT
                          ,CHECKIN_TM
                          ,CHECKIN_GPS
    ) VALUES (SVC0025T_RESULT_SEQ.NEXTVAL
             ,#{userId}
             ,#{salesOrderNo}
             ,#{serviceNo}
             ,#{sirimNo}
             ,#{serialNo}
             ,#{asExchangeYN}
             ,#{beforeProductSerialNo}
             ,#{resultRemark}
             ,#{ownerCode}
             ,#{resultCustName}
             ,#{resultIcMobileNo}
             ,#{resultReportEmailNo}
             ,#{resultAcceptanceName}
             ,#{signData}
             ,#{userId}
             , SYSDATE
             ,#{transactionId}
             , 'N'
             , #{checkInDate}
             , #{checkInTime}
             , #{checkInGps}
    )
  </insert>

  <update id="updateSuccessStatus" parameterType="string">
    UPDATE SVC0023T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateErrStatus" parameterType="string">
    UPDATE SVC0023T SET TRAN_STUS_CD = 'E' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateASErrStatus" parameterType="string">
    UPDATE SVC0024T SET TRAN_STUS_CD = 'E' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessASStatus" parameterType="string">
    UPDATE SVC0024T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updatePRErrStatus" parameterType="string">
    UPDATE SVC0026T SET   TRAN_STUS_CD = 'E' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updatePRStatus" parameterType="string">
    UPDATE SVC0026T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessInstallStatus" parameterType="string">
    UPDATE SVC0025T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessErrInstallStatus" parameterType="string">
    UPDATE SVC0025T SET TRAN_STUS_CD = 'E' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessHsReStatus" parameterType="string">
    UPDATE SVC0036T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessAsReStatus" parameterType="string">
    UPDATE SVC0037T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessInsReStatus" parameterType="string">
    UPDATE SVC0038T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <update id="updateSuccessRequestRegiStatus" parameterType="string">
    UPDATE SVC0049T SET TRAN_STUS_CD = 'Y' WHERE TRNSC_ID = #{transactionId}
  </update>

  <select id="getNextSvc006dSeq"  resultType="int">
    SELECT GBSLCVD.SVC0006D_RESULT_ID_SEQ.NEXTVAL
    FROM DUAL
  </select>

  <insert id="insertHsResultD" parameterType="Map">
    INSERT INTO SVC0007D (BS_RESULT_ITM_ID
                         ,BS_RESULT_ID
                         ,BS_RESULT_PART_ID
                         ,BS_RESULT_PART_QTY
                         ,BS_RESULT_CRT_DT
                         ,BS_RESULT_CRT_USER_ID
    ) values (GBSLCVD.SVC0007D_BS_RESULT_ITM_ID_SEQ.nextval
            , #{bsResultId}
            , #{filterCode}
            , #{filterChangeQty}
            , sysdate
            , #{memId}
    )
  </insert>

  <select id="selectHSScheduleMCnt"  parameterType="Map" resultType="int">
    SELECT count(*) cnt
    FROM SVC0008D Extent1
    WHERE Extent1.SCHDUL_ID = #{schdulId}
  </select>

  <select id="selectHSResultMList"  parameterType="Map" resultType="egovMap">
    SELECT Extent1.RESULT_ID RESULT_ID  ,
           Extent1.NO NO  ,
           Extent1.TYPE_ID TYPE_ID  ,
           Extent1.SCHDUL_ID SCHDUL_ID  ,
           Extent1.SALES_ORD_ID SALES_ORD_ID  ,
           Extent1.CODY_ID CODY_ID  ,
           Extent1.SETL_DT SETL_DT  ,
           Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID  ,
           Extent1.FAIL_RESN_ID FAIL_RESN_ID  ,
           Extent1.REN_COLCT_ID REN_COLCT_ID  ,
           Extent1.WH_ID WH_ID  ,
           Extent1.RESULT_REM RESULT_REM  ,
           Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
           Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
           Extent1.RESULT_UPD_DT RESULT_UPD_DT  ,
           Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID  ,
           Extent1.RESULT_IS_SYNC RESULT_IS_SYNC  ,
           Extent1.RESULT_IS_EDIT RESULT_IS_EDIT  ,
           Extent1.RESULT_STOCK_USE RESULT_STOCK_USE  ,
           Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
           Extent1.RESULT_MTCH_ID RESULT_MTCH_ID  ,
           Extent1.RESULT_IS_ADJ RESULT_IS_ADJ  ,
           Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT  ,
           Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
    FROM SVC0006D Extent1
    <![CDATA[ WHERE Extent1.SCHDUL_ID = #{schdulId}  AND ROWNUM <= 1 ]]>
  </select>

  <update id="updateHsSVC0008D" parameterType="Map">
    UPDATE SVC0008D
    SET STUS_CODE_ID = #{resultStusCodeId}
      , ACTN_MEM_ID = #{memId}
      , CODY_ID = #{memId}
    WHERE SCHDUL_ID = #{schdulId}
  </update>

  <select id="selectSrvConfiguration" parameterType="Map" resultType="egovMap">
    SELECT Extent1.RESULT_ID RESULT_ID ,
           Extent1.NO NO ,
           Extent1.TYPE_ID TYPE_ID ,
           Extent1.SCHDUL_ID SCHDUL_ID ,
           Extent1.SALES_ORD_ID SALES_ORD_ID ,
           Extent1.CODY_ID CODY_ID ,
           Extent1.SETL_DT SETL_DT ,
           Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID ,
           Extent1.FAIL_RESN_ID FAIL_RESN_ID ,
           Extent1.REN_COLCT_ID REN_COLCT_ID ,
           Extent1.WH_ID WH_ID ,
           Extent1.RESULT_REM RESULT_REM ,
           Extent1.RESULT_CRT_DT RESULT_CRT_DT ,
           Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID ,
           Extent1.RESULT_UPD_DT RESULT_UPD_DT ,
           Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID ,
           Extent1.RESULT_IS_SYNC RESULT_IS_SYNC ,
           Extent1.RESULT_IS_EDIT RESULT_IS_EDIT ,
           Extent1.RESULT_STOCK_USE RESULT_STOCK_USE ,
           Extent1.RESULT_IS_CURR RESULT_IS_CURR ,
           Extent1.RESULT_MTCH_ID RESULT_MTCH_ID ,
           Extent1.RESULT_IS_ADJ RESULT_IS_ADJ ,
           Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT ,
           Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
    FROM SVC0006D Extent1
    <![CDATA[ WHERE Extent1.SALES_ORD_ID = #{salesOrdId} AND ROWNUM <= 1 ]]>
  </select>

  <insert id="insertHsResultSVC0006D" parameterType="Map" >
    INSERT INTO GBSLCVD.SVC0006D ( RESULT_ID,
                                   NO,
                                   TYPE_ID,
                                   SCHDUL_ID,
                                   SALES_ORD_ID ,
                                   CODY_ID,
                                   SETL_DT,
                                   RESULT_STUS_CODE_ID,
                                   FAIL_RESN_ID ,
                                   REN_COLCT_ID,
                                   WH_ID,
                                   RESULT_REM,
                                   RESULT_CRT_DT,
                                   RESULT_CRT_USER_ID,
                                   RESULT_UPD_DT,
                                   RESULT_UPD_USER_ID,
                                   RESULT_IS_SYNC,
                                   RESULT_IS_EDIT,
                                   RESULT_STOCK_USE,
                                   RESULT_IS_CURR,
                                   RESULT_MTCH_ID,
                                   RESULT_IS_ADJ
    ) VALUES ( #{bsResultId},
               #{docNo},
               #{typeId},
               #{schdulId},
               #{salesOrdId},
               #{memId},
               SYSDATE,
               #{resultStusCodeId},
               #{failResnId},
               #{renColctId},
               #{whId},
               #{resultRemark} ,
               SYSDATE,
               #{memId},
               SYSDATE ,
               #{memId} ,
               #{resultIsSync},
               #{resultIsEdit},
               #{resultStockUse},
               #{resultIsCurr},
               #{resultMtchId},
               #{resultIsAdj}
    )
  </insert>

  <select id="selectHsAssiinlList" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT Project2.No No ,
           Project2.HS_DATE HS_DATE ,
           Project2.STUS_CODE_ID STUS_CODE_ID ,
           Project2.Code Code ,
           Project2.SALES_ORD_NO SALES_ORD_NO ,
           Project2.ASSIGN_CODY C5 ,
           Project2.ACTION_CODY as ACTN_MEM_ID,
           Project2.MEM_ID ,
           Project2.Name Name ,
           Project2.cust_id,
           Project2.cody_status_nm,
           Project2.BRNCH_ID as BRNCH_ID,
           Project2.SCHDUL_ID SCHDUL_ID  ,
           Project2.SALES_ORD_ID,
           Project2.branch_cd,
           Project2.CODY_MANGR_USER_ID,
           Project2.MEM_CODE,
           Project2.sal_mem_id
    FROM (SELECT HS.NO AS NO,
                 HS.STUS_CODE_ID as STUS_CODE_ID,
                 HS.MONTH || '/' || HS.YEAR as HS_DATE ,
                 HS.MONTH,
                 HS.YEAR,
                 ST.CODE,
                 HR.NO AS Result,
                 SO.SALES_ORD_NO,
                 AP.CODE AS AppType,
                 CU.NAME,
                 CD.MEM_CODE AS ASSIGN_CODY,
                 CD.MEM_ID,
                 AC.MEM_CODE AS ACTION_CODY,
                 MG.STATE,
                 MG.AREA,
                 cu.CUST_ID as cust_id,
                 (SELECT code
                  FROM SYS0038M
                  WHERE 1=1
                    AND stus_code_id = cu.STUS_CODE_ID ) as cody_status_nm,
                 SO.BRNCH_ID as BRNCH_ID,
                 HS.SCHDUL_ID SCHDUL_ID ,
                 SO.SALES_ORD_ID,
                 BR.CODE as branch_cd,
                 MG.CODY_MANGR_USER_ID ,
                 (SELECT MEM_CODE
                  FROM ORG0001D
                  WHERE mem_id = SO.MEM_ID) as MEM_CODE,
                 SO.MEM_ID as sal_mem_id
          FROM SVC0008D HS
          INNER JOIN SAL0001D SO ON SO.SALES_ORD_ID = HS.SALES_ORD_ID
          INNER JOIN SAL0023D AD ON AD.CUST_ADD_ID = SO.CUST_ADD_ID
          INNER JOIN SYS0064M MG ON MG.AREA_ID = AD.AREA_ID
          LEFT JOIN SVC0006D HR ON HR.SCHDUL_ID = HS.SCHDUL_ID
          INNER JOIN SYS0038M ST ON ST.STUS_CODE_ID = HS.STUS_CODE_ID
          INNER JOIN SYS0013M AP ON AP.CODE_ID = SO.APP_TYPE_ID
          INNER JOIN SAL0029D CU ON CU.CUST_ID = SO.CUST_ID
          INNER JOIN ORG0001D CD ON CD.MEM_ID = HS.CODY_ID
          LEFT JOIN ORG0001D AC ON AC.MEM_ID = HS.ACTN_MEM_ID
          LEFT JOIN SYS0005M BR ON BR.CODE = MG.CODY_BRNCH_CODE
          WHERE 1=1
            AND SO.SALES_ORD_NO = #{salesOrderNo}
            AND HS.no = #{serviceNo}
    )Project2
  </select>

  <select id="getUseridToMemid" parameterType="Map" resultType="String">
    SELECT MEM_ID
    FROM ORG0001D
    WHERE mem_code = #{userId}
  </select>

  <select id="getInstallResultByInstallEntryID" parameterType="Map" resultType="egovMap">
    SELECT Extent1.INSTALL_ENTRY_ID INSTALL_ENTRY_ID  ,
           Extent1.INSTALL_ENTRY_NO INSTALL_ENTRY_NO  ,
           Extent3.SALES_ORD_ID SALES_ORD_ID  ,
           Extent3.SALES_ORD_NO SALES_ORD_NO  ,
           Extent3.REF_NO REF_NO  ,
           Extent3.CUST_PO_NO CUST_PO_NO  ,
           TO_CHAR(Extent3.SALES_DT,'DD-MM-YYYY') SALES_DT  ,
           TO_CHAR(Extent1.INSTALL_DT,'DD-MM-YYYY')  C1  ,
           Extent1.INSTALL_STK_ID INSTALL_STK_ID  ,
           Extent9.STK_CODE STK_CODE  ,
           Extent9.STK_DESC STK_DESC  ,
           Extent10.NAME NAME  ,
           Extent8.CODE_ID CODE_ID  ,
           Extent8.CODE_NAME CODE_NAME  ,
           Extent7.CODE_ID CODEID1  ,
           Extent7.CODE CODE  ,
           Extent7.CODE_NAME CODENAME1  ,
           Extent13.STUS_CODE_ID STUS_CODE_ID  ,
           Extent13.CODE CODE1  ,
           Extent13.NAME NAME1  ,
           Extent14.BRNCH_ID BRNCH_ID  ,
           Extent10.CUST_ID CUST_ID  ,
           Extent10.NRIC NRIC  ,
           CASE WHEN ( Extent3.CUST_ADD_ID IS NOT NULL )
             THEN Extent3.CUST_ADD_ID
             ELSE 0 END C2  ,
           Extent3.CUST_CNT_ID CUST_CNT_ID  ,
           Extent2.SIRIM_NO SIRIM_NO  ,
           Extent2.SERIAL_NO SERIAL_NO  ,
           Extent11.USER_NAME USER_NAME  ,
           Extent9.IS_SIRIM IS_SIRIM  ,
           Extent9.STK_GRAD STK_GRAD  ,
           TO_CHAR(Extent2.CRT_DT,'DD-MM-YYYY') C3  ,
           Extent9.STK_CTGRY_ID STK_CTGRY_ID  ,
           Extent2.DOC_REF_NO1 DOC_REF_NO1  ,
           Extent2.DOC_REF_NO2 DOC_REF_NO2  ,
           Extent2.ALLOW_COMM ALLOW_COMM  ,
           Extent2.IS_TRADE_IN IS_TRADE_IN  ,
           Extent2.REQUIRE_SMS REQUIRE_SMS  ,
           CASE WHEN ( Extent12.USER_ID IS NOT NULL )
             THEN Extent12.USER_NAME
             ELSE ' ' END C4  ,
           Extent2.CRT_DT C5  ,
           CASE WHEN ( Extent2.RESULT_ID IS NOT NULL )
             THEN Extent2.CT_ID
             ELSE 0 END C6  ,
           Extent15.MEM_CODE MEM_CODE  ,
           Extent15.NAME NAME2  ,
           Extent16.WH_LOC_ID WH_LOC_ID  ,
           Extent4.DOC_ID DOC_ID  ,
           Extent2.INSTALL_DT INSTALL_DT  ,
           Extent2.NEXT_CALL_DT NEXT_CALL_DT  ,
           Extent2.REM REM  ,
           Extent2.BOOSTER_PUMP BOOSTER_PUMP ,
           Extent2.AFT_PSI AFT_PSI ,
           Extent2.AFT_LPM AFT_LPM ,
           Extent2.TURB_LVL TURB_LVL ,
           Extent2.WATER_SRC_TYPE WATER_SRC_TYPE ,
           CASE WHEN ( Extent3.CUST_BILL_ID IS NOT NULL )
             THEN Extent3.CUST_BILL_ID
             ELSE 0 END C7  ,
           Extent6.CODE_NAME CODENAME2,
           Extent4.TYPE_ID TYPE_ID,
           Extent1.APPNT_DT,
           Extent1.APPNT_TM,
           Extent10.TYPE_ID as CUST_TYPE
    FROM SAL0046D Extent1
    LEFT JOIN SAL0047D Extent2 ON Extent1.INSTALL_ENTRY_ID = Extent2.ENTRY_ID
    JOIN SAL0001D Extent3 ON Extent1.SALES_ORD_ID = Extent3.SALES_ORD_ID
    LEFT JOIN CCR0006D Extent4 ON Extent1.CALL_ENTRY_ID = Extent4.CALL_ENTRY_ID
    LEFT JOIN SAL0074D Extent5 ON Extent3.SALES_ORD_ID = Extent5.SALES_ORD_ID
    LEFT JOIN SYS0013M Extent6 ON Extent5.MODE_ID = Extent6.CODE_ID
    LEFT JOIN SYS0013M Extent7 ON Extent4.TYPE_ID = Extent7.CODE_ID
    LEFT JOIN SYS0013M Extent8 ON Extent3.APP_TYPE_ID = Extent8.CODE_ID
    LEFT JOIN SYS0026M Extent9 ON Extent1.INSTALL_STK_ID = Extent9.STK_ID
    LEFT JOIN SAL0029D Extent10 ON Extent3.CUST_ID = Extent10.CUST_ID
    LEFT JOIN SYS0047M  Extent11 ON Extent3.UPD_USER_ID = Extent11.USER_ID
    LEFT JOIN SYS0047M  Extent12 ON Extent2.CRT_USER_ID = Extent12.USER_ID
    LEFT JOIN SYS0038M Extent13 ON Extent1.STUS_CODE_ID = Extent13.STUS_CODE_ID
    JOIN SAL0045D Extent14 ON Extent3.SALES_ORD_ID = Extent14.SALES_ORD_ID
    LEFT JOIN ORG0001D Extent15 ON Extent2.CT_ID = Extent15.MEM_ID
    LEFT JOIN SYS0028M Extent16 ON ( Extent15.MEM_CODE = Extent16.WH_LOC_CODE )
           OR ( ( Extent15.MEM_CODE IS NULL )
          AND ( Extent16.WH_LOC_CODE IS NULL ) )
    WHERE  1=1
    AND Extent3.SALES_ORD_NO = #{salesOrderNo}
    AND Extent1.INSTALL_ENTRY_NO = #{serviceNo}
    AND rownum =1
  </select>

  <insert id="insertInstallResult" parameterType="Map">
    INSERT INTO SAL0047D (RESULT_ID
                        , ENTRY_ID
                        , STUS_CODE_ID
                        , CT_ID
                        , INSTALL_DT
                        , REM
                        , GL_POST
                        , CRT_USER_ID
                        , CRT_DT
                        , SIRIM_NO
                        , SERIAL_NO
                        , FAIL_ID
                        , NEXT_CALL_DT
                        , ALLOW_COMM
                        , IS_TRADE_IN
                        , REQUIRE_SMS
                        , DOC_REF_NO1
                        , DOC_REF_NO2
                        , UPD_DT
                        , UPD_USER_ID
                        , ADJ_AMT
                        , MOBILE_ID
                        , APPNT_DT
                        , APPNT_TM
                        , AS_EXCHN_YN
                        , BEFOR_PRODUCT_SERIAL_NO
                        , RESULT_CUST_NAME
                        , RESULT_REP_EMAIL_NO
                        , RESULT_ACEPT_NAME
                        , SGN_DT
                        , TRNSC_ID
   ) VALUES ( SAL0047D_RESULT_ID_SEQ.NEXTVAL
            , #{entryId}
            , #{statusCodeId}
            , #{ctid}
            , TO_DATE(#{installDate},'YYYY-MM-DD')
            , #{remark}
            , #{glpost}
            , #{creator}
            , SYSDATE
            , #{sirimNo}
            , #{serialNo}
            , #{failId}
            , TO_DATE(#{nextCallDate},'YYYY-MM-DD')
            , #{allowComm}
            , #{inTradeIn}
            , #{reqSms}
            , #{docRefNo1}
            , #{docRefNo2}
            , SYSDATE
            , #{updator}
            , #{adjAmount}
            , NULL
            , #{appointmentDate}
            , #{appointmentTime}
            , #{asExchangeYN}
            , #{beforeProductSerialNo}
            , #{resultCustName}
            , #{resultReportEmailNo}
            , #{resultAcceptanceName}
            , #{signData}
            , #{transactionId}
    )
  </insert>

  <select id="selectAsDetails" parameterType="Map" resultType="egovMap">

    SELECT  A.INSTALL_ENTRY_ID,
                C.SALES_ORD_NO,
                B.STUS_CODE_ID,
                <!-- NVL(B.WATER_SRC_TYPE, '') AS WATER_SRC_TYPE, -->
                D.CODE_NAME

    FROM    SAL0046D A,
                SAL0047D B,
                SAL0001D C,
                SYS0013M D

    where
                A.INSTALL_ENTRY_ID =  B.ENTRY_ID
                and A.SALES_ORD_ID = C.SALES_ORD_ID
                and B.WATER_SRC_TYPE = D.CODE_ID (+)
                and D.CODE_MASTER_ID = '501'
                and C.SALES_ORD_NO = #{salesOrderNo}

  </select>

  <select id="serviceHistory" parameterType="Map" resultType="egovMap">
    SELECT sales_ord_no,
           job_Status,
           service_No,
           settle_Date,
           hsr_Asr_No,
           action_Member,
           job_Type,
           fail_Reason,
           collection_Code,
           collection_Name,
           result_Remark,
           filter_Code,
           filter_Name,
           last_Change_Date,
           filter_Period,
           TO_CHAR (next_Change_Date) AS next_Change_Date,
           change_Qty,
           part_Code,
           part_Name,
           part_Change_Qty,
           AS_RESULT_ID
    FROM (
      SELECT * FROM (
		    SELECT DISTINCT b.SALES_ORD_NO,
		                 S.AS_RESULT_STUS_ID job_Status,
		                 H.AS_NO service_No,
		                 TO_CHAR (S.AS_SETL_DT, 'YYYYMMDD') settle_Date,
		                 S.AS_RESULT_NO hsr_Asr_No,
		                 S.AS_CT_ID,
		                 (SELECT MEM_CODE
		                  FROM org0001d d
		                  WHERE 1 = 1
		                    AND d.mem_id = S.AS_CT_ID) action_Member,
		                   'AS' job_Type,
		                 (SELECT Extent1.RESN_DESC
		                  FROM SYS0032M Extent1
		                  WHERE Extent1.RESN_TYPE_ID = '166'
		                    AND Extent1.STUS_CODE_ID = 1
		                    AND RESN_ID = S.AS_FAIL_RESN_ID) AS fail_Reason,
		                 /* FN_GET_COMMCD (167, S.AS_FAIL_RESN_ID) AS fail_Reason,*/
		                 S.AS_RESULT_REM result_Remark,
		                 TO_NUMBER ('') collection_Code,
		                 TO_CHAR ('') collection_Name,
		                 TO_CHAR(C.ASR_ITM_PART_ID) filter_Code,
		                 TO_CHAR(C.ASR_ITM_PART_DESC) filter_Name,
		                 TO_CHAR (E.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Change_Date,
		                 TO_CHAR(E.SRV_FILTER_PRIOD) filter_Period,
		                 TO_CHAR(C.ASR_ITM_PART_QTY) change_Qty,
		                 '' next_Change_Date,
		                 G.STK_CODE AS part_Code,
		                 G.STK_DESC part_Name,
		                 BOM_DTL.COMPNT_QTY part_Change_Qty,
		                 to_char(c.AS_RESULT_ID) as AS_RESULT_ID
		         FROM SVC0004D S,
                       SAL0001D B,
                       SAL0002D I,
                       SVC0005D C,
                       SAL0087D E,
                       (SELECT LOG43.MATRL_NO, LOG44.*
                        FROM LOG0043M LOG43, LOG0044D LOG44
                        WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
                       SYS0026M G,
                       SVC0001D H
                  WHERE S.AS_SO_ID = B.SALES_ORD_ID
                    AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
                    AND C.ASR_ITM_PART_ID = E.SRV_FILTER_ID(+)
                    AND B.SALES_ORD_ID = I.SALES_ORD_ID
                    AND G.STK_ID = I.ITM_STK_ID
                    AND G.STK_CODE = BOM_DTL.MATRL_NO(+)
                    AND H.AS_ID = S.AS_ENTRY_ID
                    AND S.AS_RESULT_IS_CURR =1
		            AND B.SALES_ORD_NO = #{salesOrderNo}
		            ORDER BY SERVICE_NO DESC
		          ) WHERE 1 = 1 AND ROWNUM <![CDATA[ < ]]> 4
            )
    UNION ALL

    SELECT sales_ord_no,
           STUS_CODE_ID,
           SVC_NO AS service_No,
           SETL_DT AS settle_Date,
           RST_NO AS hsr_Asr_No,
           MEM_CODE AS action_Member,
           'HS' AS job_Type,
           (SELECT Extent1.RESN_DESC
            FROM SYS0032M Extent1
            WHERE Extent1.RESN_TYPE_ID = '167'
              AND Extent1.STUS_CODE_ID = 1
              AND RESN_ID = FAIL_RESN_ID) AS fail_Reason,
           /* ,FN_GET_COMMCD(167, FAIL_RESN_ID) as fail_Reason */
           REN_COLCT_ID AS collection_Code,
           (SELECT Extent1.RESN_DESC
            FROM SYS0032M Extent1
            WHERE Extent1.resn_type_id = 174 AND resn_id = REN_COLCT_ID) AS collection_Name,
            RESULT_REM AS result_Remark,
            TO_CHAR(BS_RESULT_PART_ID) AS filter_Code,
            TO_CHAR(BS_RESULT_PART_DESC) AS filter_Name,
            BS_RESULT_CRT_DT AS last_Change_Date,
            TO_CHAR(SRV_FILTER_PRIOD) AS filter_Period,
            TO_CHAR (next_Change_Date) next_Change_Date,
            TO_CHAR(BS_RESULT_PART_QTY) change_Qty,
            part_Code,
            part_Name,
            part_Change_Qty,
            TO_CHAR(BS_RESULT_ID) as  BS_RESULT_ID
    FROM (SELECT DISTINCT b.STUS_CODE_ID,
                 b.SCHDUL_ID,
                 b.SALES_ORD_ID,
                 c.SALES_ORD_NO,
                 TO_CHAR (a.SETL_DT, 'YYYYMMDD') AS SETL_DT,
                 a.NO AS RST_NO,
                 B.NO AS SVC_NO,
                 a.CODY_ID,
                 d.MEM_CODE,
                 a.FAIL_RESN_ID,
                 a.RESULT_REM,
                 a.REN_COLCT_ID,
                 '' as BS_RESULT_PART_ID,
                 '' as BS_RESULT_PART_DESC,
                 TO_CHAR (b.crt_dt, 'YYYYMMDD') AS BS_RESULT_CRT_DT,
                 '' as SRV_FILTER_PRIOD,
                 '' as BS_RESULT_PART_QTY,
                 '' next_Change_Date,
                 G.STK_CODE AS part_Code,
                 G.STK_DESC part_Name,
                 BOM_DTL.COMPNT_QTY part_Change_Qty,
                 '' as BS_RESULT_ID
          FROM SVC0006D a,
               SVC0008D b,
               sal0001d c,
               SAL0002D H,
               org0001d d,
                <!--  SVC0007D e,
                      sal0087d f, -->
               (SELECT LOG43.MATRL_NO, LOG44.*
                FROM LOG0043M LOG43, LOG0044D LOG44
                WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
               SYS0026M G,
               svc0001d I
          WHERE 1 = 1
            AND a.SCHDUL_ID = b.SCHDUL_ID
            AND a.sales_ord_id = c.sales_ord_id
            AND C.SALES_ORD_ID = H.SALES_ORD_ID
            AND a.CODY_ID = d.mem_id
            <!-- AND a.RESULT_ID = e.BS_RESULT_ID
                 AND e.BS_RESULT_ITM_ID = f.SRV_FILTER_ID(+) -->
            AND G.STK_ID = H.ITM_STK_ID
            AND G.STK_CODE = BOM_DTL.MATRL_NO
            AND B.SALES_ORD_ID = I.AS_SO_ID
            AND c.sales_ord_no = #{salesOrderNo}
    ORDER BY SETL_DT DESC) x
    WHERE 1 = 1 AND ROWNUM <![CDATA[ < ]]> 4
  </select>

  <select id="getAsFilterHistoryDList" parameterType="Map" resultType="egovMap">
    SELECT filter_Code,
           filter_Name,
           last_Change_Date,
           filter_Period,
           TO_CHAR (next_Change_Date, 'yyyymmdd') AS next_Change_Date,
           change_Qty
     FROM(SELECT C.ASR_ITM_PART_ID filter_Code,
                 C.ASR_ITM_PART_DESC filter_Name,
                 to_char(E.SRV_FILTER_PRV_CHG_DT,'YYYYMMDD') as  last_Change_Date,
                 E.SRV_FILTER_PRIOD filter_Period,
                 C.ASR_ITM_PART_QTY change_Qty,
                 add_months(E.SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD)  AS next_Change_Date
          FROM  SVC0004D S ,
                SAL0001D B ,
                SVC0005D C ,
                SAL0087D E
          WHERE S.AS_SO_ID = B.SALES_ORD_ID
            AND c.AS_RESULT_ID = #{asResultId}
             AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
             AND C.ASR_ITM_PART_ID =SRV_FILTER_ID(+)
             <![CDATA[  AND ROWNUM < 4]]>
         ORDER BY S.AS_RESULT_ID ASC
    )
  </select>

  <select id="getAsPartsHistoryDList" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR (next_Change_Date) AS next_Change_Date,
           part_Code,
           part_Name,
           part_Change_Qty
    FROM (SELECT distinct '' next_Change_Date,
                 G.STK_CODE AS part_Code,
                 G.STK_DESC AS part_Name,
                 BOM_DTL.COMPNT_QTY AS  part_Change_Qty
          FROM SVC0004D S ,
               SAL0001D B ,
               SVC0005D C ,
               SAL0087D E ,
               SAL0002D H,
               (SELECT LOG43.MATRL_NO,
                        LOG44.*
                FROM LOG0043M LOG43,
                     LOG0044D LOG44
                WHERE LOG43.BOM = LOG44.BOM ) BOM_DTL ,
               SYS0026M G
          WHERE S.AS_SO_ID = B.SALES_ORD_ID
            AND c.AS_RESULT_ID = #{asResultId}
            AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
            AND C.ASR_ITM_PART_ID =SRV_FILTER_ID(+)
            AND B.SALES_ORD_ID = H.SALES_ORD_ID
            AND G.STK_ID = H.ITM_STK_ID
            AND  G.STK_CODE =  BOM_DTL.MATRL_NO
            <![CDATA[  AND ROWNUM < 4]]>
    )
  </select>

  <select id="getHsFilterHistoryDList" parameterType="Map" resultType="egovMap">
    SELECT BS_RESULT_PART_ID as filter_Code
          ,BS_RESULT_PART_DESC as filter_Name
          ,BS_RESULT_CRT_DT as last_Change_Date
          ,SRV_FILTER_PRIOD as filter_Period
          , TO_CHAR(to_date(next_Change_Date,'yy/mm/dd'),'yyyymmdd') as next_Change_Date
          ,BS_RESULT_PART_QTY change_Qty
    FROM (SELECT DISTINCT a.SETL_DT
                         ,a.NO
                         ,e.BS_RESULT_PART_ID
                         ,e.BS_RESULT_PART_DESC
                         ,to_char(e.BS_RESULT_CRT_DT,'YYYYMMDD')as BS_RESULT_CRT_DT
                         ,F.SRV_FILTER_PRIOD
                         ,E.BS_RESULT_PART_QTY
                         ,to_char(add_months(e.BS_RESULT_CRT_DT, SRV_FILTER_PRIOD))  AS next_Change_Date
          FROM SVC0006D a
              ,SVC0008D b
              ,sal0001d c
              ,org0001d d
              ,SVC0007D e
              ,sal0087d f
          WHERE 1=1
            AND a.SCHDUL_ID = b.SCHDUL_ID
            AND a.sales_ord_id = c.sales_ord_id
            AND a.CODY_ID = d.mem_id
            AND a.RESULT_ID = e.BS_RESULT_ID
            AND e.BS_RESULT_PART_ID =f.SRV_FILTER_ID(+)
            AND e.BS_RESULT_ID = #{bsResultId}
          ORDER BY SETL_DT DESC ) x
    WHERE 1=1
    <![CDATA[ AND ROWNUM < 4]]>
  </select>

  <select id="getHsPartsHistoryDList" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(next_Change_Date) next_Change_Date
          ,part_Code
          ,part_Name
          ,part_Change_Qty
    FROM (SELECT DISTINCT '' next_Change_Date,
                 G.STK_CODE AS  part_Code,
                 G.STK_DESC AS part_Name,
                 BOM_DTL.COMPNT_QTY AS part_Change_Qty
          FROM SVC0006D a
              ,SVC0008D b
              ,sal0001d c
              ,SAL0002D H
              ,org0001d d
              ,SVC0007D e
              ,sal0087d f
              ,(SELECT LOG43.MATRL_NO,
                       LOG44.*
                FROM LOG0043M LOG43,
                     LOG0044D LOG44
                WHERE LOG43.BOM = LOG44.BOM ) BOM_DTL
              ,SYS0026M G
              ,svc0001d I
          WHERE 1=1
          AND a.SCHDUL_ID = b.SCHDUL_ID
          AND a.sales_ord_id = c.sales_ord_id
          AND C.SALES_ORD_ID = H.SALES_ORD_ID
          AND a.CODY_ID = d.mem_id
          AND a.RESULT_ID = e.BS_RESULT_ID
          AND e.BS_RESULT_ITM_ID =f.SRV_FILTER_ID(+)
          <!-- and c.sales_ord_no = #{SALES_ORD_NO} -->
          AND G.STK_ID = H.ITM_STK_ID
          AND  G.STK_CODE =  BOM_DTL.MATRL_NO
          AND B.SALES_ORD_ID = I.AS_SO_ID
          AND e.BS_RESULT_ID = #{bsResultId}
    ) x
    WHERE 1=1
    <![CDATA[  AND ROWNUM < 4]]>
  </select>

 <!-- <resultMap id="rcListMap" type="egovMap"></resultMap>
      <select id="getRentalCustomerList" parameterType="Map"  statementType="CALLABLE">
        {
          call SP_MOBILE_SELT_RC_TRGET(
            #{userId},
            #{searchType},
            #{searchKeyword},
            #{cv_1, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=rcListMap})
        } -->

  <select id="getRentalCustomerList" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT A.NAME AS cust_Name,
             SOM.SALES_ORD_NO AS sales_Order_No,
             CD.CODE_NAME AS payment_Mode,
             X.TARGET AS target_Amount,
             X.AMT AS amount,
             B.MODE_ID AS payment_Mode_Id,
             NVL(AD.CRT_DT_DD,'-')  deduct_dt,
             NVL(AD.BANK_DTL_APPR_CODE, '-') status_code,
             NVL(AD.CODE_NAME,'-') status,
             CASE WHEN Z.MONTH_TYPE = 'M2' AND Y.TARGET  <>  Y.COLLECTION THEN Z.MONTH_TYPE ELSE ' ' END AS MONTH_TYPE
      FROM (SELECT A.ACC_DEBT_ORD_ID SALES_ORD_ID,
                   A.ACC_DEBT_SRV_CNTRCT_ID CNTRCT_ID,
                   (CASE WHEN A.ACC_DEBT_SRV_CNTRCT_ID <> 0
                     THEN A.ACC_DEBT_SRV_CNTRCT_NO
                     ELSE A.ACC_DEBT_ORD_NO END) REF_NO,
                     A.ACC_DEBT_YEAR,
                     A.ACC_DEBT_MONTH,
                     TRUNC (S.ACC_DEBT_SUB_OPNG_COLCT_TRGET, 2) TARGET,
                     TRUNC (S.ACC_DEBT_SUB_CURR_COLCT, 2) + TRUNC (S.ACC_DEBT_SUB_CURR_ADJ, 2) AMT,
                     A.ACC_DEBT_ORD_TRGET_CODY_ID MEM_ID,
                     TRUNC (A.ACC_DEBT_COLCT_UPD_DT) UPD_DT,
                     B.MEM_CODE
            FROM PAY0052S A
            JOIN PAY0053S S ON S.ACC_DEBT_ORD_ID = A.ACC_DEBT_ORD_ID
                           AND S.ACC_DEBT_SRV_CNTRCT_ID = A.ACC_DEBT_SRV_CNTRCT_ID
            JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID
            JOIN SAL0001D AA ON AA.SALES_ORD_ID =  (
                                                    SELECT   SALES_ORD_ID
                                                    FROM SAL0070D
                                                    WHERE SALES_ORD_ID = A.ACC_DEBT_ORD_ID
                                                    GROUP BY SALES_ORD_ID
                                                    HAVING ADD_MONTHS(MAX(RENT_INST_DT),6) >= FN_GET_FIRST_DAY_MONTH(SYSDATE)
                                                    )

            WHERE A.ACC_DEBT_OPNG_RENTAL_STUS = 'REG'
              AND A.ACC_DEBT_OPNG_APP_TYPE_ID = 66
              AND S.ACC_DEBT_SUB_OPNG_OTSTND_AGING < 5
              AND S.ACC_DEBT_SUB_OPNG_COLCT_TRGET > 0

              /* UNION ALL

              SELECT ACC_DEBT_ORD_ID,
                     ACC_DEBT_SRV_CNTRCT_ID,
                     (CASE WHEN ACC_DEBT_SRV_CNTRCT_ID <> 0
                        THEN ACC_DEBT_SRV_CNTRCT_NO
                        ELSE ACC_DEBT_ORD_NO END),
                      ACC_DEBT_YEAR,
                      ACC_DEBT_MONTH,
                      TRUNC (ACC_DEBT_SUB_OPNG_COLCT_TRGET, 2),
                      TRUNC (ACC_DEBT_SUB_CURR_COLCT, 2),
                      ACC_DEBT_ORD_TRGET_CODY_ID,
                      TRUNC (ACC_DEBT_COLCT_UPD_DT),
                      B.MEM_CODE
              FROM (SELECT *
                    FROM PAY0150D A
                     WHERE A.ACC_YM = TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'YYYYMM')
                       AND A.ACC_DEBT_YEAR = TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'YYYY')
                       AND A.ACC_DEBT_MONTH = TO_NUMBER (TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'MM'))

                    UNION ALL

                    SELECT *
                    FROM PAY0150D A
                    WHERE A.ACC_YM = TO_CHAR (ADD_MONTHS (SYSDATE, -2), 'YYYYMM')
                      AND A.ACC_DEBT_YEAR = TO_CHAR (ADD_MONTHS (SYSDATE, -2), 'YYYY')
                      AND A.ACC_DEBT_MONTH = TO_NUMBER (TO_CHAR (ADD_MONTHS (SYSDATE, -2), 'MM')))A
                    JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID */
      ) X
      LEFT JOIN SAL0074D RPS ON RPS.SALES_ORD_ID = X.SALES_ORD_ID AND RPS.SVC_CNTRCT_ID = X.CNTRCT_ID
      LEFT JOIN SYS0013M CD ON Cd.CODE_ID = RPS.MODE_ID
      LEFT JOIN SAL0001D SOM ON SOM.SALES_ORD_ID = X.SALES_ORD_ID
      LEFT JOIN SAL0027D CC ON CC.CUST_CNTC_ID = SOM.CUST_CNT_ID
      LEFT JOIN SAL0071D SC ON SC.SALES_ORD_ID = X.SALES_ORD_ID
      LEFT JOIN SAL0029D A ON A.CUST_ID = SOM.CUST_ID
      JOIN SAL0074D B ON B.SALES_ORD_ID = SOM.SALES_ORD_ID
      LEFT JOIN REP0087S Y ON Y.SALES_ORD_ID = RPS.SALES_ORD_ID
      LEFT JOIN PAY0042D Z ON Z.SALES_ORD_ID = Y.SALES_ORD_ID AND Y.THSMNTH = Z.BANK_DTL_ID
      LEFT JOIN (WITH autoDebit AS (
	          SELECT
	                ROW_NUMBER() OVER(PARTITION BY SALES_ORD_ID ORDER BY BANK_DTL_ID DESC) AS row_number
	               , T1.BANK_DTL_ID
	               , T1.SALES_ORD_ID
	               , TO_CHAR(T2.CRT_DT, 'DD/MM/YY') CRT_DT_DD
	               , NVL(t1.BANK_DTL_APPR_CODE,0) BANK_DTL_APPR_CODE
	                                , CASE WHEN T4.IND = 'SUCCESS' OR BANK_DTL_APPR_CODE IS NULL THEN 'Success'
	                                WHEN T4.IND = 'INSFUNDS' THEN 'Insufficient Funds'
	                                WHEN T4.IND = 'INVCARD' THEN 'Return pin/Invalid Card'
	                                WHEN T4.IND = 'EXPCARD' THEN 'Expired Card'
	                                WHEN T4.IND = 'CDOPTIN' THEN 'Card to Opt In'
	                                WHEN T4.IND = 'CHGCARD' THEN
	                                                            CASE WHEN T2.CTRL_IS_CRC = 1 THEN
	                                                                CASE WHEN T1.BANK_DTL_APPR_CODE = '54' THEN 'Transaction Not Allowed' ELSE 'Refer to Issuer Bank' END
	                                                            ELSE  'Change Account' END
	                                WHEN T4.IND = 'TRXNOTALW' AND T2.CTRL_IS_CRC = 1 THEN 'Transaction Not Allowed'
	                                ELSE (CASE WHEN T2.CTRL_IS_CRC = 1 THEN 'Change Card' ELSE 'Change Account' END) END CODE_NAME
	            FROM PAY0042D T1
	                JOIN PAY0041D T2 ON T2.CTRL_ID = T1.BANK_DTL_CTRL_ID AND 8 != T2.CTRL_STUS_ID
	                LEFT JOIN SYS0094M T4 ON T4.CODE = T1.BANK_DTL_APPR_CODE AND T4.IND IN ('SUCCESS','INSFUNDS','INVCARD','CHGCARD','TRXNOTALW','CDOPTIN','EXPCARD')
	                JOIN PAY0052S T5 ON T1.SALES_ORD_ID = T5.ACC_DEBT_ORD_ID
	                JOIN ORG0001D T6 ON T5.ACC_DEBT_ORD_TRGET_CODY_ID = T6.MEM_ID
	            WHERE T6.MEM_CODE = #{userId}
	            ORDER BY T1.SALES_ORD_ID , T1.BANK_DTL_ID DESC
	        )
	        SELECT
	            BANK_DTL_ID, SALES_ORD_ID,CRT_DT_DD, BANK_DTL_APPR_CODE, CODE_NAME
	        FROM autoDebit
            WHERE row_number = 1) AD ON AD.SALES_ORD_ID = X.SALES_ORD_ID
      WHERE 1 = 1
        AND X.MEM_CODE = #{userId}
    ]]>

    <if test="searchKeyword != null and searchKeyword != ''">
      <choose>
         <when test="searchType == 2">
           AND A.NAME  LIKE  '%'||#{searchKeyword}||'%'
         </when>
         <when test="searchType == 1">
           AND SOM.SALES_ORD_NO like '%'|| #{searchKeyword} ||'%'
         </when>
         <otherwise>
           AND 1 = 1
         </otherwise>
       </choose>
      </if>

<!--        SELECT A.NAME AS cust_Name,
                 SOM.SALES_ORD_NO AS sales_Order_No,
                 CD.CODE_NAME AS payment_Mode,
                 X.TARGET AS target_Amount,
                 X.AMT AS amount,
                 B.MODE_ID AS payment_Mode_Id
            FROM (SELECT A.ACC_DEBT_ORD_ID SALES_ORD_ID,
                         A.ACC_DEBT_SRV_CNTRCT_ID CNTRCT_ID,
                         (CASE
                             WHEN A.ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN A.ACC_DEBT_SRV_CNTRCT_NO
                             ELSE A.ACC_DEBT_ORD_NO
                          END)
                            REF_NO,
                         A.ACC_DEBT_YEAR,
                         A.ACC_DEBT_MONTH,
                         TRUNC (S.ACC_DEBT_SUB_OPNG_COLCT_TRGET, 2) TARGET,
                         TRUNC (S.ACC_DEBT_SUB_CURR_COLCT, 2) + TRUNC (S.ACC_DEBT_SUB_CURR_ADJ, 2) AMT,
                         A.ACC_DEBT_ORD_TRGET_CODY_ID MEM_ID,
                         TRUNC (A.ACC_DEBT_COLCT_UPD_DT) UPD_DT,
                         B.MEM_CODE
                    FROM PAY0052S A
                         JOIN PAY0053S S
                            ON     S.ACC_DEBT_ORD_ID = A.ACC_DEBT_ORD_ID
                               AND S.ACC_DEBT_SRV_CNTRCT_ID = A.ACC_DEBT_SRV_CNTRCT_ID
                         JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID
                   WHERE     A.ACC_DEBT_OPNG_RENTAL_STUS = 'REG'
                         AND A.ACC_DEBT_OPNG_APP_TYPE_ID = 66
                         AND S.ACC_DEBT_SUB_OPNG_OTSTND_AGING < 5
                         AND S.ACC_DEBT_SUB_OPNG_COLCT_TRGET > 0
                  UNION ALL
                  SELECT ACC_DEBT_ORD_ID,
                         ACC_DEBT_SRV_CNTRCT_ID,
                         (CASE
                             WHEN ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN ACC_DEBT_SRV_CNTRCT_NO
                             ELSE ACC_DEBT_ORD_NO
                          END),
                         ACC_DEBT_YEAR,
                         ACC_DEBT_MONTH,
                         TRUNC (ACC_DEBT_SUB_OPNG_COLCT_TRGET, 2),
                         TRUNC (ACC_DEBT_SUB_CURR_COLCT, 2),
                         ACC_DEBT_ORD_TRGET_CODY_ID,
                         TRUNC (ACC_DEBT_COLCT_UPD_DT),
                         B.MEM_CODE
                    FROM (SELECT *
                            FROM PAY0150D A
                           WHERE     A.ACC_YM = TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'YYYYMM')
                                 AND A.ACC_DEBT_YEAR = TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'YYYY')
                                 AND A.ACC_DEBT_MONTH = TO_NUMBER (TO_CHAR (ADD_MONTHS (SYSDATE, -1), 'MM')))
                         A
                         JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID) X
                 LEFT JOIN SAL0074D RPS
                    ON RPS.SALES_ORD_ID = X.SALES_ORD_ID AND RPS.SVC_CNTRCT_ID = X.CNTRCT_ID
                 LEFT JOIN SYS0013M CD ON Cd.CODE_ID = RPS.MODE_ID
                 LEFT JOIN SAL0001D SOM ON SOM.SALES_ORD_ID = X.SALES_ORD_ID
                 LEFT JOIN SAL0027D CC ON CC.CUST_CNTC_ID = SOM.CUST_CNT_ID
                 LEFT JOIN SAL0071D SC ON SC.SALES_ORD_ID = X.SALES_ORD_ID
                 LEFT JOIN SAL0029D A ON A.CUST_ID = SOM.CUST_ID
                 JOIN SAL0074D B ON B.SALES_ORD_ID = SOM.SALES_ORD_ID
           WHERE 1 = 1
                     AND X.MEM_CODE = #{userId}

                  <if test="searchKeyword != null and searchKeyword != ''">
                    <choose>
                        <when test="searchType == 2">
                             AND A.NAME  LIKE  '%'||#{searchKeyword}||'%'
                        </when>
                        <when test="searchType == 1">
                            AND SOM.SALES_ORD_NO like '%'|| #{searchKeyword} ||'%'
                        </when>
                        <otherwise>
                          AND 1 = 1
                        </otherwise>
                    </choose>
                   </if> -->

<!--         <![CDATA[
                    SELECT A.NAME AS cust_Name
                          , SOM.SALES_ORD_NO AS sales_Order_No
                          , CD.CODE_NAME AS payment_Mode
                          , X.TARGET AS target_Amount
                          , X.AMT AS amount
                          , B.MODE_ID AS payment_Mode_Id
                       FROM ( SELECT A.ACC_DEBT_ORD_ID SALES_ORD_ID  ,
                                     A.ACC_DEBT_SRV_CNTRCT_ID CNTRCT_ID  ,
                                     (CASE
                                           WHEN A.ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN A.ACC_DEBT_SRV_CNTRCT_NO
                                           ELSE A.ACC_DEBT_ORD_NO
                                        END) REF_NO  ,
                                     A.ACC_DEBT_YEAR   ,
                                     A.ACC_DEBT_MONTH  ,
                                     TRUNC(S.ACC_DEBT_SUB_OPNG_COLCT_TRGET,2) TARGET  ,
                                     TRUNC(S.ACC_DEBT_SUB_CURR_COLCT,2) + TRUNC(S.ACC_DEBT_SUB_CURR_ADJ,2) AMT  ,
                                     A.ACC_DEBT_ORD_TRGET_CODY_ID MEM_ID  ,
                                     TRUNC(A.ACC_DEBT_COLCT_UPD_DT) UPD_DT ,
                                     B.MEM_CODE
                                FROM PAY0052S A
                                     JOIN PAY0053S S   ON S.ACC_DEBT_ORD_ID = A.ACC_DEBT_ORD_ID
                                     AND S.ACC_DEBT_SRV_CNTRCT_ID = A.ACC_DEBT_SRV_CNTRCT_ID
                                     JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID
                               WHERE A.ACC_DEBT_OPNG_RENTAL_STUS = 'REG'
                                 AND A.ACC_DEBT_OPNG_APP_TYPE_ID = 66
                                 AND S.ACC_DEBT_SUB_OPNG_OTSTND_AGING < 5
                                 AND S.ACC_DEBT_SUB_OPNG_COLCT_TRGET > 0
                              UNION ALL
                              SELECT ACC_DEBT_ORD_ID ,
                                     ACC_DEBT_SRV_CNTRCT_ID ,
                                     (CASE
                                           WHEN ACC_DEBT_SRV_CNTRCT_ID <> 0 THEN ACC_DEBT_SRV_CNTRCT_NO
                                           ELSE ACC_DEBT_ORD_NO
                                     END) ,
                                     ACC_DEBT_YEAR ,
                                     ACC_DEBT_MONTH ,
                                     TRUNC(ACC_DEBT_SUB_OPNG_COLCT_TRGET,2) ,
                                     TRUNC(ACC_DEBT_SUB_CURR_COLCT,2) ,
                                     ACC_DEBT_ORD_TRGET_CODY_ID ,
                                     TRUNC(ACC_DEBT_COLCT_UPD_DT) ,
                                     B.MEM_CODE
                                FROM ( SELECT *
                                         FROM PAY0150D A
                                        WHERE A.ACC_YM BETWEEN  TO_CHAR(FN_GET_LAST_DAY_MONTH(ADD_MONTHS(SYSDATE, -2)),'YYYYMM')  AND  TO_CHAR(FN_GET_LAST_DAY_MONTH(ADD_MONTHS(SYSDATE, -1)),'YYYYMM') ) A
                                      JOIN ORG0001D B ON B.MEM_ID = A.ACC_DEBT_ORD_TRGET_CODY_ID ) X
                            LEFT JOIN SAL0074D RPS   ON RPS.SALES_ORD_ID = X.SALES_ORD_ID
                            AND RPS.SVC_CNTRCT_ID = X.CNTRCT_ID
                            LEFT JOIN SYS0013M CD   ON Cd.CODE_ID = RPS.MODE_ID
                            LEFT JOIN SAL0001D SOM   ON SOM.SALES_ORD_ID = X.SALES_ORD_ID
                            LEFT JOIN SAL0027D CC   ON CC.CUST_CNTC_ID = SOM.CUST_CNT_ID
                            LEFT JOIN SAL0071D SC   ON SC.SALES_ORD_ID = X.SALES_ORD_ID
                            LEFT JOIN SAL0029D A    ON A.CUST_ID = SOM.CUST_ID
                            JOIN SAL0074D B ON B.SALES_ORD_ID = SOM.SALES_ORD_ID
                      WHERE 1 = 1
                        AND X.ACC_DEBT_YEAR = EXTRACT(YEAR FROM SYSDATE)
                        AND X.ACC_DEBT_MONTH = EXTRACT(MONTH FROM SYSDATE)
                        AND X.MEM_CODE = #{userId}
                        ]]>
                   <if test="searchKeyword != null and searchKeyword != ''">
                    <choose>
                        <when test="searchType == 2">
                             AND A.NAME  LIKE  '%'||#{searchKeyword}||'%'
                        </when>
                        <when test="searchType == 1">
                            AND SOM.SALES_ORD_NO like '%'|| #{searchKeyword} ||'%'
                        </when>
                        <otherwise>
                          AND 1 = 1
                        </otherwise>
                    </choose>
                   </if>       -->

<!--             SELECT C.NAME as cust_name,
                   B.SALES_ORD_NO as sales_order_no,
                   E.CODE_NAME as payment_mode,
                   NVL(B.MTH_RENT_AMT , 0) as target_amount,
                   NVL(A.RENT_AMT , 0) as amount,
                   to_char(E.CODE_ID)  as payment_Mode_Id
              FROM PAY0022D A,
                   SAL0001D B,
                   SAL0029D C,
                   SAL0074D D,
                   SYS0013M E,
                   ORG0001D F
             WHERE     A.rent_so_id = B.sales_ord_id
                   AND B.cust_id = C.cust_id
                   AND B.sales_ord_id = D.sales_ord_id
                   AND D.MODE_ID = E.CODE_ID(+)
                   AND E.CODE_MASTER_ID = 19
                   AND B.MEM_ID = F.MEM_ID
                   AND F.MEM_CODE = #{userId}
                   <if test="searchKeyword != null and searchKeyword != ''">
                    <choose>
                        <when test="searchType == 2">
                            AND C.NAME LIKE  '%'||#{searchKeyword}||'%'
                        </when>
                        <when test="searchType == 1">
                            AND B.sales_ord_no like '%'|| #{searchKeyword} ||'%'
                        </when>
                        <otherwise>
                          AND 1 = 1
                        </otherwise>
                    </choose>
                   </if> -->
  </select>


  <select id="selectOutstandingResult" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT *
    FROM (SELECT A.SALES_ORD_ID,
                 A.SALES_ORD_NO,
                 A.LAST_UP_DT,
                 SUM (NVL (B.AMT, 0)) sum_Rpf,
                 SUM (NVL (C.AMT, 0)) sum_Rpt,
                 SUM (NVL (D.AMT, 0)) sum_Rhf,
                 SUM (NVL (E.AMT, 0)) sum_Rental,
                 SUM (NVL (F.AMT, 0)) sum_Adjust,
                 SUM (A.TOT) TOT
          FROM (SELECT M.SALES_ORD_ID,
                       m.sales_ord_no,
                       UTILS.CONVERT_TO_NUMBER (SUM (L.RENT_AMT), 10, 2) TOT,
                       MAX (L.RENT_DT_TM) LAST_UP_DT
                FROM SAL0001D M JOIN PAY0022D L ON L.RENT_SO_ID = M.SALES_ORD_ID
                WHERE M.APP_TYPE_ID = 66 AND m.SALES_ORD_NO = #{salesOrderNo}
                GROUP BY M.SALES_ORD_ID, m.sales_ord_no) A
          LEFT JOIN (SELECT L.RENT_SO_ID,
                            CD.CODE_NAME TYPE,
                            SUM (L.RENT_AMT) AMT
                     FROM PAY0022D L
                     JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                     JOIN SYS0013M CD ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                     WHERE L.RENT_DOC_TYPE_ID IN (161)
                       AND L.RENT_SO_ID <> 0
                       AND M.APP_TYPE_ID = 66
                       AND m.SALES_ORD_NO = #{salesOrderNo}
                     GROUP BY L.RENT_SO_ID, CD.CODE_NAME) B ON B.RENT_SO_ID = A.SALES_ORD_ID
          LEFT JOIN (SELECT L.RENT_SO_ID,
                            CD.CODE_NAME TYPE,
                            SUM (L.RENT_AMT) AMT
                     FROM PAY0022D L
                     JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                     JOIN SYS0013M CD ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                     WHERE L.RENT_DOC_TYPE_ID IN (162)
                       AND L.RENT_SO_ID <> 0
                       AND M.APP_TYPE_ID = 66
                       AND m.SALES_ORD_NO = #{salesOrderNo}
                     GROUP BY L.RENT_SO_ID, CD.CODE_NAME) C ON C.RENT_SO_ID = A.SALES_ORD_ID
           LEFT JOIN ( SELECT L.RENT_SO_ID,
                              CD.CODE_NAME TYPE,
                              SUM (L.RENT_AMT) AMT
                       FROM PAY0022D L
                       JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                       JOIN SYS0013M CD ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                       WHERE L.RENT_DOC_TYPE_ID IN (1059)
                         AND L.RENT_SO_ID <> 0
                         AND M.APP_TYPE_ID = 66
                         AND m.SALES_ORD_NO = #{salesOrderNo}
                       GROUP BY L.RENT_SO_ID, CD.CODE_NAME) D ON D.RENT_SO_ID = A.SALES_ORD_ID
           LEFT JOIN (SELECT X.RENT_SO_ID,
                             SUM (X.AMT) AMT
                      FROM ( SELECT L.RENT_SO_ID,
                                    SUM (L.RENT_AMT) AMT
                             FROM PAY0022D L JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                             WHERE L.RENT_DOC_TYPE_ID NOT IN (155,
                                                              157,
                                                              161,
                                                              162,
                                                              1059)
                               AND L.RENT_SO_ID <> 0
                               AND M.APP_TYPE_ID = 66
                               AND m.SALES_ORD_NO = #{salesOrderNo}
                             GROUP BY L.RENT_SO_ID

                             UNION ALL

                             SELECT L.RENT_SO_ID,
                                    SUM (L.RENT_AMT) AMT
                             FROM PAY0022D L JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                             WHERE L.RENT_DOC_NO LIKE 'ACN%'
                               AND L.RENT_SO_ID <> 0
                               AND M.APP_TYPE_ID = 66
                               AND m.SALES_ORD_NO = #{salesOrderNo}
                             GROUP BY L.RENT_SO_ID) X
                      GROUP BY X.RENT_SO_ID) E ON E.RENT_SO_ID = A.SALES_ORD_ID
           LEFT JOIN ( SELECT L.RENT_SO_ID,
                              SUM (L.RENT_AMT) AMT
                       FROM PAY0022D L JOIN SAL0001D M ON M.SALES_ORD_ID = L.RENT_SO_ID
                       WHERE L.RENT_DOC_TYPE_ID IN (155, 157)
                         AND L.RENT_SO_ID <> 0
                         AND M.APP_TYPE_ID = 66
                         AND L.RENT_DOC_NO NOT LIKE 'ACN%'
                         AND m.SALES_ORD_NO = #{salesOrderNo}
                       GROUP BY L.RENT_SO_ID) F ON F.RENT_SO_ID = A.SALES_ORD_ID
           GROUP BY A.SALES_ORD_ID, A.LAST_UP_DT, a.sales_ord_no)
           WHERE 1 = 1
    ]]>


<!--              <![CDATA[      select *
                    from (   SELECT A.SALES_ORD_ID ,
                               A.SALES_ORD_NO ,
                              A.LAST_UP_DT ,
                              SUM(NVL(B.AMT, 0))  sum_Rpf  ,
                              SUM(NVL(C.AMT, 0))  sum_Rpt  ,
                              SUM(NVL(D.AMT, 0))  sum_Rhf  ,
                              SUM(NVL(E.AMT, 0))  sum_Rental  ,
                              SUM(NVL(F.AMT, 0))  sum_Adjust  ,
                              SUM(A.TOT)  TOT
                         FROM ( SELECT M.SALES_ORD_ID ,m.sales_ord_no,
                                       UTILS.CONVERT_TO_NUMBER(SUM(L.RENT_AMT) ,10,2) TOT  ,
                                       MAX(L.RENT_DT_TM)  LAST_UP_DT
                                FROM SAL0001D M
                                       JOIN PAY0022D L   ON L.RENT_SO_ID = M.SALES_ORD_ID
                                 WHERE  M.APP_TYPE_ID = 66
                                  and m.mem_id = (select MEM_id
                                        from org0001d
                                        where mem_code = #{userId})
                                  GROUP BY M.SALES_ORD_ID,m.sales_ord_no ) A
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 161 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                        and m.mem_id = (select MEM_id
                                                                        from org0001d
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) B   ON B.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 162 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) C   ON C.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   CD.CODE_NAME TYPE  ,
                                                   SUM(L.RENT_AMT)  AMT
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                   JOIN SYS0013M CD   ON CD.CODE_ID = L.RENT_DOC_TYPE_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 1059 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID,CD.CODE_NAME ) D   ON D.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT X.RENT_SO_ID ,
                                                   SUM(X.AMT)  AMT
                                            FROM ( SELECT L.RENT_SO_ID ,
                                                          SUM(L.RENT_AMT)  AMT
                                                   FROM PAY0022D L
                                                          JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                    WHERE  L.RENT_DOC_TYPE_ID NOT IN ( 155,157,161,162,1059 )
                                                             AND L.RENT_SO_ID <> 0
                                                             AND M.APP_TYPE_ID = 66
                                                              and m.mem_id = (select MEM_id
                                                                                from org0001d
                                                                                where mem_code = #{userId})
                                                     GROUP BY L.RENT_SO_ID
                                                   UNION ALL
                                                   SELECT L.RENT_SO_ID ,
                                                          SUM(L.RENT_AMT)  AMT
                                                   FROM PAY0022D L
                                                          JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                                    WHERE  L.RENT_DOC_NO LIKE 'ACN%'
                                                             AND L.RENT_SO_ID <> 0
                                                             AND M.APP_TYPE_ID = 66
                                                              and m.mem_id = (select MEM_id
                                                                                from org0001d
                                                                                where mem_code = #{userId})
                                                     GROUP BY L.RENT_SO_ID ) X
                                              GROUP BY X.RENT_SO_ID ) E   ON E.RENT_SO_ID = A.SALES_ORD_ID
                                LEFT JOIN ( SELECT L.RENT_SO_ID ,
                                                   SUM(L.RENT_AMT)  AMT
                                            FROM PAY0022D L
                                                   JOIN SAL0001D M   ON M.SALES_ORD_ID = L.RENT_SO_ID
                                             WHERE  L.RENT_DOC_TYPE_ID IN ( 155,157 )
                                                      AND L.RENT_SO_ID <> 0
                                                      AND M.APP_TYPE_ID = 66
                                                      AND L.RENT_DOC_NO NOT LIKE 'ACN%'
                                                      and m.mem_id = (select MEM_id
                                                                        from org0001d
                                                                        where mem_code = #{userId})
                                              GROUP BY L.RENT_SO_ID ) F   ON F.RENT_SO_ID = A.SALES_ORD_ID
                         GROUP BY A.SALES_ORD_ID,A.LAST_UP_DT, a.sales_ord_no
                         )
                         where 1=1
                         and SALES_ORD_NO = #{salesOrderNo}    ]]> -->
  </select>

  <select id="selectOutstandingResultDetailList" parameterType="Map" resultType="egovMap">
    SELECT SYS13M.CODE_NAME AS TYPE,
           MST.RENT_DOC_NO AS DOC_NO,
           NVL (MST.RENT_AMT, 0) AS amount,
           TO_CHAR (NVL (MST.RENT_INST_NO, 0)) AS INSTALL_NO,
           TO_CHAR (MST.RENT_DT_TM, 'YYYYMMDD') AS EVENT_DATE
    FROM (SELECT RENT_DOC_NO,
                 RENT_DOC_TYPE_ID,
                 RENT_DT_TM,
                 RENT_AMT,
                 RENT_INST_NO
          FROM PAY0022D A,
               SAL0001D B
          WHERE A.RENT_SO_ID = B.SALES_ORD_ID AND B.SALES_ORD_NO = #{salesOrderNo}

          UNION ALL

          SELECT TRADE_DOC_NO,
                 TRADE_DOC_TYPE_ID,
                 TRADE_DT_TM,
                 TRADE_AMT,
                 TRADE_INST_NO
          FROM PAY0035D A, SAL0001D B
          WHERE A.TRADE_SO_ID = B.SALES_ORD_ID AND B.SALES_ORD_NO = #{salesOrderNo}) MST,
          SYS0013M SYS13M
    WHERE MST.RENT_DOC_TYPE_ID = SYS13M.CODE_ID(+) AND SYS13M.CODE_MASTER_ID = 37
    ORDER BY MST.RENT_DT_TM ASC

 <!--            SELECT A.CODE_NAME AS TYPE,
                   A.RENT_DOC_NO AS DOC_NO,
                   0 AS NALANCE_AMT,
                   NVL (SUM (CASE WHEN A.MODE_ID = '132' THEN A.RENT_AMT  END ), 0) DEBIT_AMT,
                   NVL(SUM (CASE WHEN A.MODE_ID = '131' THEN A.RENT_AMT END ) , 0) CREDIT_AMT,
                   SUM (NVL(A.RENT_INST_AMT , 0)) amount,
                   TO_CHAR (INSTALL_ENTRY_NO) AS INSTALL_NO,
                    TO_CHAR (A.INSTALL_DT, 'YYYYMMDD') as EVENT_DATE
              FROM (SELECT /*+ USE_NL(A B C  D E )     */
                            C.CODE_NAME,
                             D.RENT_DOC_NO,
                             D.RENT_AMT,
                             A.RENT_INST_AMT,
                             A.RENT_INST_DT,
                             E.MODE_ID,
                             a.RENT_INST_NO,
                             g.INSTALL_ENTRY_NO,
                             g.INSTALL_DT
                        FROM SAL0070D A,
                             SAL0001D B,
                             SYS0013M C,
                             PAY0022D D,
                             SAL0074D E,
                             ORG0001D F,
                             SAL0046D g
                       WHERE     a.sales_ord_id = b.sales_ord_id
                             AND a.rent_inst_insert_year = 2017
                             AND A.SALES_ORD_ID = D.RENT_SO_ID
                             AND A.RENT_INST_TYPE_ID = C.CODE_ID(+)
                             AND b.app_type_id = 66
                             AND C.CODE_MASTER_ID = 37
                             AND D.RENT_AMT > 0
                             AND E.SALES_ORD_ID = A.sales_ord_id
                             AND B.MEM_ID = F.MEM_ID
                             AND A.SALES_ORD_ID = g.SALES_ORD_ID
                             AND F.MEM_CODE LIKE ('CD%')
                             AND F.MEM_CODE = #{userId}
                             AND B.sales_ord_ID =  (SELECT SALES_ORD_ID
                                                    FROM SAL0001D
                                                    WHERE SALES_ORD_NO = #{salesOrderNo})
                                                          ) A
            GROUP BY A.CODE_NAME, A.RENT_DOC_NO ,A.INSTALL_DT,a.INSTALL_ENTRY_NO -->
  </select>

  <insert id="insertHsReServiceLog" parameterType="Map">
    INSERT INTO SVC0036T ( RESULT_SEQ
                          ,CRT_USER_ID
                          ,SALES_ORD_ID
                          ,SVC_NO
                          ,AS_APPNT_DT
                          ,AS_APPNT_TM
                          <!-- ,TRNSC_ID -->
                          ,TRAN_STUS_CD
    ) VALUES (SVC0036T_ID_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            ,  to_date(#{appointmentDate},'YYYYMMDD')
            , #{appointmentTime}
            , 'N'
    )
  </insert>

  <insert id="insertAsReServiceLog" parameterType="Map">
    INSERT INTO SVC0037T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,AS_APPNT_DT
                         ,AS_APPNT_TM
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0037T_ID_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            ,  to_date(#{appointmentDate},'YYYYMMDD')
            , #{appointmentTime}
            , 'N'
    )
  </insert>

  <insert id="insertInsReServiceLog" parameterType="Map">
    INSERT INTO SVC0038T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,AS_APPNT_DT
                         ,AS_APPNT_TM
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0038T_ID_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            ,  to_date(#{appointmentDate},'YYYYMMDD')
            , #{appointmentTime}
            , 'N'
    )
  </insert>

  <insert id="insertPrReServiceLog" parameterType="Map">
    INSERT INTO SVC0040T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,AS_APPNT_DT
                         ,AS_APPNT_TM
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0040T_RESULT_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , TO_DATE(#{appointmentDate},'YYYYMMDD')
            , #{appointmentTime}
            , 'N'
    )
  </insert>

  <insert id="insertHsFailServiceLog" parameterType="Map">
    INSERT INTO SVC0041T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,FAIL_RESN_CODE
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES ( SVC0041T_RESULT_SEQ.NEXTVAL
             , #{userId}
             , REPLACE(#{salesOrderNo}, 'CCS', '')
             , #{serviceNo}
             , #{failReasonCode}
             , 'N'
    )
  </insert>

  <insert id="insertAsFailServiceLog" parameterType="Map">
    INSERT INTO SVC0042T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,FAIL_RESN_CODE
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0042T_RESULT_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , #{failReasonCode}
            , 'N'
    )
  </insert>

  <insert id="insertInsFailServiceLog" parameterType="Map">
    <selectKey keyProperty="resultSeq" resultType="int" order="BEFORE">
        SELECT SVC0043T_RESULT_SEQ.NEXTVAL AS resultSeq FROM DUAL
    </selectKey>
    INSERT INTO SVC0043T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,FAIL_RESN_CODE
                         ,TRAN_STUS_CD
                         ,FAIL_LOC_ID
                         ,VOLT
                         ,PSI
                         ,LPM
                         ,TDS
                         ,ROOM_TEMP
                         ,WATER_SRC_TEMP
    ) VALUES (#{resultSeq}
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , #{failReasonCode}
            , 'N'
            , #{failLocCde}
            , #{volt}
            , #{psiRcd}
            , #{lpmRcd}
            , #{tds}
            , #{roomTemp}
            , #{waterSourceTemp}
    )
  </insert>

  <insert id="updateInsFailServiceLog" parameterType="int">
    /* Woongjin Jun */
    UPDATE SVC0043T
         SET TRAN_STUS_CD = 'Y'
     WHERE RESULT_SEQ = #{resultSeq}
  </insert>

  <insert id="insertPrFailServiceLog" parameterType="Map">
    INSERT INTO SVC0044T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,FAIL_RESN_CODE
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0044T_RESULT_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , #{failReasonCode}
            , 'N'
    )
  </insert>

  <insert id="insertCanSMSServiceLog" parameterType="Map">
    INSERT INTO SVC0045T (RESULT_SEQ
                         ,CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,SENDER_TEL_NO
                         ,RCIVER_TEL_NO
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES (SVC0045T_RESULT_SEQ.NEXTVAL
            , #{userId}
            , #{salesOrderNo}
            , #{serviceNo}
            , #{senderTelNo}
            , #{receiverTelNo}
            , 'N'
    )
  </insert>

  <insert id="insertASRequestRegistrationLogs" parameterType="Map">
    INSERT INTO SVC0049T (RESULT_SEQ
                         ,USER_ID
                         ,SALES_ORD_NO
                         ,CUST_ID
                         ,PRODUCT_CODE
                         ,DEFECT_CODE_ID
                         ,RESULT_REM
                         <!-- ,TRNSC_ID -->
                         ,TRAN_STUS_CD
    ) VALUES ( SVC0049T_RESULT_SEQ.NEXTVAL
             , #{userId}
             , #{salesOrderNo}
             , #{customerId}
             , #{productCode}
             , #{defectCodeId}
             , #{resultRemark}
             , 'N'
    )
  </insert>

  <insert id="insertASRequestRegist" parameterType="Map">
    INSERT INTO SVC0001D (AS_ID,
                          AS_NO,
                          AS_SO_ID,
                          AS_MEM_ID,
                          AS_REQST_DT,
                          AS_RQST_REM,
                          AS_MALFUNC_ID,
                          AS_MALFUNC_RESN_ID,
                          AS_TYPE_ID,
                          AS_CRT_USER_ID,
                          AS_CRT_DT,
                          AS_UPD_USER_ID,
                          AS_UPD_DT,
                          AS_STUS_ID
    ) VALUES ( SVC0001D_AS_ID_SEQ.nextval,
               FN_GET_DOCNO(17) ,
               (SELECT SALES_ORD_ID FROM sal0001d WHERE SALES_ORD_NO = #{salesOrderNo}),
               (select mem_id from org0001d where mem_code = #{userId}),
               sysdate,
               #{resultRemark},
               #{errReasonId},
               #{errTypeId},
               '2703',
               (select mem_id from org0001d where mem_code = #{userId}),
               sysdate,
               (select mem_id from org0001d where mem_code = #{userId}),
               sysdate,
               '1'
    )
  </insert>

  <update id="updateInsReAppointmentReturnResult" parameterType="Map">
    UPDATE SAL0046D SET APPNT_DT = TO_DATE(#{appointmentDate},'YYYYMMDD'),
                        APPNT_TM = #{appointmentTime},
                        SESION_CODE = #{sesionCode},
                        UPD_DT = sysdate,
                        UPD_USER_ID = (SELECT mem_id
                                       FROM org0001d
                                       WHERE mem_code = #{userId})
    WHERE 1=1
      AND SAL0046D.INSTALL_ENTRY_NO = #{serviceNo}
      AND SAL0046D.SALES_ORD_ID = (SELECT sales_ord_id
                                   FROM sal0001d
                                   WHERE sales_ord_no =  #{salesOrderNo})
  </update>

  <update id="updateHsReAppointmentReturnResult" parameterType="Map">
    UPDATE SVC0008D SET APPNT_DT = to_date(#{appointmentDate},'YYYYMMDD'),
                        APPNT_TM = #{appointmentTime},
                        UPD_DT = sysdate,
                        UPD_USER_ID = (SELECT mem_id
                                       FROM org0001d
                                       WHERE mem_code = #{userId})
    WHERE 1=1
      AND SVC0008D.NO = #{serviceNo}
      AND SVC0008D.SALES_ORD_ID = (SELECT sales_ord_id
                                   FROM sal0001d
                                   WHERE sales_ord_no = #{salesOrderNo})
  </update>

  <update id="updateHsFailJobResult" parameterType="Map">
    UPDATE SVC0006D SET  FAIL_RESN_ID = #{failReasonCode},
                         RESULT_STUS_CODE_ID = '21',
                         RESULT_UPD_DT = sysdate,
                         RESULT_UPD_USER_ID = (SELECT mem_id
                                               FROM org0001d
                                               WHERE mem_code = #{userId})
    WHERE 1=1
      AND result_id = (SELECT b.RESULT_ID
                       FROM (SELECT a.SCHDUL_ID
                             FROM SVC0008D a
                             WHERE 1=1
                               AND a.NO = #{serviceNo}
                               AND a.SALES_ORD_ID = (SELECT sales_ord_id
                                                     FROM sal0001d
                                                     WHERE sales_ord_no = #{salesOrderNo})
                                                       AND a.CODY_ID = (SELECT mem_id
                                                                        FROM org0001d
                                                                        WHERE mem_code =#{userId})
                                                        ) a
                       ,  SVC0006D b
                       WHERE 1=1
                         AND a.SCHDUL_ID = b.SCHDUL_ID)
  </update>

  <insert id="insertHsFailJobResult" parameterType="Map">
    INSERT INTO SVC0006D ( RESULT_ID,
                                        NO,
                                        TYPE_ID,
                                        SCHDUL_ID,
                                        SALES_ORD_ID,
                                        CODY_ID,
                                        SETL_DT,
                                        RESULT_STUS_CODE_ID,
                                        FAIL_RESN_ID,
                                        REN_COLCT_ID,
                                        WH_ID,
                                        RESULT_REM,
                                        RESULT_CRT_DT,
                                        RESULT_CRT_USER_ID,
                                        RESULT_UPD_DT,
                                        RESULT_UPD_USER_ID,
                                        RESULT_IS_SYNC,
                                        RESULT_IS_EDIT,
                                        RESULT_STOCK_USE,
                                        RESULT_IS_CURR,
                                        RESULT_MTCH_ID,
                                        RESULT_IS_ADJ,
                                        RESULT_ENTRY_POINT,
                                        RESULT_MOBILE_ID,
                                        TEMPERATE_SETNG,
                                        NEXT_APPNT_DT,
                                        NEXT_APPNT_TM,
                                        OWNER_CODE,
                                        RESULT_CUST_NAME,
                                        RESULT_MOBILE_NO,
                                        RESULT_RPT_EMAIL_NO,
                                        RESULT_ACEPT_NAME,
                                        SGN_DT,
                                        TRNSC_ID
    ) SELECT SVC0006D_RESULT_ID_SEQ.NEXTVAL,
                 FN_GET_DOCNO(11),
                 D.TYPE_ID,
                 D.SCHDUL_ID,
                 D.SALES_ORD_ID,
                 D.CODY_ID,
                 SYSDATE,
                 '21',
                 #{failReasonCode},
                 0,
                 0,
                 NULL,
                 SYSDATE,
                 (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{userId}),
                 SYSDATE,
                 (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{userId}),
                 0,
                 0,
                 0,
                 1,
                 0,
                 0,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL
      FROM SVC0008D D
      LEFT JOIN SVC0006D D6 ON D6.SCHDUL_ID = D.SCHDUL_ID
      WHERE D6.SCHDUL_ID IS NULL
          AND D.MONTH = TO_CHAR(SYSDATE, 'MM')
          AND D.YEAR = TO_CHAR(SYSDATE, 'YYYY')
          AND D.STUS_CODE_ID IN (1)
          AND D.NO = #{serviceNo}
  </insert>

  <update id="upDateHsFailJobResultM" parameterType="Map">
    UPDATE SVC0008D SET STUS_CODE_ID = '21',
                                     CRT_DT = SYSDATE,
                                     CRT_USER_ID = (SELECT USER_ID
                                                             FROM SYS0047M
                                                             WHERE USER_NAME = #{userId})
    WHERE 1=1
    AND NO = #{serviceNo}
    AND SALES_ORD_ID = (SELECT SALES_ORD_ID
                                     FROM SAL0001D
                                     WHERE SALES_ORD_NO = #{salesOrderNo} )
  </update>

  <update id="insertAsFailJobResult" parameterType="Map">
    UPDATE SVC0004D SET AS_FAIL_RESN_ID = #{failReasonCode},
                        AS_RESULT_STUS_ID = '21',
                        AS_RESULT_UPD_DT = sysdate,
                        AS_RESULT_UPD_USER_ID = (SELECT mem_id
                                                 FROM org0001d
                                                 WHERE mem_code = #{userId})
    WHERE AS_ENTRY_ID = (SELECT AS_ID
                         FROM SVC0001D
                         WHERE 1=1
                           AND as_so_id  = (SELECT sales_ord_id
                                            FROM sal0001d
                                            WHERE 1=1
                                              AND sales_ord_no = #{salesOrderNo})
                                              AND as_no  = #{serviceNo}
                                              AND as_mem_id = (SELECT as_mem_id
                                                               FROM org0001d
                                                               WHERE mem_code = #{userId})
    )
  </update>

  <update id="upDatetAsFailJobResultM" parameterType="Map">
    UPDATE SVC0001D SET AS_STUS_ID = '21',
                        AS_UPD_DT = sysdate,
                        AS_UPD_USER_ID = (SELECT mem_id
                                           FROM org0001d
                                           WHERE mem_code = #{userId})
    WHERE 1=1
      AND AS_NO = #{serviceNo}
      AND AS_SO_ID = (SELECT sales_ord_id
                      FROM sal0001d
                      WHERE sales_ord_no = #{salesOrderNo} )
  </update>

  <update id="insertInstallFailJobResult" parameterType="Map">
    UPDATE SAL0047D SET FAIL_ID = #{failReasonCode},
                        STUS_CODE_ID = '21',
                        SERIAL_NO = #{serialNo},
                        UPD_DT = sysdate,
                        UPD_USER_ID = (SELECT mem_id
                                       FROM org0001d
                                       WHERE mem_code = #{userId})
    WHERE entry_id = ( SELECT INSTALL_ENTRY_ID
                       FROM SAL0046D a
                       WHERE 1=1
                         AND sales_ord_id  = (SELECT sales_ord_id
                                              FROM sal0001d
                                              WHERE 1=1
                                                AND sales_ord_no = #{salesOrderNo})
                                                AND INSTALL_ENTRY_NO = #{serviceNo}
                                                AND CT_ID = (SELECT mem_id
                                                             FROM org0001d
                                                             WHERE mem_code = #{userId})
    )
  </update>

  <update id="upDateInstallFailJobResultM" parameterType="Map">
    UPDATE SAL0046D SET STUS_CODE_ID = '21',
                        UPD_DT = sysdate,
                        UPD_USER_ID = (SELECT mem_id
                                       FROM org0001d
                                       WHERE mem_code = #{userId})
    WHERE 1=1
      AND INSTALL_ENTRY_NO = #{serviceNo}
      AND SALES_ORD_ID = (SELECT sales_ord_id
                          FROM sal0001d
                          WHERE sales_ord_no = #{salesOrderNo} )
  </update>

  <select id="getASRequestResultList" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(B.MEM_CODE) as MEM_CODE
         , TO_CHAR(F.NAME) AS cust_Name
         , TO_CHAR(A.AS_NO) AS as_request_No
         , TO_CHAR(A.AS_REQST_DT, 'YYYYMMDD') AS as_request_Date
         , TO_CHAR(C.SALES_ORD_NO) AS sales_Order_No
         , decode(A.AS_STUS_ID, '1', 'Active', '4', 'Completed', '21', 'Failed', '10', 'Cancelled', A.AS_STUS_ID) AS as_Request_Status
         , TO_CHAR(E.STK_DESC) AS product_Name
         , TO_CHAR(E.STK_CODE) AS product_Code
         , TO_CHAR(C.CUST_ID) AS customer_Id
    FROM SVC0001D A
       , ORG0001D B
       , SAL0001D C
       , SAL0002D D
       , SYS0026M E
       , SAL0029D F
    WHERE A.AS_MEM_ID = B.MEM_ID
      AND A.AS_SO_ID = C.SALES_ORD_ID
      AND C.SALES_ORD_ID = D.SALES_ORD_ID
      AND D.ITM_STK_ID = E.STK_ID
      AND C.CUST_ID = F.CUST_ID
      AND A.AS_TYPE_ID = '2703'
      AND B.MEM_CODE = #{userId}
      AND trunc(A.AS_REQST_DT) between  to_date(#{searchFromDate},'yyyymmdd') AND  to_date(#{searchToDate},'yyyymmdd')

<!--                SELECT to_char(D.NAME) AS cust_Name
                            ,to_char(B.SALES_ORD_NO) AS sales_Order_No
                            ,to_char(D.CUST_ID) AS customer_Id
                            ,to_char(A.AS_NO) AS AS_Request_No
                            ,to_char(A.AS_REQST_DT) AS as_Request_Date
                            ,to_char(A.AS_STUS_ID) AS as_Request_Status
                            ,to_char(F.STK_CODE) AS product_Code
                            ,to_char(F.STK_DESC) AS   product_Name
                            ,to_char(A.AS_MEM_ID)
                    FROM SVC0001D A
                            , SAL0001D B
                            , SAL0002D C
                            ,SAL0029D D
                            ,LOG0001M E
                            ,SYS0026M F
                    WHERE 1=1
                    AND A.AS_SO_ID = B.SALES_ORD_ID
                    AND B.SALES_ORD_ID = C.SALES_ORD_ID
                    AND B.CUST_ID = D.CUST_ID
                    AND C.ITM_STK_ID = E.BOM_STK_ID
                    AND E.BOM_PART_ID = F.STK_ID
                    and a.AS_REQST_DT BETWEEN to_date(#{searchFromDate},'yyyymmdd') AND  to_date(#{searchToDate},'yyyymmdd')
                    AND A.AS_MEM_ID = (SELECT MEM_ID
                                        FROM ORG0001D
                                        WHERE 1=1
                                        AND MEM_CODE = #{userId}) -->

  </select>

  <select id="getASRequestCustList" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(C.MEM_CODE) AS USER_ID
         , TO_CHAR(E.NAME) AS cust_Name
         , TO_CHAR(E.CUST_ID) AS customer_Id
         , CASE WHEN E.TYPE_ID = 964
             THEN to_char(E.NRIC)
             ELSE ''
           END AS cust_Nric_No
         , CASE WHEN E.TYPE_ID = 965
             THEN to_char(E.NRIC)
             ELSE ''
           END AS cust_Company_No
         , TO_CHAR(E.TYPE_ID) AS customer_Type
         , TO_CHAR(A.SALES_ORD_NO) AS sales_Order_No
         , TO_CHAR(D.STK_CODE) AS product_Code
         , TO_CHAR(D.STK_ID) AS product_Id
          , TO_CHAR(D.STK_DESC) AS product_Name
         , UPPER(to_char(J.SERIAL_NO)) AS serial_No
    FROM SAL0001D A
       , SAL0002D B
       , ORG0001D C
       , SYS0026M D
       , SAL0029D E
       , (SELECT *
          FROM (SELECT SALES_ORD_ID,
                       INSTALL_ENTRY_ID,
                       ROW_NUMBER() OVER(PARTITION BY SALES_ORD_ID ORDER BY CRT_DT DESC) AS DUM_SEQ
                FROM SAL0046D
                ) SAL46D WHERE DUM_SEQ = 1 ) F
       , (SELECT *
          FROM (SELECT ENTRY_ID,
                       SERIAL_NO,
                       ROW_NUMBER() OVER(PARTITION BY ENTRY_ID ORDER BY CRT_DT DESC) AS DUM_SEQ
                FROM SAL0047D) SAL47D WHERE DUM_SEQ = 1 ) J
    WHERE A.SALES_ORD_ID = B.SALES_ORD_ID
      AND A.MEM_ID = C.MEM_ID
      AND B.ITM_STK_ID = D.STK_ID
      AND A.CUST_ID = E.CUST_ID
      AND B.SALES_ORD_ID = F.SALES_ORD_ID(+)
      AND F.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
      AND ROWNUM <![CDATA[< ]]> 201

    <choose>
      <when test= 'searchType == "1" and searchType != null and searchType != "" '>
        AND A.SALES_ORD_NO LIKE (#{searchKeyword})  || '%'
      </when>
      <when test ='searchType == "2" and searchType != null and searchType != "" '>
        AND E.NAME LIKE (#{searchKeyword}) || '%'
      </when>
      <when test ='searchType == "3" and searchType != null and searchType != "" '>
        AND E.NRIC LIKE (#{searchKeyword}) || '%'
      </when>
      <when test ='searchType == "4" and searchType != null and searchType != "" '>
        AND E.NAME LIKE (#{searchKeyword}) || '%'
      </when>
      <otherwise>

      </otherwise>
      <!-- <if test="searchType != null and   searchType != '' and  ">
           </if>
           <if test="searchType != null and   searchType != '' and searchType == '2' ">
             AND E.NAME LIKE #{searchKeyword}
           </if>
           <if test="searchType != null and   searchType != '' and searchType == '3' ">
             AND E.NRIC LIKE #{searchKeyword}
           </if>
           <if test="searchType != null and   searchType != '' and searchType == '4' ">
             AND E.NRIC LIKE #{searchKeyword}
           </if> -->
    </choose>
  </select>

  <update id="updateState_LOG0038D" parameterType="Map">
    UPDATE LOG0038D SET STUS_CODE_ID = '4',
                        UPD_DT = sysdate,
                        UPD_USER_ID = (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE  =#{userId})
    WHERE retn_no = #{serviceNo}
  </update>

  <update id="updateState_SAL0001D" parameterType="Map">
    UPDATE SAL0001D A
    SET STUS_CODE_ID = '10'
    WHERE A.SALES_ORD_NO = #{salesOrderNo}
  </update>

  <insert id="insert_SAL0009D" parameterType="Map">
    INSERT INTO SAL0009D (LOG_ID,
                          SALES_ORD_ID,
                          PRGRS_ID,
                          LOG_DT,
                          REF_ID,
                          IS_LOK,
                          LOG_CRT_USER_ID,
                          LOG_CRT_DT
    ) VALUES ( SAL0009D_LOG_ID_SEQ.NEXTVAL,
               (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo}),
               '13',
               SYSDATE,
               '0',
               '0',
               (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE = #{userId}),
               SYSDATE )
  </insert>

  <update id="updateState_SAL0020D" parameterType="Map">
    UPDATE SAL0020D
    SET SO_REQ_STUS_ID = '32'
    WHERE SO_REQ_SO_ID = (SELECT SALES_ORD_ID
                          FROM SAL0001D
                          WHERE SALES_ORD_NO = #{salesOrderNo})
  </update>

  <update id="updateState_SAL0071D" parameterType="Map">
    UPDATE SAL0071D
    SET STUS_CODE_ID = 'TER'
    WHERE SALES_ORD_ID = (SELECT SALES_ORD_ID
                          FROM SAL0001D
                          WHERE SALES_ORD_NO = #{salesOrderNo})
  </update>

  <select id="getRetnCrtUserId" parameterType="Map" resultType="java.lang.String">
    SELECT MEM_ID
    FROM ORG0001D
    WHERE MEM_CODE = #{stkRetnCrtUserId}
  </select>

  <select id="getInstallDate" parameterType="Map" resultType="java.lang.String">
    SELECT TO_CHAR( TO_DATE(#{checkInDate} ,'YYYY/MM/DD') , 'DD/MM/YYYY' ) FROM DUAL
  </select>

  <insert id="insert_SVC0026T" parameterType="Map">
    INSERT INTO SVC0026T (RESULT_SEQ
                         ,RESULT_CRT_USER_ID
                         ,SALES_ORD_ID
                         ,SVC_NO
                         ,RESULT_REM
                         ,OWNER_CODE
                         ,RESULT_CUST_NAME
                         ,RESULT_IC_MOBILE_NO
                         ,RESULT_EMAIL_NO
                         ,ACCEPTANCE_NAME
                         ,SIGN_DATA
                         ,CRT_DT
                         ,SIGN_REG_TM
                         ,TRNSC_ID
                         ,TRAN_STUS_CD
                         ,CHECKIN_DT
                         ,CHECKIN_TM
                         ,CHECKIN_GPS
    ) VALUES(SVC0026T_RESULT_SEQ.NEXTVAL
             ,(SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE = #{userId})
             ,(SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
             ,#{serviceNo}
             ,#{stkRetnRem}
             ,#{ownerCode}
             ,#{resultCustName}
             ,#{resultIcmobileNo}
             ,#{resultRptEmailNo}
             ,#{resultAceptName}
             ,#{signData}
             ,SYSDATE
             ,#{signRegTm}
             ,#{transactionId}
             ,'N'
             ,#{checkinDt}
             ,#{checkinTm}
             ,#{checkinGps}
    )
  </insert>

  <insert  id="insert_LOG0039D" parameterType="Map">
    INSERT INTO LOG0039D (STK_RETN_RESULT_ID,
                          STK_RETN_ID,
                          STK_RETN_STUS_ID,
                          STK_RETN_STK_IS_RET,
                          STK_RETN_DT,
                          STK_RETN_REM,
                          STK_RETN_RESN_ID,
                          STK_RETN_CC_ID,
                          RETN_CODE_FAIL_REMARK,
                          STK_RETN_CRT_DT,
                          STK_RETN_CRT_USER_ID,
                          STK_RETN_UPD_DT,
                          STK_RETN_UPD_USER_ID,
                          STK_RETN_RESULT_IS_SYNCH,
                          STK_RETN_ALLOW_COMM,
                          STK_RETN_CT_MEM_ID,
                          CHECKIN_DT,
                          CHECKIN_TM,
                          CHECKIN_GPS,
                          SIGN_DATA,
                          SIGN_REG_DT,
                          SIGN_REG_TM,
                          OWNER_CODE,
                          RESULT_CUST_NAME,
                          RESULT_ICMOBILE_NO,
                          RESULT_RPT_EMAIL_NO,
                          RESULT_ACEPT_NAME
    ) VALUES (LOG0039D_STK_RETN_RESULT_ID.nextval,
             (SELECT STK_RETN_ID FROM LOG0038D WHERE retn_no =#{serviceNo}),
             #{stkRetnStusId},
             #{stkRetnStkIsRet},
             sysdate,
             #{stkRetnRem},
             #{stkRetnResnId},
             #{stkRetnCcId},
             #{retnCodeFailRemark},
             sysdate,
             (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{stkRetnCrtUserId}) ,
             sysdate,
             (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{stkRetnCrtUserId}) ,
             #{stkRetnResultIsSynch},
             #{stkRetnAllowComm},
             (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE = #{stkRetnCrtUserId}) ,
             to_char( to_date(#{checkinDt},'yyyymmdd') ,'yyyymmdd'),
             #{checkinTm},
             #{checkinGps},
             #{signData},
             to_char( to_date( #{signRegDt},'yyyymmdd') ,'yyyymmdd'),
             #{signRegTm},
             #{ownerCode},
             #{resultCustName},
             #{resultIcmobileNo},
             #{resultRptEmailNo},
             #{resultAceptName}
    )
  </insert>

  <update id="updateAppTm_LOG0038D" parameterType="Map">
    UPDATE LOG0038D SET APP_DT = TO_DATE (#{appointmentDate}, 'YYYYMMDD'),
                        APP_TM = TO_DATE ( (#{appointmentDate} || ' ' || #{appointmentTime} || '00'), 'YYYYMMDD HH24MISS'),
                        UPD_DT = SYSDATE,
                        UPD_USER_ID = (SELECT MEM_ID
                                       FROM ORG0001D
                                       WHERE MEM_CODE = #{userId}),
                        RT_SESION_CODE = (CASE
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 0
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 10)
                          THEN
                             'M'
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 10
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 14)
                          THEN
                             'A'
                          WHEN (    NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ >= ]]> 14
                                AND NVL(TO_NUMBER (SUBSTR (NVL (#{appointmentTime}, ''), 1, 2), '99'), 0) <![CDATA[ <= ]]> 19)
                          THEN
                             'E'
                          ELSE
                             'O'
                       END)
    WHERE STK_RETN_ID = (SELECT STK_RETN_ID
                         FROM LOG0038D
                         WHERE RETN_NO = #{serviceNo})
  </update>

  <insert id="insertFailed_LOG0039D" parameterType="Map">
    INSERT INTO LOG0039D (STK_RETN_RESULT_ID,
                          STK_RETN_ID,
                          STK_RETN_STUS_ID,
                          STK_RETN_CT_MEM_ID,
                          STK_RETN_CRT_DT,
                          STK_RETN_CRT_USER_ID
    ) VALUES (LOG0039D_STK_RETN_RESULT_ID.nextval,
              (select  STK_RETN_ID  from LOG0038D where  retn_no =#{serviceNo}) ,
              '21',
              (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId}),
              sysdate,
              (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId})
    )
  </insert>

  <!-- <select id="selectPRFailReason" parameterType="Map" resultType="egovMap">
    SELECT RESN_ID,
           CODE,
           RESN_DESC
    FROM  SYS0032M
    WHERE 1=1
      AND RESN_ID = #{failReasonCode}
  </select> -->

  <update id="updateFailed_LOG0038D" parameterType="Map">
    UPDATE LOG0038D SET STUS_CODE_ID   = '21',
                        UPD_DT  = sysdate,
                        UPD_USER_ID = (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId}),
                        FAIL_RESN_ID =#{failReasonCode}
    WHERE  retn_no = #{serviceNo}
  </update>

  <update id="updateFailed_SAL0020D" parameterType="Map">
    UPDATE sal0020d SET SO_REQ_UPD_USER_ID = (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE =#{userId})
                  , SO_REQ_UPD_DT = sysdate
                  , SO_REQ_STUS_ID = 1
                  , SO_REQ_CUR_CALL_ENTRY_ID = #{callEntryID}
    WHERE SO_REQ_SO_ID = (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO =#{salesOrderNo})
  </update>

  <select id="getcancReqNo" parameterType="Map" resultType="java.lang.String">
    SELECT GBSLCVD.FN_GET_CANC_REQ_NO canc_Req_No FROM DUAL
  </select>

  <insert id="insertCancelSMS" parameterType="Map">
    UPDATE svc0008d SET CANC_REQ_NO = #{cancReqNo}
    WHERE SALES_ORD_ID = (SELECT sales_ord_id
                          FROM sal0001d
                          WHERE 1=1
                            AND SALES_ORD_NO = #{salesOrderNo}  )
      AND NO = #{serviceNo}
  </insert>

  <insert id="updateReApointResult" parameterType="Map">
    UPDATE SVC0001D SET AS_APPNT_DT = to_DATE(#{AS_APPNT_DT} ,'ddmmyyyy'),
                        AS_APPNT_TM = #{AS_APPNT_TM},
                        AS_UPD_USER_ID =  nvl((select mem_id from org0001d where mem_code=#{AS_UPD_USER_ID}),0),
                        AS_UPD_DT =  SYSDATE,
                        AS_SESION_CODE = #{AS_SESION_CODE}
    WHERE  AS_NO = #{AS_NO}
  </insert>

  <insert id="insert_CCR0006D" parameterType="Map">
    INSERT INTO CCR0006D (CALL_ENTRY_ID,
                          SALES_ORD_ID,
                          TYPE_ID,
                          STUS_CODE_ID,
                          RESULT_ID,
                          DOC_ID,
                          CRT_USER_ID,
                          CRT_DT,
                          CALL_DT,
                          IS_WAIT_FOR_CANCL,
                          HAPY_CALLER_ID,
                          UPD_DT,
                          UPD_USER_ID,
                          ORI_CALL_DT
    ) VALUES (#{callEntryID} ,
              (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO =#{salesOrderNo}),
              259,
              19,
              #{callResultID},
              0,
              (SELECT  MEM_ID  FROM ORG0001D WHERE  MEM_CODE  =#{userId}),
              SYSDATE,
              SYSDATE + 1,
              0,
              0,
              SYSDATE,
              (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE =#{userId} ),
              SYSDATE + 1
    )
  </insert>

  <insert id="insert_CCR0007D" parameterType="Map">
    INSERT INTO CCR0007D (CALL_RESULT_ID,
                          CALL_ENTRY_ID,
                          CALL_STUS_ID,
                          CALL_DT,
                          CALL_ACTN_DT,
                          CALL_FDBCK_ID,
                          CALL_CT_ID,
                          CALL_REM,
                          CALL_CRT_USER_ID,
                          CALL_CRT_DT,
                          CALL_CRT_USER_ID_DEPT,
                          CALL_HC_ID,
                          CALL_ROS_AMT,
                          CALL_SMS,
                          CALL_SMS_REM
    ) VALUES (#{callResultID},
              #{callEntryID},
              19,
              SYSDATE + 1,
              TO_DATE('1900/01/01', 'YYYY/MM/DD' ),
              0,
              0,
              ' ',
              (SELECT MEM_ID FROM ORG0001D WHERE MEM_CODE =#{userId}),
              SYSDATE,
              0,
              0,
              0,
              0,
              ' '
    )
  </insert>

  <select id="select_SeqCCR0006D" parameterType="Map" resultType="java.lang.String">
    SELECT CCR0006D_CALL_ENTRY_ID_SEQ.NEXTVAL
    FROM DUAL
   </select>

  <select id="select_SeqCCR0007D" parameterType="Map" resultType="java.lang.String">
    SELECT CCR0007D_CALL_RESULT_ID_SEQ.NEXTVAL
    FROM DUAL
  </select>

  <resultMap id="bliingRtnCode" type="egovMap" />

  <select id="SP_RETURN_BILLING_EARLY_TERMI" parameterType="Map"  statementType="CALLABLE" >
    {
      call SP_RETURN_BILLING_EARLY_TERMI( #{P_SALES_ORD_NO},#{P_USER_ID},#{P_RETN_NO})
    }
  </select>

  <insert id="insert_SVC0066T" parameterType="Map">
    INSERT INTO SVC0066T (SEQ,
                          APP_TYPE,
                          SVC_NO,
                          ERR_CODE,
                          ERR_MSG,
                          TRNSC_ID
    ) VALUES (SVC0066T_SEQ.NEXTVAL
              ,#{APP_TYPE}
              ,#{SVC_NO}
              ,#{ERR_CODE}
              ,#{ERR_MSG}
              ,#{TRNSC_ID}
    )
  </insert>

  <select id="prdResultSync" parameterType="Map" resultType="java.lang.Integer">
    <![CDATA[
      SELECT COUNT(*) CNT
      FROM log0038d A,
           ORG0001D  B
      WHERE A.RETN_NO =#{serviceNo}
        AND A.CT_ID =B.MEM_ID
        AND B.MEM_CODE  =#{userId}
    ]]>
  </select>

  <select id="isPrdRtnAlreadyResult" parameterType="Map"
    resultType="java.lang.Integer">
    <![CDATA[
      SELECT COUNT (STK_RETN_ID) CNT
      FROM LOG0038D
      WHERE RETN_NO = #{serviceNo} AND STUS_CODE_ID <> '1'
    ]]>
  </select>

  <update id="updFctExch" parameterType="Map">
    UPDATE SAL0090D SET FAUCET_EXCH = #{faucetExch}
                      , SRV_UPD_DT = SYSDATE
                      , SRV_UPD_USER_ID = (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{userId})
    WHERE SRV_SO_ID = (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
      AND SRV_STUS_ID = '1'
  </update>

  <select id="newSearchCancelSAL0001D" parameterType="Map" resultType="egovMap">
    SELECT Extent1.SALES_ORD_ID SALES_ORD_ID ,
           Extent1.SALES_ORD_NO SALES_ORD_NO ,
           Extent1.REF_NO REF_NO ,
           Extent1.SALES_DT SALES_DT ,
           Extent1.CUST_ID CUST_ID ,
           Extent1.CUST_CNT_ID CUST_CNT_ID ,
           Extent1.CUST_ADD_ID CUST_ADD_ID ,
           Extent1.MEM_ID MEM_ID ,
           Extent1.BRNCH_ID BRNCH_ID ,
           Extent1.APP_TYPE_ID APP_TYPE_ID ,
           Extent1.TOT_AMT TOT_AMT ,
           Extent1.PROMO_ID PROMO_ID ,
           Extent1.BINDING_NO BINDING_NO ,
           Extent1.CC_PROMO_ID CC_PROMO_ID ,
           Extent1.TOT_PV TOT_PV ,
           Extent1.REM REM ,
           Extent1.PV_MONTH PV_MONTH ,
           Extent1.PV_YEAR PV_YEAR ,
           Extent1.STUS_CODE_ID STUS_CODE_ID ,
           Extent1.UPD_DT UPD_DT ,
           Extent1.UPD_USER_ID UPD_USER_ID ,
           Extent1.SYNC_CHK SYNC_CHK ,
           Extent1.CUST_PO_NO CUST_PO_NO ,
           Extent1.REN_CHK_ID REN_CHK_ID ,
           Extent1.INST_PRIOD INST_PRIOD ,
           Extent1.DO_NO DO_NO ,
           Extent1.DEPT_CODE DEPT_CODE ,
           Extent1.GRP_CODE GRP_CODE ,
           Extent1.ORG_CODE ORG_CODE ,
           Extent1.SALES_ORD_ID_OLD SALES_ORD_ID_OLD ,
           Extent1.EDIT_TYPE_ID EDIT_TYPE_ID ,
           Extent1.CUST_BILL_ID CUST_BILL_ID ,
           Extent1.MTH_RENT_AMT MTH_RENT_AMT ,
           Extent1.LOK LOK ,
           Extent1.AEON_STUS_ID AEON_STUS_ID ,
           Extent1.COMM_DT COMM_DT ,
           Extent1.CRT_USER_ID CRT_USER_ID ,
           Extent1.CRT_DT CRT_DT ,
           Extent1.PAY_COM_DT PAY_COM_DT ,
           Extent1.DEF_RENT_AMT DEF_RENT_AMT ,
           Extent1.REF_DOC_ID REF_DOC_ID ,
           Extent1.SALES_HM_ID SALES_HM_ID ,
           Extent1.SALES_SM_ID SALES_SM_ID ,
           Extent1.SALES_GM_ID SALES_GM_ID ,
           Extent1.ADV_BILL ADV_BILL ,
           Extent1.CNVR_SCHEME_ID CNVR_SCHEME_ID ,
           Extent1.CUST_CARE_CNT_ID CUST_CARE_CNT_ID ,
           Extent1.PCKAGE_BINDING_NO ,
           Extent1.SRV_PAC_ID ,
           Extent2.ITM_STK_ID ITM_STK_ID
    FROM SAL0001D Extent1
    JOIN SAL0002D Extent2 ON Extent1.SALES_ORD_ID = Extent2.SALES_ORD_ID
    WHERE Extent1.SALES_ORD_NO = #{salesOrderNo}
    <![CDATA[
      AND ROWNUM <= 1
    ]]>
  </select>

  <select id="chkSubPromo" parameterType="Map" resultType="int">
    SELECT COUNT(*)
    FROM SAL0253D
    WHERE SUB_PROD_ID = #{itmStkId}
      AND SUB_PROMO_ID = #{promoId}
      AND DISB = 0
      AND SYSDATE BETWEEN EFF_DT AND EXP_DT
  </select>

  <select id="chkMainPromo" parameterType="Map" resultType="int">
    SELECT COUNT(*)
    FROM SAL0252M
    WHERE PROD_CDE = #{itmStkId}
      AND PROMO_ID = #{promoId}
      AND DISB = 0
      AND SYSDATE BETWEEN EFF_DT AND EXP_DT
  </select>

  <select id="revSubCboPckage" parameterType="Map" resultType="egovMap">
    SELECT A.SALES_ORD_ID AS ORD_ID,
           A.SALES_ORD_NO AS ORD_NO,
           A.PROMO_ID AS OLD_PROMO,
           C.PROMO_CAN_ID AS NEW_PROMO,
           A.TOT_PV AS OLD_PV,
           D.PROMO_ITM_PV AS NEW_PV,
           A.MTH_RENT_AMT AS OLD_MTH_RENT_AMT,
           CASE WHEN C.CHG_RENT_AMT = 1
           THEN CASE WHEN F.APP_TYPE_ID IN (67,68)
             THEN TRUNC(FLOOR(F.AMT - DECODE(E.PROMO_DISC_TYPE, 0, F.AMT*(E.PROMO_PRC_PRCNT/100), E.PROMO_PRC_PRCNT) - E.PROMO_ADD_DISC_PRC),-1)
             ELSE FLOOR(F.AMT - DECODE(E.PROMO_DISC_TYPE, 0, F.AMT*(E.PROMO_PRC_PRCNT/100), E.PROMO_PRC_PRCNT) - E.PROMO_ADD_DISC_PRC) END
           ELSE A.MTH_RENT_AMT END AS PROMO_AMT,
           C.CHG_RENT_AMT
    FROM SAL0001D A
    JOIN SAL0002D B ON A.SALES_ORD_ID = B.SALES_ORD_ID
    JOIN SAL0252M C ON A.PROMO_ID = C.PROMO_ID AND B.ITM_STK_ID = C.PROD_CDE
    JOIN SAL0018D D ON C.PROMO_CAN_ID = D.PROMO_ID AND B.ITM_STK_ID = D.PROMO_ITM_STK_ID
    JOIN SAL0017D E ON C.PROMO_CAN_ID = E.PROMO_ID
    LEFT OUTER JOIN SAL0016M F ON F.STK_ID = D.PROMO_ITM_STK_ID
                              AND F.APP_TYPE_ID = DECODE(E.PROMO_APP_TYPE_ID, 2284, 66, 2285, 67, 2286, 68, 2287, 1412)
                              AND F.MEM_PAC_ID = A.SRV_PAC_ID
    WHERE A.SALES_ORD_ID = ( SELECT PCKAGE_BINDING_NO
                             FROM SAL0001D
                             WHERE SALES_ORD_ID = #{salesOrdId} )
      AND D.PROMO_ITM_STUS_ID = 1
  </select>

  <select id="revMainCboPckage" parameterType="Map" resultType="egovMap">
    SELECT A.SALES_ORD_ID AS ORD_ID,
           A.SALES_ORD_NO AS ORD_NO,
           A.PROMO_ID AS OLD_PROMO,
           C.PROMO_CAN_ID AS NEW_PROMO,
           A.TOT_PV AS OLD_PV,
           D.PROMO_ITM_PV AS NEW_PV,
           A.MTH_RENT_AMT AS OLD_MTH_RENT_AMT,
           CASE WHEN C.CHG_RENT_AMT = 1
           THEN CASE WHEN F.APP_TYPE_ID IN (67,68)
             THEN TRUNC(FLOOR(F.AMT - DECODE(E.PROMO_DISC_TYPE, 0, F.AMT*(E.PROMO_PRC_PRCNT/100), E.PROMO_PRC_PRCNT) - E.PROMO_ADD_DISC_PRC),-1)
             ELSE FLOOR(F.AMT - DECODE(E.PROMO_DISC_TYPE, 0, F.AMT*(E.PROMO_PRC_PRCNT/100), E.PROMO_PRC_PRCNT) - E.PROMO_ADD_DISC_PRC) END
           ELSE A.MTH_RENT_AMT END AS PROMO_AMT,
           C.CHG_RENT_AMT
    FROM SAL0001D A
    JOIN SAL0002D B ON A.SALES_ORD_ID = B.SALES_ORD_ID
    JOIN SAL0253D C ON A.PROMO_ID = C.SUB_PROMO_ID AND B.ITM_STK_ID = C.SUB_PROD_ID
    JOIN SAL0018D D ON C.PROMO_CAN_ID = D.PROMO_ID AND B.ITM_STK_ID = D.PROMO_ITM_STK_ID
    JOIN SAL0017D E ON C.PROMO_CAN_ID = E.PROMO_ID
    LEFT OUTER JOIN SAL0016M F ON F.STK_ID = D.PROMO_ITM_STK_ID
                              AND F.APP_TYPE_ID = DECODE(E.PROMO_APP_TYPE_ID, 2284, 66, 2285, 67, 2286, 68, 2287, 1412)
                              AND F.MEM_PAC_ID = A.SRV_PAC_ID
    WHERE A.PCKAGE_BINDING_NO = #{salesOrdId}
      AND D.PROMO_ITM_STUS_ID = 1
  </select>


  <insert id="insertSAL0254D" parameterType="Map">
    INSERT INTO SAL0254D (SEQ_NO,
                          SALES_ORD_ID,
                          PROMO_OLD,
                          PROMO_NEW,
                          PV_OLD,
                          PV_NEW,
                          MTH_RENT_AMT_OLD,
                          MTH_RENT_AMT_NEW,
                          REMARK,
                          DISB,
                          CRT_DT,
                          UPD_DT,
                          CRT_BY,
                          UPD_BY,
                          CHG_RENT_AMT
    ) VALUES (SAL0254D_SEQ_ID.NEXTVAL,
              #{ordId},
              #{oldPromo},
              #{newPromo},
              #{oldPv},
              #{newPv},
              #{oldMthRentAmt},
              #{promoAmt},
              #{reqStageId},
              0,
              SYSDATE,
              SYSDATE,
              349,
              349,
              #{chgRentAmt}
    )
  </insert>

  <update id="updateHTReAppointmentReturnResult" parameterType="Map">
    UPDATE SVC0008D SET APPNT_DT = to_date(#{appointmentDate},'YYYYMMDD')
             , APPNT_TM = #{appointmentTime}
             , UPD_DT = SYSDATE
             , UPD_USER_ID = (SELECT MEM_ID
                                        FROM ORG0001D
                                      WHERE MEM_CODE = #{userId})
     WHERE SVC0008D.NO = #{serviceNo}
  </update>

  <update id="updateHtFailJobResult" parameterType="Map">
    UPDATE SVC0006D
         SET FAIL_RESN_ID = #{failReasonCode}
             , RESULT_STUS_CODE_ID = '21'
             , RESULT_UPD_DT = sysdate
             , RESULT_UPD_USER_ID = (SELECT mem_id
                                                    FROM org0001d
                                                  WHERE mem_code = #{userId})
     WHERE RESULT_ID = (SELECT b.RESULT_ID
                                     FROM (SELECT a.SCHDUL_ID
                                                 FROM SVC0008D a
                                               WHERE a.NO = #{serviceNo}) a
                                          , SVC0006D b
                                  WHERE a.SCHDUL_ID = b.SCHDUL_ID)
  </update>

  <update id="upDateHtFailJobResultM" parameterType="Map">
    UPDATE SVC0008D
         SET STUS_CODE_ID = '21'
             , CRT_DT = sysdate
             , CRT_USER_ID = (SELECT mem_id
                                        FROM org0001d
                                      WHERE mem_code = #{userId})
     WHERE NO = #{serviceNo}
  </update>

  <select id="getHtBasic" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT
               Project2.NO No,
               Project2.HS_DATE HS_DATE,
               Project2.STUS_CODE_ID STUS_CODE_ID,
               Project2.Code Code,
               Project2.SALES_ORD_NO SALES_ORD_NO,
               Project2.ASSIGN_CODY C5,
               Project2.ACTION_CODY as ACTN_MEM_ID,
               Project2.MEM_ID,
               Project2.Name Name,
               Project2.cust_id,
               Project2.cody_status_nm,
               Project2.BRNCH_ID as BRNCH_ID,
               Project2.SCHDUL_ID SCHDUL_ID,
               Project2.SALES_ORD_ID,
               Project2.branch_cd,
               Project2.CODY_MANGR_USER_ID,
               Project2.MEM_CODE,
               Project2.sal_mem_id,
               Project2.SAL_ORD_ID,
               Project2.SAL_ORD_NO
       FROM (
                  SELECT HS.NO AS NO,
                             HS.STUS_CODE_ID as STUS_CODE_ID,
                             HS.MONTH || '/' || HS.YEAR as HS_DATE,
                             HS.MONTH,
                             HS.YEAR,
                             ST.CODE,
                             HR.NO AS Result,
                             HO.SRV_ORD_ID AS SALES_ORD_ID,
                             HO.SRV_ORD_NO AS SALES_ORD_NO,
                             AP.CODE AS AppType,
                             CU.NAME,
                             CD.MEM_CODE AS ASSIGN_CODY,
                             CD.MEM_ID,
                             AC.MEM_CODE AS ACTION_CODY,
                             MG.STATE,
                             MG.AREA,
                             CU.CUST_ID as cust_id,
                             (SELECT code
                                FROM SYS0038M
                              WHERE stus_code_id = cu.STUS_CODE_ID ) as cody_status_nm,
                             HO.BRNCH_ID as BRNCH_ID,
                             HS.SCHDUL_ID SCHDUL_ID ,
                             BR.CODE as branch_cd,
                             MG.CODY_MANGR_USER_ID ,
                             (SELECT MEM_CODE
                                FROM ORG0001D
                              WHERE mem_id = SO.MEM_ID) as MEM_CODE,
                             SO.MEM_ID as sal_mem_id,
                             SO.SALES_ORD_ID AS SAL_ORD_ID,
                             SO.SALES_ORD_NO AS SAL_ORD_NO
                     FROM SVC0008D HS
                           , SAL0225D HO
                           , HMC0011D HM
                           , SAL0001D SO
                           , SAL0023D AD
                           , SYS0064M MG
                           , SVC0006D HR
                           , SYS0038M ST
                           , SYS0013M AP
                           , SAL0029D CU
                           , ORG0001D CD
                           , ORG0001D AC
                           , SYS0005M BR
                   WHERE HS.SALES_ORD_ID = HO.SRV_ORD_ID
                       AND HO.SRV_ORD_ID = HM.SRV_ORD_ID(+)
                       AND HM.MAT_ORD_NO = SO.SALES_ORD_NO(+)
                       AND HO.CUST_ADD_ID = AD.CUST_ADD_ID
                       AND AD.AREA_ID = MG.AREA_ID(+)
                       AND HS.SCHDUL_ID = HR.SCHDUL_ID(+)
                       AND HS.STUS_CODE_ID = ST.STUS_CODE_ID
                       AND HO.APP_TYPE_ID = AP.CODE_ID
                       AND HO.CUST_ID = CU.CUST_ID
                       AND HS.CODY_ID = CD.MEM_ID
                       AND HS.ACTN_MEM_ID = AC.MEM_ID(+)
                       AND MG.CODY_BRNCH_CODE = BR.CODE(+)
               ) Project2
      WHERE (SAL_ORD_NO　= #{salesOrderNo} OR SALES_ORD_NO = #{salesOrderNo})
          AND NO = #{serviceNo}
  </select>

  <select id="hcServiceHistory" parameterType="Map" resultType="egovMap">
    SELECT sales_ord_no,
           job_Status,
           service_No,
           settle_Date,
           hsr_Asr_No,
           action_Member,
           job_Type,
           fail_Reason,
           collection_Code,
           collection_Name,
           result_Remark,
           filter_Code,
           filter_Name,
           last_Change_Date,
           filter_Period,
           TO_CHAR (next_Change_Date) AS next_Change_Date,
           change_Qty,
           part_Code,
           part_Name,
           part_Change_Qty,
           AS_RESULT_ID
    FROM (SELECT DISTINCT b.SALES_ORD_NO,
                 S.AS_RESULT_STUS_ID job_Status,
                 H.AS_NO service_No,
                 TO_CHAR (S.AS_SETL_DT, 'YYYYMMDD') settle_Date,
                 S.AS_RESULT_NO hsr_Asr_No,
                 S.AS_CT_ID,
                 (SELECT MEM_CODE
                  FROM org0001d d
                  WHERE 1 = 1
                    AND d.mem_id = S.AS_CT_ID) action_Member,
                   'AS' job_Type,
                 (SELECT Extent1.RESN_DESC
                  FROM SYS0032M Extent1
                  WHERE Extent1.RESN_TYPE_ID = '166'
                    AND Extent1.STUS_CODE_ID = 1
                    AND RESN_ID = S.AS_FAIL_RESN_ID) AS fail_Reason,
                 S.AS_RESULT_REM result_Remark,
                 TO_NUMBER ('') collection_Code,
                 TO_CHAR ('') collection_Name,
                 TO_CHAR(C.ASR_ITM_PART_ID) filter_Code,
                 TO_CHAR(C.ASR_ITM_PART_DESC) filter_Name,
                 TO_CHAR (E.SRV_FILTER_PRV_CHG_DT, 'YYYYMMDD') AS last_Change_Date,
                 TO_CHAR(E.SRV_FILTER_PRIOD) filter_Period,
                 TO_CHAR(C.ASR_ITM_PART_QTY) change_Qty,
                 '' next_Change_Date,
                 G.STK_CODE AS part_Code,
                 G.STK_DESC part_Name,
                 BOM_DTL.COMPNT_QTY part_Change_Qty,
                 to_char(c.AS_RESULT_ID) as AS_RESULT_ID
          FROM SVC0004D S,
               SAL0225D A,
               SAL0001D B,
               SAL0002D H,
               SVC0005D C,
               SAL0087D E,
               (SELECT LOG43.MATRL_NO, LOG44.*
                FROM LOG0043M LOG43, LOG0044D LOG44
                WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
               SYS0026M G,
               SVC0001D H
          WHERE S.AS_SO_ID = A.SRV_ORD_ID
            AND A.SRV_ORD_ID = B.SALES_ORD_ID
            AND S.AS_RESULT_ID = C.AS_RESULT_ID(+)
            AND C.ASR_ITM_PART_ID = E.SRV_FILTER_ID(+)
            AND B.SALES_ORD_ID = H.SALES_ORD_ID
            AND G.STK_ID = H.ITM_STK_ID
            AND G.STK_CODE = BOM_DTL.MATRL_NO(+)
            AND B.SALES_ORD_ID = H.AS_SO_ID
            AND (A.SRV_ORD_ID = (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO =　#{salesOrderNo})
                OR A.SRV_ORD_NO = #{salesOrderNo})
            AND ROWNUM <![CDATA[ < ]]> 4)

    UNION ALL

    SELECT sales_ord_no,
           STUS_CODE_ID,
           SVC_NO AS service_No,
           SETL_DT AS settle_Date,
           RST_NO AS hsr_Asr_No,
           MEM_CODE AS action_Member,
           'HS' AS job_Type,
           (SELECT Extent1.RESN_DESC
            FROM SYS0032M Extent1
            WHERE Extent1.RESN_TYPE_ID = '167'
              AND Extent1.STUS_CODE_ID = 1
              AND RESN_ID = FAIL_RESN_ID) AS fail_Reason,
           REN_COLCT_ID AS collection_Code,
           (SELECT Extent1.RESN_DESC
            FROM SYS0032M Extent1
            WHERE Extent1.resn_type_id = 174 AND resn_id = REN_COLCT_ID) AS collection_Name,
            RESULT_REM AS result_Remark,
            TO_CHAR(BS_RESULT_PART_ID) AS filter_Code,
            TO_CHAR(BS_RESULT_PART_DESC) AS filter_Name,
            BS_RESULT_CRT_DT AS last_Change_Date,
            TO_CHAR(SRV_FILTER_PRIOD) AS filter_Period,
            TO_CHAR (next_Change_Date) next_Change_Date,
            TO_CHAR(BS_RESULT_PART_QTY) change_Qty,
            part_Code,
            part_Name,
            part_Change_Qty,
            TO_CHAR(BS_RESULT_ID) as  BS_RESULT_ID
    FROM (SELECT DISTINCT b.STUS_CODE_ID,
                 b.SCHDUL_ID,
                 b.SALES_ORD_ID,
                 c.SRV_ORD_NO AS SALES_ORD_NO,
                 TO_CHAR (a.SETL_DT, 'YYYYMMDD') AS SETL_DT,
                 a.NO AS RST_NO,
                 B.NO AS SVC_NO,
                 a.CODY_ID,
                 d.MEM_CODE,
                 a.FAIL_RESN_ID,
                 a.RESULT_REM,
                 a.REN_COLCT_ID,
                 '' as BS_RESULT_PART_ID,
                 '' as BS_RESULT_PART_DESC,
                 TO_CHAR (b.crt_dt, 'YYYYMMDD') AS BS_RESULT_CRT_DT,
                 '' as SRV_FILTER_PRIOD,
                 '' as BS_RESULT_PART_QTY,
                 '' next_Change_Date,
                 G.STK_CODE AS part_Code,
                 G.STK_DESC part_Name,
                 BOM_DTL.COMPNT_QTY part_Change_Qty,
                 '' as BS_RESULT_ID
          FROM SVC0006D a,
               SVC0008D b,
               sal0225d c,
               SAL0002D H,
               org0001d d,
               (SELECT LOG43.MATRL_NO, LOG44.*
                FROM LOG0043M LOG43, LOG0044D LOG44
                WHERE LOG43.BOM = LOG44.BOM) BOM_DTL,
               SYS0026M G,
               svc0001d I
          WHERE a.SCHDUL_ID = b.SCHDUL_ID
            AND a.sales_ord_id = c.SRV_ORD_ID
            AND C.SRV_ORD_ID = H.SALES_ORD_ID(+)
            AND a.CODY_ID = d.mem_id
            AND H.ITM_STK_ID = G.STK_ID(+)
            AND G.STK_CODE = BOM_DTL.MATRL_NO(+)
            AND B.SALES_ORD_ID = I.AS_SO_ID(+)
            AND (C.SRV_ORD_ID = (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO =　#{salesOrderNo})
                OR C.SRV_ORD_NO = #{salesOrderNo})
    ORDER BY SETL_DT DESC) x
    WHERE 1 = 1 AND ROWNUM <![CDATA[ < ]]> 4
  </select>

  <select id="selectSVC0008DSchdulId" parameterType="Map" resultType="int">
    SELECT SCHDUL_ID FROM SVC0008D WHERE NO = #{serviceNo}
  </select>

  <select id="SP_SVC_BARCODE_SAVE" parameterType="Map"  statementType="CALLABLE">
    {
        call SP_SVC_BARCODE_SAVE(#{scanSerial}, NULL, #{salesOrdId}, #{reqstNo}, #{delvryNo}, #{callGbn}, #{mobileYn}, #{userId}
        , #{pErrcode,mode=OUT,javaType=String,jdbcType=VARCHAR}
        , #{pErrmsg,mode=OUT,javaType=String,jdbcType=VARCHAR})
    }
  </select>

  <select id="SP_SVC_BARCODE_CHANGE" parameterType="Map"  statementType="CALLABLE">
    {
        call SP_SVC_BARCODE_CHANGE(#{scanSerial}, #{realBeforeProductSerialNo}, #{salesOrdId}, #{itmCode}, #{reqstNo}, #{callGbn}, #{mobileYn}, #{userId}
        , #{pErrcode,mode=OUT,javaType=String,jdbcType=VARCHAR}
        , #{pErrmsg,mode=OUT,javaType=String,jdbcType=VARCHAR})
    }
  </select>

  <select id="getCareServiceJobList" parameterType="Map" resultType="egovMap">
    <!-- A.warranty, -->
    SELECT A.appointment_Date,
           A.service_No,
           A.job_Status,
           A.appointment_Time,
           A.plan_Year,
           A.plan_Month,
           A.sales_Order_No,
           A.sales_Order_Id,
           A.app_Type,
           A.sales_Promotion,
           A.bank_Code,
           A.card_Account_No,
           A.handphone_Tel,
           A.home_Tel,
           A.office_Tel,
           A.mail_Address,
           A.resultIc_Mobile_No,
           A.cust_Name,
           A.customer_Type,
           A.customer_Id,
           A.customer_Va_No,
           A.dsc_Code,
           A.instruction,
           A.sirim_No,
           fn_get_order_serial(A.sales_Order_Id, A.product_Code) AS serial_No,
           A.result_Cust_Name,
           A.result_Report_Email_No,
           A.result_Acceptance_Name,
           A.fail_Reason_Code,
           A.result_Remark,
           A.rc_Code,
           A.temperatureSetting,
           A.nextAppointmentTime,
           A.ownerCode,
           A.resultCustName,
           A.resultIcMobileNo,
           A.resultReportEmailNo,
           A.resultAcceptanceName,
           A.signData,
           A.nextAppointmentDate,
           A.settled_By,
           A.product_Name,
           A.product_Code,
           A.customer_Jom_Pay_Ref_No,
           A.payment_ModeName AS payment_Mode_Name,
           A.payment_Mode,
           A.contract_Duration,
           A.Membership_Contract_Expiry,
           A.rental_Status,
           A.job_Type,
           A.postcode,
           A.service_State,
           A.install_Address,
           A.need_Filter,
           TO_CHAR (NVL(A.warranty,0)) AS warranty,
           TO_CHAR (NVL(B.ACC_DEBT_SUB_CURR_OTSTND_AGING,0)) AS outstanding,
           homeCareOrderYn AS home_Care_Order_Yn,
           NVL(SERIAL_CHK, 'N') AS SERIAL_CHK,
           TO_CHAR (SALES_PROD_SZ) AS MATSIZE,
           SALES_ORD_NO AS HC_SALES_ORDER_NO,
           HC_REF_NO,
           HC_REF_CAT,
           HC_REF_PROD,
           TO_CHAR (A.SRV_PAC_ID) AS SRV_PAC_ID,
           TO_CHAR (A.DISINF_SRV) AS DISINFEC_SERV,
           A.SRV_TYPE,
           A.prodCat,
           A.LATITUDE,
           A.LONGITUDE
    FROM ( SELECT appointment_Date,
                  service_No,
                  job_Status,
                  appointment_Time,
                  plan_Year,
                  plan_Month,
                  sales_Order_No,
                  sales_Order_Id,
                  app_Type,
                  sales_Promotion,
                  bank_Code,
                  card_Account_No,
                  handphone_Tel,
                  home_Tel,
                  office_Tel,
                  mail_Address,
                  resultIc_Mobile_No,
                  cust_Name,
                  customer_Type,
                  customer_Id,
                  customer_Va_No,
                  dsc_Code,
                  instruction,
                  sirim_No,
                  serial_No,
                  result_Cust_Name,
                  result_Report_Email_No,
                  result_Acceptance_Name,
                  fail_Reason_Code,
                  result_Remark,
                  rc_Code,
                  temperatureSetting,
                  nextAppointmentTime,
                  ownerCode,
                  resultCustName,
                  resultIcMobileNo,
                  resultReportEmailNo,
                  resultAcceptanceName,
                  signData,
                  nextAppointmentDate,
                  settled_By,
                  product_Name,
                  product_Code,
                  customer_Jom_Pay_Ref_No,
                  payment_ModeName,
                  payment_Mode,
                  contract_Duration,
                  Membership_Contract_Expiry,
                  rental_Status,
                  job_Type,
                  postcode,
                  service_State,
                  install_Address,
                  CASE WHEN FILT_CNT <![CDATA[ > ]]> 0 THEN '1' ELSE '0' END need_Filter,
                  srv_mem_cntrct_id,
                  warranty,
                  homeCareOrderYn,
                  SERIAL_CHK,
                  SALES_PROD_SZ,
                  SALES_ORD_NO,
                  HC_REF_NO,
                  HC_REF_CAT,
                  HC_REF_PROD,
                  SRV_PAC_ID,
                  DISINF_SRV,
                  SRV_TYPE,
                  prodCat,
                  LATITUDE,
                  LONGITUDE
           FROM ( SELECT SRV_INFO.*, AD.DISINF_SRV AS DISINF_SRV, U.FAUCET_EXCH AS warranty ,U.SRV_CONFIG_ID FROM(
                                  SELECT DISTINCT TO_CHAR (A.APPNT_DT, 'YYYYMMDD') AS appointment_Date,
                                  A.NO AS service_No,
                                  A.STUS_CODE_ID AS job_Status,
                                  A.APPNT_TM AS appointment_Time,
                                  A.YEAR AS plan_Year,
                                  A.MONTH AS plan_Month,
                                  C.SRV_ORD_ID,
								  C.SRV_ORD_NO AS sales_Order_No,
                                  C.SRV_ORD_ID AS sales_Order_Id,
                                  C.APP_TYPE_ID AS app_Type,
                                  T.PROMO_DESC AS sales_Promotion,
                                  D.CUST_ACC_BANK_ID AS bank_Code,
                                  D.CUST_ACC_NO AS card_Account_No,
                                  F.TEL_M1 AS handphone_Tel,
                                  F.TEL_O AS home_Tel,
                                  F.TEL_R AS office_Tel,
                                  F.EMAIL AS mail_Address,
                                  F.NRIC AS resultIc_Mobile_No,
                                  G.NAME AS cust_Name,
                                  G.TYPE_ID AS customer_Type,
                                  G.cust_id AS customer_Id,
                                  G.CUST_VA_NO AS customer_Va_No,
                                  H.BRNCH_ID AS dsc_Code,
                                  H.INSTCT AS instruction,
                                  J.SIRIM_NO AS sirim_No,
                                  J.SERIAL_NO AS serial_No,
                                  J.RESULT_CUST_NAME AS result_Cust_Name,
                                  J.RESULT_REP_EMAIL_NO AS result_Report_Email_No,
                                  J.RESULT_ACEPT_NAME AS result_Acceptance_Name,
                                  B.FAIL_RESN_ID AS fail_Reason_Code,
                                  B.RESULT_REM AS result_Remark,
                                  B.REN_COLCT_ID AS rc_Code,
                                  B.TEMPERATE_SETNG AS temperatureSetting,
                                  B.NEXT_APPNT_TM AS nextAppointmentTime,
                                  B.OWNER_CODE AS ownerCode,
                                  B.RESULT_CUST_NAME AS resultCustName,
                                  B.RESULT_MOBILE_NO AS resultIcMobileNo,
                                  B.RESULT_RPT_EMAIL_NO AS resultReportEmailNo,
                                  B.RESULT_ACEPT_NAME AS resultAcceptanceName,
                                  '' AS signData,
                                  TO_CHAR (B.NEXT_APPNT_DT, 'YYYYMMDD') AS nextAppointmentDate,
                                  '' AS settled_By,
                                  L.STK_DESC AS product_Name,
                                  L.STK_CODE AS product_Code,
                                  M.CUST_BILL_PAY_REF_NO1 AS customer_Jom_Pay_Ref_No,
                                  /* P.CODE_NAME AS payment_ModeName, */
                                  CASE WHEN P.CODE_ID = '131' THEN X.CODE_NAME || ' (Auto Debit)' ELSE P.CODE_NAME END AS payment_ModeName,
                                  TO_CHAR (P.CODE_ID) AS payment_Mode,
                                  TO_CHAR (R.SRV_DUR) AS contract_Duration,
                                  TO_CHAR (R.SRV_EXPR_DT, 'YYYYMMDD') AS Membership_Contract_Expiry,
                                  S.STUS_CODE_ID AS rental_Status,
                                  'HS' AS job_Type,
                                  (SELECT NVL (POSTCODE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) postcode,
                                  (SELECT NVL (STATE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) service_State,
                                  (SELECT (Q.ADDR_DTL || ' ' || Q.STREET || ' ' || AREA || ' ' || POSTCODE || ' ' || CITY || ' ' || STATE || ' ' || COUNTRY) AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) install_Address,
                       /*              SRV_CONFIG_ID, */
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'POST')  postcode, */
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'STATE')  service_State, */
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'FULL_ADDR')  install_Address */
                                   R.SRV_MEM_CNTRCT_ID,
                       /*              U.FAUCET_EXCH AS warranty, */
                                   CASE WHEN SAL.SALES_ORD_NO IS NULL THEN 'N' ELSE 'Y' END AS homeCareOrderYn,
                                   L.SERIAL_CHK,
                                   C.SALES_PROD_SZ,
                                   SAL.SALES_ORD_NO,
                                   Z.SALES_ORD_NO AS HC_REF_NO,
                                   AC.CODE AS HC_REF_CAT,
                                   AB.STK_DESC AS HC_REF_PROD,
                                   SAL.SRV_PAC_ID,
                       /*              AD.DISINF_SRV AS DISINF_SRV, */
                                   C.SRV_TYPE,
                                   AD.CODE AS prodCat,
                                   Q.LATITUDE,
                                   Q.LONGITUDE
                  FROM (SELECT A.*
                        FROM SVC0008D A,
                        ORG0001D B
                        WHERE A.CODY_ID = B.MEM_ID
                          AND A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                          AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                          AND B.MEM_CODE = #{userId}) A,
                  SVC0006D B,
                  SAL0225D C,
                  HMC0011D HMC,
                  SAL0001D SAL,
                  (SELECT *
                   FROM (SELECT CUST_ID,
                                CUST_ACC_BANK_ID,
                                CUST_ACC_NO,
                                ROW_NUMBER () OVER (PARTITION BY CUST_ID ORDER BY CUST_ACC_UPD_DT DESC) AS DUM_SEQ
                         FROM SAL0022D) SAL22D
                         WHERE DUM_SEQ = 1) D,
                  SAL0027D F,
                  SAL0029D G,
                  SAL0045D H,
                  ( <!-- SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID,
                           SALES_ORD_ID ,
                           STUS_CODE_ID
                    FROM SAL0046D WHERE STUS_CODE_ID = 4
                    GROUP BY SALES_ORD_ID ,
                             STUS_CODE_ID -->
                             SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID ,
                                    A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                               FROM SAL0046D A,   SVC0008D B
                               WHERE A.SALES_ORD_ID  = B.SALES_ORD_ID
                               AND B.CODY_ID  = (SELECT MEM_ID FROM  ORG0001D WHERE MEM_CODE = #{userId})
                               AND A.STUS_CODE_ID = 4
                           GROUP BY A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                             ) I,
                  ( SELECT A.ENTRY_ID,
                           A.SIRIM_NO,
                           A.SERIAL_NO,
                           A.RESULT_CUST_NAME,
                           A.RESULT_REP_EMAIL_NO,
                           A.RESULT_ACEPT_NAME
                    FROM SAL0047D A,
                  ( SELECT MAX (A.RESULT_ID) AS RESULT_ID,
                           A.ENTRY_ID
                    FROM SAL0047D A,
                    ( SELECT MAX (C.INSTALL_ENTRY_ID) AS ENTRY_ID,
                             C.SALES_ORD_ID
                      FROM SVC0008D A
                      INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID   AND B.MEM_CODE = #{userId}
                      INNER JOIN SAL0046D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
                      WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                        AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                      GROUP BY C.INSTALL_ENTRY_ID, C.SALES_ORD_ID) B
                   WHERE A.ENTRY_ID = B.ENTRY_ID
                   GROUP BY A.ENTRY_ID) B
                 WHERE A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID) J,
                 SAL0002D K,
                 SYS0026M L,
                 SAL0024D M,
                 SAL0074D O,
                 SYS0013M P,
                 SAL0023D Q,
                ( SELECT SRV_DUR,
                         SRV_EXPR_DT,
                         A.SRV_MEM_CNTRCT_ID,
                         A.SRV_SALES_ORD_ID
                  FROM SAL0095D A
                  INNER JOIN
                  ( SELECT C.SRV_SALES_ORD_ID,
                           MAX (C.SRV_MEM_ID) AS SRV_MEM_ID
                    FROM SVC0008D A
                    INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID AND B.MEM_CODE = #{userId}
                    LEFT OUTER JOIN SAL0095D C ON A.SALES_ORD_ID = C.SRV_SALES_ORD_ID
                                        /* AND SYSDATE BETWEEN C.SRV_START_DT AND C.SRV_EXPR_DT */
                                        AND C.SRV_STUS_CODE_ID = 4
                    WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                      AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                    GROUP BY C.SRV_SALES_ORD_ID) B
                    ON A.SRV_SALES_ORD_ID = B.SRV_SALES_ORD_ID AND A.SRV_MEM_ID = B.SRV_MEM_ID) R,
                 SAL0071D S,
                 SAL0017D T,
/*                  (SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID, SRV_SO_ID, FAUCET_EXCH FROM SAL0090D WHERE SRV_STUS_ID = 1 GROUP BY SRV_SO_ID, FAUCET_EXCH) U, */
                 SAL0028D W,
                 SYS0013M X,
                 (SELECT SALES_ORD_ID, REM_STATUS  FROM SVC0113D WHERE STATUS = '4') Y,
                 SAL0001D Z,
                 SAL0002D AA,
                 SYS0026M AB,
                 SYS0013M AD,
                 (SELECT CODE_ID ,CODE FROM SYS0013M WHERE CODE_MASTER_ID = '11') AC
/*                 (SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID2, SRV_SO_ID AS SRV_SO_ID2, DISINF_SRV FROM SAL0090D WHERE SRV_STUS_ID = 1 GROUP BY SRV_SO_ID, DISINF_SRV) AD */
                 WHERE A.SCHDUL_ID = B.SCHDUL_ID(+)
                    AND A.SALES_ORD_ID = B.SALES_ORD_ID(+)
                    AND A.SALES_ORD_ID = C.SRV_ORD_ID
                    AND C.SRV_ORD_ID = HMC.SRV_ORD_ID(+)
                    AND HMC.MAT_ORD_NO = SAL.SALES_ORD_NO(+)
                    AND C.CUST_ID = D.CUST_ID(+)
                    AND H.CNT_ID = F.CUST_CNTC_ID(+)
                    AND C.CUST_ID = G.CUST_ID(+)
                    AND C.SRV_ORD_ID = H.SALES_ORD_ID
                    AND H.SALES_ORD_ID = I.SALES_ORD_ID(+)
                    AND I.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
                    AND C.SRV_ORD_ID = K.SALES_ORD_ID(+)
                    AND K.ITM_STK_ID = L.STK_ID(+)
                    /*AND C.CUST_BILL_ID = M.CUST_BILL_ID(+)*/
                    AND SAL.CUST_BILL_ID = M.CUST_BILL_ID(+)

                    /*AND C.SALES_ORD_ID = O.SALES_ORD_ID(+)*/
                    /*AND C.SALES_ORD_ID = O.CUST_ID(+)*/
                    AND R.SRV_SALES_ORD_ID = O.SALES_ORD_ID(+)
                    AND R.SRV_MEM_CNTRCT_ID = O.SVC_CNTRCT_ID(+)
                    AND O.CUST_CRC_ID = W.CUST_CRC_ID(+)
                    AND W.CARD_TYPE_ID = X.CODE_ID(+)

                    AND O.MODE_ID = P.CODE_ID(+)
                    AND C.CUST_ID = Q.CUST_ID
                    AND H.ADD_ID = Q.CUST_ADD_ID(+)
                    AND C.SRV_ORD_ID = R.SRV_SALES_ORD_ID(+)
                    AND C.SRV_ORD_ID = S.SALES_ORD_ID(+)
                    AND C.PROMO_ID = T.PROMO_ID(+)
/*                    AND C.SRV_ORD_ID = U.SRV_SO_ID */
/*                    AND C.SRV_ORD_ID = AD.SRV_SO_ID2 */
                    AND B.RESULT_IS_CURR(+) = 1

                    AND TO_CHAR(C.SRV_ORD_ID) = Y.REM_STATUS(+)
                    AND Y.SALES_ORD_ID = Z.SALES_ORD_ID(+)
                    AND Z.SALES_ORD_ID = AA.SALES_ORD_ID(+)
                    AND AA.ITM_STK_ID = AB.STK_ID(+)
                    AND L.STK_CTGRY_ID = AD.CODE_ID(+)
                    AND AB.STK_CTGRY_ID = AC.CODE_ID(+)) SRV_INFO
                    JOIN (SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID, SRV_SO_ID, FAUCET_EXCH FROM SAL0090D WHERE SRV_STUS_ID = 1 GROUP BY SRV_SO_ID, FAUCET_EXCH) U on SRV_INFO.SRV_ORD_ID = U.SRV_SO_ID
                    JOIN (SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID2, SRV_SO_ID AS SRV_SO_ID2, DISINF_SRV FROM SAL0090D WHERE SRV_STUS_ID = 1 GROUP BY SRV_SO_ID, DISINF_SRV)AD on SRV_INFO.SRV_ORD_ID = AD.SRV_SO_ID2
                  )AA ,( SELECT SRV_CONFIG_ID ,
                                COUNT(*) FILT_CNT
                         FROM ( (SELECT *
                                 FROM SAL0087D
                                 WHERE TO_CHAR (ADD_MONTHS (SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD), 'YYYYMM') <![CDATA[ <= ]]> TO_CHAR (SYSDATE, 'YYYYMM') )
                         ) GROUP BY SRV_CONFIG_ID
                  )S87D
                  WHERE AA.SRV_CONFIG_ID  = S87D.SRV_CONFIG_ID(+)
       ) A LEFT JOIN PAY0053S B ON B.ACC_DEBT_ORD_ID = A.SALES_ORDER_ID
                               AND B.ACC_DEBT_SRV_CNTRCT_ID = A.SRV_MEM_CNTRCT_ID
  </select>

  <select id="getHcServiceJobList" parameterType="Map" resultType="egovMap">
    <!-- A.warranty, -->
    SELECT A.appointment_Date,
           A.service_No,
           A.job_Status,
           A.appointment_Time,
           A.plan_Year,
           A.plan_Month,
           A.sales_Order_No,
           A.sales_Order_Id,
           A.app_Type,
           A.sales_Promotion,
           A.bank_Code,
           A.card_Account_No,
           A.handphone_Tel,
           A.home_Tel,
           A.office_Tel,
           A.mail_Address,
           A.resultIc_Mobile_No,
           A.cust_Name,
           A.customer_Type,
           A.customer_Id,
           A.customer_Va_No,
           A.dsc_Code,
           A.instruction,
           A.sirim_No,
           fn_get_order_serial(A.sales_Order_Id, A.product_Code) AS serial_No,
           A.result_Cust_Name,
           A.result_Report_Email_No,
           A.result_Acceptance_Name,
           A.fail_Reason_Code,
           A.result_Remark,
           A.rc_Code,
           A.temperatureSetting,
           A.nextAppointmentTime,
           A.ownerCode,
           A.resultCustName,
           A.resultIcMobileNo,
           A.resultReportEmailNo,
           A.resultAcceptanceName,
           A.signData,
           A.nextAppointmentDate,
           A.settled_By,
           A.product_Name,
           A.product_Code,
           A.customer_Jom_Pay_Ref_No,
           A.payment_ModeName AS payment_Mode_Name,
           A.payment_Mode,
           A.contract_Duration,
           A.Membership_Contract_Expiry,
           A.rental_Status,
           A.job_Type,
           A.postcode,
           A.service_State,
           A.install_Address,
           A.need_Filter,
           TO_CHAR (NVL(A.warranty,0)) AS warranty,
           TO_CHAR (NVL(B.ACC_DEBT_SUB_CURR_OTSTND_AGING,0)) AS outstanding,
           homeCareOrderYn AS home_Care_Order_Yn,
           NVL(SERIAL_CHK, 'N') AS SERIAL_CHK,
           TO_CHAR (SALES_PROD_SZ) AS MATSIZE,
           SALES_ORD_NO AS HC_SALES_ORDER_NO,
           HC_REF_NO,
           HC_REF_CAT,
           HC_REF_PROD,
           TO_CHAR (A.SRV_PAC_ID) AS SRV_PAC_ID,
           TO_CHAR (A.DISINF_SRV) AS DISINFEC_SERV,
           A.SRV_TYPE,
           A.LATITUDE,
           A.LONGITUDE,
           A.PROD_CAT
    FROM ( SELECT appointment_Date,
                  service_No,
                  job_Status,
                  appointment_Time,
                  plan_Year,
                  plan_Month,
                  sales_Order_No,
                  sales_Order_Id,
                  app_Type,
                  sales_Promotion,
                  bank_Code,
                  card_Account_No,
                  handphone_Tel,
                  home_Tel,
                  office_Tel,
                  mail_Address,
                  resultIc_Mobile_No,
                  cust_Name,
                  customer_Type,
                  customer_Id,
                  customer_Va_No,
                  dsc_Code,
                  instruction,
                  sirim_No,
                  serial_No,
                  result_Cust_Name,
                  result_Report_Email_No,
                  result_Acceptance_Name,
                  fail_Reason_Code,
                  result_Remark,
                  rc_Code,
                  temperatureSetting,
                  nextAppointmentTime,
                  ownerCode,
                  resultCustName,
                  resultIcMobileNo,
                  resultReportEmailNo,
                  resultAcceptanceName,
                  signData,
                  nextAppointmentDate,
                  settled_By,
                  product_Name,
                  product_Code,
                  customer_Jom_Pay_Ref_No,
                  payment_ModeName,
                  payment_Mode,
                  contract_Duration,
                  Membership_Contract_Expiry,
                  rental_Status,
                  job_Type,
                  postcode,
                  service_State,
                  install_Address,
                  CASE WHEN FILT_CNT <![CDATA[ > ]]> 0 THEN '1' ELSE '0' END need_Filter,
                  srv_mem_cntrct_id,
                  warranty,
                  homeCareOrderYn,
                  SERIAL_CHK,
                  SALES_PROD_SZ,
                  SALES_ORD_NO,
                  HC_REF_NO,
                  HC_REF_CAT,
                  HC_REF_PROD,
                  SRV_PAC_ID,
                  DISINF_SRV,
                  SRV_TYPE,
                  LATITUDE,
                  LONGITUDE,
                  PROD_CAT
           FROM (

             SELECT
                    t.*,
                    ad.disinf_srv AS disinf_srv,
                    u.faucet_exch AS warranty,
                    u.srv_config_id
              FROM
             (
                SELECT DISTINCT TO_CHAR (A.APPNT_DT, 'YYYYMMDD') AS appointment_Date,
                                  A.NO AS service_No,
                                  A.STUS_CODE_ID AS job_Status,
                                  A.APPNT_TM AS appointment_Time,
                                  A.YEAR AS plan_Year,
                                  A.MONTH AS plan_Month,
                                  C.SRV_ORD_NO AS sales_Order_No,
                                  C.SRV_ORD_ID  AS sales_Order_Id,
                                  C.SRV_ORD_ID ,
                                  C.APP_TYPE_ID AS app_Type,
                                  T.PROMO_DESC AS sales_Promotion,
                                  D.CUST_ACC_BANK_ID AS bank_Code,
                                  D.CUST_ACC_NO AS card_Account_No,
                                  F.TEL_M1 AS handphone_Tel,
                                  F.TEL_O AS home_Tel,
                                  F.TEL_R AS office_Tel,
                                  F.EMAIL AS mail_Address,
                                  F.NRIC AS resultIc_Mobile_No,
                                  G.NAME AS cust_Name,
                                  G.TYPE_ID AS customer_Type,
                                  G.cust_id AS customer_Id,
                                  G.CUST_VA_NO AS customer_Va_No,
                                  H.BRNCH_ID AS dsc_Code,
                                  H.INSTCT AS instruction,
                                  J.SIRIM_NO AS sirim_No,
                                  J.SERIAL_NO AS serial_No,
                                  J.RESULT_CUST_NAME AS result_Cust_Name,
                                  J.RESULT_REP_EMAIL_NO AS result_Report_Email_No,
                                  J.RESULT_ACEPT_NAME AS result_Acceptance_Name,
                                  B.FAIL_RESN_ID AS fail_Reason_Code,
                                  B.RESULT_REM AS result_Remark,
                                  B.REN_COLCT_ID AS rc_Code,
                                  B.TEMPERATE_SETNG AS temperatureSetting,
                                  B.NEXT_APPNT_TM AS nextAppointmentTime,
                                  B.OWNER_CODE AS ownerCode,
                                  B.RESULT_CUST_NAME AS resultCustName,
                                  B.RESULT_MOBILE_NO AS resultIcMobileNo,
                                  B.RESULT_RPT_EMAIL_NO AS resultReportEmailNo,
                                  B.RESULT_ACEPT_NAME AS resultAcceptanceName,
                                  '' AS signData,
                                  TO_CHAR (B.NEXT_APPNT_DT, 'YYYYMMDD') AS nextAppointmentDate,
                                  '' AS settled_By,
                                  L.STK_DESC AS product_Name,
                                  L.STK_CODE AS product_Code,
                                  M.CUST_BILL_PAY_REF_NO1 AS customer_Jom_Pay_Ref_No,
                                  /* P.CODE_NAME AS payment_ModeName, */
                                  CASE WHEN P.CODE_ID = '131' THEN X.CODE_NAME || ' (Auto Debit)' ELSE P.CODE_NAME END AS payment_ModeName,
                                  TO_CHAR (P.CODE_ID) AS payment_Mode,
                                  TO_CHAR (R.SRV_DUR) AS contract_Duration,
                                  TO_CHAR (R.SRV_EXPR_DT, 'YYYYMMDD') AS Membership_Contract_Expiry,
                                  S.STUS_CODE_ID AS rental_Status,
                                  'HS' AS job_Type,
                                  (SELECT NVL (POSTCODE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) postcode,
                                  (SELECT NVL (STATE, '') AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) service_State,
                                  (SELECT (Q.ADDR_DTL || ' ' || Q.STREET || ' ' || AREA || ' ' || POSTCODE || ' ' || CITY || ' ' || STATE || ' ' || COUNTRY) AS POSTCODE
                                   FROM SYS0064M
                                   WHERE STATUS_ID = 1
                                     AND AREA_ID = Q.AREA_ID) install_Address,
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'POST')  postcode, */
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'STATE')  service_State, */
                                   /* FN_GET_SVC_MADDRESS(C.SALES_ORD_NO , 'FULL_ADDR')  install_Address */
                                   R.SRV_MEM_CNTRCT_ID,
                                   CASE WHEN SAL.SALES_ORD_NO IS NULL THEN 'N' ELSE 'Y' END AS homeCareOrderYn,
                                   L.SERIAL_CHK,
                                   C.SALES_PROD_SZ,
                                   SAL.SALES_ORD_NO,
                                   Z.SALES_ORD_NO AS HC_REF_NO,
                                   AC.CODE AS HC_REF_CAT,
                                   AB.STK_DESC AS HC_REF_PROD,
                                   SAL.SRV_PAC_ID,
                                   C.SRV_TYPE,
                                   Q.LATITUDE,
                                   Q.LONGITUDE,
                                   AD.CODE AS PROD_CAT
                  FROM (SELECT A.*
                        FROM SVC0008D A,
                        ORG0001D B
                        WHERE A.CODY_ID = B.MEM_ID
                          AND A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                          AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                          AND B.MEM_CODE = #{userId}) A,
                  SVC0006D B,
                  SAL0225D C,
                  HMC0011D HMC,
                  SAL0001D SAL,
                  (SELECT *
                   FROM (SELECT CUST_ID,
                                CUST_ACC_BANK_ID,
                                CUST_ACC_NO,
                                ROW_NUMBER () OVER (PARTITION BY CUST_ID ORDER BY CUST_ACC_UPD_DT DESC) AS DUM_SEQ
                         FROM SAL0022D) SAL22D
                         WHERE DUM_SEQ = 1) D,
                  SAL0027D F,
                  SAL0029D G,
                  SAL0045D H,
                  ( SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID ,
                                    A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                               FROM SAL0046D A,   SVC0008D B
                               WHERE A.SALES_ORD_ID  = B.SALES_ORD_ID
                               AND B.CODY_ID  = (SELECT MEM_ID FROM  ORG0001D WHERE MEM_CODE = #{userId})
                               AND A.STUS_CODE_ID = 4
                           GROUP BY A.SALES_ORD_ID ,
                                    A.STUS_CODE_ID
                             ) I,
                  ( SELECT A.ENTRY_ID,
                           A.SIRIM_NO,
                           A.SERIAL_NO,
                           A.RESULT_CUST_NAME,
                           A.RESULT_REP_EMAIL_NO,
                           A.RESULT_ACEPT_NAME
                    FROM SAL0047D A,
                  ( SELECT MAX (A.RESULT_ID) AS RESULT_ID,
                           A.ENTRY_ID
                    FROM SAL0047D A,
                    ( SELECT MAX (C.INSTALL_ENTRY_ID) AS ENTRY_ID,
                             C.SALES_ORD_ID
                      FROM SVC0008D A
                      INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID   AND B.MEM_CODE = #{userId}
                      INNER JOIN SAL0046D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
                      WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                        AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                      GROUP BY C.INSTALL_ENTRY_ID, C.SALES_ORD_ID) B
                   WHERE A.ENTRY_ID = B.ENTRY_ID
                   GROUP BY A.ENTRY_ID) B
                 WHERE A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID) J,
                 SAL0002D K,
                 SYS0026M L,
                 SAL0024D M,
                 SAL0074D O,
                 SYS0013M P,
                 SAL0023D Q,
                ( SELECT SRV_DUR,
                         SRV_EXPR_DT,
                         A.SRV_MEM_CNTRCT_ID,
                         A.SRV_SALES_ORD_ID
                  FROM SAL0095D A
                  INNER JOIN
                  ( SELECT C.SRV_SALES_ORD_ID,
                           MAX (C.SRV_MEM_ID) AS SRV_MEM_ID
                    FROM SVC0008D A
                    INNER JOIN ORG0001D B ON A.CODY_ID = B.MEM_ID AND B.MEM_CODE = #{userId}
                    LEFT OUTER JOIN SAL0095D C ON A.SALES_ORD_ID = C.SRV_SALES_ORD_ID
                                        /* AND SYSDATE BETWEEN C.SRV_START_DT AND C.SRV_EXPR_DT */
                                        AND C.SRV_STUS_CODE_ID = 4
                    WHERE A.YEAR = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'YYYY')
                      AND A.MONTH = TO_CHAR (TO_DATE (#{requestDate}, 'YYYY/MM'), 'MM')
                    GROUP BY C.SRV_SALES_ORD_ID) B
                    ON A.SRV_SALES_ORD_ID = B.SRV_SALES_ORD_ID AND A.SRV_MEM_ID = B.SRV_MEM_ID) R,
                 SAL0071D S,
                 SAL0017D T,
                 (SELECT MAX(SRV_CONFIG_ID) AS SRV_CONFIG_ID, SRV_SO_ID, FAUCET_EXCH FROM SAL0090D WHERE SRV_STUS_ID = 1 GROUP BY SRV_SO_ID, FAUCET_EXCH) U,
                 SAL0028D W,
                 SYS0013M X,
                 (SELECT SALES_ORD_ID, REM_STATUS  FROM SVC0113D WHERE STATUS = '4') Y,
                 SAL0001D Z,
                 SAL0002D AA,
                 SYS0026M AB,
                 (SELECT CODE_ID ,CODE FROM SYS0013M WHERE CODE_MASTER_ID = '11') AC,
                 SYS0013M AD
                 WHERE A.SCHDUL_ID = B.SCHDUL_ID(+)
                    AND A.SALES_ORD_ID = B.SALES_ORD_ID(+)
                    AND A.SALES_ORD_ID = C.SRV_ORD_ID
                    AND C.SRV_ORD_ID = HMC.SRV_ORD_ID(+)
                    AND HMC.MAT_ORD_NO = SAL.SALES_ORD_NO(+)
                    AND C.CUST_ID = D.CUST_ID(+)
                    AND H.CNT_ID = F.CUST_CNTC_ID(+)
                    AND C.CUST_ID = G.CUST_ID(+)
                    AND C.SRV_ORD_ID = H.SALES_ORD_ID
                    AND H.SALES_ORD_ID = I.SALES_ORD_ID(+)
                    AND I.INSTALL_ENTRY_ID = J.ENTRY_ID(+)
                    AND C.SRV_ORD_ID = K.SALES_ORD_ID(+)
                    AND K.ITM_STK_ID = L.STK_ID(+)
                    AND C.CUST_BILL_ID = M.CUST_BILL_ID(+)

                    /*AND C.SALES_ORD_ID = O.SALES_ORD_ID(+)*/
                    /*AND C.SALES_ORD_ID = O.CUST_ID(+)*/
                    AND R.SRV_SALES_ORD_ID = O.SALES_ORD_ID(+)
                    AND R.SRV_MEM_CNTRCT_ID = O.SVC_CNTRCT_ID(+)
                    AND O.CUST_CRC_ID = W.CUST_CRC_ID(+)
                    AND W.CARD_TYPE_ID = X.CODE_ID(+)

                    AND O.MODE_ID = P.CODE_ID(+)
                    AND C.CUST_ID = Q.CUST_ID
                    AND H.ADD_ID = Q.CUST_ADD_ID(+)
                    AND C.SRV_ORD_ID = R.SRV_SALES_ORD_ID(+)
                    AND C.SRV_ORD_ID = S.SALES_ORD_ID(+)
                    AND C.PROMO_ID = T.PROMO_ID(+)
                    AND C.SRV_ORD_ID = U.SRV_SO_ID
                    AND B.RESULT_IS_CURR(+) = 1

                    AND TO_CHAR(C.SRV_ORD_ID) = Y.REM_STATUS(+)
                    AND Y.SALES_ORD_ID = Z.SALES_ORD_ID(+)
                    AND Z.SALES_ORD_ID = AA.SALES_ORD_ID(+)
                    AND AA.ITM_STK_ID = AB.STK_ID(+)
                    AND AB.STK_CTGRY_ID = AC.CODE_ID(+)
                    AND L.STK_CTGRY_ID = AD.CODE_ID(+)
                    ) t
                       JOIN (
                        SELECT
                            MAX(srv_config_id) AS srv_config_id,
                            srv_so_id,
                            faucet_exch
                        FROM
                            SAL0090D
                        WHERE
                            srv_stus_id = 1
                        GROUP BY
                            srv_so_id,
                            faucet_exch
                    ) u ON t.srv_ord_id = u.srv_so_id
                    JOIN (
                        SELECT
                            MAX(srv_config_id) AS srv_config_id2,
                            srv_so_id AS srv_so_id2,
                            disinf_srv
                        FROM
                            SAL0090D
                        WHERE
                            srv_stus_id = 1
                        GROUP BY
                            srv_so_id,
                            disinf_srv
                    ) ad ON t.srv_ord_id = ad.srv_so_id2
                  )AA ,( SELECT SRV_CONFIG_ID ,
                                COUNT(*) FILT_CNT
                         FROM ( (SELECT *
                                 FROM SAL0087D
                                 WHERE TO_CHAR (ADD_MONTHS (SRV_FILTER_PRV_CHG_DT, SRV_FILTER_PRIOD), 'YYYYMM') <![CDATA[ <= ]]> TO_CHAR (SYSDATE, 'YYYYMM') )
                         ) GROUP BY SRV_CONFIG_ID
                  )S87D
                  WHERE AA.SRV_CONFIG_ID  = S87D.SRV_CONFIG_ID(+)
       ) A LEFT JOIN PAY0053S B ON B.ACC_DEBT_ORD_ID = A.SALES_ORDER_ID
                               AND B.ACC_DEBT_SRV_CNTRCT_ID = A.SRV_MEM_CNTRCT_ID
  </select>

  <select id="selectSerialList" parameterType="Map" resultType="egovMap">
    SELECT A.SERIAL_NO, A.ITM_CODE, A.LAST_LOC_STK_GRAD
     FROM LOG0100M A
         , SYS0028M B
   WHERE A.LAST_LOC_ID = B.WH_LOC_ID
       AND A.STUS_CODE = 'I'
     AND B.WH_LOC_CODE = #{userId}
  </select>

  <select id="getOrdID" parameterType="Map" resultType="egovMap">
    SELECT SALES_ORD_ID
      FROM SAL0001D
    WHERE SALES_ORD_NO = #{salesOrderNo}
  </select>

  <select id="getDtInstallationJobList" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT A.*
              , CASE WHEN FRA_ORD_NO IS NULL
                        THEN 'N' ELSE 'Y' END AS FRA_YN
              , ( SELECT MAX(T3.STK_CODE)
                  FROM SAL0001D T1
                         , SAL0002D T2
                         , SYS0026M T3
                  WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                      AND T2.ITM_STK_ID = T3.STK_ID(+)
                      AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_PRODUCT_CODE
              , ( SELECT MAX(T3.STK_DESC)
                  FROM SAL0001D T1
                         , SAL0002D T2
                         , SYS0026M T3
                  WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                      AND T2.ITM_STK_ID = T3.STK_ID(+)
                      AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_PRODUCT_NAME
              , ( SELECT MAX(T3.SERIAL_CHK)
                  FROM SAL0001D T1
                        , SAL0002D T2
                        , SYS0026M T3
                  WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID(+)
                      AND T2.ITM_STK_ID = T3.STK_ID(+)
                      AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS FRA_SERIAL_CHK
              , ( SELECT MAX(T3.SERIAL_NO) AS SERIAL_NO
                  FROM SAL0001D T1
                        , SAL0046D T2
                        , SAL0047D T3
                  WHERE T1.SALES_ORD_ID = T2.SALES_ORD_ID
                      AND T2.INSTALL_ENTRY_ID = T3.ENTRY_ID(+)
                      AND T1.SALES_ORD_NO = A.FRA_ORD_NO) AS SEL_FRA_SERIAL_NO
      FROM ( SELECT ROW_NUMBER () OVER (PARTITION BY SAL0001D.SALES_ORD_NO ORDER BY SAL0095D.SRV_EXPR_DT, SAL0046D.INSTALL_ENTRY_NO DESC) rnum,
                            SAL0046D.INSTALL_ENTRY_NO AS SERVICE_NO,
                            SAL0046D.STUS_CODE_ID AS JOB_STATUS,
                            NVL (TO_CHAR (SAL0046D.APPNT_DT, 'YYYYMMDD'), '') AS APPOINTMENT_DATE,
                            CASE WHEN SAL0046D.APPNT_TM IS NULL
                                    THEN DECODE (SAL0046D.SESION_CODE, 'M', '1000',
                                                                                              'A', '1400',
                                                                                              'E', '1900',
                                                                                              'O', '2000',
                                                                                              '2000')
                                    ELSE TO_CHAR (REPLACE (SUBSTR (SAL0046D.APPNT_TM, 0, 5), ':')) END APPOINTMENT_TIME,
                            NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'YYYY'), '') AS PLAN_YEAR,
                            NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'MM'), '') AS PLAN_MONTH,
                            CASE WHEN SAL0046D.SESION_CODE IS NULL
                                    THEN 'O'
                                    ELSE SAL0046D.SESION_CODE END AS JOB_SESSION,
                            ( SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID ) AS HP_NAME,
                            ( SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID ) AS HP_TEL,
                            CASE WHEN TO_CHAR( ORG1001V.LVL3_UP_ID ) = '0'
                                    THEN ( SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID )
                                    ELSE ( SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID ) END AS HM_NAME,
                            CASE WHEN TO_CHAR( ORG1001V.LVL3_UP_ID ) = '0'
                                    THEN ( SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID )
                                    ELSE ( SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID ) END AS HM_TEL,
                            CASE WHEN TO_CHAR( ORG1001V.LVL2_UP_ID ) = '0'
                                    THEN ( SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID )
                                    ELSE ( SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID ) END AS SM_NAME,
                            CASE WHEN TO_CHAR( ORG1001V.LVL2_UP_ID ) = '0'
                                    THEN ( SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID )
                                    ELSE (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID ) END AS SM_TEL,
                            NVL ( ORG0001D.MEM_CODE, '' ) AS SETTLED_BY,
                            NVL ( SAL0001D.SALES_ORD_NO, '' ) AS SALES_ORDER_NO,
                            NVL ( SAL0001D.CUST_ID, '' ) AS CUSTOMER_ID,
                            FN_GET_COMMCD ( 10, SAL0001D.APP_TYPE_ID ) AS APP_TYPE,
                            NVL ( TO_CHAR (SAL0017D.PROMO_DESC), '' ) AS SALES_PROMOTION,
                            NVL ( TO_CHAR (SAL0001D.MTH_RENT_AMT), '0' ) AS MONTHLY_RENTAL_FEES,
                            NVL ( SAL0001D.TOT_AMT, '' ) AS REGISTRATION_FEES,
                            NVL ( SAL0022D.CUST_ACC_BANK_ID, '' ) AS BANK_CODE,
                            NVL ( SAL0022D.CUST_ACC_NO, '' ) AS CARD_ACCOUNT_NO,
                            NVL ( SAL0024D.CUST_BILL_PAY_REF_NO1, '' ) AS CUSTOMER_JOM_PAY_REF_NO,
                            NVL ( SAL0027D.TEL_M1, '' ) AS HANDPHONE_TEL,
                            NVL ( SAL0027D.TEL_R, '' ) AS HOME_TEL,
                            NVL ( SAL0027D.TEL_O, '' ) AS OFFICE_TEL,
                            NVL ( SAL0029D.NAME, '' ) AS CUST_NAME,
                            NVL ( TO_CHAR (SAL0029D.TYPE_ID), '' ) AS CUSTOMER_TYPE,
                            NVL ( SAL0027D.EMAIL, '' ) AS MAIL_ADDRESS,
                            NVL ( SAL0029D.CUST_VA_NO, '' ) AS CUSTOMER_VA_NO,
                            NVL ( SAL0047D.SIRIM_NO, '' ) AS SIRIM_NO,
                            NVL ( SAL0047D.SERIAL_NO, '' ) AS SERAIL_NO,
                            NVL ( TO_CHAR (SAL0047D.INSTALL_DT, 'YYYYMMDD'), '' ) AS SETTLED_DATE,
                            NVL ( TO_CHAR (SAL0095D.SRV_EXPR_DT, 'YYYYMMDD'), '' ) AS EXPIRY_DATE,
                            NVL ( SAL0095D.SRV_DUR, '') AS CONTRACT_DURATION,
                            NVL ( SYS0064M.POSTCODE, '' ) POSTCODE,
                            NVL( SYS0064M.STATE, '' ) SERVICE_STATE,
                            ( SAL0023D.ADDR_DTL || ' ' || SAL0023D.STREET || ' ' || SYS0064M.AREA || ' ' || SYS0064M.POSTCODE || ' ' || SYS0064M.CITY || ' ' || SYS0064M.STATE || ' ' || SYS0064M.COUNTRY ) INSTALL_ADDRESS,
                            NVL ( SYS0026M.STK_DESC, '' ) AS PRODUCT_NAME,
                            NVL ( SYS0026M.STK_CODE, '' ) AS PRODUCT_CODE,
                            NVL (SYS0026M.SERIAL_CHK, 'N') AS SERIAL_CHK,
                            NVL (SYS0005M.CODE, '') AS DSC_CODE,
                            NVL (TO_CHAR (CCR0007D.CALL_REM), '') AS INSTRUCTION,
                            ( SELECT FRA_ORD_NO
                              FROM HMC0011D
                              WHERE MAT_ORD_NO = SAL0001D.SALES_ORD_NO
                                  AND ROWNUM = 1) AS FRA_ORD_NO,
                            SAL0047D.REM AS RESULT_REMARK,
                            NVL (SAL0047D.DT_PAIR_ID, '') AS PARTNER_CODE,
                            CASE WHEN SAL0047D.DT_PAIR_ID IS NOT NULL
                                    THEN ( SELECT MEM_CODE
                                               FROM ORG0001D
                                               WHERE ORG0001D.MEM_ID = SAL0047D.DT_PAIR_ID)
                                    ELSE '' END AS MEM_CODE,
                            SAL0045D.SRV_TYPE as SRV_TYP,
                            SAL0047D.DISP_COMM as DISP_COMM
                 FROM SAL0046D,
                          ORG0001D,
                          ORG0005D,
                          ORG1001V,
                          SAL0001D,
                          SAL0002D,
                          ( SELECT CUST_ID AS CUST_ID, MAX (CUST_ACC_BANK_ID) AS CUST_ACC_BANK_ID, MAX(CUST_ACC_NO) AS CUST_ACC_NO
                            FROM SAL0022D GROUP BY CUST_ID ) SAL0022D,
                          SAL0023D,
                          SAL0024D,
                          SAL0027D,
                          SAL0029D,
                          SAL0045D,
                          SAL0047D,
                          SAL0095D,
                          SYS0005M,
                          SYS0026M,
                          CCR0006D,
                          CCR0007D,
                          ( SELECT *
                            FROM SYS0064M
                            WHERE STATUS_ID = 1 ) SYS0064M,
                          SAL0017D
                 WHERE SAL0046D.CT_ID = ORG0001D.MEM_ID
                     AND ORG0005D.MEM_ID = ORG0001D.MEM_ID
                     AND SAL0001D.MEM_ID = ORG1001V.MEM_ID
                     AND SAL0001D.SALES_ORD_ID = SAL0046D.SALES_ORD_ID
                     AND SAL0001D.SALES_ORD_ID = SAL0002D.SALES_ORD_ID (+)
                     AND SAL0001D.CUST_ID = SAL0022D.CUST_ID (+)
                     AND SAL0045D.ADD_ID = SAL0023D.CUST_ADD_ID (+)
                     AND SAL0001D.CUST_BILL_ID = SAL0024D.CUST_BILL_ID (+)
                     AND SAL0045D.CNT_ID = SAL0027D.CUST_CNTC_ID (+)
                     AND SAL0001D.CUST_ID = SAL0029D.CUST_ID (+)
                     AND SAL0001D.SALES_ORD_ID = SAL0045D.SALES_ORD_ID (+)
                     AND SAL0046D.INSTALL_ENTRY_ID = SAL0047D.ENTRY_ID (+)
                     AND SAL0001D.SALES_ORD_ID = SAL0095D.SRV_SALES_ORD_ID (+)
                     AND ORG0001D.BRNCH = SYS0005M.BRNCH_ID
                     AND SAL0002D.ITM_STK_ID = SYS0026M.STK_ID (+)
                     AND SAL0023D.AREA_ID = SYS0064M.AREA_ID (+)
                     AND CCR0006D.SALES_ORD_ID = SAL0001D.SALES_ORD_ID
                     AND CCR0006D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
                     AND CCR0007D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
                     AND CCR0006D.RESULT_ID = CCR0007D.CALL_RESULT_ID
                     AND ORG0001D.mem_code = #{userId}
                     AND SYS0026M.STK_CTGRY_ID NOT IN ( SELECT A.CODE_ID
                                                                              FROM SYS0013M A,
                                                                                       SYS0094M B
                                                                              WHERE A.CODE = B.CODE
                                                                                  AND A.CODE_MASTER_ID = 11
                                                                                  AND B.IND = 'HOMECARE'
                                                                                  AND A.CODE IN ('FRM','ACO'))
                     AND SAL0046D.INSTALL_DT BETWEEN ADD_MONTHS (LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM')) + 1, -1)
                     AND LAST_DAY (TO_DATE (#{requestDate}, 'YYYYMM'))
                     AND SAL0001D.PROMO_ID = SAL0017D.PROMO_ID
      ) A WHERE rnum = 1
    ]]>
  </select>

  <select id="getFraOrdInfo" parameterType="Map" resultType="egovMap">
    SELECT A.*
    FROM (
              SELECT ROW_NUMBER () OVER (PARTITION BY SAL0001D.SALES_ORD_NO ORDER BY SAL0095D.SRV_EXPR_DT, SAL0046D.INSTALL_ENTRY_NO DESC) rnum,
                         SAL0046D.INSTALL_ENTRY_NO AS service_No,
                         SAL0046D.STUS_CODE_ID AS job_Status,
                         NVL (TO_CHAR (SAL0046D.APPNT_DT, 'YYYYMMDD'), '') AS appointment_Date,
                         CASE WHEN SAL0046D.APPNT_TM IS NULL
                                 THEN DECODE (SAL0046D.SESION_CODE,
                                       'M', '1000',
                                       'A', '1400',
                                       'E', '1900',
                                       'O', '2000',
                                       '2000')
                                 ELSE TO_CHAR (REPLACE (SUBSTR (SAL0046D.APPNT_TM, 0, 5), ':')) END appointment_Time,
                         NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'YYYY'), '') AS plan_Year,
                         NVL (TO_CHAR (SAL0046D.INSTALL_DT, 'MM'), '') AS plan_Month,
                         CASE WHEN SAL0046D.SESION_CODE IS NULL
                                 THEN 'O' ELSE SAL0046D.SESION_CODE END AS job_Session,
                         (SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID) AS hp_Name,
                         (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID) AS hp_Tel,
                         CASE WHEN TO_CHAR(ORG1001V.LVL3_UP_ID) = '0'
                                 THEN (SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID)
                                  ELSE (SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID) END AS hm_Name,
                         CASE WHEN TO_CHAR(ORG1001V.LVL3_UP_ID) = '0'
                                 THEN (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = SAL0001D.MEM_ID)
                                 ELSE (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID) END AS hm_Tel,
                         CASE WHEN TO_CHAR(ORG1001V.LVL2_UP_ID) = '0'
                                 THEN (SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID)
                                 ELSE (SELECT NAME FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID) END AS sm_Name,
                         CASE WHEN TO_CHAR(ORG1001V.LVL2_UP_ID) = '0'
                                 THEN (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL3_UP_ID)
                                 ELSE (SELECT TEL_MOBILE FROM ORG0001D WHERE ORG0001D.MEM_ID = ORG1001V.LVL2_UP_ID) END AS sm_Tel,
                         NVL (ORG0001D.MEM_CODE, '') AS settled_By,
                         NVL (SAL0001D.SALES_ORD_NO, '') AS sales_Order_No,
                         NVL (SAL0001D.CUST_ID, '') AS customer_Id,
                         FN_GET_COMMCD (10, SAL0001D.APP_TYPE_ID) AS app_Type,
                         NVL (TO_CHAR (SAL0001D.PROMO_ID), '') AS sales_Promotion,
                         NVL(TO_CHAR (SAL0001D.MTH_RENT_AMT), '0') AS monthly_Rental_Fees,
                         NVL (SAL0001D.TOT_AMT, '') AS registration_Fees,
                         NVL (SAL0022D.CUST_ACC_BANK_ID, '') AS bank_Code,
                         NVL (SAL0022D.CUST_ACC_NO, '') AS card_Account_No,
                         NVL (SAL0024D.CUST_BILL_PAY_REF_NO1, '') AS customer_Jom_Pay_Ref_No,
                         NVL (SAL0027D.TEL_M1, '') AS handphone_Tel,
                         NVL (SAL0027D.TEL_R, '') AS home_Tel,
                         NVL (SAL0027D.TEL_O, '') AS office_Tel,
                         NVL (SAL0029D.NAME, '') AS cust_Name,
                         NVL (TO_CHAR (SAL0029D.TYPE_ID), '') AS customer_Type,
                         NVL (SAL0027D.EMAIL, '') AS mail_Address,
                         NVL (SAL0029D.CUST_VA_NO, '') AS customer_Va_No,
                         NVL (SAL0047D.SIRIM_NO, '') AS sirim_No,
                         NVL (SAL0047D.SERIAL_NO, '') AS serial_No,
                         NVL (TO_CHAR (SAL0047D.INSTALL_DT, 'YYYYMMDD'), '') AS settled_Date,
                         NVL (TO_CHAR (SAL0095D.SRV_EXPR_DT, 'YYYYMMDD'), '') AS expiry_Date,
                         NVL (SAL0095D.SRV_DUR, '') AS contract_Duration,
                         NVL(SYS0064M.POSTCODE, '') postcode,
                         NVL(SYS0064M.STATE, '') service_State,
                         (SAL0023D.ADDR_DTL || ' ' || SAL0023D.STREET || ' ' || SYS0064M.AREA || ' ' || SYS0064M.POSTCODE || ' ' || SYS0064M.CITY || ' ' || SYS0064M.STATE || ' ' || SYS0064M.COUNTRY) install_Address,
                         NVL (SYS0026M.STK_DESC, '') AS product_Name,
                         NVL (SYS0026M.STK_CODE, '') AS product_Code,
                         NVL (SYS0005M.CODE, '') AS dsc_Code,
                         NVL (TO_CHAR (CCR0007D.CALL_REM), '') AS instruction
                 FROM SAL0046D,
                         ORG0001D,
                         ORG0005D,
                         ORG1001V,
                         SAL0001D,
                         SAL0002D,
                         (SELECT CUST_ID AS CUST_ID, MAX(CUST_ACC_BANK_ID) AS CUST_ACC_BANK_ID, MAX(CUST_ACC_NO) AS CUST_ACC_NO FROM SAL0022D GROUP BY CUST_ID) SAL0022D,
                         SAL0023D,
                         SAL0024D,
                         SAL0027D,
                         SAL0029D,
                         SAL0045D,
                         SAL0047D,
                         SAL0095D,
                         SYS0005M,
                         SYS0026M,
                         CCR0006D,
                         CCR0007D,
                         (SELECT *
                            FROM SYS0064M
                          WHERE STATUS_ID = 1) SYS0064M
               WHERE SAL0046D.CT_ID = ORG0001D.MEM_ID
                   AND ORG0005D.MEM_ID = ORG0001D.MEM_ID
                   AND SAL0001D.MEM_ID = ORG1001V.MEM_ID
                   AND SAL0001D.SALES_ORD_ID = SAL0046D.SALES_ORD_ID
                   AND SAL0001D.SALES_ORD_ID = SAL0002D.SALES_ORD_ID(+)
                   AND SAL0001D.CUST_ID = SAL0022D.CUST_ID(+)
                   AND SAL0045D.ADD_ID = SAL0023D.CUST_ADD_ID(+)
                   AND SAL0001D.CUST_BILL_ID = SAL0024D.CUST_BILL_ID(+)
                   AND SAL0045D.CNT_ID = SAL0027D.CUST_CNTC_ID(+)
                   AND SAL0001D.CUST_ID = SAL0029D.CUST_ID(+)
                   AND SAL0001D.SALES_ORD_ID = SAL0045D.SALES_ORD_ID(+)
                   AND SAL0046D.INSTALL_ENTRY_ID = SAL0047D.ENTRY_ID(+)
                   AND SAL0001D.SALES_ORD_ID = SAL0095D.SRV_SALES_ORD_ID(+)
                   AND ORG0001D.BRNCH = SYS0005M.BRNCH_ID
                   AND SAL0002D.ITM_STK_ID = SYS0026M.STK_ID(+)
                   AND SAL0023D.AREA_ID = SYS0064M.AREA_ID(+)
                   AND CCR0006D.SALES_ORD_ID = SAL0001D.SALES_ORD_ID
                   AND CCR0006D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
                   AND CCR0007D.CALL_ENTRY_ID = SAL0046D.CALL_ENTRY_ID
                   AND CCR0006D.RESULT_ID = CCR0007D.CALL_RESULT_ID
                   AND ORG0001D.mem_code = #{userId}
                   AND SAL0001D.SALES_ORD_NO = (SELECT FRA_ORD_NO
                                                                    FROM HMC0011D
                                                                  WHERE MAT_ORD_NO = #{matOrdNo}
                                                                      AND FRA_ORD_NO IS NOT NULL )
            ) A
     WHERE rnum = 1
  </select>

  <update id="updateInsDtReAppointmentReturnResult" parameterType="Map">
    UPDATE SAL0046D
         SET APPNT_DT = TO_DATE(#{appointmentDate},'YYYYMMDD'),
               APPNT_TM = #{appointmentTime},
               SESION_CODE = #{sesionCode},
               UPD_DT = SYSDATE,
               UPD_USER_ID = (SELECT MEM_ID
                                        FROM ORG0001D
                                       WHERE MEM_CODE = #{userId})
     WHERE INSTALL_ENTRY_NO = (SELECT MAX(INSTALL_ENTRY_NO)
                                                 FROM SAL0046D
                                               WHERE SALES_ORD_ID = (SELECT SALES_ORD_ID
                                                                                    FROM SAL0001D
                                                                                   WHERE SALES_ORD_NO = (SELECT FRA_ORD_NO
                                                                                                                         FROM HMC0011D
                                                                                                                        WHERE MAT_ORD_NO = #{salesOrderNo}
                                                                                                                           AND FRA_ORD_NO IS NOT NULL)))
         AND STUS_CODE_ID = 1
         AND SALES_ORD_ID = (SELECT SALES_ORD_ID
                                          FROM SAL0001D
                                        WHERE SALES_ORD_NO = (SELECT FRA_ORD_NO
                                                                              FROM HMC0011D
                                                                            WHERE MAT_ORD_NO = #{salesOrderNo}
                                                                                AND FRA_ORD_NO IS NOT NULL))
  </update>

  <select id="getPrdRtnDelvryNo" parameterType="Map" resultType="egovMap">
    SELECT DISTINCT Y.DELVRY_NO
      FROM LOG0047M X
      INNER JOIN LOG0055D Y ON X.REQST_NO = Y.REQST_NO
     WHERE X.REF_DOC_NO = #{serviceNo}
  </select>

  <select id="getPrFraOrdInfo" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT TO_CHAR (C.SALES_ORD_NO) AS sales_Order_No,
               A.RETN_NO AS service_No,
               NVL (F.NAME, '') AS cust_Name,
               'PR' AS job_Type,
               TO_CHAR (A.STUS_CODE_ID) AS job_Status,
               NVL (TO_CHAR (A.APP_DT, 'YYYYMMDD'), '') AS appointment_Date,
               CASE WHEN NVL (TO_CHAR (A.APP_TM, 'HHMM'), ' ') = ' '
                       THEN DECODE (NVL (TO_CHAR (A.APP_TM, 'HHMM'), ''),
                                            'M', '1000',
                                            'A', '1400',
                                            'E', '1900',
                                            'O', '2000',
                                            '2000')
                       ELSE NVL (TO_CHAR (A.APP_TM, 'HHMM'), '') END AS appointment_Time,
               A.RT_SESION_CODE AS job_Session,
               CASE WHEN (TO_CHAR (A.STUS_CODE_ID) <> '1'
                          AND NVL (TO_CHAR (E.CHECKIN_DT), ' ') = ' ')
                       THEN NVL (TO_CHAR (A.APP_DT, 'YYYYMMDD'), ' ')
                       ELSE NVL (TO_CHAR (E.CHECKIN_DT), '') END AS check_In_Date,
               CASE WHEN (TO_CHAR (A.STUS_CODE_ID) <> '1'
                         AND NVL (TO_CHAR (E.CHECKIN_TM), ' ') = ' ')
                       THEN CASE WHEN NVL (TO_CHAR (A.APP_TM, 'HHMM'), ' ') = ' '
                                       THEN DECODE (NVL (TO_CHAR (A.APP_TM, 'HHMM'), ''),
                                                            'M', '1000',
                                                            'A', '1400',
                                                            'E', '1900',
                                                            'O', '2000',
                                                            '2000')
                                       ELSE NVL (TO_CHAR (A.APP_TM, 'HHMM'), '') END
                       ELSE SUBSTR (NVL (TO_CHAR (E.CHECKIN_TM), ''), 1, 4) END AS check_In_Time,
               NVL (TO_CHAR (E.CHECKIN_GPS), '') AS check_In_Gps,
               NVL (TO_CHAR (F.TYPE_ID), '') AS customer_Type,
               NVL (TO_CHAR (C.CUST_ID), '') AS customer_Id,
               NVL (TO_CHAR (A.APP_DT, 'YYYY'), '') AS plan_Year,
               NVL (TO_CHAR (A.APP_DT, 'MM'), '') AS plan_Month,
               NVL (P.POSTCODE, '') postcode,
               NVL (P.STATE, '') service_State,
               ( O.ADDR_DTL || ' ' || O.STREET || ' ' || P.AREA || ' ' || P.POSTCODE || ' ' || P.CITY || ' ' || P.STATE || ' ' || P.COUNTRY) install_Address,
               NVL (TO_CHAR (N.TEL_M1), '') AS handphone_Tel,
               NVL (TO_CHAR (N.TEL_R), '') AS home_Tel,
               NVL (TO_CHAR (N.TEL_O), '') AS office_Tel,
               NVL (TO_CHAR (N.EMAIL), '') AS mail_Address,
               NVL (TO_CHAR (F.CUST_VA_NO), '') AS customer_Va_No,
               NVL (TO_CHAR (G.CUST_BILL_PAY_REF_NO1), '') AS customer_Jom_Pay_Ref_No,
               TO_CHAR (D.STK_CODE) AS product_Code,
               TO_CHAR (D.STK_DESC) AS product_Name,
               NVL (D.SERIAL_CHK, 'N') AS SERIAL_CHK,
               NVL (FN_GET_COMMCD (10, C.APP_TYPE_ID), '') AS app_Type,
               NVL (K.INSTCT, '') AS instruction,
               NVL (TO_CHAR (I.INSTALL_DT, 'YYYYMMDD'), '') AS installation_Date,
               NVL (TO_CHAR (J.MEM_CODE), '') AS installed_By,
               '' AS prev_Outstanding,
               '' AS penalty_Charges,
               '' AS unbilled_Amount,
               '' AS outstanding,
               NVL (TO_CHAR (L.CODE), '') AS dsc_Code,
               NVL (I.SIRIM_NO, '') AS sirim_No,
               fn_get_order_serial(C.SALES_ORD_ID, NULL) AS serial_No,
               '' AS hp_Name,
               '' AS hp_Tel,
               NVL (TO_CHAR (M.NAME), '') AS hm_Name,
               NVL (TO_CHAR (M.TEL_MOBILE), '') AS hm_Tel,
               TO_CHAR (E.STK_RETN_CC_ID) AS cc_Code,
               TO_CHAR (E.STK_RETN_RESN_ID) AS result_Code,
               TO_CHAR (E.STK_RETN_REM) AS result_Remark,
               NVL (TO_CHAR (E.OWNER_CODE), '') AS owner_Code,
               NVL (FN_GET_COMMCD (376, TO_CHAR (E.OWNER_CODE)), '') AS owner_Code_Nm,
               NVL (TO_CHAR (E.RESULT_CUST_NAME), '') AS result_Cust_Name,
               NVL (TO_CHAR (E.RESULT_ICMOBILE_NO), '') AS result_Ic_Mobile_No,
               NVL (TO_CHAR (E.RESULT_RPT_EMAIL_NO), '') AS result_Report_Email_No,
               NVL (TO_CHAR (E.RESULT_ACEPT_NAME), '') AS result_Acceptance_Name,
               NVL (TO_CHAR (A.FAIL_RESN_ID), '') AS fail_Reason_Id,
               NVL (TO_CHAR (A.FAIL_RESN_CODE), '') AS fail_Reason_Code,
               '' AS fail_Reason_Name,
               TO_CHAR (E.STK_RETN_DT, 'YYYYMMDD') AS complete_Ret_Date,
               TO_CHAR (E.STK_RETN_DT, 'HHMM') AS complete_Ret_Time,
               '' AS last_Payment_Date,
               NVL (TO_CHAR (I.NEXT_CALL_DT, 'YYYYMMDD'), '') AS next_Call_Date,
               NVL (TO_CHAR (I.NEXT_CALL_DT, 'HHMM'), '') AS next_Call_Time,
               (SELECT FRA_ORD_NO FROM HMC0011D WHERE MAT_ORD_NO = C.SALES_ORD_NO AND ROWNUM = 1) AS FRA_ORD_NO
       FROM LOG0038D A
       INNER JOIN ORG0001D B ON A.CT_ID = B.MEM_ID
       INNER JOIN SAL0001D C ON A.SALES_ORD_ID = C.SALES_ORD_ID
       INNER JOIN SYS0026M D ON A.STOCK_ID = D.STK_ID
         LEFT OUTER JOIN (SELECT A.*, B.RETN_RESULT_ID AS RETN_RESULT_ID
                                     FROM LOG0039D A
                                    INNER JOIN ( SELECT STK_RETN_ID, MAX (STK_RETN_RESULT_ID) AS RETN_RESULT_ID
                                                        FROM LOG0039D
                                                       GROUP BY STK_RETN_ID) B ON A.STK_RETN_ID = B.STK_RETN_ID
                                       AND A.STK_RETN_RESULT_ID = B.RETN_RESULT_ID) E ON A.STK_RETN_ID = E.STK_RETN_ID
         LEFT OUTER JOIN SAL0029D F ON C.CUST_ID = F.CUST_ID
         LEFT OUTER JOIN SAL0024D G ON C.CUST_BILL_ID = G.CUST_BILL_ID
         LEFT OUTER JOIN ( SELECT MAX (INSTALL_ENTRY_ID) AS INSTALL_ENTRY_ID, SALES_ORD_ID
                                      FROM SAL0046D
                                     GROUP BY SALES_ORD_ID) H ON C.SALES_ORD_ID = H.SALES_ORD_ID
         INNER JOIN (SELECT A.*
                             FROM SAL0047D A
                             INNER JOIN ( SELECT ENTRY_ID, MAX (RESULT_ID) AS RESULT_ID
                                                 FROM SAL0047D
                                                GROUP BY ENTRY_ID) B ON A.ENTRY_ID = B.ENTRY_ID AND A.RESULT_ID = B.RESULT_ID) I ON H.INSTALL_ENTRY_ID = I.ENTRY_ID
         INNER JOIN ORG0001D J ON I.CT_ID = J.MEM_ID
         INNER JOIN SAL0045D K ON A.SALES_ORD_ID = K.SALES_ORD_ID
         INNER JOIN SYS0005M L ON B.BRNCH = L.BRNCH_ID
         LEFT OUTER JOIN ORG0001D M ON C.SALES_HM_ID = M.MEM_ID
         LEFT OUTER JOIN SAL0027D N ON K.CNT_ID = N.CUST_CNTC_ID
         LEFT OUTER JOIN SAL0023D O ON K.ADD_ID = O.CUST_ADD_ID
         LEFT OUTER JOIN SYS0064M P ON O.AREA_ID = P.AREA_ID AND P.STATUS_ID = 1
     WHERE B.MEM_CODE = #{userId}
         AND C.SALES_ORD_NO = (SELECT FRA_ORD_NO
                                              FROM HMC0011D
                                             WHERE MAT_ORD_NO = #{matOrdNo}
                                                 AND FRA_ORD_NO IS NOT NULL )
    ]]>
  </select>

  <select id="getBeforeProductSerialNo" parameterType="Map" resultType="String">
    SELECT FN_GET_ORDER_SERIAL(#{salesOrdId}, NULL) AS beforeProductSerialNo
    FROM DUAL
  </select>

  <select id="getDelvryNo" parameterType="Map" resultType="egovMap">
    SELECT /* [com.coway.trust.biz.services.mlog.impl.MSvcLogApiMapper.getDelvryNo] KR_HAN */
               DISTINCT Y.DELVRY_NO DELVRY_NO
    FROM LOG0047M X
    INNER JOIN LOG0055D Y ON X.REQST_NO = Y.REQST_NO
    WHERE X.REF_DOC_NO = #{refDocNo}
  </select>

  <select id="getRelateOrdLst" parameterType="Map" resultType="egovMap">
    SELECT A.SALES_ORD_NO ORD_NO,
               UPPER(F.CODE) AS ORD_STAT,
               TO_CHAR(SALES_DT, 'DD/MM/YYYY') AS ORD_DT,
               UPPER(G.CODE_DESC || '(' || G.CODE || ')') AS APP_TYP,
               UPPER(D.CODE_DESC || '(' || D.CODE || ')') AS PROD_CAT,
               UPPER(C.STK_DESC || '(' || C.STK_CODE || ')') AS PROD,
               TO_CHAR(ABS(NVL(E.AMT, 0))) AS OUTSTD_AMT,
               TO_CHAR(SIGN(NVL(E.AMT, 0))) AS SIGN_OUTSTD_AMT
    FROM SAL0001D A
    JOIN SAL0002D B ON A.SALES_ORD_ID = B.SALES_ORD_ID
    LEFT JOIN SYS0026M C ON B.ITM_STK_ID = C.STK_ID AND C.STUS_CODE_ID = '1'
    LEFT JOIN SYS0013M D ON D.CODE_MASTER_ID = '11' AND D.DISAB = '0' AND C.STK_CTGRY_ID = D.CODE_ID
    LEFT JOIN (SELECT RENT_SO_ID,
                               SUM(RENT_AMT) AS AMT
                    FROM PAY0022D
                    WHERE RENT_SO_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE CUST_ID = #{custId})
                    GROUP BY RENT_SO_ID) E ON A.SALES_ORD_ID = E.RENT_SO_ID
    LEFT JOIN SYS0038M F ON A.STUS_CODE_ID = F.STUS_CODE_ID
    LEFT JOIN SYS0013M G ON G.CODE_MASTER_ID = '10' AND G.DISAB = '0' AND A.APP_TYPE_ID = G.CODE_ID
    WHERE A.CUST_ID = #{custId}
        AND A.STUS_CODE_ID <![CDATA[ <> ]]> 1
    ORDER BY ORD_NO
  </select>

  <select id="getOrdDetail" parameterType="Map" resultType="egovMap">
    SELECT UPPER(TRIM(C.ADDR_DTL)) AS INST_ADDS1,
               UPPER(TRIM(C.STREET)) AS INST_ADDS2,
               UPPER(TRIM(D.AREA)) AS AREA,
               TO_CHAR(D.POSTCODE) AS POST_CDE,
               UPPER(TRIM(D.CITY)) AS CITY,
               UPPER(TRIM(D.STATE)) AS STATE,
               UPPER(TRIM(D.COUNTRY)) AS COUNTRY,
               UPPER(TRIM(E.NAME)) AS CONT_PSN,
               TO_CHAR(E.TEL_M1) AS HP_NO,
               TO_CHAR(E.TEL_R) AS HM_NO,
               TO_CHAR(E.TEL_O) AS OFF_NO,
               TRIM(E.EMAIL) AS EMAIL
    FROM SAL0001D A
    JOIN SAL0045D B ON B.SALES_ORD_ID = A.SALES_ORD_ID
    LEFT JOIN SAL0023D C ON C.CUST_ID = A.CUST_ID AND B.ADD_ID = C.CUST_ADD_ID
    LEFT JOIN SYS0064M D ON D.AREA_ID = C.AREA_ID
    LEFT JOIN SAL0027D E ON C.CUST_ID = A.CUST_ID AND E.CUST_CNTC_ID = B.CNT_ID
    WHERE A.SALES_ORD_NO = #{ordNo}
  </select>

  <insert id="insertSVC0115D" parameterType="Map">
    INSERT INTO SVC0115D ( ID
                                      , SALES_ORD_ID
                                      , BNDL_ID
                                      , SRV_NO
                                      , MAT_BC
                                      , FRAME_BC
                                      , DISB
                                      , CRT_DT
                                      , CRT_USR_ID
                                      , UPD_DT
                                      , UPD_USR_ID
    ) VALUES ( SVC0115D_ID.NEXTVAL
                  , #{salesOrdId}
                  , (SELECT BNDL_ID FROM SAL0001D WHERE SALES_ORD_ID = #{salesOrdId})
                  , #{reqstNo}
                  , #{scanSerial}
                  , #{scanSerial2}
                  , 0
                  , SYSDATE
                  , (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = (SELECT MEM_CODE FROM ORG0001D WHERE MEM_ID = #{userId}))
                  , SYSDATE
                  , (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = (SELECT MEM_CODE FROM ORG0001D WHERE MEM_ID = #{userId}))
    )
  </insert>

  <select id="selectSVC0115D" parameterType="Map" resultType="String">
    SELECT NVL(BNDL_ID,'') FROM SAL0001D WHERE SALES_ORD_ID = #{salesOrdId}
  </select>

  <select id="searchRentalCollectionByBSNewList" parameterType="Map" resultType="egovMap">
      SELECT
                MEM_CODE
              , TO_CHAR(RC_PRCT)  AS RC_PRCT
              , TO_CHAR(AD_RATIO) AS AD_RATIO
      FROM REP0085S
      WHERE MEM_CODE =  #{userId}
  </select>


  <select id="getCustAddDtlLst" parameterType="Map" resultType="egovMap">
       SELECT A.CUST_ID,
                  B.ADD_ID
       FROM SAL0001D A
       LEFT JOIN SAL0045D B ON A.SALES_ORD_ID = B.SALES_ORD_ID
       WHERE A.SALES_ORD_NO = #{salesOrderNo}
  </select>

  <update id="updateGps" parameterType="Map">
        UPDATE SAL0023D A
        SET LATITUDE     = #{currentGpsValLat},
            LONGITUDE    = #{currentGpsValLong},
            UPD_DT       = SYSDATE,
            UPD_USER_ID  = #{crtUserId}
        WHERE CUST_ADD_ID =  #{custAddId}
  </update>

  <select id="getCustNRIC" parameterType="Map" resultType="egovMap">
    SELECT TO_CHAR(NRIC) as custNric
    FROM SAL0001D A
    JOIN SAL0029D B ON A.CUST_ID = B.CUST_ID
    WHERE SALES_ORD_NO = #{salesOrdNo}
  </select>

</mapper>