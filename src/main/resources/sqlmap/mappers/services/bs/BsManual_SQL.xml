<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.services.bs.impl.HsManualMapper">
	<!-- To use CLOB column, declare resultMap as below <select id="selectClobData"
		parameterType="Map" resultMap="clobMap"> You should use resultMap = "clobMap"
		as in. -->
	<resultMap id="clobMap" type="EgovMap">
		<result property="typeDesc" column="type_Desc" jdbcType="CLOB"
			javaType="java.lang.String" />
	</resultMap>

	<select id="selectBranchList" parameterType="Map" resultType="egovMap">
		SELECT *
		FROM (
		<choose>
			<when test="userType == 2">
				SELECT s005m.brnch_id AS CODE_ID
				, s005m.code || '-' || s005m.name AS
				CODE_NAME
				FROM SYS0005M s005m
				, SYS0013M s0013m
				WHERE s005m.type_id =
				s0013m.code_id
				AND s005m.type_id IN (42)
				<choose>
					<when test="memberLevel == 1">
						AND S005M.CODE IN ( SELECT DISTINCT C.CODE
						FROM
						SYS0047M A,
						ORG0001D B,
						SYS0005M C,
						ORG0005D D,
						ORG0005D E,
						ORG0001D F
						WHERE 1=1
						AND A.USER_NAME = B.MEM_CODE
						AND B.MEM_ID = D.MEM_ID
						AND
						D.DEPT_CODE = E.LAST_ORG_CODE
						AND E.MEM_LVL ='2'
						AND E.MEM_ID =
						F.MEM_ID
						AND F.BRNCH = C.BRNCH_ID
						AND A.USER_NAME = #{userName}
						)
					</when>
					<when test="memberLevel == 2">
						AND S005M.CODE IN ( SELECT C.CODE FROM SYS0047M A,
						ORG0001D B,
						SYS0005M C WHERE 1 = 1 AND A.USER_NAME = B.MEM_CODE AND
						B.BRNCH =
						C.BRNCH_ID AND A.USER_NAME = #{userName} )
					</when>
					<when test="memberLevel == 3">
						AND S005M.CODE IN ( SELECT C.CODE FROM SYS0047M A,
						ORG0001D B,
						SYS0005M C WHERE 1 = 1 AND A.USER_NAME = B.MEM_CODE AND
						B.BRNCH =
						C.BRNCH_ID AND A.USER_NAME = #{userName} )
					</when>
					<when test="memberLevel == 4">
						AND S005M.CODE = (SELECT C.CODE FROM ORG0001D A,
						ORG0005D B, SYS0005M
						C WHERE A.MEM_ID = B.MEM_ID AND A.BRNCH =
						C.BRNCH_ID AND
						A.MEM_CODE = #{userName})
					</when>
				</choose>
				ORDER BY s005m.CODE ASC
			</when>
			<when test="userType == 4 or userType == 6 ">
				SELECT s005m.brnch_id AS code_id,
				s005m.code || '-' ||
				s005m.NAME AS code_name
				FROM sys0005m s005m ,
				sys0013m s0013m
				WHERE
				s005m.type_id = s0013m.code_id AND s005m.type_id IN (42)

				UNION ALL

				SELECT s005m.brnch_id AS code_id,
				s005m.code || '-' || s005m.NAME AS
				code_name
				FROM sys0005m s005m ,
				sys0013m s0013m
				WHERE s005m.type_id =
				s0013m.code_id
				AND s005m.code = 'DSC-28'
			</when>
			<when test="userType == 3">
				SELECT S005M.BRNCH_ID AS CODE_ID,
				S005M.CODE || '-' ||
				S005M.NAME AS CODE_NAME
				FROM SYS0005M S005M, SYS0013M S0013M
				WHERE
				S005M.TYPE_ID = S0013M.CODE_ID AND S005M.CODE = 'DSC-28'
			</when>
			<otherwise>
				SELECT S005M.BRNCH_ID AS CODE_ID
				, S005M.CODE || '-' ||
				S005M.NAME AS CODE_NAME
				FROM SYS0005M S005M
				WHERE S005M.TYPE_ID IN
				(42)

				UNION ALL

				SELECT s005m.brnch_id AS code_id,
				s005m.code || '-' ||
				s005m.NAME AS code_name
				FROM sys0005m s005m, sys0013m s0013m
				WHERE
				s005m.type_id = s0013m.code_id
				AND s005m.code = 'DSC-28'
			</otherwise>
		</choose>
		) PROJECT
		ORDER BY PROJECT.CODE_NAME ASC
	</select>

	<select id="getCdUpMemList" parameterType="Map" resultType="egovMap">
		SELECT * FROM ( SELECT A.MEM_ID AS CODE_ID
		, A.DEPT_CODE || '-' ||
		B.NAME AS CODE_NAME
		/*, B.MEM_CODE || '-' || B.NAME AS CODE_NAME*/
		FROM
		ORG0005D A
		, ORG0001D B
		, SYS0005M C
		WHERE A.MEM_ID = B.MEM_ID
		AND
		A.BRNCH_ID = C.BRNCH_ID
		AND A.DEPT_CODE IS NOT NULL
		AND B.MEM_TYPE = 2
		<if test="userType == '2'.toString()">
			AND B.STUS IN (1,8)
			<if test="memLevl == '1'.toString()">
				AND A.MEM_LVL = '3'
				AND A.BRNCH_ID = #{groupCode}
			</if>
			<if test="memLevl == '2'.toString()">
				AND (A.DEPT_CODE || B.NAME) IN ( SELECT C.DEPT_CODE ||
				D.NAME
				FROM ORG0001D A,
				ORG0005D B,
				ORG0005D C,
				ORG0001D D
				WHERE A.MEM_ID
				= B.MEM_ID
				AND B.DEPT_CODE = C.LAST_GRP_CODE
				AND A.MEM_CODE =
				#{userName}
				AND C.MEM_LVL = '3'
				AND C.MEM_ID = D.MEM_ID
				)
			</if>
			<if test="memLevl == '3'.toString()">
				AND A.MEM_LVL = #{memLevl}
				AND A.BRNCH_ID = #{groupCode}
				AND B.MEM_CODE =#{userName}
			</if>
			<if test="memLevl == '4'.toString()">
				AND A.BRNCH_ID = #{groupCode}
				AND B.MEM_CODE = #{userName}
			</if>
		</if>

		<if test="(userType == '4'.toString() || userType == '6'.toString()) and groupCode != '151'.toString() ">
			AND A.MEM_LVL = '3'
			AND A.BRNCH_ID = #{groupCode}
			AND B.STUS
			= '1'
		</if>
		<if test="userType == '4'.toString() and groupCode == '151'.toString() ">
			AND A.MEM_LVL = '3'
			AND A.BRNCH_ID = #{groupCode}
			AND B.STUS
			= '1'

			UNION

			SELECT A.MEM_ID AS CODE_ID
			, A.DEPT_CODE || '-' || B.NAME AS
			CODE_NAME
			/* , B.MEM_CODE || '-' || B.NAME AS CODE_NAME */
			FROM
			ORG0005D A
			, ORG0001D B
			, SYS0005M C
			WHERE A.MEM_ID = B.MEM_ID
			AND
			A.BRNCH_ID = C.BRNCH_ID
			AND A.DEPT_CODE IS NOT NULL
			AND A.BRNCH_ID =
			'151'
			AND B.STUS = '1'
		</if>
		) PROJECT
		ORDER BY CODE_NAME
	</select>

	<select id="getCdDeptList" parameterType="Map" resultType="egovMap">
		SELECT * FROM ( SELECT A.MEM_ID AS CODE_ID
		, A.DEPT_CODE || '-' ||
		B.NAME AS CODE_NAME
		FROM ORG0005D A
		, ORG0001D B
		, SYS0005M C
		WHERE
		A.MEM_ID = B.MEM_ID
		AND A.BRNCH_ID = C.BRNCH_ID
		AND A.DEPT_CODE IS NOT
		NULL
		AND B.MEM_TYPE = 2
		<if test="userType == '2'.toString()">
			AND B.STUS IN (1,8)
			<if test="memLevl == '1'.toString()">
				AND A.MEM_LVL = '3'
				AND A.BRNCH_ID = #{groupCode}
			</if>
			<if test="memLevl == '2'.toString()">
				AND (A.DEPT_CODE || B.NAME) IN ( SELECT C.DEPT_CODE ||
				D.NAME
				FROM ORG0001D A,
				ORG0005D B,
				ORG0005D C,
				ORG0001D D
				WHERE A.MEM_ID
				= B.MEM_ID
				AND B.DEPT_CODE = C.LAST_GRP_CODE
				AND A.MEM_CODE =
				#{userName}
				AND C.MEM_LVL = '3'
				AND C.MEM_ID = D.MEM_ID
				)
			</if>
			<if test="memLevl == '3'.toString()">
				AND A.MEM_LVL = #{memLevl}
				AND A.BRNCH_ID = #{groupCode}
				AND B.MEM_CODE =#{userName}
			</if>
			<if test="memLevl == '4'.toString()">
				AND A.BRNCH_ID = #{groupCode}
				AND B.MEM_CODE = #{userName}
			</if>
		</if>
		<if test="userType == '4'.toString() and groupCode != '151'.toString() ">
			AND A.MEM_LVL = '3'
			AND A.BRNCH_ID = #{groupCode}
			AND B.STUS
			= '1'
		</if>

		<if test="userType == '4'.toString() and groupCode == '151'.toString() ">
			AND A.MEM_LVL = '3'
			AND A.BRNCH_ID = #{groupCode}
			AND B.STUS
			= '1'
			UNION
			SELECT A.MEM_ID AS CODE_ID
			,A.DEPT_CODE || '-' || B.NAME AS
			CODE_NAME
			/*,B.MEM_CODE || '-' || B.NAME AS CODE_NAME*/
			FROM ORG0005D A
			,ORG0001D B
			,SYS0005M C
			WHERE A.MEM_ID = B.MEM_ID
			AND A.BRNCH_ID =
			C.BRNCH_ID
			AND A.DEPT_CODE IS NOT NULL
			AND A.BRNCH_ID = '151'
			AND B.STUS
			= '1'
		</if>
		) PROJECT
		ORDER BY CODE_NAME
	</select>

	<select id="getCdList_1" parameterType="Map" resultType="egovMap">

		<!-- select b.mem_code as CODY_ID ,B.MEM_ID AS MEM_ID ,b.name as CODY_NAME
			,b.STUS,EXTENT2.CODE from ORG1001V a ,ORG0001D b ,SYS0038M EXTENT2 where
			a.MEM_ID = b.MEM_ID AND b.STUS = EXTENT2.STUS_CODE_ID and b.MEM_TYPE = 2
			and b.stus = '1' and b.BRNCH = #{BrnchCdList} order by b.mem_code -->

		SELECT ROWNUM AS rnum ,
		a.*
		FROM (
		SELECT DISTINCT b.dept_code,
		b.mem_id,
		d.mem_code AS cody_id,
		d.name AS cody_name,
		d.stus
		FROM sys0005m a,
		org0005d b,
		org0001d d,
		sys0038m extent2
		WHERE a.brnch_id = d.brnch
		AND
		b.mem_id = d.mem_id
		AND d.stus = '1'
		AND d.mem_type = '2'
		<if test="assignCody != null and assignCody != ''">
		AND D.MEM_CODE = #{assignCody}
		</if>
		AND b.mem_lvl =
		'4'
		<if test="deptListSpl != null and deptListSpl != ''">
			AND b.dept_code IN
			<foreach item="item" collection="deptListSpl" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>

			<if test="item == 'CTS3167'  ">
				UNION
				SELECT DISTINCT b.dept_code,
				b.mem_id,
				d.mem_code AS
				cody_id,
				d.name AS cody_name,
				d.stus
				FROM sys0005m a,
				org0005d b,
				org0001d d,
				sys0038m extent2
				WHERE a.brnch_id = d.brnch
				AND b.mem_id =
				d.mem_id
				AND d.stus = '1'
				AND a.brnch_id = '151'
			</if>

		</if>
		) a
		<!-- ORDER BY DEPT_CODE ASC, CODY_ID ASC -->
		ORDER BY CODY_ID ASC
	</select>


	<select id="getCdList" parameterType="Map" resultType="egovMap">

		select b.mem_code as CODE_ID
		,b.name as CODE_NAME
		from ORG1001V a
		,ORG0001D b
		where a.MEM_ID = b.MEM_ID
		and b.MEM_TYPE = 2
		<if test="groupCode != null and groupCode != ''">
			and brnch = #{groupCode}
		</if>
		order by b.mem_code

	</select>



	<select id="selectHsManualList" parameterType="Map" resultType="egovMap">

		<!-- CYC 20 NOV 2017 -->

		SELECT distinct C.CUST_ID CUST_ID
		, C.NAME Name
		,SOM.SALES_ORD_NO
		SALES_ORD_NO
		,HSM.MONTH
		,HSM.YEAR YEAR
		,HSM.MONTH || '/' || HSM.YEAR
		HS_DATE
		,HSM.NO
		,HSM.CODY_ID
		,HSM.STUS_CODE_ID STUS_CODE_ID
		,EXTENT2.CODE
		CODE
		,SAL023.area_id,
		sys064.area_id,
		sys064.CODY_BRNCH_CODE,
		sys064.CODY_MANGR_USER_ID,
		(select MEM_CODE
		from ORG0001D ME
		where 1=1
		and ME.MEM_ID = HSM.cody_ID )AS c5,
		HSM.STUS_CODE_ID STUS_CODE_ID,
		sys064.CT_BRNCH_CODE,
		SOM.SALES_ORD_ID AS SALES_ORD_ID,
		sys064.CODY_MANGR_USER_ID,
		som.BRNCH_ID as brnch_id
		,sal023.ADDR_DTL as
		address
		,stk.STK_DESC
		,SCP.SRV_PRD_DUR HS_FREQ
		,(CASE WHEN (EXTRACT(month
		from lAST_brm.SETL_DT)= extract(month from
		ADD_MONTHS(sysdate,-1)) and
		EXTRACT(YEAR FROM lAST_brm.SETL_DT) =
		extract(YEAR from
		ADD_MONTHS(sysdate,-1))) THEN STUS.CODE ELSE 'x'
		END)
		PREV_MTH_HS_STATUS
		,STUS1.CODE CODY_STATUS
		,HSM.SCHDUL_ID
		,SOD.ITM_STK_ID STK_ID
		FROM SAL0001D SOM
		,SAL0029D C
		,SYS0013M CORPTYPE
		,SVC0008D HSM
		,SYS0038M EXTENT2
		,SYS0064M sys064
		,SAL0002D sod
		,SYS0026M
		stk
		,SAL0045D i
		,sal0023d sal023
		,SVC0006D lAST_brm
		,SAL0090D SC
		,SAL0088D
		SCP
		,SYS0038M STUS
		,ORG0001D MEM
		,SYS0038M STUS1
		,SAL0095D SAL95D
		,SYS0064M S64M

		WHERE 1=1
		AND SOM.CUST_ID = C.CUST_ID
		AND C.CORP_TYPE_ID =
		CORPTYPE.CODE_ID(+)
		AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+)
		AND
		SOM.BNDL_ID IS NULL
		AND HSM.STUS_CODE_ID = EXTENT2.STUS_CODE_ID(+)
		AND
		i.ADD_ID = sal023.CUST_ADD_ID
		and sal023.area_id = sys064.area_id
		and
		sod.SALES_ORD_ID = SOM.SALES_ORD_ID
		and stk.stk_id = sod.ITM_STK_ID
		and
		i.SALES_ORD_ID = SOM.SALES_ORD_ID
		and lAST_brm.SCHDUL_ID(+) =
		HSM.SCHDUL_ID
		and (lAST_brm.result_ID IS NULL OR lAST_brm.result_ID =
		(select
		Max(result_ID) from SVC0006D where HSM.SCHDUL_ID = SCHDUL_ID
		and
		result_stus_code_id = 4))
		AND SC.SRV_SO_ID(+) = SOM.SALES_ORD_ID
		AND
		SC.SRV_CONFIG_ID =SCP.SRV_CONFIG_ID(+)
		AND( scp.srv_prd_id is null or
		scp.srv_prd_id = (SELECT
		MAX(srv_prd_id)FROM sal0088d WHERE
		srv_config_id = sc.srv_config_id
		AND srv_prd_stus_id <!-- 20180320 Edit by
			Sun HanYi scp.srv_prd_stus_id -->
		= 1))
		AND STUS.STUS_CODE_ID(+) = LAST_BRM.RESULT_STUS_CODE_ID
		and
		mem.mem_id(+) = HSM.CODY_ID
		and Stus1.STUS_CODE_ID(+) = mem.stus
		and
		SOM.SALES_ORD_ID = SAL95D.SRV_SALES_ORD_ID(+)
		and sal023.AREA_ID =
		S64M.AREA_ID



		<!-- SELECT distinct C.CUST_ID CUST_ID , C.NAME Name ,SOM.SALES_ORD_NO
			SALES_ORD_NO ,HSM.MONTH ,HSM.YEAR YEAR ,HSM.MONTH || '/' || HSM.YEAR HS_DATE
			,HSM.NO ,HSM.CODY_ID ,HSM.STUS_CODE_ID STUS_CODE_ID ,EXTENT2.CODE CODE -->
		<!-- ,sys064.CODY_BRNCH_CODE AS BRNCH_ID -->
		<!-- ,SAL023.area_id, sys064.area_id, sys064.CODY_BRNCH_CODE, sys064.CODY_MANGR_USER_ID,
			(select MEM_CODE from ORG0001D ME where 1=1 and ME.MEM_ID = HSM.cody_ID )AS
			c5, HSM.STUS_CODE_ID STUS_CODE_ID, EXTENT2.code, sys064.CT_BRNCH_CODE, SOM.SALES_ORD_ID
			AS SALES_ORD_ID, sys064.CODY_MANGR_USER_ID, som.BRNCH_ID as brnch_id FROM
			SAL0001D SOM ,SAL0029D C ,SYS0013M CORPTYPE -->
		<!-- ,SAL0002D SOD -->
		<!-- ,SVC0008D HSM ,SYS0038M EXTENT2 ,sal0023d sal023 ,SYS0064M sys064
			WHERE 1=1 AND SOM.CUST_ID = C.CUST_ID AND C.CORP_TYPE_ID = CORPTYPE.CODE_ID(+) -->
		<!-- AND SOM.SALES_ORD_ID = SOD.SALES_ORD_ID -->
		<!-- AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+) AND HSM.STUS_CODE_ID =
			EXTENT2.STUS_CODE_ID(+) -->
		<!-- and som.cust_id = sal023.cust_id -->
		<!-- AND SOM.CUST_ADD_ID = sal023.CUST_ADD_ID and sal023.area_id = sys064.area_id -->
                 <![CDATA[ AND SOM.STUS_CODE_ID <> 8
                                and rownum  < 500 ]]>
		<if test="ManuaMyBSMonth != null and ManuaMyBSMonth != ''">
			AND hsm.YEAR(+) = #{myBSYear}
			AND hsm.MONTH(+) =
			#{myBSMonth}
		</if>
		<if test="ManuaSalesOrder != null and ManuaSalesOrder != ''">
			AND SOM.SALES_ORD_NO = #{ManuaSalesOrder}
		</if>
		<if test="ManualCustomer != null and ManualCustomer != ''">
			AND c.CUST_ID = #{ManualCustomer}
		</if>
		<if test="manualCustomer != null and manualCustomer != ''">
			AND c.CUST_ID = #{manualCustomer}
		</if>
		<if test="saleOrdListSp != null and saleOrdListSp != '' ">
			AND SOM.SALES_ORD_NO IN
			<foreach item="item" collection="saleOrdListSp" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="cmdBranchCode1 != null and cmdBranchCode1 != ''">
			AND sys064.CODY_BRNCH_CODE = SUBSTR(#{cmdBranchCode1},1,6)
		</if>
		<if test="cmdCdManager1 != null and cmdCdManager1 != ''">
			AND sys064.CODY_MANGR_USER_ID =
			SUBSTR(#{cmdCdManager1},1,7)
		</if>
		<if test="userType == '3'.toString()">
			AND MEM.MEM_CODE IN (SELECT MEM_CODE FROM ORG0001D WHERE
			MEM_TYPE = '3'
			AND STUS = '1')
		</if>

	</select>

	<!-- cyc 2017- Nov- 13 -->
	<select id="selectHsConfigList" parameterType="Map" resultType="egovMap">

		SELECT distinct C.CUST_ID CUST_ID
		, C.NAME Name
		,SOM.SALES_ORD_NO
		SALES_ORD_NO
		,SOM.SALES_ORD_ID AS SALES_ORD_ID
		, som.BRNCH_ID as
		brnch_id
		<!-- ,HSM.MONTH ,HSM.YEAR YEAR ,HSM.MONTH || '/' || HSM.YEAR HS_DATE ,HSM.NO
			,HSM.CODY_ID ,HSM.STUS_CODE_ID STUS_CODE_ID ,EXTENT2.CODE CODE -->
		<!-- ,sys064.CODY_BRNCH_CODE AS BRNCH_ID -->
		<!-- ,SAL023.area_id, sys064.area_id, -->
		,sys064.CODY_BRNCH_CODE
		,sys064.CODY_MANGR_USER_ID
		<!-- (select MEM_CODE from ORG0001D ME where 1=1 and ME.MEM_ID = HSM.cody_ID
			)AS c5, HSM.STUS_CODE_ID STUS_CODE_ID, EXTENT2.code, sys064.CT_BRNCH_CODE,
			SOM.SALES_ORD_ID AS SALES_ORD_ID, sys064.CODY_MANGR_USER_ID, som.BRNCH_ID
			as brnch_id -->
		FROM SAL0001D SOM
		,SAL0029D C
		<!--,SYS0013M CORPTYPE -->
		,SVC0008D HSM
		,SYS0038M EXTENT2
		,sal0023d sal023
		,SYS0064M sys064
		,SAL0045D sal45
		<!--,SAL0090D sal090 -->
		WHERE 1=1
		AND SOM.CUST_ID = C.CUST_ID
		/* AND C.CORP_TYPE_ID =
		CORPTYPE.CODE_ID(+)
		AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+)
		AND
		HSM.STUS_CODE_ID = EXTENT2.STUS_CODE_ID(+)
		AND SOM.CUST_ADD_ID =
		sal023.CUST_ADD_ID
		and sal023.area_id = sys064.area_id*/
		<!-- AND SOM.CUST_ID = SAL023.CUST_ID -->
		AND SOM.SALES_ORD_ID = SAL45.SALES_ORD_ID
		AND SOM.BNDL_ID IS NULL
		AND
		SAL023.CUST_ADD_ID = SAL45.ADD_ID
		AND SAL023.AREA_ID = SYS064.AREA_ID
		<!--AND C.CORP_TYPE_ID = CORPTYPE.CODE_ID(+) -->
		AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+)
		AND HSM.STUS_CODE_ID =
		EXTENT2.STUS_CODE_ID(+)
		<!--and SOM.SALES_ORD_ID = SRV_SO_ID -->
                 <![CDATA[ AND SOM.STUS_CODE_ID <> 8
                                and rownum  < 500 ]]>
		<if test="ManuaMyBSMonth != null and ManuaMyBSMonth != ''">
			AND hsm.YEAR(+) = #{myBSYear}
			AND hsm.MONTH(+) =
			#{myBSMonth}
		</if>
		<if test="ManuaSalesOrder != null and ManuaSalesOrder != ''">
			AND SOM.SALES_ORD_NO = #{ManuaSalesOrder}
		</if>
		<if test="ManualCustomer != null and ManualCustomer != ''">
			AND c.CUST_ID = #{ManualCustomer}
		</if>
		<if test="manualCustomer != null and manualCustomer != ''">
			AND c.CUST_ID = #{manualCustomer}
		</if>
		<if test="saleOrdListSp != null and saleOrdListSp != '' ">
			AND SOM.SALES_ORD_NO IN
			<foreach item="item" collection="saleOrdListSp" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>


	</select>




	<select id="selectHsManualListPop" parameterType="Map"
		resultType="egovMap">



		SELECT distinct HSM.SCHDUL_ID
		,C.NAME Name
		, SOM.SALES_ORD_ID
		SALES_ORD_ID
		,SOM.SALES_ORD_NO SALES_ORD_NO
		,HSM.MONTH
		,HSM.YEAR YEAR
		,HSM.MONTH || '/' || HSM.YEAR HS_DATE
		,HSM.NO
		,HSM.CODY_ID
		,HSM.STUS_CODE_ID STUS_CODE_ID
		,EXTENT2.CODE CODE
		,sys064.CODY_BRNCH_CODE AS BRNCH_ID
		,SAL023.area_id,
		sys064.area_id,
		sys064.CODY_BRNCH_CODE,
		sys064.CODY_MANGR_USER_ID,
		(select MEM_CODE
		from
		ORG0001D ME
		where 1=1
		and ME.MEM_ID = HSM.cody_ID )AS cody_cd ,
		(SELECT
		MEM_CODE
		FROM ORG0001D ME
		WHERE 1 = 1 AND ME.MEM_ID = HSM.cody_ID)
		AS
		old_cody_cd
		FROM SAL0001D SOM
		,SAL0029D C
		,SVC0008D HSM
		,SYS0038M EXTENT2
		,sal0023d sal023
		,SYS0064M sys064
		,SAL0045D INS
		WHERE 1=1
		AND SOM.CUST_ID
		= C.CUST_ID
		AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+)
		AND SOM.BNDL_ID
		IS NULL
		AND HSM.STUS_CODE_ID = EXTENT2.STUS_CODE_ID(+)
		AND SOM.CUST_ID =
		SAL023.CUST_ID
		AND SOM.SALES_ORD_ID = INS.SALES_ORD_ID
		AND
		SAL023.CUST_ADD_ID = INS.ADD_ID
		and sal023.area_id = sys064.area_id
                 <![CDATA[ AND SOM.STUS_CODE_ID <> 8    ]]>
		<if test="ManuaMyBSMonth != null and ManuaMyBSMonth != ''">
			AND hsm.YEAR(+) = #{myBSYear}
			AND hsm.MONTH(+) =
			#{myBSMonth}
		</if>
		<if test="ManuaSalesOrder != null and ManuaSalesOrder != ''">
			AND SOM.SALES_ORD_NO = #{ManuaSalesOrder}
		</if>
		<if test="ManualCustomer != null and ManualCustomer != ''">
			AND c.CUST_ID = #{ManualCustomer}
		</if>
		<if test="saleOrdListSp != null and saleOrdListSp != ''">
			AND SOM.SALES_ORD_NO IN
			<foreach item="item" collection="saleOrdListSp" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>

		<!-- SELECT distinct C.NAME Name , SOM.SALES_ORD_ID SALES_ORD_ID ,SOM.SALES_ORD_NO
			SALES_ORD_NO ,HSM.MONTH ,HSM.YEAR YEAR ,HSM.MONTH || '/' || HSM.YEAR HS_DATE
			,HSM.NO ,HSM.CODY_ID ,HSM.STUS_CODE_ID STUS_CODE_ID ,EXTENT2.CODE CODE ,sys064.CODY_BRNCH_CODE
			AS BRNCH_ID ,SAL023.area_id, sys064.area_id, sys064.CODY_BRNCH_CODE, sys064.CODY_MANGR_USER_ID
			FROM SAL0001D SOM ,SAL0029D C ,SYS0013M CORPTYPE ,SAL0002D SOD ,SVC0008D
			HSM ,SYS0038M EXTENT2 ,sal0023d sal023 ,SYS0064M sys064 WHERE 1=1 AND SOM.CUST_ID
			= C.CUST_ID AND C.CORP_TYPE_ID = CORPTYPE.CODE_ID(+) AND SOM.SALES_ORD_ID
			= SOD.SALES_ORD_ID AND SOM.SALES_ORD_ID = HSM.SALES_ORD_ID(+) AND HSM.STUS_CODE_ID
			= EXTENT2.STUS_CODE_ID(+) and som.cust_id = sal023.cust_id and sal023.area_id
			= sys064.area_id <![CDATA[ AND SOM.STUS_CODE_ID <> 8 ]]> <if test="ManuaMyBSMonth
			!= null and ManuaMyBSMonth != ''"> AND hsm.YEAR(+) = #{myBSYear} AND hsm.MONTH(+)
			= #{myBSMonth} </if> <if test="ManuaSalesOrder != null and ManuaSalesOrder
			!= ''"> AND SOM.SALES_ORD_NO = #{ManuaSalesOrder} </if> <if test="ManualCustomer
			!= null and ManualCustomer != ''"> AND c.CUST_ID = #{ManualCustomer} </if>
			<if test="saleOrdListSp != null and saleOrdListSp != ''"> AND SOM.SALES_ORD_NO
			IN <foreach item="item" collection="saleOrdListSp" index="index" open="("
			separator="," close=")"> #{item} </foreach> </if> -->


	</select>




  <select id="selectHsAssiinlList" parameterType="Map" resultType="egovMap">
    SELECT * FROM (
    SELECT ROW_NUMBER() OVER(
    PARTITION BY no ORDER BY
    Result DESC) AS DUM_SEQ,
    Project3.* FROM (
    SELECT DISTINCT Project2.No No
    , Project2.HS_DATE HS_DATE
    , Project2.STUS_CODE_ID STUS_CODE_ID
    , Project2.Code Code
    , Project2.SALES_ORD_NO SALES_ORD_NO
    , Project2.ASSIGN_CODY C5
    , Project2.ACTION_CODY as ACTN_MEM_ID
    , Project2.MEM_ID
    , Project2.Name Name
    , Project2.cust_id
    , Project2.cody_status_nm
    , Project2.BRNCH_ID as BRNCH_ID
    , Project2.SCHDUL_ID SCHDUL_ID
    , Project2.SALES_ORD_ID
    , Project2.branch_cd
    , Project2.CODY_MANGR_USER_ID
    , Project2.Result as Result
    , project2.dept_code
    , project2.crt_user_id
    , project2.SERIAL_REQUIRE_CHK_YN
    , project2.STK_ID
    , project2.Complete_Dt AS Complete_Dt, <!--Added by Keyi 20210923 -->
    NVL(PROJECT2.SVC_REMAIN_MTH, '') SVC_REMAIN_MTH,
    PROJECT2.PREBOOK_ENTITLE
    FROM (SELECT
    DISTINCT
    hs.no AS no
    , hs.stus_code_id AS stus_code_id
    , hs.month || '/' ||
    hs.year AS hs_date
    , hs.month
    , hs.year
    , st.code
    , hr.no AS result
    , so.sales_ord_no
    , ap.code AS apptype
    , cu.name
    , cd.mem_code AS assign_cody
    , cd.mem_id
    , ac.mem_code AS action_cody
    , mg.state
    , mg.area
    , cu.cust_id AS cust_id
    , STUS.CODE AS cody_status_nm
    , br.brnch_id AS brnch_id
    , hs.schdul_id schdul_id
    , so.sales_ord_id
    , mg.CODY_BRNCH_CODE AS branch_cd
    , mg.cody_mangr_user_id
    , og.dept_code
    , CASE WHEN
    HS.CRT_USER_ID = '1111' THEN '' ELSE USR.USER_NAME END AS
    CRT_USER_ID
    , LOC.SERIAL_REQUIRE_CHK_YN
    , SOD.ITM_STK_ID STK_ID
    ,TO_CHAR(hr.SETL_DT,'DD/MM/YYYY') AS Complete_Dt, <!--Added by Keyi 20210923 -->
    HS.SVC_REMAIN_MTH,
    HS.PREBOOK_ENTITLE
    FROM SVC0008D hs
    INNER JOIN SAL0001D so ON so.sales_ord_id =
    hs.sales_ord_id and so.bndl_id
    is null
    LEFT JOIN SAL0002D SOD ON
    so.SALES_ORD_ID = SOD.SALES_ORD_ID
    INNER JOIN SAL0045D ins ON
    ins.sales_ord_id = hs.sales_ord_id
    INNER JOIN SAL0023D ad ON
    ad.cust_add_id = ins.add_id
    INNER JOIN SYS0064M mg ON mg.area_id =
    ad.area_id
    LEFT JOIN SVC0006D hr ON hr.schdul_id = hs.schdul_id
    LEFT
    JOIN SYS0038M st ON st.stus_code_id = hs.stus_code_id
    INNER JOIN
    SYS0013M ap ON ap.code_id = so.app_type_id
    INNER JOIN SAL0029D cu ON
    cu.cust_id = so.cust_id
    LEFT JOIN ORG0001D cd ON cd.mem_id = hs.cody_id
    LEFT JOIN SYS0038M STUS ON STUS.stus_code_id = cd.stus
    LEFT JOIN
    ORG0001D ac ON ac.mem_id = hs.CODY_ID
    LEFT JOIN SYS0005M br ON
    br.brnch_id = ac.brnch
    LEFT JOIN ORG0005D og ON og.MEM_ID = CD.MEM_ID
    LEFT JOIN SYS0047M USR ON HS.CRT_USER_ID = USR.USER_ID
    LEFT JOIN
    SYS0028M LOC ON LOC.WH_LOC_CODE = cd.MEM_CODE
    WHERE

    <if test="myBSMonth != null and myBSMonth != ''">
      HS.YEAR = TO_CHAR(to_date(#{myBSMonth} ,'MM/YYYY'),'YYYY')
      AND HS.MONTH = TO_CHAR(to_date(#{myBSMonth},'MM/YYYY'),'MM')
    </if>

    <choose>
      <when test="myBSMonth != ''">
        <if test="txtHsOrderNo != null and txtHsOrderNo != ''">
          AND HS.NO = #{txtHsOrderNo}
        </if>
      </when>
      <otherwise>
        <if test="txtHsOrderNo != null and txtHsOrderNo != ''">
          HS.NO = #{txtHsOrderNo}
        </if>
      </otherwise>
    </choose>

    <choose>
      <when test="myBSMonth != ''">
        <if test="txtSalesOrder != null and txtSalesOrder != ''">
          AND ( SO.SALES_ORD_NO = #{txtSalesOrder})
        </if>
      </when>
      <otherwise>

        <choose>
          <when test="txtHsOrderNo != ''">
            <if test="txtSalesOrder != null and txtSalesOrder != ''">
              AND ( SO.SALES_ORD_NO = #{txtSalesOrder})
            </if>
          </when>
          <otherwise>
            <if test="txtSalesOrder != null and txtSalesOrder != ''">
              ( SO.SALES_ORD_NO = #{txtSalesOrder})
            </if>
          </otherwise>
        </choose>

      </otherwise>
    </choose>

    <if test="txtAssigncodyCode != null and txtAssigncodyCode != ''">
      AND CD.MEM_CODE = #{txtAssigncodyCode}
    </if>

    <if test="txtComcodyCode != null and txtComcodyCode != ''">
      AND AC.MEM_CODE = #{txtComcodyCode}
    </if>

    <if test="myInstallMonth != null and myInstallMonth != ''">
      AND SO.PV_MONTH =
      TO_CHAR(to_date(#{myInstallMonth},'MM/YYYY'),'MM')
    </if>

    <if test="myInstallMonth != null and myInstallMonth != ''">
      AND SO.PV_YEAR = TO_CHAR(to_date(#{myInstallMonth}
      ,'MM/YYYY'),'YYYY')
    </if>

    <if test="cmbStatusType != null and cmbStatusType != ''">
      AND HS.STUS_CODE_ID = #{cmbStatusType}
    </if>

    <if test="txtCustomer != null and txtCustomer != ''">
      AND SO.CUST_ID = #{txtCustomer}
    </if>

    <if test="cmdBranchCode != null and cmdBranchCode != ''">
      AND ( br.BRNCH_id = #{cmdBranchCode})
    </if>

    <if test="cmdCdManager != null and cmdCdManager != ''">
      AND OG.DEPT_CODE = (SELECT DEPT_CODE FROM ORG0005D WHERE
      MEM_ID =
      #{cmdCdManager} )
    </if>

    <if test="deptCode != null and deptCode != ''">
      AND OG.DEPT_CODE = #{deptCode}
    </if>

    <if test="userType == '3'.toString()">
      AND CD.MEM_CODE IN (SELECT MEM_CODE FROM ORG0001D WHERE
      MEM_TYPE = '3'
      AND STUS = '1')
    </if>

    <!-- Added by Keyi 20210923 -->
    <if test="compStartDt != '' and compEndDt != '' ">
      <![CDATA[ AND hr.SETL_DT BETWEEN TO_DATE(#{compStartDt}, 'DD/MM/YYYY') AND TO_DATE(#{compEndDt}, 'DD/MM/YYYY') ]]>
    </if>

    <if test="svcBalanceMth != null and svcBalanceMth != ''">
      AND ( HS.SVC_REMAIN_MTH = #{svcBalanceMth})
    </if>

    <if test="cmbPrebookEntitle != null and cmbPrebookEntitle != ''">
      AND ( HS.PREBOOK_ENTITLE = #{cmbPrebookEntitle})
    </if>

    )Project2
    ) Project3
    <![CDATA[   ) WHERE DUM_SEQ = 1 AND ROWNUM <= 20000 ]]>




    <!-- 전명환선생 요청으로 변경 20171017 SELECT Project2.C1 C1 , Project2.SCHDUL_ID SCHDUL_ID , Project2.No No , Project2.HS_DATE HS_DATE , Project2.CODY_ID CODY_ID, Project2.STUS_CODE_ID STUS_CODE_ID , Project2.Code Code , Project2.SALES_ORD_ID SALES_ORD_ID , Project2.SALES_ORD_NO SALES_ORD_NO , Project2.Code1 Code1 , Project2.C2 C2 , Project2.C3 C3 , Project2.C4 C4 , Project2.CODY_ID CODY_ID , Project2.C5 C5 , Project2.C6 C6 , Project2.C7 C7 , Project2.INST_STATE INST_STATE , Project2.INST_AREA INST_AREA , Project2.C8 C8 , Project2.Name Name , Project2.NRIC NRIC , Project2.CODY_STATUS, Project2.cody_status_nm, Project2.BRNCH_ID, Project2.cust_id, Project2.FIRST_INSTALL_DT FROM ( SELECT Project2.SCHDUL_ID SCHDUL_ID , Project2.No No , Project2.HS_DATE HS_DATE , Project2.CODY_ID CODY_ID , Project2.STUS_CODE_ID STUS_CODE_ID , Project2.Code Code , Project2.SALES_ORD_ID SALES_ORD_ID , Project2.SALES_ORD_NO SALES_ORD_NO , Project2.Name Name , Project2.NRIC NRIC , Project2.Code1 Code1 , Project2.INST_STATE
      INST_STATE , Project2.INST_AREA INST_AREA , Project2.C1 C1 , Project2.C2 C2 , Project2.C3 C3 , Project2.C4 C4 , Project2.C5 C5 , Project2.C6 C6 , Project2.C7 C7 , Project2.C8 C8 , Project2.CODY_STATUS as CODY_STATUS, Project2.cody_status_nm as cody_status_nm, Project2.BRNCH_ID as BRNCH_ID, Project2.cust_id as cust_id, Project2.FIRST_INSTALL_DT, ROW_NUMBER() OVER ( ORDER BY Project2.SCHDUL_ID ASC ) row_number FROM ( SELECT Distinct1.SCHDUL_ID SCHDUL_ID , Distinct1.No No , Distinct1.HS_DATE HS_DATE , Distinct1.CODY_ID CODY_ID , Distinct1.STUS_CODE_ID STUS_CODE_ID , Distinct1.Code Code , Distinct1.SALES_ORD_ID SALES_ORD_ID , Distinct1.SALES_ORD_NO SALES_ORD_NO , Distinct1.Name Name , Distinct1.NRIC NRIC , Distinct1.Code1 Code1 , Distinct1.INST_STATE INST_STATE , Distinct1.INST_AREA INST_AREA , Distinct1.C1 C1 , Distinct1.C2 C2 , Distinct1.C3 C3 , Distinct1.C4 C4 , Distinct1.C5 C5 , Distinct1.C6 C6 , Distinct1.C7 C7 , Distinct1.C8 C8 , Distinct1.CODY_STATUS as CODY_STATUS, Distinct1.cody_status_nm
      as cody_status_nm, Distinct1.BRNCH_ID as BRNCH_ID, Distinct1.cust_id cust_id, Distinct1.FIRST_INSTALL_DT FROM ( SELECT DISTINCT Extent1.SCHDUL_ID SCHDUL_ID, Extent1.NO NO, Extent1.MONTH || '/' || Extent1.YEAR HS_DATE, Extent1.CODY_ID CODY_ID, Extent1.STUS_CODE_ID STUS_CODE_ID, Extent2.CODE CODE, Extent3.SALES_ORD_ID SALES_ORD_ID, Extent3.SALES_ORD_NO SALES_ORD_NO, Extent4.NAME NAME, Extent4.NRIC NRIC, Extent5.CODE CODE1, Extent6.INST_STATE INST_STATE, (select code from SYS0038M where 1=1 and stus_code_id = Extent4.STUS_CODE_ID) as cody_status_nm, Extent6.INST_AREA INST_AREA, 1 C1, CASE WHEN (Extent7.RESULT_ID IS NOT NULL) THEN Extent7.RESULT_ID ELSE 0 END C2, CASE WHEN (Extent7.RESULT_ID IS NOT NULL) THEN Extent7.NO ELSE '' END C3, CASE WHEN (Extent8.MEM_ID IS NOT NULL) THEN Extent8.MEM_TYPE ELSE 0 END C4, CASE WHEN (Extent8.MEM_ID IS NOT NULL) THEN Extent8.MEM_CODE ELSE '' END C5, CASE WHEN (Extent8.MEM_ID IS NOT NULL) THEN Extent8.STUS ELSE 0 END C6, CASE WHEN (Extent6.FIRST_INSTALL_DT
      IS NOT NULL) THEN (Extent6.FIRST_INSTALL_DT) ELSE ('1900-01-01 00:00:00') END C7, CASE WHEN (Extent9.MEM_ID IS NOT NULL) THEN Extent9.MEM_CODE ELSE '' END C8, Extent4.STUS_CODE_ID as CODY_STATUS, Extent3.BRNCH_ID as BRNCH_ID, Extent3.cust_id cust_id, Extent6.FIRST_INSTALL_DT from SVC0008D Extent1 ,SYS0038M Extent2 ,SAL0001D Extent3 ,SAL0029D Extent4 ,SYS0013M Extent5 , (SELECT vOrderInstallationInfo. ORD_ID ORD_ID, vOrderInstallationInfo. INST_STATE INST_STATE, vOrderInstallationInfo. INST_AREA INST_AREA, vOrderInstallationInfo. INST_CNT_NAME INST_CNT_NAME, vOrderInstallationInfo.INST_CNT_NRIC INST_CNT_NRIC, vOrderInstallationInfo.INST_CNT_EMAIL INST_CNT_EMAIL, vOrderInstallationInfo.INST_CNT_TEL_M INST_CNT_TEL_M, vOrderInstallationInfo.INST_CNT_TEL_O INST_CNT_TEL_O, vOrderInstallationInfo.INST_CNT_TEL_R INST_CNT_TEL_R, vOrderInstallationInfo.INST_CNT_TEL_F INST_CNT_TEL_F, vOrderInstallationInfo.INST_CNT_GENDER INST_CNT_GENDER, vOrderInstallationInfo.FIRST_INSTALL_NO FIRST_INSTALL_NO,
      vOrderInstallationInfo.FIRST_INSTALL_CT_CODE FIRST_INSTALL_CT_CODE, vOrderInstallationInfo.FIRST_INSTALL_CT_NAME FIRST_INSTALL_CT_NAME, vOrderInstallationInfo.FIRST_INSTALL_DT FIRST_INSTALL_DT, vOrderInstallationInfo.FIRST_INSTALL_REM FIRST_INSTALL_REM, vOrderInstallationInfo.FIRST_INSTALL_SIRIM_NO FIRST_INSTALL_SIRIM_NO, vOrderInstallationInfo.FIRST_INSTALL_SERIAL_NO FIRST_INSTALL_SERIAL_NO, vOrderInstallationInfo.LAST_INSTALL_NO LAST_INSTALL_NO, vOrderInstallationInfo.LAST_INSTALL_CT_CODE LAST_INSTALL_CT_CODE, vOrderInstallationInfo.LAST_INSTALL_CT_NAME LAST_INSTALL_CT_NAME, vOrderInstallationInfo.LAST_INSTALL_DT LAST_INSTALL_DT, vOrderInstallationInfo.LAST_INSTALL_REM LAST_INSTALL_REM, vOrderInstallationInfo.LAST_INSTALL_SIRIM_NO LAST_INSTALL_SIRIM_NO, vOrderInstallationInfo.LAST_INSTALL_SERIAL_NO LAST_INSTALL_SERIAL_NO, vOrderInstallationInfo.DSC_ID DSC_ID, vOrderInstallationInfo.DSC_CODE DSC_CODE, vOrderInstallationInfo.DSC_NAME DSC_NAME, vOrderInstallationInfo.INSTCT INSTCT, vOrderInstallationInfo.PREFER_INST_DT
      PREFER_INST_DT, vOrderInstallationInfo.PREFER_INST_TM PREFER_INST_TM, vOrderInstallationInfo.INSTALL_ADDR_ID INSTALL_ADDR_ID, vOrderInstallationInfo.INSTALL_CNTC_ID INSTALL_CNTC_ID, vOrderInstallationInfo.INST_CNT_DEPT INST_CNT_DEPT, vOrderInstallationInfo.INST_CNT_POST INST_CNT_POST, vOrderInstallationInfo.VRIFY_REM VRIFY_REM FROM SAL1010V vOrderInstallationInfo ) Extent6 ,SVC0006D Extent7 ,ORG0001D Extent8 ,ORG0001D Extent9 ,ORG0005D Extent10 where Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID and Extent3.SALES_ORD_ID = Extent1.SALES_ORD_ID and Extent4.CUST_ID = Extent3.CUST_ID and Extent5.CODE_ID = Extent3.APP_TYPE_ID and Extent6.ORD_ID = Extent1.SALES_ORD_ID and Extent7.SCHDUL_ID(+) = Extent1.SCHDUL_ID and Extent8.MEM_ID(+) = Extent1.CODY_ID and Extent9.MEM_ID(+) = Extent7.CODY_ID and Extent8.MEM_ID = Extent10.MEM_ID AND 306 = Extent7.TYPE_ID(+) and 1 = Extent7.RESULT_IS_CURR(+) AND Extent1.YEAR = TO_CHAR(to_date(#{myBSMonth} ,'MM/YYYY'),'YYYY') AND Extent1.MONTH = TO_CHAR(to_date(#{myBSMonth},'MM/YYYY'),'MM')
      <if test="myInstallMonth != null and myInstallMonth != ''"> and ('MONTH' , case when Extent6.FIRST_INSTALL_DT IS NOT NULL THEN Extent6.FIRST_INSTALL_DT else '1900-01-01' END ) = (('MONTH', #{myInstallMonth})) </if> <if test="myInstallMonth != null and myInstallMonth != ''"> and ('YEAR' , case when Extent6.FIRST_INSTALL_DT IS NOT NULL THEN Extent6.FIRST_INSTALL_DT else '1900-01-01' END ) = (('YEAR', #{myInstallMonth})) </if> <if test="txtSalesOrder != null and txtSalesOrder != ''"> AND ( Extent3.SALES_ORD_NO = #{txtSalesOrder}) </if> <if test="txtHsOrderNo != null and txtHsOrderNo != ''"> AND ( Extent1.No = #{txtHsOrderNo}) </if> <if test="cmdBranchCode != null and cmdBranchCode != ''"> AND ( Extent3.BRNCH_ID = #{cmdBranchCode}) </if> <if test="cmdCdManager != null and cmdCdManager != ''"> AND Extent10.MEM_UP_ID = #{cmdCdManager} </if> <if test="cmdcodyCode != null and cmdcodyCode != ''"> AND Extent1.cody_id = #{cmdcodyCode} </if> <if test="cmbStatusType != null and cmbStatusType != ''">
      AND Extent1.STUS_CODE_ID = #{cmbStatusType} </if> <if test="txtCustomer != null and txtCustomer != ''"> AND Extent3.cust_id = #{txtCustomer} </if> <if test="txtHsOrderNo != null and txtHsOrderNo != ''"> AND Extent1.NO = #{txtHsOrderNo} </if> ) Distinct1 ) Project2 ) Project2 WHERE Project2.row_number > 0 ORDER BY Project2.SCHDUL_ID ASC -->


  </select>



	<select id="selectHsAssiinlList_1" parameterType="Map"
		resultType="egovMap">


		SELECT Project2.C1 C1 ,
		Project2.SCHDUL_ID SCHDUL_ID ,
		Project2.No No ,
		Project2.HS_DATE HS_DATE ,
		Project2.CODY_ID CODY_ID,
		Project2.STUS_CODE_ID STUS_CODE_ID ,
		Project2.Code Code ,
		Project2.SALES_ORD_ID SALES_ORD_ID ,
		Project2.SALES_ORD_NO SALES_ORD_NO
		,
		Project2.Code1 Code1 ,
		Project2.C2 C2 ,
		Project2.C3 C3 ,
		Project2.C4 C4
		,
		Project2.CODY_ID CODY_ID ,
		Project2.C5 C5 ,
		Project2.C6 C6 ,
		Project2.C7 C7 ,
		Project2.INST_STATE INST_STATE ,
		Project2.INST_AREA
		INST_AREA ,
		Project2.C8 C8 ,
		Project2.Name Name ,
		Project2.NRIC NRIC ,
		Project2.CODY_STATUS,
		Project2.BRNCH_ID,
		Project2.cust_id,
		Project2.actn_mem_id
		FROM ( SELECT Project2.SCHDUL_ID SCHDUL_ID ,
		Project2.No No ,
		Project2.HS_DATE HS_DATE ,
		Project2.CODY_ID CODY_ID ,
		Project2.STUS_CODE_ID STUS_CODE_ID ,
		Project2.Code Code ,
		Project2.SALES_ORD_ID SALES_ORD_ID ,
		Project2.SALES_ORD_NO SALES_ORD_NO
		,
		Project2.Name Name ,
		Project2.NRIC NRIC ,
		Project2.Code1 Code1 ,
		Project2.INST_STATE INST_STATE ,
		Project2.INST_AREA INST_AREA ,
		Project2.C1 C1 ,
		Project2.C2 C2 ,
		Project2.C3 C3 ,
		Project2.C4 C4 ,
		Project2.C5 C5 ,
		Project2.C6 C6 ,
		Project2.C7 C7 ,
		Project2.C8 C8 ,
		Project2.CODY_STATUS as CODY_STATUS,
		Project2.BRNCH_ID as BRNCH_ID,
		Project2.cust_id as cust_id,
		Project2.actn_mem_id AS actn_mem_id,
		ROW_NUMBER() OVER ( ORDER BY Project2.SCHDUL_ID ASC ) row_number
		FROM (
		SELECT Distinct1.SCHDUL_ID SCHDUL_ID ,
		Distinct1.No No ,
		Distinct1.HS_DATE HS_DATE ,
		Distinct1.CODY_ID CODY_ID ,
		Distinct1.STUS_CODE_ID STUS_CODE_ID ,
		Distinct1.Code Code ,
		Distinct1.SALES_ORD_ID SALES_ORD_ID ,
		Distinct1.SALES_ORD_NO
		SALES_ORD_NO ,
		Distinct1.Name Name ,
		Distinct1.NRIC NRIC ,
		Distinct1.Code1 Code1 ,
		Distinct1.INST_STATE INST_STATE ,
		Distinct1.INST_AREA INST_AREA ,
		Distinct1.C1 C1 ,
		Distinct1.C2 C2 ,
		Distinct1.C3 C3 ,
		Distinct1.C4 C4 ,
		Distinct1.C5 C5 ,
		Distinct1.C6 C6 ,
		Distinct1.C7 C7 ,
		Distinct1.C8 C8 ,
		Distinct1.CODY_STATUS as
		CODY_STATUS,
		Distinct1.BRNCH_ID as BRNCH_ID,
		Distinct1.cust_id cust_id,
		Distinct1.actn_mem_id
		FROM (
		SELECT DISTINCT
		Extent1.SCHDUL_ID SCHDUL_ID,
		Extent1.NO NO,
		Extent1.MONTH || '/' || Extent1.YEAR HS_DATE,
		Extent1.CODY_ID CODY_ID,
		Extent1.STUS_CODE_ID STUS_CODE_ID,
		Extent2.CODE CODE,
		Extent3.SALES_ORD_ID SALES_ORD_ID,
		Extent3.SALES_ORD_NO SALES_ORD_NO,
		Extent4.NAME NAME,
		Extent4.NRIC NRIC,
		Extent5.CODE CODE1,
		Extent6.INST_STATE INST_STATE,
		Extent6.INST_AREA
		INST_AREA,
		1 C1,
		CASE
		WHEN (Extent7.RESULT_ID IS NOT NULL)
		THEN
		Extent7.RESULT_ID
		ELSE 0
		END C2,
		CASE
		WHEN (Extent7.RESULT_ID IS NOT NULL)
		THEN Extent7.NO
		ELSE ''
		END C3,
		CASE
		WHEN (Extent8.MEM_ID IS NOT NULL)
		THEN Extent8.MEM_TYPE
		ELSE 0
		END C4,
		CASE
		WHEN (Extent8.MEM_ID IS NOT
		NULL)
		THEN Extent8.MEM_CODE
		ELSE ''
		END C5,
		CASE
		WHEN (Extent8.MEM_ID IS
		NOT NULL)
		THEN Extent8.STUS
		ELSE 0
		END C6,
		CASE
		WHEN
		(Extent6.FIRST_INSTALL_DT IS NOT NULL)
		THEN (Extent6.FIRST_INSTALL_DT)
		ELSE ('1900-01-01 00:00:00')
		END C7,
		CASE
		WHEN (Extent9.MEM_ID IS NOT
		NULL)
		THEN Extent9.MEM_CODE
		ELSE ''
		END C8,
		Extent4.STUS_CODE_ID as
		CODY_STATUS,
		Extent3.BRNCH_ID as BRNCH_ID,
		Extent3.cust_id cust_id,
		extent1.actn_mem_id as actn_mem_id
		from SVC0008D Extent1
		,SYS0038M
		Extent2
		,SAL0001D Extent3
		,SAL0029D Extent4
		,SYS0013M Extent5
		, (SELECT
		vOrderInstallationInfo. ORD_ID ORD_ID,
		vOrderInstallationInfo.
		INST_STATE INST_STATE,
		vOrderInstallationInfo. INST_AREA INST_AREA,
		vOrderInstallationInfo. INST_CNT_NAME INST_CNT_NAME,
		vOrderInstallationInfo.INST_CNT_NRIC INST_CNT_NRIC,
		vOrderInstallationInfo.INST_CNT_EMAIL INST_CNT_EMAIL,
		vOrderInstallationInfo.INST_CNT_TEL_M INST_CNT_TEL_M,
		vOrderInstallationInfo.INST_CNT_TEL_O INST_CNT_TEL_O,
		vOrderInstallationInfo.INST_CNT_TEL_R INST_CNT_TEL_R,
		vOrderInstallationInfo.INST_CNT_TEL_F INST_CNT_TEL_F,
		vOrderInstallationInfo.INST_CNT_GENDER INST_CNT_GENDER,
		vOrderInstallationInfo.FIRST_INSTALL_NO FIRST_INSTALL_NO,
		vOrderInstallationInfo.FIRST_INSTALL_CT_CODE FIRST_INSTALL_CT_CODE,
		vOrderInstallationInfo.FIRST_INSTALL_CT_NAME FIRST_INSTALL_CT_NAME,
		vOrderInstallationInfo.FIRST_INSTALL_DT FIRST_INSTALL_DT,
		vOrderInstallationInfo.FIRST_INSTALL_REM FIRST_INSTALL_REM,
		vOrderInstallationInfo.FIRST_INSTALL_SIRIM_NO FIRST_INSTALL_SIRIM_NO,
		vOrderInstallationInfo.FIRST_INSTALL_SERIAL_NO
		FIRST_INSTALL_SERIAL_NO,
		vOrderInstallationInfo.LAST_INSTALL_NO
		LAST_INSTALL_NO,
		vOrderInstallationInfo.LAST_INSTALL_CT_CODE
		LAST_INSTALL_CT_CODE,
		vOrderInstallationInfo.LAST_INSTALL_CT_NAME
		LAST_INSTALL_CT_NAME,
		vOrderInstallationInfo.LAST_INSTALL_DT
		LAST_INSTALL_DT,
		vOrderInstallationInfo.LAST_INSTALL_REM
		LAST_INSTALL_REM,
		vOrderInstallationInfo.LAST_INSTALL_SIRIM_NO
		LAST_INSTALL_SIRIM_NO,
		vOrderInstallationInfo.LAST_INSTALL_SERIAL_NO
		LAST_INSTALL_SERIAL_NO,
		vOrderInstallationInfo.DSC_ID DSC_ID,
		vOrderInstallationInfo.DSC_CODE DSC_CODE,
		vOrderInstallationInfo.DSC_NAME DSC_NAME,
		vOrderInstallationInfo.INSTCT INSTCT,
		vOrderInstallationInfo.PREFER_INST_DT PREFER_INST_DT,
		vOrderInstallationInfo.PREFER_INST_TM PREFER_INST_TM,
		vOrderInstallationInfo.INSTALL_ADDR_ID INSTALL_ADDR_ID,
		vOrderInstallationInfo.INSTALL_CNTC_ID INSTALL_CNTC_ID,
		vOrderInstallationInfo.INST_CNT_DEPT INST_CNT_DEPT,
		vOrderInstallationInfo.INST_CNT_POST INST_CNT_POST,
		vOrderInstallationInfo.VRIFY_REM VRIFY_REM
		FROM SAL1010V
		vOrderInstallationInfo
		) Extent6
		,SVC0006D Extent7
		,ORG0001D Extent8
		,ORG0001D Extent9
		where Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
		and
		Extent3.SALES_ORD_ID = Extent1.SALES_ORD_ID
		and Extent3.BNDL_ID IS NULL
		and Extent4.CUST_ID = Extent3.CUST_ID
		and Extent5.CODE_ID =
		Extent3.APP_TYPE_ID
		and Extent6.ORD_ID = Extent1.SALES_ORD_ID
		and
		Extent7.SCHDUL_ID(+) = Extent1.SCHDUL_ID
		and Extent8.MEM_ID(+) =
		Extent1.CODY_ID
		and Extent9.MEM_ID(+) = Extent7.CODY_ID
		AND 306 =
		Extent7.TYPE_ID(+)
		and 1 = Extent7.RESULT_IS_CURR(+)
		and 1 =
		Extent1.STUS_CODE_ID
		AND ( Extent3.SALES_ORD_NO = #{salesOrder})
		)
		Distinct1 ) Project2 ) Project2
		WHERE Project2.row_number > 0
		ORDER BY
		Project2.SCHDUL_ID ASC
	</select>




	<select id="selectHsFilterList" parameterType="Map" resultType="egovMap">
		SELECT Distinct1.C1 C1 ,
		Distinct1.STK_ID STK_ID ,
		Distinct1.STK_CODE
		STK_CODE ,
		Distinct1.STK_DESC STK_DESC,
		Distinct1.SERIAL_CHK,
		Distinct1.SRV_FILTER_ID,
		Distinct1.srv_config_id,
		Distinct1.IS_RETURN,
		Distinct1.SRV_FILTER_LAST_SERIAL s_old_serial_no,
		CASE WHEN Distinct1.DEFECT_CODE IS NOT NULL
		THEN 'Y' ELSE 'N' END AS USE_FILTER_BLOCK
		FROM ( SELECT DISTINCT Extent3.STK_ID STK_ID ,
		Extent3.STK_CODE
		STK_CODE ,
		Extent3.STK_DESC STK_DESC ,
		Extent3.SERIAL_CHK,
		1 C1,
		Filter1.SRV_FILTER_ID,
		Filter1.srv_config_id,
		Filter1.IS_RETURN,
		Filter1.SRV_FILTER_last_SERIAL,
		extent4.DEFECT_CODE
		FROM (
		SELECT Extent1.SRV_SO_ID SRV_SO_ID ,
		Extent2.SRV_FILTER_STK_ID
		SRV_FILTER_STK_ID,
		Extent2.SRV_FILTER_ID,
		Extent1.srv_config_id,
		Extent2.IS_RETURN
		,Extent2.SRV_FILTER_last_SERIAL
		FROM SAL0090D Extent1
		JOIN SAL0087D Extent2 ON (
		Extent1.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID )
		AND ( 1 =
		Extent2.SRV_FILTER_STUS_ID )
		WHERE ( 1 = Extent1.SRV_STUS_ID )
                                   <![CDATA[                       AND ( 443 <> Extent2.SRV_FILTER_ID ) ) Filter1 ]]>
		JOIN SYS0026M Extent3 ON Filter1.SRV_FILTER_STK_ID = Extent3.STK_ID
		LEFT JOIN SYS0100M extent4 ON Filter1.SRV_FILTER_STK_ID = extent4.DEFECT_ID
		AND extent4.DEFECT_TYP = 'UFB'
		AND SYSDATE BETWEEN EFF_DT AND EXP_DT
		AND extent4.DEFECT_STATUS = 1
		WHERE Filter1.SRV_SO_ID = #{salesOrderId} ) Distinct1


	</select>




	<select id="selectHsViewfilterInfo" parameterType="Map"
		resultType="egovMap">
		<!-- <![CDATA[ SELECT E.STK_ID STK_ID , E.STK_CODE STK_CODE , E.STK_DESC
			STK_DESC , NVL(F.BS_RESULT_PART_QTY, 0) as name, NVL(F.BS_RESULT_ITM_ID,
			0) as BS_RESULT_ITM_ID FROM SVC0008D A INNER JOIN ( SELECT A1.* FROM SVC0006D
			A1 INNER JOIN ( SELECT MAX(NO) AS NO FROM SVC0006D WHERE SCHDUL_ID = #{selSchdulId}
			GROUP BY SCHDUL_ID ) B1 ON A1.NO = B1.NO ) B ON A.SCHDUL_ID = B.SCHDUL_ID
			INNER JOIN SAL0090D C ON A.SALES_ORD_ID = C.SRV_SO_ID INNER JOIN SAL0087D
			D ON C.SRV_CONFIG_ID = D.SRV_CONFIG_ID AND D.SRV_FILTER_ID NOT IN (443) AND
			D.SRV_FILTER_STUS_ID = 1 AND C.SRV_STUS_ID = 1 INNER JOIN SYS0026M E ON D.SRV_FILTER_STK_ID
			= E.STK_ID LEFT OUTER JOIN SVC0007D F ON B.RESULT_ID = F.BS_RESULT_ID AND
			D.SRV_FILTER_ID = F.BS_RESULT_PART_ID WHERE A.SCHDUL_ID = #{selSchdulId}
			]]> -->

<!-- CASE WHEN C.BS_RESULT_PART_QTY = -1
                           THEN
                           distinct1.SRV_FILTER_prev_SERIAL
                           ELSE
                           c.OLD_FILTER_BARCD_SERIAL_NO
                           END AS s_old_serial_no
                           , -->
                <![CDATA[

            SELECT  DISTINCT distinct1.SRV_FILTER_STK_ID AS STK_ID,
                           distinct1.STK_CODE,
                           distinct1.STK_DESC,
                           distinct1.SERIAL_CHK,
                           c.BS_RESULT_ITM_ID,
                           c.SERIAL_NO,
                           distinct1.SRV_FILTER_LAST_SERIAL s_old_serial_no,
                           CASE WHEN distinct1.SRV_FILTER_STK_ID = c.BS_RESULT_PART_ID
                                   THEN C.BS_RESULT_PART_QTY
                                   ELSE 0
                                   END AS NAME,
                           distinct1.IS_RETURN
                           ,C.FILTER_SRL_UNMATCH_RSN FILTER_SERIAL_UNMATCH_REASON
                           ,c.OLD_FILTER_BARCD_SERIAL_NO AS old_serial_no
                           ,CASE WHEN D.DEFECT_CODE IS NOT NULL THEN 'Y' ELSE 'N' END AS USE_FILTER_BLOCK
               FROM( SELECT  e.SRV_FILTER_STK_ID AS STK_ID,
                           f.STK_CODE,
                           f.STK_DESC,
                           f.SERIAL_CHK,
                           e.SRV_FILTER_STK_ID,
                           e.IS_RETURN
                           ,e.SRV_FILTER_prev_SERIAL
                           ,e.SRV_FILTER_last_SERIAL
                     FROM SVC0008D A,
                              SAL0090D D,
                              SAL0087D E,
                              SYS0026M F
                      where A.SALES_ORD_ID = D.SRV_SO_ID
                      AND D.SRV_CONFIG_ID = E.SRV_CONFIG_ID
                      AND E.SRV_FILTER_STK_ID = F.STK_ID
                      AND E.SRV_FILTER_STUS_ID = '1'
                      AND A.SCHDUL_ID = #{selSchdulId} ) distinct1, (select Y.BS_RESULT_PART_ID, Y.SERIAL_NO, BS_RESULT_ITM_ID, BS_RESULT_PART_QTY,Y.FILTER_SRL_UNMATCH_RSN,Y.OLD_FILTER_BARCD_SERIAL_NO
                                                                  from SVC0007D Y ,(SELECT SCHDUL_ID,
                                                                                   MAX(X.RESULT_ID) AS RESULT_ID
                                                                                   FROM SVC0006D X
                                                                                   GROUP BY X.SCHDUL_ID) Z
                                                                  where  z.RESULT_ID = y.BS_RESULT_ID
                                                                  and z.SCHDUL_ID =#{selSchdulId2}
                                                                   ) C,
                       (SELECT DEFECT_ID , DEFECT_CODE FROM SYS0100M WHERE DEFECT_TYP = 'UFB' AND SYSDATE BETWEEN EFF_DT AND EXP_DT AND DEFECT_STATUS = 1 ) D
                where distinct1.STK_ID = C.BS_RESULT_PART_ID(+)
                AND distinct1.STK_ID = D.DEFECT_ID (+)
                ]]>
	</select>


	<insert id="insertHsResult" parameterType="Map">
		insert into SVC0008D (
		SCHDUL_ID
		,NO
		,SALES_ORD_ID
		,MONTH
		,YEAR
		,STUS_CODE_ID
		,LAST_SVC
		,LOK
		,TYPE_ID
		,CODY_ID
		,CRT_USER_ID
		,CRT_DT,
		PREV_CODY_ID
		)
		values (
		#{schdulId}
		,
		#{no}
		, #{salesOrdId}
		, #{month}
		, #{year}
		, #{stus}
		, #{lastSvc}
		, #{lok}
		,
		#{typeId}
		, #{codyId}
		, #{creator}
		, SYSDATE
		, 0
		)
	</insert>


	<insert id="updateAssignCody" parameterType="Map">
		UPDATE SVC0008D
		SET
		CODY_ID =#{codyId},
		UPD_USER_ID =#{updator} ,
		UPD_DT =SYSDATE
		WHERE
		SCHDUL_ID =#{schdulId}
	</insert>

	<update id="updateAssignCody90D" parameterType="Map">
		UPDATE SAL0090D
		SET SRV_CODY_ID = #{codyId},
		SRV_UPD_USER_ID = #{updator} ,
		SRV_UPD_DT =
		SYSDATE
		WHERE SRV_SO_ID = (SELECT SALES_ORD_ID FROM SVC0008D
		WHERE
		SCHDUL_ID = #{schdulId})
	</update>


	<select id="getNextSchdulId" resultType="int">
		select
		GBSLCVD.SVC0008D_SCHDUL_ID_SEQ.nextval
		from dual
	</select>

	<select id="getNextSvc006dSeq" resultType="int">
		select
		GBSLCVD.SVC0006D_RESULT_ID_SEQ.NEXTVAL
		from dual
	</select>



	<select id="selectHsInitDetailPop" parameterType="Map"
		resultType="egovMap">

		SELECT Limit1.SCHDUL_ID SCHDUL_ID ,
		Limit1.NO NO ,
		Limit1.MONTH MONTH ,
		Limit1.YEAR YEAR ,
		Limit1.MONTH || '/' || Limit1.YEAR monthy,
		Limit1.STUS_CODE_ID STUS_CODE_ID ,
		Limit1.CODE CODE ,
		Limit1.SALES_ORD_NO SALES_ORD_NO ,
		Limit1.CODE1 CODE1 ,
		Limit1.SALES_ORD_ID SALES_ORD_ID ,
		Limit1.CODE_NAME CODE_NAME ,
		Limit1.SRV_REM SRV_REM ,
		Limit1.SRV_BS_WEEK SRV_BS_WEEK ,
		CASE
		WHEN (
		Limit1.RESULT_ID IS NOT NULL ) THEN Limit1.NO1
		ELSE ''
		END C1 ,
		CASE
		WHEN
		( Limit1.RESULT_ID IS NOT NULL ) THEN Limit1.RESULT_ID
		ELSE 0
		END C2 ,
		Limit1.NAME NAME ,
		Limit1.NRIC NRIC ,
		Limit1.STK_CODE STK_CODE ,
		Limit1.STK_DESC STK_DESC ,
		Limit1.STK_ID STK_ID ,
		Limit1.CODY_ID
		CODY_ID,
		Limit1.CANC_REQ_NO
		FROM ( SELECT Extent1.SCHDUL_ID SCHDUL_ID ,
		Extent1.NO NO ,
		Extent1.MONTH MONTH ,
		Extent1.YEAR YEAR ,
		Extent1.CODY_ID CODY_ID ,
		Extent1.STUS_CODE_ID STUS_CODE_ID ,
		Extent2.CODE_NAME CODE_NAME ,
		Extent3.CODE CODE ,
		Extent4.SALES_ORD_ID
		SALES_ORD_ID ,
		Extent4.SALES_ORD_NO SALES_ORD_NO ,
		Extent6.STK_ID STK_ID
		,
		Extent6.STK_CODE STK_CODE ,
		Extent6.STK_DESC STK_DESC ,
		Extent7.NAME
		NAME ,
		Extent7.NRIC NRIC ,
		Extent8.SRV_REM SRV_REM ,
		Extent8.SRV_BS_WEEK
		SRV_BS_WEEK ,
		Extent9.CODE CODE1 ,
		Extent11.RESULT_ID RESULT_ID ,
		Extent11.NO NO1,
		Extent1.CANC_REQ_NO as CANC_REQ_NO
		FROM SVC0008D
		Extent1
		JOIN SYS0013M Extent2 ON Extent1.TYPE_ID = Extent2.CODE_ID
		JOIN
		SYS0038M Extent3 ON Extent1.STUS_CODE_ID = Extent3.STUS_CODE_ID
		JOIN
		SAL0001D Extent4 ON Extent1.SALES_ORD_ID = Extent4.SALES_ORD_ID
		JOIN
		SAL0002D Extent5 ON Extent4.SALES_ORD_ID = Extent5.SALES_ORD_ID
		JOIN
		SYS0026M Extent6 ON Extent5.ITM_STK_ID = Extent6.STK_ID
		JOIN SAL0029D
		Extent7 ON Extent4.CUST_ID = Extent7.CUST_ID
		LEFT JOIN SAL0090D Extent8
		ON ( Extent4.SALES_ORD_ID = Extent8.SRV_SO_ID )
		AND ( 1 =
		Extent8.SRV_STUS_ID )
		JOIN SYS0013M Extent9 ON Extent4.APP_TYPE_ID =
		Extent9.CODE_ID
		JOIN SAL0045D Extent10 ON Extent4.SALES_ORD_ID =
		Extent10.SALES_ORD_ID
		LEFT JOIN SVC0006D Extent11 ON (
		Extent1.SCHDUL_ID =
		Extent11.SCHDUL_ID )
		AND ( 1 =
		Extent11.RESULT_IS_CURR )
                <![CDATA[             WHERE  Extent1.SCHDUL_ID = #{schdulId} AND ROWNUM <= 1 ) Limit1 ]]>


	</select>




	<insert id="insertHsResultfinal" parameterType="Map">
		INSERT INTO
		GBSLCVD.SVC0006D ( RESULT_ID,
		NO,
		TYPE_ID,
		SCHDUL_ID,
		SALES_ORD_ID,
		CODY_ID,
		SETL_DT,
		RESULT_STUS_CODE_ID,
		FAIL_RESN_ID,
		REN_COLCT_ID,
		WH_ID,
		RESULT_REM,
		RESULT_CRT_DT,
		RESULT_CRT_USER_ID,
		RESULT_UPD_DT,
		RESULT_UPD_USER_ID,
		RESULT_IS_SYNC,
		RESULT_IS_EDIT,
		RESULT_STOCK_USE,
		RESULT_IS_CURR,
		RESULT_MTCH_ID,
		RESULT_IS_ADJ,
		TEMPERATE_SETNG,
		NEXT_APPNT_DT,
		NEXT_APPNT_TM,
		OWNER_CODE,
		RESULT_CUST_NAME,
		RESULT_MOBILE_NO,
		RESULT_RPT_EMAIL_NO,
		RESULT_ACEPT_NAME,
		SGN_DT,
		HS_CHKLIST,
        SWITCH_CHK_LST,
		CODE_FAIL_REMARK,
		VOUCHER_REDEMPTION,
		OLD_SETL_DT
		) VALUES ( #{resultId},
		#{docNo},
		#{typeId},
		#{schdulId},
		#{salesOrdId},
		#{codyId},
		TO_DATE(#{setlDt},'DD-MM-YYYY'),
		#{resultStusCodeId},
		NVL(#{failResnId},0),
		NVL(#{renColctId},0),
		#{whId},
		#{resultRem},
		SYSDATE,
		#{resultCrtUserId},
		SYSDATE,
		#{resultUpdUserId},
		#{resultIsSync},
		#{resultIsEdit},
		#{resultStockUse},
		#{resultIsCurr},
		#{resultMtchId},
		#{resultIsAdj},
		#{temperateSetng},
		to_date(#{nextAppntDt},'yyyymmdd'),
		#{nextAppointmentTime},
		#{ownerCode},
		#{resultCustName},
		#{resultMobileNo},
		#{resultRptEmailNo},
		#{resultAceptName},
		#{sgnDt},
		#{instChklstCheckBox},
        #{switchChkLst},
		#{codeFailRemark},
		#{voucherRedemption},
		TO_DATE(#{setlDt},'DD-MM-YYYY')
		)
	</insert>

	<update id="UpdateHsResultM" parameterType="Map">
		update
		GBSLCVD.SVC0006D
		SET STUS_CODE_ID = #{resultStusCodeId}
		,ACTN_MEM_ID =
		#{actnMemId}
		,ACTN_MEM_ID = #{srvBsWeek}
		WHERE SCHDUL_ID =
		#{hidschdulId}




	</update>


	<update id="updateHsResultD" parameterType="Map">
		update
		GBSLCVD.SVC0007D
		SET BS_RESULT_PART_ID = #{bsResultPartId}
		,BS_RESULT_PART_DESC = #{bsResultPartDesc}
		,BS_RESULT_PART_QTY =
		#{bsResultPartQty}
		,BS_RESULT_CRT_USER_ID = #{bsResultCrtUserId}
		,BS_RESULT_FILTER_CLM = #{bsResultFilterClm}
		WHERE BS_RESULT_ITM_ID =
		#{bsResultItmId}

	</update>



	<update id="updateHsResultM" parameterType="Map">
		update
		GBSLCVD.SVC0006D
		SET FAIL_RESN_ID = #{failReason}
		,REN_COLCT_ID =
		#{renColctId}
		WHERE SCHDUL_ID = #{hidschdulId}
	</update>



	<insert id="insertHsResultCopy" parameterType="Map">
		INSERT INTO
		SVC0006D
		(RESULT_ID
		,NO
		,TYPE_ID
		,SCHDUL_ID
		,SALES_ORD_ID
		,CODY_ID
		,SETL_DT
		,RESULT_STUS_CODE_ID
		,FAIL_RESN_ID
		,REN_COLCT_ID
		,WH_ID
		,RESULT_REM
		,RESULT_CRT_DT
		,RESULT_CRT_USER_ID
		,RESULT_UPD_DT
		,RESULT_UPD_USER_ID
		,RESULT_IS_SYNC
		,RESULT_IS_EDIT
		,RESULT_STOCK_USE
		,RESULT_IS_CURR
		,RESULT_MTCH_ID
		,RESULT_IS_ADJ
		,RESULT_ENTRY_POINT
		,RESULT_MOBILE_ID)
		SELECT #{resultId} AS RESULT_ID,
		NO,
		TYPE_ID,
		SCHDUL_ID,
		SALES_ORD_ID,
		CODY_ID,
		SETL_DT,
		RESULT_STUS_CODE_ID,
		FAIL_RESN_ID,
		REN_COLCT_ID,
		WH_ID,
		RESULT_REM,
		RESULT_CRT_DT,
		RESULT_CRT_USER_ID,
		RESULT_UPD_DT,
		RESULT_UPD_USER_ID,
		RESULT_IS_SYNC,
		RESULT_IS_EDIT,
		RESULT_STOCK_USE,
		RESULT_IS_CURR,
		RESULT_MTCH_ID,
		RESULT_IS_ADJ,
		RESULT_ENTRY_POINT,
		RESULT_MOBILE_ID
		FROM(SELECT RESULT_ID,
		NO,
		TYPE_ID,
		SCHDUL_ID,
		SALES_ORD_ID,
		CODY_ID,
		SETL_DT,
		RESULT_STUS_CODE_ID,
		FAIL_RESN_ID,
		REN_COLCT_ID,
		WH_ID,
		RESULT_REM,
		RESULT_CRT_DT,
		RESULT_CRT_USER_ID,
		RESULT_UPD_DT,
		RESULT_UPD_USER_ID,
		RESULT_IS_SYNC,
		RESULT_IS_EDIT,
		RESULT_STOCK_USE,
		RESULT_IS_CURR,
		RESULT_MTCH_ID,
		RESULT_IS_ADJ,
		RESULT_ENTRY_POINT,
		RESULT_MOBILE_ID
		FROM SVC0006D a
		WHERE a.SCHDUL_ID =
		#{hidschdulId}
		ORDER BY RESULT_ID DESC)
		WHERE ROWNUM = 1


	</insert>


	<select id="cmbCollectTypeComboList" parameterType="Map"
		resultType="egovMap">
		select a.CODE ,a.c1
		from (
		SELECT Extent1.CODE CODE1 ,
		Extent1.CODE || '-' || Extent1.RESN_DESC
		c1,resn_id as code
		FROM
		SYS0032M Extent1
		WHERE ( 174 = Extent1.resn_type_id )
		AND ( 1 =
		Extent1.STUS_CODE_ID )
		ORDER BY Extent1.CODE ASC
		) a
	</select>

	<select id="cmbCollectTypeComboList2" parameterType="Map"
		resultType="egovMap">
		select a.CODE CODE_ID, a.c1 CODE_NAME
		from (
		SELECT
		Extent1.CODE CODE1 , Extent1.CODE || '-' || Extent1.RESN_DESC
		c1,resn_id as code
		FROM SYS0032M Extent1
		WHERE ( 174 =
		Extent1.resn_type_id )
		AND ( 1 = Extent1.STUS_CODE_ID )
		ORDER BY
		Extent1.CODE ASC
		) a
	</select>



	<select id="selectHSResultMCnt" parameterType="Map" resultType="int">
		SELECT count(*) cnt
		FROM SVC0006D Extent1
		WHERE Extent1.SCHDUL_ID =
		#{hidschdulId} AND Extent1.RESULT_STUS_CODE_ID
		NOT IN (12,4)

	</select>

	<select id="getSVC008D_NO" parameterType="Map" resultType="java.lang.String">
		SELECT NO
		FROM SVC0008D Extent1
		WHERE Extent1.SCHDUL_ID = #{hidschdulId}

	</select>


	<select id="selectHSScheduleMCnt" parameterType="Map"
		resultType="int">
		SELECT count(*) cnt
		FROM SVC0008D Extent1
		WHERE
		Extent1.SCHDUL_ID = #{hidschdulId}
	</select>

	<select id="selectHSResultMList" parameterType="Map" resultType="egovMap">
		SELECT Extent1.RESULT_ID RESULT_ID ,
		Extent1.NO NO ,
		Extent1.TYPE_ID
		TYPE_ID ,
		Extent1.SCHDUL_ID SCHDUL_ID ,
		Extent1.SALES_ORD_ID
		SALES_ORD_ID ,
		Extent1.CODY_ID CODY_ID ,
		Extent1.SETL_DT SETL_DT ,
		Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID ,
		Extent1.FAIL_RESN_ID
		FAIL_RESN_ID ,
		Extent1.REN_COLCT_ID REN_COLCT_ID ,
		Extent1.WH_ID WH_ID ,
		Extent1.RESULT_REM RESULT_REM ,
		Extent1.RESULT_CRT_DT RESULT_CRT_DT ,
		Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID ,
		Extent1.RESULT_UPD_DT
		RESULT_UPD_DT ,
		Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID ,
		Extent1.RESULT_IS_SYNC RESULT_IS_SYNC ,
		Extent1.RESULT_IS_EDIT
		RESULT_IS_EDIT ,
		Extent1.RESULT_STOCK_USE RESULT_STOCK_USE ,
		Extent1.RESULT_IS_CURR RESULT_IS_CURR ,
		Extent1.RESULT_MTCH_ID
		RESULT_MTCH_ID ,
		Extent1.RESULT_IS_ADJ RESULT_IS_ADJ ,
		Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT ,
		Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
		FROM SVC0006D Extent1
    <![CDATA[ WHERE Extent1.SCHDUL_ID = #{hidschdulId}
                AND ROWNUM <= 1 ]]>
	</select>



	<select id="selectHSDocNoList" parameterType="Map" resultType="egovMap">

		SELECT Extent1.DOC_NO_ID DOC_NO_ID ,
		CASE
		WHEN ( Extent1.DOC_NO IS NOT
		NULL ) THEN Extent1.DOC_NO
		ELSE ''
		END C1 ,
		CASE
		WHEN (
		Extent1.DOC_NO_PREFIX IS NOT NULL ) THEN Extent1.DOC_NO_PREFIX
		ELSE ''
		END C2
		FROM SYS0022C Extent1
                     <![CDATA[       WHERE  Extent1.DOC_NO_ID = 11 AND ROWNUM <= 1 ]]>


	</select>


	<update id="updateDocNo" parameterType="Map">

		UPDATE SYS0022C
		SET DOC_NO
		= #{docNo}
		WHERE DOC_NO_ID = '11'
	</update>





	<update id="updateHsScheduleM" parameterType="Map">
		UPDATE SVC0008D
		SET
		STUS_CODE_ID = #{resultStusCodeId}
		, ACTN_MEM_ID = #{actnMemId}
		,
		CODY_ID = #{actnMemId}
		WHERE SCHDUL_ID = #{hidschdulId}
	</update>


	<update id="updateHsSrvConfigM" parameterType="Map">
		UPDATE SVC0009D
		SET SRV_REM = #{srvRem}
		,SRV_PREV_DT = #{srvPrevDt}
		,SRV_BS_WEEK = #{srvBsWeek}
		WHERE ID = #{salesOrdId}
		<!-- WHERE SRV_CONFIG_ID = #{salesOrdId} -->

	</update>



	<select id="cmbServiceMemList" parameterType="Map" resultType="egovMap">
		SELECT Extent1.MEM_ID CODE_ID ,
		Extent1.MEM_CODE || '-' || Extent1.NAME
		as CODE_NAME,
		Extent1.MEM_CODE MEM_CODE ,
		Extent1.NAME NAME
		FROM ORG0001D
		Extent1
		WHERE Extent1.MEM_TYPE IN ( 2,3 )
		AND 1 = Extent1.STUS
		ORDER BY
		Extent1.MEM_CODE ASC
	</select>




	<select id="failReasonList" parameterType="Map" resultType="egovMap">
		SELECT Extent1.RESN_ID AS CODE_ID,
		Extent1.CODE || '-' ||
		Extent1.RESN_DESC AS CODE_NAME
		FROM SYS0032M Extent1
		WHERE ( 167 =
		Extent1.RESN_TYPE_ID )
		AND ( 1 = Extent1.STUS_CODE_ID )
		ORDER BY
		Extent1.CODE ASC
	</select>



	<select id="serMemList" parameterType="Map" resultType="egovMap">
		SELECT
		SRV_CODY_ID CODE_ID
		,MEM_CODE||'-'||NAME CODE_NAME
		FROM SAL0090D A ,
		SAL0001D B , ORG0001D C
		WHERE A.SRV_SO_ID = B.SALES_ORD_ID
		AND
		A.SRV_CODY_ID = C.MEM_ID
		AND B.SALES_ORD_NO =#{SRV_SO_ID}
		ORDER BY
		MEM_CODE ASC
	</select>


	<select id="selectSrvConfiguration" parameterType="Map"
		resultType="egovMap">
		SELECT Extent1.RESULT_ID RESULT_ID ,
		Extent1.NO NO ,
		Extent1.TYPE_ID
		TYPE_ID ,
		Extent1.SCHDUL_ID SCHDUL_ID ,
		Extent1.SALES_ORD_ID
		SALES_ORD_ID ,
		Extent1.CODY_ID CODY_ID ,
		Extent1.SETL_DT SETL_DT ,
		Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID ,
		Extent1.FAIL_RESN_ID
		FAIL_RESN_ID ,
		Extent1.REN_COLCT_ID REN_COLCT_ID ,
		Extent1.WH_ID WH_ID ,
		Extent1.RESULT_REM RESULT_REM ,
		Extent1.RESULT_CRT_DT RESULT_CRT_DT ,
		Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID ,
		Extent1.RESULT_UPD_DT
		RESULT_UPD_DT ,
		Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID ,
		Extent1.RESULT_IS_SYNC RESULT_IS_SYNC ,
		Extent1.RESULT_IS_EDIT
		RESULT_IS_EDIT ,
		Extent1.RESULT_STOCK_USE RESULT_STOCK_USE ,
		Extent1.RESULT_IS_CURR RESULT_IS_CURR ,
		Extent1.RESULT_MTCH_ID
		RESULT_MTCH_ID ,
		Extent1.RESULT_IS_ADJ RESULT_IS_ADJ ,
		Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT ,
		Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
		FROM SVC0006D Extent1
    <![CDATA[ WHERE Extent1.SCHDUL_ID = #{hidschdulId}
                AND ROWNUM <= 1 ]]>
	</select>

	<select id="selectDetailList" parameterType="Map" resultType="egovMap">
		SELECT Extent1.RESULT_ID RESULT_ID ,
		Extent1.NO NO ,
		Extent1.TYPE_ID
		TYPE_ID ,
		Extent1.SCHDUL_ID SCHDUL_ID ,
		Extent1.SALES_ORD_ID
		SALES_ORD_ID ,
		Extent1.CODY_ID CODY_ID ,
		Extent1.SETL_DT SETL_DT ,
		Extent1.RESULT_STUS_CODE_ID RESULT_STUS_CODE_ID ,
		Extent1.FAIL_RESN_ID
		FAIL_RESN_ID ,
		Extent1.REN_COLCT_ID REN_COLCT_ID ,
		Extent1.WH_ID WH_ID ,
		Extent1.RESULT_REM RESULT_REM ,
		Extent1.RESULT_CRT_DT RESULT_CRT_DT ,
		Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID ,
		Extent1.RESULT_UPD_DT
		RESULT_UPD_DT ,
		Extent1.RESULT_UPD_USER_ID RESULT_UPD_USER_ID ,
		Extent1.RESULT_IS_SYNC RESULT_IS_SYNC ,
		Extent1.RESULT_IS_EDIT
		RESULT_IS_EDIT ,
		Extent1.RESULT_STOCK_USE RESULT_STOCK_USE ,
		Extent1.RESULT_IS_CURR RESULT_IS_CURR ,
		Extent1.RESULT_MTCH_ID
		RESULT_MTCH_ID ,
		Extent1.RESULT_IS_ADJ RESULT_IS_ADJ ,
		Extent1.RESULT_ENTRY_POINT RESULT_ENTRY_POINT ,
		Extent1.RESULT_MOBILE_ID RESULT_MOBILE_ID
		FROM SVC0006D Extent1
                            <![CDATA[    WHERE  Extent1.SCHDUL_ID = #{salesOrderId} AND ROWNUM <= 1 ]]>
	</select>

	<insert id="insertHsResultD" parameterType="Map">
        INSERT INTO SVC0007D
        (BS_RESULT_ITM_ID
        , BS_RESULT_ID
        , BS_RESULT_PART_ID
        ,
        BS_RESULT_PART_DESC
        , BS_RESULT_PART_QTY
        , BS_RESULT_REM
        ,
        BS_RESULT_CRT_DT
        , BS_RESULT_CRT_USER_ID
        , BS_RESULT_FILTER_CLM
        ,
        SERIAL_NO
        ,FILTER_BARCD_SERIAL_NO
        , FILTER_SRL_UNMATCH_RSN
        ,OLD_FILTER_BARCD_SERIAL_NO
        ) VALUES ( SVC0007D_BS_RESULT_ITM_ID_SEQ.nextval
        ,
        #{bsResultId}
        , #{bsResultPartId}
        , #{bsResultPartDesc}
        ,
        nvl(#{bsResultPartQty},1)
        , #{bsResultRem}
        , sysdate
        ,
        #{bsResultCrtUserId}
        , #{bsResultFilterClm}
        , nvl(#{serialNo}, '')
        ,nvl(#{serialNo}, '')
        ,nvl(trim(#{filterSerialUnmatchReason}), 0)
        ,nvl(#{oldSerialNo}, '')
        )
    </insert>

	<select id="selectHsViewBasicInfo" parameterType="Map"
		resultType="egovMap">

		SELECT Limit1.SCHDUL_ID SCHDUL_ID ,
		Limit1.NO NO ,
		Limit1.MONTH MONTH ,
		Limit1.YEAR YEAR ,
		Limit1.MONTH || '/' || Limit1.YEAR monthy,
		Limit1.STUS_CODE_ID STUS_CODE_ID ,
		Limit1.CODE CODE ,
		Limit1.SALES_ORD_NO SALES_ORD_NO ,
		Limit1.CODE1 CODE1 ,
		Limit1.SALES_ORD_ID SALES_ORD_ID ,
		Limit1.CODE_NAME CODE_NAME ,
		Limit1.SRV_REM SRV_REM ,
		Limit1.SRV_BS_WEEK SRV_BS_WEEK ,
		CASE
		WHEN (
		Limit1.RESULT_ID IS NOT NULL ) THEN Limit1.NO1
		ELSE ''
		END C1 ,
		CASE
		WHEN
		( Limit1.RESULT_ID IS NOT NULL ) THEN Limit1.RESULT_ID
		ELSE 0
		END C2 ,
		Limit1.NAME NAME ,
		Limit1.NRIC NRIC ,
		Limit1.STK_CODE STK_CODE ,
		Limit1.STK_DESC STK_DESC ,
		Limit1.STK_ID STK_ID ,
		Limit1.CODY_ID
		CODY_ID,
		Limit1.fail_resn_id fail_resn_id ,
		Limit1.fail_resn_id
		fail_resn_id ,
		Limit1.ren_colct_id ren_colct_id ,
		Limit1.result_rem
		result_rem ,
		to_char (Limit1.setl_dt,'DD/MM/YYYY') AS setl_dt,
		Limit1.prev_svc_area prev_svc_area,
		Limit1.next_svc_area next_svc_area,
		Limit1.distance distance,
		Limit1.CANC_REQ_NO,
		Limit1.INSTCT,
		Limit1.HS_CHKLIST HS_CHKLIST
		FROM ( SELECT Extent1.SCHDUL_ID SCHDUL_ID
		,
		Extent1.NO NO ,
		Extent1.MONTH MONTH ,
		Extent1.YEAR YEAR ,
		Extent1.CODY_ID CODY_ID ,
		Extent1.STUS_CODE_ID STUS_CODE_ID ,
		Extent2.CODE_NAME CODE_NAME ,
		Extent3.CODE CODE ,
		Extent4.SALES_ORD_ID
		SALES_ORD_ID ,
		Extent4.SALES_ORD_NO SALES_ORD_NO ,
		Extent6.STK_ID STK_ID
		,
		Extent6.STK_CODE STK_CODE ,
		Extent6.STK_DESC STK_DESC ,
		Extent7.NAME
		NAME ,
		Extent7.NRIC NRIC ,
		Extent8.SRV_REM SRV_REM ,
		Extent8.SRV_BS_WEEK
		SRV_BS_WEEK ,
		Extent9.CODE CODE1 ,
		Extent11.RESULT_ID RESULT_ID ,
		Extent11.NO NO1 ,
		extent11.fail_resn_id fail_resn_id ,
		extent11.ren_colct_id ren_colct_id ,
		extent11.result_rem result_rem ,
		extent11.setl_dt setl_dt,
		Extent1.prev_svc_area prev_svc_area,
		Extent1.next_svc_area next_svc_area,
		Extent1.distance distance,
		Extent1.CANC_REQ_NO,
		<!-- Extent10.INSTCT -->
		<!-- [19-09-2018] GET INSTUCTION FROM SAL0090D RATHER THAN FROM SAL0045D -->
		Extent8.SRV_REM AS INSTCT,
		Extent11.HS_CHKLIST HS_CHKLIST
		FROM SVC0008D
		Extent1
		JOIN SYS0013M Extent2 ON Extent1.TYPE_ID = Extent2.CODE_ID
		JOIN
		SYS0038M Extent3 ON Extent1.STUS_CODE_ID = Extent3.STUS_CODE_ID
		JOIN
		SAL0001D Extent4 ON Extent1.SALES_ORD_ID = Extent4.SALES_ORD_ID
		JOIN
		SAL0002D Extent5 ON Extent4.SALES_ORD_ID = Extent5.SALES_ORD_ID
		JOIN
		SYS0026M Extent6 ON Extent5.ITM_STK_ID = Extent6.STK_ID
		JOIN SAL0029D
		Extent7 ON Extent4.CUST_ID = Extent7.CUST_ID
		JOIN SAL0090D Extent8 ON (
		Extent4.SALES_ORD_ID = Extent8.SRV_SO_ID )
		AND ( 1 =
		Extent8.SRV_STUS_ID )
		JOIN SYS0013M Extent9 ON Extent4.APP_TYPE_ID =
		Extent9.CODE_ID
		JOIN SAL0045D Extent10 ON Extent4.SALES_ORD_ID =
		Extent10.SALES_ORD_ID
		LEFT JOIN SVC0006D Extent11 ON (
		Extent1.SCHDUL_ID =
		Extent11.SCHDUL_ID )
		AND ( 1 =
		Extent11.RESULT_IS_CURR )
		JOIN SAL0023D B ON B.CUST_ADD_ID =
		Extent10.ADD_ID
		<!-- AND Extent4.CUST_ID = B.CUST_ID -->
		LEFT JOIN SYS0064M C ON C.AREA_ID = B.AREA_ID
		WHERE Extent1.SCHDUL_ID =
		#{schdulId}
                                   <![CDATA[            AND ROWNUM <= 1 ) Limit1 ]]>

	</select>





	<select id="selectSettleInfo" parameterType="Map" resultType="egovMap">
          <![CDATA[
                        SELECT *
                              FROM ( SELECT Project1.ORD_ID ORD_ID  ,
                                            Project1.ORD_NO ORD_NO  ,
                                            Project1.APP_TYPE_CODE APP_TYPE_CODE  ,
                                            Project1.STOCK_CODE STOCK_CODE  ,
                                            Project1.STOCK_DESC STOCK_DESC  ,
                                            Project1.CONFIG_BS_GEN CONFIG_BS_GEN  ,
                                            Project1.SRV_MEM_FREQ SRV_MEM_FREQ  ,
                                            Project1.C1 C1  ,
                                            Project1.C2 C2  ,
                                            Project1.C3 C3  ,
                                            Project1.C4 C4  ,
                                            Project1.CONFIG_BS_REM CONFIG_BS_REM  ,
                                            Project1.CONFIG_SETT_AS CONFIG_SETT_AS  ,
                                            Project1.CONFIG_SETT_BS CONFIG_SETT_BS  ,
                                            Project1.CONFIG_SETT_INS CONFIG_SETT_INS  ,
                                            Project1.CONFIG_BS_WEEK CONFIG_BS_WEEK  ,
                                            Project1.CUST_NAME CUST_NAME  ,
                                            Project1.CUST_NRIC CUST_NRIC
                              FROM ( SELECT Extent1.ORD_ID ORD_ID  ,
                                            Extent1.ORD_NO ORD_NO  ,
                                            Extent1.APP_TYPE_CODE APP_TYPE_CODE  ,
                                            Extent1.STOCK_CODE STOCK_CODE  ,
                                            Extent1.STOCK_DESC STOCK_DESC  ,
                                            Extent1.CUST_NAME CUST_NAME  ,
                                            Extent1.CUST_NRIC CUST_NRIC  ,
                                            CASE
                                                 WHEN ( Extent3.MEM_ID IS NOT NULL ) THEN Extent3.MEM_ID
                                            ELSE 0
                                               END C1  ,
                                            CASE
                                                 WHEN ( Extent3.MEM_ID IS NOT NULL ) THEN Extent3.MEM_CODE
                                            ELSE ''
                                               END C2  ,
                                            CASE
                                                 WHEN ( Extent3.MEM_ID IS NOT NULL ) THEN Extent3.NAME
                                            ELSE ''
                                               END C3  ,
                                            Extent4.SETL_DT C4  ,
                                            Extent2.CONFIG_SETT_INS CONFIG_SETT_INS  ,
                                            Extent2.CONFIG_SETT_BS CONFIG_SETT_BS  ,
                                            Extent2.CONFIG_SETT_AS CONFIG_SETT_AS  ,
                                            Extent2.CONFIG_BS_GEN CONFIG_BS_GEN  ,
                                            Extent2.CONFIG_BS_WEEK CONFIG_BS_WEEK  ,
                                            Extent2.CONFIG_BS_REM CONFIG_BS_REM  ,
                                            Extent2.SRV_MEM_FREQ SRV_MEM_FREQ
                                     FROM ( SELECT vOrderBasicInfo.ORD_ID ORD_ID  ,
                                                   vOrderBasicInfo.ORD_NO ORD_NO  ,
                                                   vOrderBasicInfo.RENTAL_STUS RENTAL_STUS  ,
                                                   vOrderBasicInfo.ORD_STUS_ID ORD_STUS_ID  ,
                                                   vOrderBasicInfo.ORD_STUS_CODE ORD_STUS_CODE  ,
                                                   vOrderBasicInfo.ORD_STUS_NAME ORD_STUS_NAME  ,
                                                   vOrderBasicInfo.ORD_DT ORD_DT  ,
                                                   vOrderBasicInfo.INSTLMT_PRIOD INSTLMT_PRIOD  ,
                                                   vOrderBasicInfo.ORD_AMT ORD_AMT  ,
                                                   vOrderBasicInfo.ORD_MTH_RENTAL ORD_MTH_RENTAL  ,
                                                   vOrderBasicInfo.ORD_PV ORD_PV  ,
                                                   vOrderBasicInfo.ORD_PV_MONTH ORD_PV_MONTH  ,
                                                   vOrderBasicInfo.ORD_PV_YEAR ORD_PV_YEAR  ,
                                                   vOrderBasicInfo.ORD_REF_NO ORD_REF_NO  ,
                                                   vOrderBasicInfo.ORD_PO_NO ORD_PO_NO  ,
                                                   vOrderBasicInfo.ORD_DEPT_CODE ORD_DEPT_CODE  ,
                                                   vOrderBasicInfo.ORD_GRP_CODE ORD_GRP_CODE  ,
                                                   vOrderBasicInfo.ORD_ORG_CODE ORD_ORG_CODE  ,
                                                   vOrderBasicInfo.ORD_CRT_USER_ID ORD_CRT_USER_ID  ,
                                                   vOrderBasicInfo.ORD_CRT_DT ORD_CRT_DT  ,
                                                   vOrderBasicInfo.APP_TYPE_ID APP_TYPE_ID  ,
                                                   vOrderBasicInfo.APP_TYPE_CODE APP_TYPE_CODE  ,
                                                   vOrderBasicInfo.APP_TYPE_DESC APP_TYPE_DESC  ,
                                                   vOrderBasicInfo.STOCK_ID STOCK_ID  ,
                                                   vOrderBasicInfo.STOCK_CODE STOCK_CODE  ,
                                                   vOrderBasicInfo.STOCK_DESC STOCK_DESC  ,
                                                   vOrderBasicInfo.CUST_ID CUST_ID  ,
                                                   vOrderBasicInfo.CUST_TYPE CUST_TYPE  ,
                                                   vOrderBasicInfo.CUST_NAME CUST_NAME  ,
                                                   vOrderBasicInfo.CUST_NRIC CUST_NRIC  ,
                                                   vOrderBasicInfo.CUST_DOB CUST_DOB  ,
                                                   vOrderBasicInfo.CUST_NATION CUST_NATION  ,
                                                   vOrderBasicInfo.CUST_GENDER CUST_GENDER  ,
                                                   vOrderBasicInfo.CUST_RACE CUST_RACE  ,
                                                   vOrderBasicInfo.CUST_EMAIL CUST_EMAIL  ,
                                                   vOrderBasicInfo.CUST_VA_NO CUST_VA_NO  ,
                                                   vOrderBasicInfo.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR  ,
                                                   vOrderBasicInfo.CUST_VISA_EXPR CUST_VISA_EXPR  ,
                                                   vOrderBasicInfo.ORD_PROMO_ID ORD_PROMO_ID  ,
                                                   vOrderBasicInfo.ORD_PROMO_CODE ORD_PROMO_CODE  ,
                                                   vOrderBasicInfo.ORD_PROMO_DESC ORD_PROMO_DESC  ,
                                                   vOrderBasicInfo.ORD_MEM_ID ORD_MEM_ID  ,
                                                   vOrderBasicInfo.ORD_MEM_CODE ORD_MEM_CODE  ,
                                                   vOrderBasicInfo.ORD_MEM_NAME ORD_MEM_NAME  ,
                                                   vOrderBasicInfo.ORD_MEM_NRIC ORD_MEM_NRIC  ,
                                                   vOrderBasicInfo.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID  ,
                                                   vOrderBasicInfo.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE  ,
                                                   vOrderBasicInfo.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME  ,
                                                   vOrderBasicInfo.COOL_OFF_PRIOD COOL_OFF_PRIOD  ,
                                                   vOrderBasicInfo.KEYIN_BRNCH_ID KEYIN_BRNCH_ID  ,
                                                   vOrderBasicInfo.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE  ,
                                                   vOrderBasicInfo.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME  ,
                                                   vOrderBasicInfo.ORD_REM ORD_REM  ,
                                                   vOrderBasicInfo.RENT_CHK_ID RENT_CHK_ID  ,
                                                   vOrderBasicInfo.ORD_HM_ID ORD_HM_ID  ,
                                                   vOrderBasicInfo.ORD_SM_ID ORD_SM_ID  ,
                                                   vOrderBasicInfo.ORD_GM_ID ORD_GM_ID  ,
                                                   vOrderBasicInfo.ORD_ADDR_ID ORD_ADDR_ID  ,
                                                   vOrderBasicInfo.ORD_CNTC_ID ORD_CNTC_ID  ,
                                                   vOrderBasicInfo.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO  ,
                                                   vOrderBasicInfo.UPD_DT UPD_DT  ,
                                                   vOrderBasicInfo.UPD_USER_ID UPD_USER_ID  ,
                                                   vOrderBasicInfo.JOM_PAY_REF JOM_PAY_REF  ,
                                                   vOrderBasicInfo.STK_CTGRY_ID STK_CTGRY_ID  ,
                                                   vOrderBasicInfo.STK_CTGRY_NAME STK_CTGRY_NAME  ,
                                                   vOrderBasicInfo.CUST_TYPE_ID CUST_TYPE_ID  ,
                                                   vOrderBasicInfo.CUST_BILL_ID CUST_BILL_ID  ,
                                                   vOrderBasicInfo.OBLIGT_YEAR OBLIGT_YEAR
                                            FROM SAL1006V vOrderBasicInfo ) Extent1
                                            LEFT JOIN ( SELECT vOrderSrvMemConfigInfo.ORD_ID ORD_ID  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_ID CONFIG_ID  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_SETT_INS CONFIG_SETT_INS  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_SETT_BS CONFIG_SETT_BS  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_SETT_AS CONFIG_SETT_AS  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_BS_GEN CONFIG_BS_GEN  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_BS_MEM_ID CONFIG_BS_MEM_ID  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_BS_WEEK CONFIG_BS_WEEK  ,
                                                               vOrderSrvMemConfigInfo.CONFIG_BS_REM CONFIG_BS_REM  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_ID SRV_MEM_ID  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_NO SRV_MEM_NO  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_BILL_NO SRV_MEM_BILL_NO  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_PAC_ID SRV_MEM_PAC_ID  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_PAC_CODE SRV_MEM_PAC_CODE  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_PAC_NAME SRV_MEM_PAC_NAME  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_START_DT SRV_MEM_START_DT  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_EXPR_DT SRV_MEM_EXPR_DT  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_FREQ SRV_MEM_FREQ  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_DUR SRV_MEM_DUR  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_SALESMAN_CODE SRV_MEM_SALESMAN_CODE  ,
                                                               vOrderSrvMemConfigInfo.SRV_MEM_SALESMAN_NAME SRV_MEM_SALESMAN_NAME  ,
                                                               vOrderSrvMemConfigInfo.LAST_SRV_MEM_ID LAST_SRV_MEM_ID  ,
                                                               vOrderSrvMemConfigInfo.LAST_SRV_MEM_START_DATE LAST_SRV_MEM_START_DATE  ,
                                                               vOrderSrvMemConfigInfo.LAST_SRV_MEM_EXPR_DATE LAST_SRV_MEM_EXPR_DATE
                                                        FROM SAL1014V vOrderSrvMemConfigInfo ) Extent2   ON Extent1.ORD_ID = Extent2.ORD_ID
                                            LEFT JOIN ORG0001D Extent3   ON Extent2.CONFIG_BS_MEM_ID = Extent3.MEM_ID
                                            LEFT JOIN SVC0006D Extent4   ON ( Extent1.ORD_ID = Extent4.SALES_ORD_ID )
                                            AND ( 4 = Extent4.RESULT_STUS_CODE_ID )
                                      WHERE  Extent1.ORD_ID = #{salesOrdId} ) Project1
                              ORDER BY Project1.C4 DESC )
                              WHERE ROWNUM <= 1
                        ]]>
	</select>




	<select id="selectHistoryHSResult" parameterType="Map"
		resultType="egovMap">
                   <![CDATA[


                   SELECT Distinct1.C1 C1  ,
       Distinct1.RESULT_ID RESULT_ID  ,
       Distinct1.NO NO  ,
       Distinct1.RESULT_IS_CURR RESULT_IS_CURR  ,
       Distinct1.CODE CODE  ,
       Distinct1.MEM_CODE MEM_CODE  ,
       Distinct1.SETL_DT SETL_DT  ,
       Distinct1.RESULT_STOCK_USE RESULT_STOCK_USE  ,
       Distinct1.RESULT_CRT_DT RESULT_CRT_DT  ,
       Distinct1.USER_NAME USER_NAME
  FROM ( SELECT DISTINCT Filter1.RESULT_ID RESULT_ID  ,
                         Filter1.NO NO  ,
                         Filter1.SETL_DT SETL_DT  ,
                         Filter1.RESULT_CRT_DT RESULT_CRT_DT  ,
                         decode(Filter1.RESULT_STOCK_USE,'1','O','X') RESULT_STOCK_USE  ,
                                             decode(Filter1.RESULT_IS_CURR,'1','Current',Filter1.RESULT_IS_CURR)  RESULT_IS_CURR  ,
                         Filter1.CODE CODE  ,
                         1 C1  ,
                         Filter1.MEM_CODE MEM_CODE  ,
                         Extent5.MEM_CODE USER_NAME
         FROM ( SELECT Extent1.RESULT_ID RESULT_ID  ,
                       Extent1.NO NO  ,
                       Extent1.SCHDUL_ID SCHDUL_ID  ,
                       Extent1.SETL_DT SETL_DT  ,
                       Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                       Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
                       Extent1.RESULT_STOCK_USE RESULT_STOCK_USE  ,
                       Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                       Extent2.CODE CODE  ,
                       Extent3.MEM_CODE MEM_CODE
                FROM SVC0006D Extent1
                       JOIN SYS0038M Extent2   ON Extent1.RESULT_STUS_CODE_ID = Extent2.STUS_CODE_ID
                       LEFT JOIN ORG0001D Extent3   ON Extent1.CODY_ID = Extent3.MEM_ID
                 WHERE  8 <> Extent1.RESULT_STUS_CODE_ID
                  and Extent1.RESULT_IS_CURR = '1' ) Filter1
                LEFT JOIN ORG0001D Extent5   ON Filter1.RESULT_CRT_USER_ID = Extent5.MEM_ID
          WHERE  Filter1.SCHDUL_ID = #{selSchdulId} ) Distinct1



                                  ]]>

		<!-- SELECT Limit1.RESULT_ID RESULT_ID , Limit1.SALES_ORD_ID SALES_ORD_ID
			, Limit1.SALES_ORD_NO SALES_ORD_NO , Limit1.NO1 NO , Limit1.MONTH MONTH ,
			Limit1.YEAR YEAR , Limit1.NO NO1 , Limit1.STUS_CODE_ID STUS_CODE_ID , Limit1.CODE
			CODE , (Limit1.SETL_DT) C1 , Limit1.REN_COLCT_ID REN_COLCT_ID , Limit1.CODE1
			CODE1 , Limit1.RESN_DESC RESN_DESC , CASE WHEN ( Limit1.SRV_REM IS NOT NULL
			) THEN Limit1.SRV_REM ELSE '' END C2 , Limit1.CODY_ID CODY_ID , Limit1.MEM_CODE
			MEM_CODE , Limit1.NAME NAME , Limit1.FAIL_RESN_ID FAIL_RESN_ID , Limit1.CODE2
			CODE2 , Limit1.REASONDESC1 REASONDESC1 , Limit1.WH_LOC_CODE WH_LOC_CODE ,
			Limit1.WH_LOC_DESC WH_LOC_DESC , Limit1.RESULT_REM RESULT_REM , Limit1.USER_NAME
			USER_NAME , Limit1.RESULT_CRT_DT RESULT_CRT_DT , Limit1.RESULT_IS_CURR RESULT_IS_CURR
			FROM ( SELECT Extent1.RESULT_ID RESULT_ID , Extent1.NO NO , Extent1.SALES_ORD_ID
			SALES_ORD_ID , Extent1.CODY_ID CODY_ID , Extent1.SETL_DT SETL_DT , Extent1.FAIL_RESN_ID
			FAIL_RESN_ID , Extent1.REN_COLCT_ID REN_COLCT_ID , Extent1.RESULT_REM RESULT_REM
			, Extent1.RESULT_CRT_DT RESULT_CRT_DT , Extent1.RESULT_IS_CURR RESULT_IS_CURR
			, Extent2.NO NO1 , Extent2.MONTH MONTH , Extent2.YEAR YEAR , Extent3.SALES_ORD_NO
			SALES_ORD_NO , Extent4.SRV_REM SRV_REM , Extent5.STUS_CODE_ID STUS_CODE_ID
			, Extent5.CODE CODE , Extent6.CODE CODE1 , Extent6.RESN_DESC RESN_DESC ,
			Extent7.MEM_CODE MEM_CODE , Extent7.NAME NAME , Extent8.CODE CODE2 , Extent8.RESN_DESC
			REASONDESC1 , Extent9.WH_LOC_CODE WH_LOC_CODE , Extent9.WH_LOC_DESC WH_LOC_DESC
			, Extent10.USER_NAME USER_NAME FROM SVC0006D Extent1 JOIN SVC0008D Extent2
			ON Extent2.SCHDUL_ID = Extent1.SCHDUL_ID JOIN SAL0001D Extent3 ON Extent3.SALES_ORD_ID
			= Extent2.SALES_ORD_ID JOIN SAL0090D Extent4 ON ( Extent4.SRV_SO_ID = Extent3.SALES_ORD_ID
			) AND ( 1 = Extent4.SRV_STUS_ID ) JOIN SYS0038M Extent5 ON Extent5.STUS_CODE_ID
			= Extent1.RESULT_STUS_CODE_ID LEFT JOIN SYS0032M Extent6 ON Extent6.RESN_ID
			= Extent1.REN_COLCT_ID LEFT JOIN ORG0001D Extent7 ON Extent7.MEM_ID = Extent1.CODY_ID
			LEFT JOIN SYS0032M Extent8 ON Extent8.RESN_ID = Extent1.FAIL_RESN_ID LEFT
			JOIN SYS0028M Extent9 ON Extent9.WH_LOC_ID = Extent1.WH_ID LEFT JOIN SYS0047M
			Extent10 ON Extent10.USER_ID = Extent1.RESULT_CRT_USER_ID WHERE Extent1.RESULT_ID
			= #{hrResultId} AND ROWNUM <= 1 ) Limit1 -->

	</select>









	<select id="selectFilterTransaction" parameterType="Map"
		resultType="egovMap">
                   <![CDATA[
                            SELECT Distinct1.C1 C1  ,
                                   Distinct1.NO NO  ,
                                   Distinct1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                   Distinct1.STK_ID STK_ID  ,
                                   Distinct1.STK_CODE STK_CODE  ,
                                   Distinct1.STK_DESC STK_DESC  ,
                                   Distinct1.BS_RESULT_FILTER_CLM BS_RESULT_FILTER_CLM  ,
                                   Distinct1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                   Distinct1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                   Distinct1.USER_NAME USER_NAME
                              FROM ( SELECT DISTINCT Filter1.NO NO  ,
                                                     Filter1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                                     Filter1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                                     Filter1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                                     decode(Filter1.BS_RESULT_FILTER_CLM,'0','X','O') BS_RESULT_FILTER_CLM,
                                                     Filter1.STK_ID STK_ID  ,
                                                     Filter1.STK_CODE STK_CODE  ,
                                                     Filter1.STK_DESC STK_DESC  ,
                                                     1 C1  ,
                                                     Extent4.USER_NAME USER_NAME
                                     FROM ( SELECT Extent1.NO NO  ,
                                                   Extent1.SCHDUL_ID SCHDUL_ID  ,
                                                   Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                                   Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
                                                   Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                                   Extent2.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                                   Extent2.BS_RESULT_FILTER_CLM BS_RESULT_FILTER_CLM  ,
                                                   Extent3.STK_ID STK_ID  ,
                                                   Extent3.STK_CODE STK_CODE  ,
                                                   Extent3.STK_DESC STK_DESC
                                            FROM SVC0006D Extent1
                                                   JOIN SVC0007D Extent2   ON Extent1.RESULT_ID = Extent2.BS_RESULT_ID
                                                   JOIN SYS0026M Extent3   ON Extent2.BS_RESULT_PART_ID = Extent3.STK_ID
                                             WHERE  ( 306 = Extent1.TYPE_ID )
                                                      AND ( 0 <> Extent2.BS_RESULT_PART_ID )
                                                      AND ( Extent2.BS_RESULT_PART_QTY > 0 ) ) Filter1
                                            LEFT JOIN SYS0047M Extent4   ON Filter1.RESULT_CRT_USER_ID = Extent4.USER_ID
                                      WHERE  Filter1.SCHDUL_ID = #{selSchdulId} ) Distinct1
                        ]]>
	</select>








	<select id="selectConfigBasicInfo" parameterType="Map"
		resultType="egovMap">
		SELECT *
		FROM ( SELECT Project1.ORD_ID ORD_ID ,
		Project1.ORD_NO ORD_NO ,
		Project1.APP_TYPE_CODE APP_TYPE_CODE ,
		Project1.STOCK_CODE STOCK_CODE ,
		Project1.STOCK_DESC STOCK_DESC ,
		Project1.STOCK_CODE || '-' ||
		Project1.STOCK_DESC as stock ,
		Project1.CONFIG_BS_GEN CONFIG_BS_GEN ,
		Project1.SRV_MEM_FREQ SRV_MEM_FREQ ,
		Project1.C1 C1 ,
		Project1.C2 C2 ,
		Project1.C3 C3 ,
		nvl(TO_CHAR(Project1.c4,'DD/MM/YYYY'),'-') C4 ,
		Project1.CONFIG_BS_REM CONFIG_BS_REM ,
		Project1.CONFIG_SETT_AS
		CONFIG_SETT_AS ,
		Project1.CONFIG_SETT_BS CONFIG_SETT_BS ,
		Project1.CONFIG_SETT_INS CONFIG_SETT_INS ,
		Project1.CONFIG_BS_WEEK
		CONFIG_BS_WEEK ,
		Project1.CUST_NAME CUST_NAME ,
		Project1.CUST_NRIC
		CUST_NRIC ,
		Project1.CONFIG_ID,
		Project1.CONFIG_BS_MEM_ID,
		Project1.FAUCET_EXCH
		FROM ( SELECT Extent1.ORD_ID ORD_ID ,
		Extent1.ORD_NO ORD_NO ,
		Extent1.APP_TYPE_CODE APP_TYPE_CODE ,
		Extent1.STOCK_CODE STOCK_CODE ,
		Extent1.STOCK_DESC STOCK_DESC ,
		Extent1.CUST_NAME CUST_NAME ,
		Extent1.CUST_NRIC CUST_NRIC ,
		CASE
		WHEN (
		Extent3.MEM_ID IS NOT NULL ) THEN Extent3.MEM_ID
		ELSE 0
		END C1 ,
		CASE
		WHEN ( Extent3.MEM_ID IS NOT NULL ) THEN Extent3.MEM_CODE
		ELSE ''
		END C2
		,
		CASE
		WHEN ( Extent3.MEM_ID IS NOT NULL ) THEN Extent3.NAME
		ELSE ''
		END
		C3 ,
		Extent4.SETL_DT C4,
		Extent2.CONFIG_SETT_INS CONFIG_SETT_INS ,
		Extent2.CONFIG_SETT_BS CONFIG_SETT_BS ,
		Extent2.CONFIG_SETT_AS
		CONFIG_SETT_AS ,
		Extent2.CONFIG_BS_GEN CONFIG_BS_GEN ,
		Extent2.CONFIG_BS_WEEK CONFIG_BS_WEEK ,
		Extent2.CONFIG_BS_REM
		CONFIG_BS_REM ,
		Extent2.SRV_MEM_FREQ SRV_MEM_FREQ ,
		Extent2.CONFIG_ID,
		Extent2.CONFIG_BS_MEM_ID,
		Extent2.FAUCET_EXCH
		FROM ( SELECT
		vOrderBasicInfo.ORD_ID ORD_ID ,
		vOrderBasicInfo.ORD_NO ORD_NO ,
		vOrderBasicInfo.RENTAL_STUS RENTAL_STUS ,
		vOrderBasicInfo.ORD_STUS_ID
		ORD_STUS_ID ,
		vOrderBasicInfo.ORD_STUS_CODE ORD_STUS_CODE ,
		vOrderBasicInfo.ORD_STUS_NAME ORD_STUS_NAME ,
		vOrderBasicInfo.ORD_DT
		ORD_DT ,
		vOrderBasicInfo.INSTLMT_PRIOD INSTLMT_PRIOD ,
		vOrderBasicInfo.ORD_AMT ORD_AMT ,
		vOrderBasicInfo.ORD_MTH_RENTAL
		ORD_MTH_RENTAL ,
		vOrderBasicInfo.ORD_PV ORD_PV ,
		vOrderBasicInfo.ORD_PV_MONTH ORD_PV_MONTH ,
		vOrderBasicInfo.ORD_PV_YEAR ORD_PV_YEAR ,
		vOrderBasicInfo.ORD_REF_NO
		ORD_REF_NO ,
		vOrderBasicInfo.ORD_PO_NO ORD_PO_NO ,
		vOrderBasicInfo.ORD_DEPT_CODE ORD_DEPT_CODE ,
		vOrderBasicInfo.ORD_GRP_CODE ORD_GRP_CODE ,
		vOrderBasicInfo.ORD_ORG_CODE ORD_ORG_CODE ,
		vOrderBasicInfo.ORD_CRT_USER_ID ORD_CRT_USER_ID ,
		vOrderBasicInfo.ORD_CRT_DT ORD_CRT_DT ,
		vOrderBasicInfo.APP_TYPE_ID
		APP_TYPE_ID ,
		vOrderBasicInfo.APP_TYPE_CODE APP_TYPE_CODE ,
		vOrderBasicInfo.APP_TYPE_DESC APP_TYPE_DESC ,
		vOrderBasicInfo.STOCK_ID
		STOCK_ID ,
		vOrderBasicInfo.STOCK_CODE STOCK_CODE ,
		vOrderBasicInfo.STOCK_DESC STOCK_DESC ,
		vOrderBasicInfo.CUST_ID CUST_ID
		,
		vOrderBasicInfo.CUST_TYPE CUST_TYPE ,
		vOrderBasicInfo.CUST_NAME
		CUST_NAME ,
		vOrderBasicInfo.CUST_NRIC CUST_NRIC ,
		vOrderBasicInfo.CUST_DOB CUST_DOB ,
		vOrderBasicInfo.CUST_NATION
		CUST_NATION ,
		vOrderBasicInfo.CUST_GENDER CUST_GENDER ,
		vOrderBasicInfo.CUST_RACE CUST_RACE ,
		vOrderBasicInfo.CUST_EMAIL
		CUST_EMAIL ,
		vOrderBasicInfo.CUST_VA_NO CUST_VA_NO ,
		vOrderBasicInfo.CUST_PASSPORT_EXPR CUST_PASSPORT_EXPR ,
		vOrderBasicInfo.CUST_VISA_EXPR CUST_VISA_EXPR ,
		vOrderBasicInfo.ORD_PROMO_ID ORD_PROMO_ID ,
		vOrderBasicInfo.ORD_PROMO_CODE ORD_PROMO_CODE ,
		vOrderBasicInfo.ORD_PROMO_DESC ORD_PROMO_DESC ,
		vOrderBasicInfo.ORD_MEM_ID ORD_MEM_ID ,
		vOrderBasicInfo.ORD_MEM_CODE
		ORD_MEM_CODE ,
		vOrderBasicInfo.ORD_MEM_NAME ORD_MEM_NAME ,
		vOrderBasicInfo.ORD_MEM_NRIC ORD_MEM_NRIC ,
		vOrderBasicInfo.ORD_MEM_TYPE_ID ORD_MEM_TYPE_ID ,
		vOrderBasicInfo.ORD_MEM_TYPE_CODE ORD_MEM_TYPE_CODE ,
		vOrderBasicInfo.ORD_MEM_TYPE_NAME ORD_MEM_TYPE_NAME ,
		vOrderBasicInfo.COOL_OFF_PRIOD COOL_OFF_PRIOD ,
		vOrderBasicInfo.KEYIN_BRNCH_ID KEYIN_BRNCH_ID ,
		vOrderBasicInfo.KEYIN_BRNCH_CODE KEYIN_BRNCH_CODE ,
		vOrderBasicInfo.KEYIN_BRNCH_NAME KEYIN_BRNCH_NAME ,
		vOrderBasicInfo.ORD_REM ORD_REM ,
		vOrderBasicInfo.RENT_CHK_ID
		RENT_CHK_ID ,
		vOrderBasicInfo.ORD_HM_ID ORD_HM_ID ,
		vOrderBasicInfo.ORD_SM_ID ORD_SM_ID ,
		vOrderBasicInfo.ORD_GM_ID
		ORD_GM_ID ,
		vOrderBasicInfo.ORD_ADDR_ID ORD_ADDR_ID ,
		vOrderBasicInfo.ORD_CNTC_ID ORD_CNTC_ID ,
		vOrderBasicInfo.ORD_PROMO_RELATED_NO ORD_PROMO_RELATED_NO ,
		vOrderBasicInfo.UPD_DT UPD_DT ,
		vOrderBasicInfo.UPD_USER_ID UPD_USER_ID
		,
		vOrderBasicInfo.JOM_PAY_REF JOM_PAY_REF ,
		vOrderBasicInfo.STK_CTGRY_ID STK_CTGRY_ID ,
		vOrderBasicInfo.STK_CTGRY_NAME STK_CTGRY_NAME ,
		vOrderBasicInfo.CUST_TYPE_ID CUST_TYPE_ID ,
		vOrderBasicInfo.CUST_BILL_ID CUST_BILL_ID ,
		vOrderBasicInfo.OBLIGT_YEAR OBLIGT_YEAR
		FROM SAL1006V vOrderBasicInfo )
		Extent1
		LEFT JOIN ( SELECT vOrderSrvMemConfigInfo.ORD_ID ORD_ID ,
		vOrderSrvMemConfigInfo.CONFIG_ID CONFIG_ID ,
		vOrderSrvMemConfigInfo.CONFIG_SETT_INS CONFIG_SETT_INS ,
		vOrderSrvMemConfigInfo.CONFIG_SETT_BS CONFIG_SETT_BS ,
		vOrderSrvMemConfigInfo.CONFIG_SETT_AS CONFIG_SETT_AS ,
		vOrderSrvMemConfigInfo.CONFIG_BS_GEN CONFIG_BS_GEN ,
		vOrderSrvMemConfigInfo.CONFIG_BS_MEM_ID CONFIG_BS_MEM_ID ,
		vOrderSrvMemConfigInfo.CONFIG_BS_WEEK CONFIG_BS_WEEK ,
		vOrderSrvMemConfigInfo.CONFIG_BS_REM CONFIG_BS_REM ,
		vOrderSrvMemConfigInfo.SRV_MEM_ID SRV_MEM_ID ,
		vOrderSrvMemConfigInfo.SRV_MEM_NO SRV_MEM_NO ,
		vOrderSrvMemConfigInfo.SRV_MEM_BILL_NO SRV_MEM_BILL_NO ,
		vOrderSrvMemConfigInfo.SRV_MEM_PAC_ID SRV_MEM_PAC_ID ,
		vOrderSrvMemConfigInfo.SRV_MEM_PAC_CODE SRV_MEM_PAC_CODE ,
		vOrderSrvMemConfigInfo.SRV_MEM_PAC_NAME SRV_MEM_PAC_NAME ,
		vOrderSrvMemConfigInfo.SRV_MEM_START_DT SRV_MEM_START_DT ,
		vOrderSrvMemConfigInfo.SRV_MEM_EXPR_DT SRV_MEM_EXPR_DT ,
		vOrderSrvMemConfigInfo.SRV_MEM_FREQ SRV_MEM_FREQ ,
		vOrderSrvMemConfigInfo.SRV_MEM_DUR SRV_MEM_DUR ,
		vOrderSrvMemConfigInfo.SRV_MEM_SALESMAN_CODE SRV_MEM_SALESMAN_CODE ,
		vOrderSrvMemConfigInfo.SRV_MEM_SALESMAN_NAME SRV_MEM_SALESMAN_NAME ,
		vOrderSrvMemConfigInfo.LAST_SRV_MEM_ID LAST_SRV_MEM_ID ,
		vOrderSrvMemConfigInfo.LAST_SRV_MEM_START_DATE LAST_SRV_MEM_START_DATE
		,
		vOrderSrvMemConfigInfo.LAST_SRV_MEM_EXPR_DATE LAST_SRV_MEM_EXPR_DATE,
		vOrderSrvMemConfigInfo.FAUCET_EXCH FAUCET_EXCH
		FROM SAL1014V
		vOrderSrvMemConfigInfo ) Extent2 ON Extent1.ORD_ID =
		Extent2.ORD_ID
		LEFT JOIN ORG0001D Extent3 ON Extent2.CONFIG_BS_MEM_ID =
		Extent3.MEM_ID
		LEFT JOIN SVC0006D Extent4 ON ( Extent1.ORD_ID =
		Extent4.SALES_ORD_ID
		)
		AND ( 4 = Extent4.RESULT_STUS_CODE_ID )
		WHERE
		Extent1.ORD_ID = #{salesOrdId} ) Project1
		ORDER BY Project1.C4 DESC )
                   <![CDATA[                              WHERE ROWNUM <= 1 ]]>
	</select>




	<update id="updateHsSVC0006D" parameterType="Map">

		UPDATE SVC0006D
		SET
		SETL_DT = to_date(#{lstHSDate}, 'DD/MM/YYYY')
		WHERE SALES_ORD_ID =
		#{salesOrderId}

	</update>



	<update id="updateHsConfigBasic" parameterType="Map">

		UPDATE SAL0090D
		SET SRV_CODY_ID = #{hscodyId},
		SRV_REM = #{remark},
		SRV_BS_WEEK = #{srvBsWeek},
		SRV_BS_GEN = #{availability},
		FAUCET_EXCH =
		#{faucetExch},
		<!-- Added By Chew Kah Kit -->
		SRV_UPD_USER_ID = #{SrvUpdateAt},
		SRV_UPD_DT = SYSDATE
		WHERE
		SRV_CONFIG_ID = #{srvConfigId}

	</update>




	<update id="updateHsconfigSetting" parameterType="Map">
		UPDATE SAL0089D
		SET SRV_SETT_STUS_ID = #{srvSettStusId}
		WHERE SRV_CONFIG_ID =
		#{configId}
		and SRV_SETT_TYPE_ID = #{srvSettTypeId}
	</update>





	<select id="selectConfigBasicInfoYn" parameterType="Map"
		resultType="egovMap">
		SELECT Extent1.SRV_CONFIG_ID SRV_CONFIG_ID ,
		Extent1.SRV_SO_ID
		SRV_SO_ID ,
		Extent1.SRV_CODY_ID SRV_CODY_ID ,
		Extent1.SRV_PREV_DT
		SRV_PREV_DT ,
		Extent1.SRV_BS_GEN SRV_BS_GEN ,
		Extent1.SRV_CRT_DT SRV_CRT_DT ,
		Extent1.SRV_CRT_USER_ID SRV_CRT_USER_ID
		,
		Extent1.SRV_UPD_DT SRV_UPD_DT ,
		Extent1.SRV_UPD_USER_ID
		SRV_UPD_USER_ID ,
		Extent1.SRV_STUS_ID SRV_STUS_ID ,
		Extent1.SRV_BS_WEEK
		SRV_BS_WEEK
		FROM SAL0090D Extent1
		WHERE Extent1.SRV_SO_ID =
		#{salesOrderId}
                         <![CDATA[              AND ( 1 = Extent1.SRV_STUS_ID ) AND ROWNUM <= 1 ]]>
	</select>



	<select id="selectConfigSettingYn" parameterType="Map"
		resultType="egovMap">
		SELECT Extent1.SRV_SETT_ID SRV_SETT_ID ,
		Extent1.SRV_CONFIG_ID
		SRV_CONFIG_ID ,
		Extent1.SRV_SETT_TYPE_ID SRV_SETT_TYPE_ID ,
		Extent1.SRV_SETT_STUS_ID SRV_SETT_STUS_ID ,
		Extent1.SRV_SETT_REM
		SRV_SETT_REM ,
		Extent1.SRV_SETT_CRT_DT SRV_SETT_CRT_DT ,
		Extent1.SRV_SETT_CRT_USER_ID SRV_SETT_CRT_USER_ID
		FROM SAL0089D Extent1
		WHERE ( Extent1.SRV_CONFIG_ID =#{configId} )
                            <![CDATA[             AND ( 281 = Extent1.SRV_SETT_TYPE_ID ) AND ROWNUM <= 1 ]]>
		union all
		SELECT Extent1.SRV_SETT_ID SRV_SETT_ID ,
		Extent1.SRV_CONFIG_ID SRV_CONFIG_ID ,
		Extent1.SRV_SETT_TYPE_ID
		SRV_SETT_TYPE_ID ,
		Extent1.SRV_SETT_STUS_ID SRV_SETT_STUS_ID ,
		Extent1.SRV_SETT_REM SRV_SETT_REM ,
		Extent1.SRV_SETT_CRT_DT
		SRV_SETT_CRT_DT ,
		Extent1.SRV_SETT_CRT_USER_ID SRV_SETT_CRT_USER_ID
		FROM SAL0089D Extent1
		WHERE ( Extent1.SRV_CONFIG_ID =#{configId} )
                                <![CDATA[            AND ( 280 = Extent1.SRV_SETT_TYPE_ID ) AND ROWNUM <= 1 ]]>
		union all
		SELECT Extent1.SRV_SETT_ID SRV_SETT_ID ,
		Extent1.SRV_CONFIG_ID SRV_CONFIG_ID ,
		Extent1.SRV_SETT_TYPE_ID
		SRV_SETT_TYPE_ID ,
		Extent1.SRV_SETT_STUS_ID SRV_SETT_STUS_ID ,
		Extent1.SRV_SETT_REM SRV_SETT_REM ,
		Extent1.SRV_SETT_CRT_DT
		SRV_SETT_CRT_DT ,
		Extent1.SRV_SETT_CRT_USER_ID SRV_SETT_CRT_USER_ID
		FROM SAL0089D Extent1
		WHERE ( Extent1.SRV_CONFIG_ID = #{configId} )
                      <![CDATA[         AND ( 279 = Extent1.SRV_SETT_TYPE_ID ) AND ROWNUM <= 1 ]]>

	</select>



	<select id="selectHSOrderView" parameterType="Map" resultType="egovMap">
		SELECT Extent1.ORD_ID ORD_ID ,
		Extent1.ORD_NO ORD_NO ,
		Extent1.ORD_STUS_CODE ORD_STUS_CODE ,
		Extent1.APP_TYPE_CODE
		APP_TYPE_CODE ,
		Extent1.STOCK_CODE STOCK_CODE ,
		Extent1.STOCK_DESC
		STOCK_DESC ,
		Extent1.CUST_NAME CUST_NAME ,
		Extent1.CUST_NRIC CUST_NRIC ,
		<!-- Extent2.INST_ADDR1 INST_ADDR1 , Extent2.INST_ADDR2 INST_ADDR2 , Extent2.INST_ADDR3
			INST_ADDR3 , Extent2.INST_CNTY INST_CNTY , -->
		Extent2.INST_STATE INST_STATE ,
		Extent2.INST_AREA INST_AREA ,
		<!-- Extent2.INST_POST_CODE INST_POST_CODE , -->
		Extent2.INST_CNT_NAME INST_CNT_NAME ,
		Extent2.INST_CNT_TEL_M
		INST_CNT_TEL_M ,
		Extent2.INST_CNT_TEL_O INST_CNT_TEL_O ,
		Extent2.INST_CNT_TEL_R INST_CNT_TEL_R ,
		Extent2.LAST_INSTALL_NO
		LAST_INSTALL_NO ,
		Extent2.LAST_INSTALL_CT_CODE LAST_INSTALL_CT_CODE ,
		Extent2.LAST_INSTALL_CT_NAME LAST_INSTALL_CT_NAME ,
		Extent2.LAST_INSTALL_DT LAST_INSTALL_DT ,
		Extent2.LAST_INSTALL_SIRIM_NO LAST_INSTALL_SIRIM_NO ,
		Extent2.LAST_INSTALL_SERIAL_NO LAST_INSTALL_SERIAL_NO ,
		Extent2.INSTCT
		INSTCT ,
		Extent4.STK_ID STK_ID ,
		Extent5.CODE_NAME CODE_NAME ,
		(Extent1.ORD_DT) C1 ,
		Extent2.LAST_INSTALL_DT C2 ,
		CASE
		WHEN ( NOT ( (
		Extent3.ORD_ID IS NULL )
		AND ( Extent3.CONFIG_SETT_INS IS NULL )
		AND (
		Extent3.CONFIG_SETT_BS IS NULL )
		AND ( Extent3.CONFIG_SETT_AS IS NULL )
		AND ( Extent3.CONFIG_BS_GEN IS NULL )
		AND ( Extent3.CONFIG_BS_MEM_ID IS
		NULL )
		AND ( Extent3.CONFIG_BS_WEEK IS NULL )
		AND (
		Extent3.CONFIG_BS_REM IS NULL )
		AND ( Extent3.SRV_MEM_ID IS NULL )
		AND (
		Extent3.SRV_MEM_NO IS NULL )
		AND ( Extent3.SRV_MEM_BILL_NO IS NULL )
		AND ( Extent3.SRV_MEM_PAC_ID IS NULL )
		AND ( Extent3.SRV_MEM_PAC_CODE
		IS NULL )
		AND ( Extent3.SRV_MEM_PAC_NAME IS NULL )
		AND (
		Extent3.SRV_MEM_FREQ IS NULL )
		AND ( Extent3.SRV_MEM_DUR IS NULL )
		AND (
		Extent3.SRV_MEM_SALESMAN_CODE IS NULL )
		AND (
		Extent3.SRV_MEM_SALESMAN_NAME IS NULL ) ) ) THEN Extent3.CONFIG_ID
		ELSE 0
		END C3 ,
		Extent3.SRV_MEM_PAC_NAME SRV_MEM_PAC_NAME ,
		Extent3.SRV_MEM_EXPR_DT SRV_MEM_EXPR_DT
		FROM ( SELECT *
		FROM SAL1006V
		vOrderBasicInfo ) Extent1
		JOIN ( SELECT *
		FROM SAL1010V
		vOrderInstallationInfo ) Extent2 ON Extent1.ORD_ID =
		Extent2.ORD_ID
		LEFT JOIN ( SELECT *
		FROM SAL1014V vOrderSrvMemConfigInfo ) Extent3 ON
		Extent1.ORD_ID =
		Extent3.ORD_ID
		JOIN SYS0026M Extent4 ON (
		Extent1.STOCK_CODE = Extent4.STK_CODE )
		OR ( ( Extent1.STOCK_CODE IS
		NULL )
		AND ( Extent4.STK_CODE IS NULL ) )
		JOIN SYS0013M Extent5 ON
		Extent4.STK_CTGRY_ID = Extent5.CODE_ID
                     <![CDATA[   WHERE  Extent1.ORD_ID = #{salesOrdId} AND ROWNUM <= 1 ]]>

	</select>




	<select id="selectHSAddFilterSetInfo" parameterType="Map"
		resultType="egovMap">
		SELECT
		e.stk_code,
		e.stk_id code_id,
		( e.stk_code
		|| '-'
		|| e.stk_desc )
		code_name
		FROM
		sal0002d a
		join sys0026m b on a.itm_stk_id = b.stk_id
		join
		log0043m c on b.stk_code = c.matrl_no
		join log0044d d on c.bom = d.bom
		join sys0026m e on d.bom_compnt = e.stk_code
		where E.STK_TYPE_ID = '62'
		AND A.SALES_ORD_ID = #{salesOrdId}
<![CDATA[      AND   TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD') <   TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND   TO_CHAR(D.VALID_TO_DT,'YYYYMMDD')   >   TO_CHAR(SYSDATE,'YYYYMMDD')
]]>
		union
		SELECT
		e.stk_code,
		e.stk_id code_id,
		( e.stk_code
		|| '-'
		|| e.stk_desc
		) code_name
		FROM
		sal0002d a
		join sys0026m b1 on a.itm_stk_id = b1.stk_id
		join sys0026m b on b.stk_id = b1.MASTER_STK_ID
		join log0043m c on
		b.stk_code = c.matrl_no
		join log0044d d on c.bom = d.bom
		join sys0026m e
		on d.bom_compnt = e.stk_code
		where E.STK_TYPE_ID = '62'
		AND
		A.SALES_ORD_ID = #{salesOrdId}
<![CDATA[      AND   TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD') <   TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND   TO_CHAR(D.VALID_TO_DT,'YYYYMMDD')   >   TO_CHAR(SYSDATE,'YYYYMMDD')
]]>
		<!-- SELECT E.STK_CODE, E.STK_ID CODE_ID, (E.STK_CODE || '-' || E.STK_DESC)
			CODE_NAME FROM SAL0002D A, SYS0026M B, LOG0043M C, LOG0044D D, SYS0026M E
			WHERE 1=1 AND A.ITM_STK_ID = B.STK_ID AND B.STK_CODE = C.MATRL_NO AND C.BOM
			= D.BOM AND D.BOM_COMPNT = E.STK_CODE AND E.STK_TYPE_ID = '62' AND A.SALES_ORD_ID
			= #{salesOrdId} <![CDATA[AND TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD') < TO_CHAR(SYSDATE,'YYYYMMDD')
			AND TO_CHAR(D.VALID_TO_DT,'YYYYMMDD') > TO_CHAR(SYSDATE,'YYYYMMDD') ]]> -->
	</select>



	<select id="addSrvFilterIdCnt" parameterType="Map" resultType="egovMap">

		SELECT count(*) cnt
		FROM SAL0090D Extent1
		JOIN SAL0087D Extent2 ON
		Extent1.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID
		WHERE ( Extent1.SRV_SO_ID
		= #{salesOrdId} )
		AND ( 1 = Extent1.SRV_STUS_ID )
		AND (
		Extent2.SRV_FILTER_STK_ID = #{filterCode} )
		AND ( 1 =
		Extent2.SRV_FILTER_STUS_ID )

	</select>




	<select id="getSrvConfigFilter_SAL0087D" parameterType="Map"
		resultType="egovMap">

		SELECT Extent1.SRV_FILTER_ID SRV_FILTER_ID ,
		Extent1.SRV_CONFIG_ID
		SRV_CONFIG_ID ,
		Extent1.SRV_FILTER_STK_ID SRV_FILTER_STK_ID ,
		Extent1.SRV_FILTER_PRIOD SRV_FILTER_PRIOD ,
		Extent1.SRV_FILTER_PRV_CHG_DT SRV_FILTER_PRV_CHG_DT ,
		Extent1.SRV_FILTER_STUS_ID SRV_FILTER_STUS_ID ,
		Extent1.SRV_FILTER_REM
		SRV_FILTER_REM ,
		Extent1.SRV_FILTER_CRT_DT SRV_FILTER_CRT_DT ,
		Extent1.SRV_FILTER_CRT_USER_ID SRV_FILTER_CRT_USER_ID ,
		Extent1.SRV_FILTER_UPD_DT SRV_FILTER_UPD_DT ,
		Extent1.SRV_FILTER_UPD_USER_ID SRV_FILTER_UPD_USER_ID ,
		Extent1.SRV_FILTER_EXPR_DT SRV_FILTER_EXPR_DT
		FROM SAL0087D Extent1
		LEFT JOIN SAL0090D A ON Extent1.SRV_CONFIG_ID = A.SRV_CONFIG_ID
		WHERE 1
		= 1
		AND A.SRV_SO_ID = #{salesOrdId}
		AND A.SRV_STUS_ID = 1
		AND
		Extent1.SRV_FILTER_STUS_ID = 1
                             <![CDATA[           AND ( Extent1.SRV_FILTER_STK_ID = #{filterCode} ) AND ROWNUM <= 1 ]]>

	</select>




	<insert id="saveChanges" parameterType="Map">
		INSERT INTO GBSLCVD.SAL0087D (
		SRV_FILTER_ID, SRV_CONFIG_ID,
		SRV_FILTER_STK_ID,
		SRV_FILTER_PRIOD, SRV_FILTER_PRV_CHG_DT,
		SRV_FILTER_STUS_ID,
		SRV_FILTER_REM, SRV_FILTER_CRT_DT,
		SRV_FILTER_CRT_USER_ID,
		SRV_FILTER_UPD_DT, SRV_FILTER_UPD_USER_ID
		<!-- , SRV_FILTER_EXPR_DT, SRV_FILTER_LAST_SERIAL, SRV_FILTER_PREV_SERIAL,
			PART_TYPE, FILTER_BARCD_CHK_Y_N, FILTER_BARCD_SERIAL_NO -->
		)
		VALUES ( SAL0087D_SRV_FILTER_ID_SEQ.nextval,
		#{SRV_CONFIG_ID},
		#{SRV_FILTER_STK_ID},
		#{SRV_FILTER_PRIOD},
		TO_DATE(#{SRV_FILTER_PRV_CHG_DT},'DD/MM/YYYY'),
		#{SRV_FILTER_STUS_ID},
		#{SRV_FILTER_REM},
		SYSDATE,
		#{SRV_FILTER_UPD_USER_ID},
		SYSDATE,
		#{SRV_FILTER_CRT_USER_ID}
		<!-- SRV_FILTER_EXPR_DT, SRV_FILTER_LAST_SERIAL , SRV_FILTER_PREV_SERIAL
			, PART_TYPE , FILTER_BARCD_CHK_Y_N , FILTER_BARCD_SERIAL_NO -->
		)
	</insert>

	<insert id="saveHsFilterInfoAdd" parameterType="Map">
		INSERT INTO SAL0087D (
		SRV_FILTER_ID,
		SRV_CONFIG_ID,
		SRV_FILTER_STK_ID,
		SRV_FILTER_PRIOD,
		SRV_FILTER_PRV_CHG_DT,
		SRV_FILTER_STUS_ID,
		SRV_FILTER_REM,
		SRV_FILTER_CRT_DT,
		SRV_FILTER_CRT_USER_ID,
		SRV_FILTER_UPD_DT,
		SRV_FILTER_UPD_USER_ID
		)
		VALUES (
		SAL0087D_SRV_FILTER_ID_SEQ.nextval,
		(SELECT SRV_CONFIG_ID FROM SAL0090D
		WHERE SRV_SO_ID = #{salesOrdId} AND
		SRV_STUS_ID = 1 ),
		#{filterCode},
		(
		SELECT D.LEAD_TM_OFFSET
		FROM
		SAL0002D A,
		SYS0026M B,
		LOG0043M C,
		LOG0044D
		D,
		SYS0026M E
		WHERE 1=1
		AND A.ITM_STK_ID = B.STK_ID
		AND B.STK_CODE =
		C.MATRL_NO
		AND C.BOM = D.BOM
		AND D.BOM_COMPNT = E.STK_CODE
		AND
		E.STK_TYPE_ID = '62'
		AND A.SALES_ORD_ID = #{salesOrdId}
		AND E.STK_ID =
		#{filterCode}
<![CDATA[                             AND   TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD') <   TO_CHAR(SYSDATE,'YYYYMMDD')
                                          AND   TO_CHAR(D.VALID_TO_DT,'YYYYMMDD')   >   TO_CHAR(SYSDATE,'YYYYMMDD') ]]>
		UNION
		SELECT D.LEAD_TM_OFFSET
		FROM
		SAL0002D A,
		sys0026m b1,
		sys0026m b,
		LOG0043M C,
		LOG0044D D,
		SYS0026M E
		WHERE 1=1
		AND A.ITM_STK_ID = B1.STK_ID
		AND b.stk_id = b1.MASTER_STK_ID
		AND B.STK_CODE = C.MATRL_NO
		AND C.BOM =
		D.BOM
		AND D.BOM_COMPNT = E.STK_CODE
		AND E.STK_TYPE_ID = '62'
		AND
		A.SALES_ORD_ID = #{salesOrdId}
		AND E.STK_ID = #{filterCode}
<![CDATA[                             AND   TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD') <   TO_CHAR(SYSDATE,'YYYYMMDD')
                                          AND   TO_CHAR(D.VALID_TO_DT,'YYYYMMDD')   >   TO_CHAR(SYSDATE,'YYYYMMDD')), ]]>
		TO_DATE(#{lastChangeDate},'DD/MM/YYYY'),
		'1',
		NVL(#{remark}, ''),
		SYSDATE,
		#{updator},
		SYSDATE,
		#{updator}
		)
		<!-- INSERT INTO SAL0087D ( SRV_FILTER_ID, SRV_CONFIG_ID, SRV_FILTER_STK_ID,
			SRV_FILTER_PRIOD, SRV_FILTER_PRV_CHG_DT, SRV_FILTER_STUS_ID, SRV_FILTER_REM,
			SRV_FILTER_CRT_DT, SRV_FILTER_CRT_USER_ID, SRV_FILTER_UPD_DT, SRV_FILTER_UPD_USER_ID
			) VALUES ( SAL0087D_SRV_FILTER_ID_SEQ.nextval, (SELECT SRV_CONFIG_ID FROM
			SAL0090D WHERE SRV_SO_ID = #{salesOrdId}), #{filterCode}, ( SELECT D.LEAD_TM_OFFSET
			FROM SAL0002D A, SYS0026M B, LOG0043M C, LOG0044D D, SYS0026M E WHERE 1=1
			AND A.ITM_STK_ID = B.STK_ID AND B.STK_CODE = C.MATRL_NO AND C.BOM = D.BOM
			AND D.BOM_COMPNT = E.STK_CODE AND E.STK_TYPE_ID = '62' AND A.SALES_ORD_ID
			= #{salesOrdId} AND E.STK_ID = #{filterCode} <![CDATA[ AND TO_CHAR(D.VALID_FROM_DT,'YYYYMMDD')
			< TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(D.VALID_TO_DT,'YYYYMMDD') > TO_CHAR(SYSDATE,'YYYYMMDD')
			), ]]> TO_DATE(#{lastChangeDate},'DD/MM/YYYY'), '1', NVL(#{remark}, ''),
			SYSDATE, #{updator}, SYSDATE, #{updator} ) -->
	</insert>


	<select id="getSrvConfigId_SAL009" parameterType="Map"
		resultType="String">

		SELECT Extent1.SRV_CONFIG_ID SRV_CONFIG_ID
		FROM SAL0090D Extent1
		WHERE (
		Extent1.SRV_SO_ID = #{salesOrdId} )
                    <![CDATA[             AND ( 1 = Extent1.SRV_STUS_ID ) AND ROWNUM <= 1   ]]>

	</select>



	<select id="getbomPartPriod_LOG0001M" parameterType="Map"
		resultType="String">

		SELECT Extent1.BOM_PART_PRIOD BOM_PART_PRIOD
		FROM LOG0001M Extent1
		WHERE ( Extent1.BOM_PART_ID = #{filterCode} )
		AND ( 1 =
		Extent1.BOM_PART_STUS_ID )
		AND ( 547 = Extent1.BOM_TYPE_ID )
                        <![CDATA[          AND ( Extent1.BOM_STK_ID = #{productID} ) AND ROWNUM <= 1 ]]>

	</select>




	<select id="getSalesDtSAL_0001D" parameterType="Map" resultType="String">

		SELECT Extent1.SALES_DT SALES_DT
		FROM SAL0001D Extent1
                        <![CDATA[   WHERE  Extent1.SALES_ORD_ID = #{salesOrdId} AND ROWNUM <= 1 ]]>

	</select>






	<select id="selectOrderInactiveFilter" parameterType="Map"
		resultType="egovMap">

		SELECT Distinct1.C1 C1 ,
		Distinct1.SRV_FILTER_ID
		SRV_FILTER_ID ,
		Distinct1.SRV_FILTER_STK_ID SRV_FILTER_STK_ID ,
		Distinct1.STK_CODE STK_CODE ,
		Distinct1.STK_DESC STK_DESC ,
		Distinct1.C2 C2 ,
		Distinct1.C3 C3 ,
		Distinct1.SRV_FILTER_STUS_ID
		SRV_FILTER_STUS_ID ,
		Distinct1.SRV_FILTER_PRV_CHG_DT
		SRV_FILTER_PRV_CHG_DT
		FROM ( SELECT DISTINCT 1 C1 ,
		CASE
		WHEN (
		Extent2.SRV_FILTER_UPD_DT IS NOT NULL ) THEN
		Extent2.SRV_FILTER_UPD_DT
		END C2 ,
		CASE
		WHEN ( Extent4.USER_NAME IS NOT NULL ) THEN
		Extent4.USER_NAME
		ELSE ' '
		END C3 ,
		Extent2.SRV_FILTER_ID SRV_FILTER_ID ,
		Extent2.SRV_FILTER_STK_ID SRV_FILTER_STK_ID ,
		Extent2.SRV_FILTER_PRV_CHG_DT SRV_FILTER_PRV_CHG_DT ,
		Extent2.SRV_FILTER_STUS_ID SRV_FILTER_STUS_ID ,
		Extent3.STK_CODE
		STK_CODE ,
		Extent3.STK_DESC STK_DESC
		FROM SAL0090D Extent1
		JOIN SAL0087D
		Extent2 ON Extent1.SRV_CONFIG_ID = Extent2.SRV_CONFIG_ID
		LEFT JOIN
		SYS0026M Extent3 ON Extent2.SRV_FILTER_STK_ID =
		Extent3.STK_ID
		LEFT JOIN
		SYS0047M Extent4 ON Extent2.SRV_FILTER_UPD_USER_ID =
		Extent4.USER_ID
		WHERE ( 1 = Extent1.SRV_STUS_ID )
		AND ( 8 = Extent2.SRV_FILTER_STUS_ID
		)
		AND ( Extent1.SRV_SO_ID = #{salesOrdId} ) ) Distinct1

	</select>







	<select id="selectOrderActiveFilter" parameterType="Map"
		resultType="egovMap">
		SELECT Distinct1.C1 C1 ,
		Distinct1.SRV_FILTER_ID
		SRV_FILTER_ID ,
		Distinct1.SRV_FILTER_STK_ID SRV_FILTER_STK_ID ,
		Distinct1.STK_CODE STK_CODE ,
		Distinct1.STK_DESC STK_DESC ,
		Distinct1.C2 C2 ,
		Distinct1.C3 C3 ,
		Distinct1.SRV_FILTER_STUS_ID
		SRV_FILTER_STUS_ID ,
		to_char(Distinct1.SRV_FILTER_PRV_CHG_DT,'yyyy/mm/dd')
		SRV_FILTER_PRV_CHG_DT ,
		Distinct1.SRV_FILTER_PRIOD SRV_FILTER_PRIOD ,
		Distinct1.SRV_FILTER_LAST_SERIAL SRV_FILTER_LAST_SERIAL ,
		Distinct1.SRV_FILTER_PREV_SERIAL SRV_FILTER_PREV_SERIAL ,
		Distinct1.C4
		C4 ,
		Distinct1.C5 C5 ,
		Distinct1.C6 C6
		FROM ( SELECT DISTINCT
		Extent3.SRV_FILTER_ID SRV_FILTER_ID ,
		Extent3.SRV_FILTER_STK_ID
		SRV_FILTER_STK_ID ,
		Extent3.SRV_FILTER_PRIOD SRV_FILTER_PRIOD ,
		Extent3.SRV_FILTER_PRV_CHG_DT SRV_FILTER_PRV_CHG_DT ,
		Extent3.SRV_FILTER_STUS_ID SRV_FILTER_STUS_ID ,
		Extent3.SRV_FILTER_LAST_SERIAL SRV_FILTER_LAST_SERIAL,
		Extent3.SRV_FILTER_PREV_SERIAL SRV_FILTER_PREV_SERIAL,
		Extent4.STK_CODE STK_CODE ,
		Extent4.STK_DESC STK_DESC ,
		1 C1 ,
		CASE
		WHEN (
		Extent3.SRV_FILTER_UPD_DT IS NOT NULL ) THEN
		Extent3.SRV_FILTER_UPD_DT
		END C2 ,
		CASE
		WHEN ( Extent5.USER_NAME IS NOT NULL ) THEN
		Extent5.USER_NAME
		ELSE ' '
		END C3 ,
		CASE
		WHEN ( Extent7.CODE IS NOT NULL )
		THEN Extent7.CODE
		ELSE ' '
		END C4 ,
		UTILS.CONVERT_TO_NUMBER(0,1,0) C5 ,
		0
		C6
		FROM SAL0090D Extent1
		JOIN SAL0002D Extent2 ON Extent1.SRV_SO_ID =
		Extent2.SALES_ORD_ID
		JOIN SAL0087D Extent3 ON Extent1.SRV_CONFIG_ID =
		Extent3.SRV_CONFIG_ID
		JOIN SYS0026M Extent4 ON
		Extent3.SRV_FILTER_STK_ID = Extent4.STK_ID
		LEFT JOIN SYS0047M Extent5
		ON Extent3.SRV_FILTER_UPD_USER_ID =
		Extent5.USER_ID
		LEFT JOIN LOG0001M
		Extent6 ON ( Extent3.SRV_FILTER_STK_ID =
		Extent6.BOM_PART_ID )
		AND ( (
		Extent2.ITM_STK_ID = Extent6.BOM_STK_ID )
		OR ( ( Extent2.ITM_STK_ID IS
		NULL )
		AND ( Extent6.BOM_STK_ID IS NULL ) ) )
		LEFT JOIN SYS0013M Extent7
		ON Extent6.BOM_PART_TYPE_ID = Extent7.CODE_ID
		WHERE ( 1 =
		Extent1.SRV_STUS_ID )
		AND ( 1 = Extent3.SRV_FILTER_STUS_ID )
		AND (
		Extent1.SRV_SO_ID = #{salesOrdId} ) ) Distinct1
	</select>


	<update id="updateHsFilterSiriNo" parameterType="Map">
		UPDATE SAL0087D
		SET SRV_FILTER_LAST_SERIAL= #{lastSerialNo}
		, SRV_FILTER_PREV_SERIAL =
		(SELECT SRV_FILTER_LAST_SERIAL
		FROM SAL0087D
		WHERE SRV_FILTER_ID =
		#{srvFilterId} )
		, SRV_FILTER_PRV_CHG_DT = to_date(#{settleDate},
		'DD/MM/YYYY')
		, SRV_FILTER_UPD_USER_ID = #{hidCodyId}
		,
		SRV_FILTER_UPD_DT = SYSDATE
		, IS_RETURN = #{isReturn}
		WHERE 1 = 1
		AND
		SRV_FILTER_ID = #{srvFilterId}
	</update>

	<update id="updateHsFilterSiriNo2" parameterType="Map">
		UPDATE SAL0087D
		SET SRV_FILTER_LAST_SERIAL= #{lastSerialNo}
		,
		SRV_FILTER_PREV_SERIAL = #{prvSerialNo}
		, SRV_FILTER_PRV_CHG_DT =
		TO_DATE(#{settleDate}, 'DD/MM/YYYY')
		, SRV_FILTER_UPD_USER_ID =
		#{hidCodyId}
		, SRV_FILTER_UPD_DT = SYSDATE
		, IS_RETURN = #{isReturn}
		WHERE 1 = 1

		<!-- AND SRV_CONFIG_ID = (SELECT MAX(SRV_CONFIG_ID) FROM SAL0090D WHERE
			SRV_SO_ID = #{hidOrdId}) -->
		AND SRV_CONFIG_ID = (SELECT MAX(SRV_CONFIG_ID) FROM SAL0090D WHERE
		SRV_SO_ID = #{hidOrdId} and SRV_STUS_ID = '1' )

		AND SRV_FILTER_STUS_ID
		= '1'
		AND SRV_FILTER_STK_ID = #{stkId}
	</update>

	<select id="select0087DFilter" parameterType="Map" resultType="String">
		SELECT SRV_FILTER_LAST_SERIAL
		FROM SAL0087D
		WHERE 1=1
		AND SRV_FILTER_ID =
		#{srvFilterId}
	</select>

	<select id="select0087DFilter2" parameterType="Map" resultType="String">
		SELECT SRV_FILTER_LAST_SERIAL
		FROM SAL0087D
		WHERE 1=1
		AND SRV_CONFIG_ID =
		(SELECT MAX(SRV_CONFIG_ID) FROM SAL0090D WHERE
		SRV_SO_ID = #{hidOrdId})
		AND SRV_FILTER_STUS_ID = '1'
		AND SRV_FILTER_STK_ID = #{stkId}
	</select>


	<update id="updateHs009d" parameterType="Map">

		UPDATE SAL0090D
		<!-- SET SRV_REM = #{remark}, -->
		<!-- [19-09-2018] AMEND PARAMETER VALUE -->
		SET SRV_REM = #{instruction},
		SRV_PREV_DT = to_date(#{settleDate},
		'DD/MM/YYYY'),
		SRV_BS_WEEK = #{srvBsWeek},
		SRV_CODY_ID = #{hidCodyId},
		SRV_UPD_DT = sysdate
		WHERE SRV_SO_ID = #{hidSalesOrdId} AND SRV_STUS_ID
		= 1

	</update>

	<select id="selectBranch_id" parameterType="Map" resultType="egovMap">
		SELECT BRNCH_ID CODE_ID,
		CODE CODE_NAME
		FROM SYS0005M
		WHERE 1=1
		<if test="groupCode != null and groupCode != ''">
			AND TYPE_ID=#{groupCode}
		</if>
		GROUP BY BRNCH_ID,CODE ORDER BY BRNCH_ID
	</select>

	<select id="selectCTMByDSC_id" parameterType="Map" resultType="egovMap">
		SELECT A.MEM_ID CODE_ID, b.dept_code || '-' || a.NAME AS CODE_NAME
		FROM ORG0001D A, ORG0005D B, SYS0005M C
		WHERE A.MEM_ID = B.MEM_ID
		AND
		A.BRNCH = C.BRNCH_ID
		AND B.MEM_LVL = '2'
		AND A.STUS = '1'
		<if test="groupCode != null and groupCode !='' ">
			AND C.BRNCH_ID = #{groupCode}
		</if>

	</select>

	<select id="selectCheckMemCode" parameterType="Map" resultType="egovMap">
		SELECT MEM_CODE
		FROM ORG0001D
		WHERE MEM_CODE = #{hscodyId}
		AND STUS = '1'
	</select>

	<select id="selectSerMember" parameterType="Map" resultType="egovMap">
		SELECT SRV_CODY_ID
		, MEM_CODE
		FROM SAL0090D A , SAL0001D B , ORG0001D C
		WHERE A.SRV_SO_ID = B.SALES_ORD_ID
		AND A.SRV_CODY_ID = C.MEM_ID
		AND
		B.SALES_ORD_NO =#{SRV_SO_ID}
		ORDER BY MEM_CODE ASC
	</select>
	<!-- <select id="selectHSCodyList" parameterType="Map" resultType="egovMap">
		SELECT A.MEM_CODE CODE_ID, A.MEM_CODE || '-' || A.NAME CODE_NAME FROM ORG0001D
		A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.STUS = '1' AND B.DEPT_CODE
		= #{codyMangrUserId} AND B.MEM_LVL = '4' </select> -->

	<select id="selectHSCodyList" parameterType="Map" resultType="egovMap">
		SELECT DISTINCT D.MEM_CODE CODE_ID, D.MEM_CODE || '-' || D.NAME
		CODE_NAME
		FROM (SELECT MEM_CODE, NAME, 1 AS QUERYNO
		FROM ORG0001D
		WHERE
		MEM_ID = (SELECT SRV_CODY_ID FROM SAL0090D WHERE SRV_SO_ID = (SELECT
		SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{entry_orderNo}) AND
		SRV_STUS_ID = 1 )
		union
		SELECT A.MEM_CODE, A.NAME , 2 AS QUERYNO
		FROM
		ORG0001D A, ORG0005D B
		WHERE A.MEM_ID = B.MEM_ID AND A.STUS = '1' AND
		B.DEPT_CODE =
		#{codyMangrUserId} AND B.MEM_LVL = '4'
		AND A.MEM_CODE NOT
		LIKE 'TR%'
		ORDER BY MEM_CODE
		) D
		ORDER BY D.MEM_CODE
	</select>

	<select id="selectMemberId" parameterType="Map" resultType="string">
		select mem_id
		from ORG0001D
		where mem_Code = #{hscodyId}
	</select>

	<update id="updateSrvCodyId" parameterType="Map">

		update
		( SELECT
		SRV_CODY_ID
		FROM SAL0090D A , SAL0001D B
		WHERE A.SRV_SO_ID =
		B.SALES_ORD_ID
		AND B.SALES_ORD_NO =#{srvSoId}
		) a
		SET a.SRV_CODY_ID =
		#{hscodyId}

	</update>


	<insert id="insertCcr0001d" parameterType="Map">
		INSERT INTO CCR0001D (
		HC_ID
		, HCSOID
		, HC_CALL_ENTRY_ID
		, HC_TYPE_NO
		, HC_TYPE_ID
		, HC_STUS_ID
		,
		HC_COMMENT_TYPE_ID
		, HC_COMMENT_GID
		, HC_COMMENT_SID
		, HC_COMMENT_DID
		,
		CRT_USER_ID
		, CRT_DT
		, UPD_USER_ID
		, UPD_DT
		, HC_NO_SVC
		, HC_LOK
		,
		HC_CLOS_ID
		)
		VALUES(
		CCR0001D_HC_ID_SEQ.NEXTVAL
		, #{hcsoid}
		, 0
		, #{hcTypeNo}
		, 509
		, 33
		, 0
		, 0
		, 0
		, 0
		, #{crtUserId}
		, SYSDATE
		, #{updUserId}
		, SYSDATE
		, 0
		, 1
		, 81
		)

	</insert>



	<update id="saveDeactivateFilter" parameterType="Map">

		UPDATE SAL0087D
		SET SRV_FILTER_STUS_ID = #{srvFilterStusId} ,
		SRV_FILTER_UPD_DT =
		sysdate,
		SRV_FILTER_UPD_USER_ID = #{updator}
		WHERE SRV_FILTER_ID =
		#{SRV_FILTER_ID}

	</update>




	<update id="saveFilterUpdate" parameterType="Map">

		UPDATE SAL0087D
		SET SRV_FILTER_UPD_DT = sysdate,
		<if test="SRV_FILTER_PRV_CHG_DT != null and SRV_FILTER_PRV_CHG_DT != ''">
			SRV_FILTER_PRV_CHG_DT =
			to_date(#{SRV_FILTER_PRV_CHG_DT},'yyyymmdd'),
		</if>

		SRV_FILTER_UPD_USER_ID = #{updator}
		WHERE SRV_FILTER_ID =
		#{SRV_FILTER_ID}


	</update>

	<resultMap id="resultSFilterUseHistory" type="egovMap">
	</resultMap>

	<select id="selecthSFilterUseHistorycall" statementType="CALLABLE"
		parameterType="Map">
		{
		call SP_GET_ORD_FLT_USE_HIST(#{OrderID},
		#{SrvFilterStkId}, #{cv_1,
		mode=OUT, jdbcType=CURSOR,
		javaType=ResultSet,
		resultMap=resultSFilterUseHistory})
		}
	</select>

	<select id="isHsAlreadyResult" parameterType="Map" resultType="java.lang.Integer">
        <![CDATA[
               SELECT  COUNT(NO) CNT
               FROM  SVC0008D
               WHERE NO =#{serviceNo}  AND STUS_CODE_ID <> '1'
        ]]>
	</select>

	<select id="saveValidation" parameterType="Map" resultType="java.lang.Integer">
		SELECT COUNT(*) CNT
		FROM SVC0008D A,
		SVC0006D B
		WHERE A.SCHDUL_ID =
		B.SCHDUL_ID
		AND A.NO = #{serviceNo}
	</select>

	<select id="GetDocNo" parameterType="Map" resultType="java.lang.String">
		select
		doc_no_prefix||doc_no as doc_no from SYS0022C
		where doc_no_id =
		#{doctype}

	</select>

	<select id="GetDocNo1" parameterType="Map" resultType="int">
		select
		doc_no as doc_no from SYS0022C
		where doc_no = #{nextNo}

	</select>


	<select id="selectQryBS_Rev" parameterType="Map" resultType="egovMap">
		SELECT NO,
		SCHDUL_ID,
		NVL (SALES_ORD_ID, 0) AS SALES_ORD_ID,
		NVL
		(CODY_ID, 0) AS CODY_ID,
		SETL_DT SETL_DT,
		NVL (RESULT_STUS_CODE_ID, 0)
		AS RESULT_STUS_CODE_ID,
		NVL (FAIL_RESN_ID, 0) AS FAIL_RESN_ID,
		NVL
		(REN_COLCT_ID, 0) AS REN_COLCT_ID,
		NVL (WH_ID, 0) AS WH_ID,
		NVL
		(RESULT_REM, 0) AS RESULT_REM,
		RESULT_STOCK_USE,
		NVL (RESULT_ID, 0) AS
		RESULT_ID,
		FN_GET_ORDER_SERIAL(SALES_ORD_ID, NULL) LAST_SERIAL_NO,
		HS_CHKLIST
		FROM (SELECT ROW_NUMBER ()
		OVER (PARTITION BY SCHDUL_ID,
		SALES_ORD_ID ORDER BY RESULT_ID DESC)
		RNN,
		NO,
		SCHDUL_ID,
		NVL
		(SALES_ORD_ID, 0) AS SALES_ORD_ID,
		NVL (CODY_ID, 0) AS CODY_ID,
		TO_CHAR
		(SETL_DT, 'YYYY-MM-DD') SETL_DT,
		NVL (RESULT_STUS_CODE_ID, 0) AS
		RESULT_STUS_CODE_ID,
		NVL (FAIL_RESN_ID, 0) AS FAIL_RESN_ID,
		NVL
		(REN_COLCT_ID, 0) AS REN_COLCT_ID,
		NVL (WH_ID, 0) AS WH_ID,
		NVL
		(RESULT_REM, 0) AS RESULT_REM,
		RESULT_STOCK_USE,
		NVL (RESULT_ID, 0) AS
		RESULT_ID,
		HS_CHKLIST
		FROM SVC0006D
		WHERE SCHDUL_ID = #{ScheduleID} AND
		SALES_ORD_ID = #{SalesOrderId})
		WHERE RNN = 1

	</select>

	<insert id="addbsResultMas_Rev" parameterType="Map">
		insert into
		svc0006d
		(RESULT_ID,
		NO,
		TYPE_ID,
		SCHDUL_ID,
		SALES_ORD_ID,
		CODY_ID,
		SETL_DT,
		RESULT_STUS_CODE_ID,
		FAIL_RESN_ID,
		REN_COLCT_ID,
		WH_ID,
		RESULT_REM,
		RESULT_CRT_DT,
		RESULT_CRT_USER_ID,
		RESULT_IS_SYNC,
		RESULT_IS_EDIT,
		RESULT_STOCK_USE,
		RESULT_IS_CURR,
		RESULT_MTCH_ID,
		RESULT_IS_ADJ,
		HS_CHKLIST
		)
		values
		(
		#{ResultID},
		#{No}
		,#{TypeID}
		,#{ScheduleID}
		,#{SalesOrderId}
		,#{CodyID}
		,TO_DATE(#{SettleDate},'YYYY-MM-DD')
		,#{ResultStatusCodeID}
		,#{FailReasonID}
		,#{RenCollectionID}
		,#{WarehouseID}
		,#{ResultRemark}
		,sysdate
		,#{ResultCreator}
		,#{ResultIsSync}
		,#{ResultIsEdit}
		,#{ResultStockUse}
		,#{ResultIsCurrent}
		,#{ResultMatchID}
		,#{ResultIsAdjust}
		,#{instChklstCheckBox}
		)
	</insert>

	<select id="selectQryResultDet" parameterType="Map" resultType="egovMap">

		select BS_RESULT_PART_ID
		,BS_RESULT_PART_DESC
		,BS_RESULT_PART_QTY
		,BS_RESULT_REM
		,BS_RESULT_FILTER_CLM
		from SVC0007D
		where BS_RESULT_ID =
		#{ResultMatchID}
		order by BS_RESULT_ITM_ID

	</select>

	<select id="getBSResultM_resultID" parameterType="Map"
		resultType="int">
		select SVC0006D_RESULT_ID_SEQ.nextval result_id from dual
	</select>

	<insert id="addbsResultDet_Rev" parameterType="Map">
		insert into
		svc0007d
		(BS_RESULT_ITM_ID
		,BS_RESULT_ID
		,BS_RESULT_PART_ID
		,BS_RESULT_PART_DESC
		,BS_RESULT_PART_QTY
		,BS_RESULT_REM
		,BS_RESULT_CRT_DT
		,BS_RESULT_CRT_USER_ID
		,BS_RESULT_FILTER_CLM
		,SERIAL_NO
		,FILTER_BARCD_SERIAL_NO
		,FILTER_SRL_UNMATCH_RSN
		,OLD_FILTER_BARCD_SERIAL_NO
		)
		values
		(
		SVC0007D_BS_RESULT_ITM_ID_SEQ.nextval
		,#{BSResultID}
		,#{BSResultPartID}
		,nvl(#{BSResultPartDesc},'')
		,#{BSResultPartQty}
		,nvl(#{BSResultRemark},'')
		,sysdate
		,#{BSResultCreateBy}
		,nvl(#{BSResultFilterClaim},0)
		,nvl(#{SerialNo}, '')
		,nvl(#{SerialNo}, '')
		,nvl(#{filterSerialUnmatchReason}, '')
		,nvl(#{oldSerialNo}, '')
		)
	</insert>

	<select id="selectQry_stkReqM" parameterType="Map" resultType="egovMap">

		select STK_REQ_LOC_FROM_ID,STK_REQ_LOC_TO_ID
		,STK_REQ_REM
		from LOG0016D
		a
		,LOG0015D b
		where REQ_ITM_REF_ID = #{ResultMatchID}
		and REQ_ITM_TYPE_ID
		= 458
		and REQ_ITM_STUS_ID = 4
		and a.REQ_ID = b.STK_REQ_ID
		and rownum = 1

	</select>

	<insert id="addstkReqM_Rev" parameterType="Map">
		insert into LOG0015D
		(STK_REQ_ID
		,STK_REQ_NO
		,STK_REQ_LOC_FROM_ID
		,STK_REQ_LOC_TO_ID
		,STK_REQ_REM
		,STK_REQ_CRT_USER_ID
		,STK_REQ_CRT_DT
		)
		values
		(
		LOG0015D_STK_REQ_ID_SEQ.nextval
		,#{StkReqNo}
		,#{StkReqLocFromID}
		,#{StkReqLocToID}
		,#{StkReqRemark}
		,sysdate
		,#{StkReqCreateBy}
		)
	</insert>

	<select id="getMobileWarehouseByMemID" parameterType="Map"
		resultType="int">
		select wh_loc_id
		from SYS0028M a
		,ORG0001D b
		where
		WH_LOC_TYPE_ID = 278
		and b.MEM_CODE = a.WH_LOC_CODE
		and b.MEM_ID =
		#{codyId}
	</select>

	<select id="selectQryBS" parameterType="Map" resultType="egovMap">
		select
		no,sales_ord_id
		from SVC0008D
		where SCHDUL_ID = #{ScheduleID}
		and rownum
		= 1
	</select>

	<select id="qry_stkReqD_Rev" parameterType="Map" resultType="egovMap">
		select BS_RESULT_PART_ID
		,BS_RESULT_PART_DESC
		,BS_RESULT_PART_QTY
		,BS_RESULT_REM
		,BS_RESULT_FILTER_CLM
		from SVC0007D
		where BS_RESULT_ID =
		#{ResultMatchID}
		and BS_RESULT_PART_ID !=0
		and BS_RESULT_PART_QTY >0
		order by BS_RESULT_ITM_ID
	</select>

	<select id="getStkReqM_StkReqID" parameterType="Map" resultType="int">
		select max(STK_REQ_ID) STK_REQ_ID from LOG0015D
	</select>

	<insert id="addStkReqD_Rev" parameterType="Map">

		insert into LOG0016D
		(REQ_ITM_ID
		,REQ_ID
		,REQ_ITM_TYPE_ID
		,REQ_ITM_REF_ID
		,REQ_ITM_STK_ID
		,REQ_ITM_STK_DESC
		,REQ_ITM_QTY
		,REQ_ITM_STUS_ID
		,REQ_ITM_REM
		)
		values
		(
		LOG0016D_REQ_ITM_ID_SEQ.nextval
		,#{ReqID}
		,#{ReqItemTypeID}
		,#{ReqItemRefID}
		,#{ReqItemStkID}
		,#{ReqItemStkDesc}
		,#{ReqItemQty}
		,#{ReqItemStatusID}
		,#{ReqItemRemark}
		)
	</insert>

	<insert id="addStkCrd_Rev" parameterType="Map">
		insert into LOG0014D
		(SR_CARD_ID
		,LOC_ID
		,STOCK_ID
		,ENTRY_DT
		,TYPE_ID
		,REF_NO
		,SALES_ORD_ID
		,ITM_NO
		,SRC_ID
		,PRJCT_ID
		,BATCH_NO
		,QTY
		,CURR_ID
		,CURR_RATE
		,COST
		,PRC
		,REM
		,SERIAL_NO
		,INSTALL_NO
		,COST_DT
		,APP_TYPE_ID
		,STK_GRAD
		,INSTALL_FAIL
		,IS_SYNCH
		,ENTRY_MTH_ID
		,ORGN
		)
		values
		(
		LOG0014D_SR_CARD_ID_SEQ.nextval
		,#{LocationID}
		,#{StockID}
		,sysdate
		,#{TypeID}
		,#{RefNo}
		,#{SalesOrderId}
		,#{ItemNo}
		,#{SourceID}
		,#{ProjectID}
		,#{BatchNo}
		,#{Qty}
		,#{CurrID}
		,#{CurrRate}
		,#{Cost}
		,#{Price}
		,#{Remark}
		,#{SerialNo}
		,#{InstallNo}
		,sysdate
		,#{AppTypeID}
		,#{StkGrade}
		,#{InstallFail}
		,#{IsSynch}
		,#{EntryMethodID}
		,#{Origin}
		)
	</insert>

	<update id="updateQry_CurBS" parameterType="Map">
		update SVC0006D
		set
		RESULT_IS_CURR = 1
		,RESULT_UPD_DT = sysdate
		,RESULT_UPD_USER_ID =
		#{userId}
		where schdul_id = #{ScheduleID}
		and RESULT_IS_CURR = 0
		and
		SALES_ORD_ID = #{SalesOrderId}
	</update>


	<update id="updateQry_CurBSZero" parameterType="Map">
		update SVC0006D
		set RESULT_IS_CURR = 0
		,RESULT_UPD_DT = sysdate
		,RESULT_UPD_USER_ID =
		#{userId}
		where schdul_id = #{ScheduleID}
		and RESULT_IS_CURR = 1
		and
		result_id not in(
		select max(result_id)
		from SVC0006D
		where SCHDUL_ID =
		#{ScheduleID}
		)
	</update>

	<select id="selectResultId" parameterType="Map" resultType="egovMap">
		select max(result_id) result_id
		from SVC0006D
		where SCHDUL_ID =
		#{ScheduleID}
		and RESULT_IS_CURR = 1


	</select>

	<update id="updateQry_New" parameterType="Map">
		update SYS0022C
		set
		DOC_NO = #{nextDocNo_New}
		where DOC_NO_ID = #{ID_New}
	</update>

	<insert id="addbsResultMas" parameterType="Map">
		insert into SVC0006D
		(RESULT_ID
		,NO
		,TYPE_ID
		,SCHDUL_ID
		,SALES_ORD_ID
		,CODY_ID
		,SETL_DT
		,RESULT_STUS_CODE_ID
		,FAIL_RESN_ID
		,REN_COLCT_ID
		,WH_ID
		,RESULT_REM
		,RESULT_CRT_DT
		,RESULT_CRT_USER_ID
		,RESULT_UPD_DT
		,RESULT_UPD_USER_ID
		,RESULT_IS_SYNC
		,RESULT_IS_EDIT
		,RESULT_STOCK_USE
		,RESULT_IS_CURR
		,RESULT_MTCH_ID
		,RESULT_IS_ADJ
		,HS_CHKLIST
		,OLD_SETL_DT
		)
		values
		(
		#{ResultId}
		,#{No}
		,#{TypeID}
		,#{ScheduleID}
		,#{SalesOrderId}
		,#{CodyID}
		,TO_DATE(#{SettleDate},'DD/MM/YYYY')
		,#{ResultStatusCodeID}
		,#{FailReasonID}
		,#{RenCollectionID}
		,#{WarehouseID}
		,#{ResultRemark}
		,sysdate
		,#{ResultCreator}
		,sysdate
		,#{ResultCreator}
		,#{ResultIsSync}
		,#{ResultIsEdit}
		,#{ResultStockUse}
		,#{ResultIsCurrent}
		,#{ResultMatchID}
		,#{ResultIsAdjust}
		,#{instChklstCheckBox}
		,TO_DATE(#{SettleDate},'DD/MM/YYYY')
		)
	</insert>

	<update id="updatebsResultMas" parameterType="Map">
		UPDATE SVC0006D
		SET
		SETL_DT = TO_DATE( NVL(#{SettleDate},'01/01/1900'), 'DD/MM/YYYY'),
		RESULT_STUS_CODE_ID = #{ResultStatusCodeID},
		FAIL_RESN_ID =
		NVL(#{FailReasonID},'0'),
		REN_COLCT_ID = #{RenCollectionID},
		RESULT_REM
		= #{ResultRemark},
		RESULT_STOCK_USE = #{ResultStockUse},
		RESULT_UPD_DT =
		SYSDATE,
		RESULT_UPD_USER_ID = #{ResultCreator},
		HS_CHKLIST =
		#{instChklstCheckBox}
		WHERE SCHDUL_ID = #{ScheduleID}
		AND RESULT_IS_CURR
		= 1
	</update>

	<update id="updateQrySchedule" parameterType="Map">
		update SVC0008D
		set
		STUS_CODE_ID = #{ResultStatusCodeID}
		,ACTN_MEM_ID = #{CodyID}
		,UPD_DT =
		SYSDATE
		,UPD_USER_ID = #{ResultCreator}
		where SCHDUL_ID = #{ScheduleID}
	</update>

	<update id="updateQryConfig" parameterType="Map">
		update SAL0090D
		<!-- set SRV_REM = #{ResultRemark} -->
		<!-- [19-09-2018] AMEND PARAMETER VALUE -->
		set SRV_REM = #{ResultInstRemark}
		,SRV_BS_WEEK = #{bsPreferWeek}
		,SRV_UPD_DT = SYSDATE
		,SRV_UPD_USER_ID = #{ResultCreator}
		where
		SRV_STUS_ID = 1
		and SRV_SO_ID =#{SalesOrderId}
	</update>

	<update id="updateQryConfig4" parameterType="Map">
		update SAL0090D
		<!-- set SRV_REM = #{ResultRemark} -->
		<!-- [19-09-2018] AMEND PARAMETER VALUE -->
		set SRV_REM = #{ResultInstRemark}
		,SRV_PREV_DT = TO_DATE(#{SettleDate},
		'DD/MM/YYYY')
		,SRV_BS_WEEK = #{bsPreferWeek}
		,SRV_UPD_DT = SYSDATE
		,SRV_UPD_USER_ID = #{ResultCreator}
		where SRV_STUS_ID = 1
		and SRV_SO_ID
		=#{SalesOrderId}
	</update>

	<select id="selectLocationID" parameterType="Map" resultType="int">
		select B.WH_LOC_ID
		from org0001d a
		,SYS0028M b
		where mem_id = #{CodyID}
		and b.WH_LOC_CODE = a.MEM_CODE
	</select>

	<select id="selectQrySchedule" parameterType="Map" resultType="egovMap">
		select no from SVC0008D
		where SCHDUL_ID = #{ScheduleID}
	</select>

	<insert id="addStkCrd_new" parameterType="Map">
		insert into log0014d
		(
		SR_CARD_ID
		,LOC_ID
		,STOCK_ID
		,ENTRY_DT
		,TYPE_ID
		,REF_NO
		,SALES_ORD_ID
		,ITM_NO
		,SRC_ID
		,PRJCT_ID
		,BATCH_NO
		,QTY
		,CURR_ID
		,CURR_RATE
		,COST
		,PRC
		,REM
		,SERIAL_NO
		,INSTALL_NO
		,COST_DT
		,APP_TYPE_ID
		,STK_GRAD
		,INSTALL_FAIL
		,IS_SYNCH
		,ENTRY_MTH_ID
		,ORGN
		)
		values
		(
		LOG0014D_SR_CARD_ID_SEQ.nextval
		,#{LocationID}
		,#{StockID}
		,sysdate
		,#{TypeID}
		,#{RefNo}
		,#{SalesOrderId}
		,#{ItemNo}
		,#{SourceID}
		,#{ProjectID}
		,#{BatchNo}
		,#{Qty}
		,#{CurrID}
		,#{CurrRate}
		,#{Cost}
		,#{Price}
		,#{Remark}
		,#{SerialNo}
		,#{InstallNo}
		,to_date(#{CostDate},'YYYY-MM-DD')
		,#{AppTypeID}
		,#{StkGrade}
		,#{InstallFail}
		,#{IsSynch}
		,#{EntryMethodID}
		,#{Origin}
		)
	</insert>

	<select id="selectQryConfig" parameterType="Map" resultType="egovMap">
		select SRV_CONFIG_ID
		from SAL0090D
		where SRV_STUS_ID = 1
		and SRV_SO_ID =
		#{SalesOrderId}
	</select>

	<update id="updateQryFilter" parameterType="Map">
		update SAL0087D
		set
		SRV_FILTER_PRV_CHG_DT = to_date(#{SettleDate},'DD/MM/YYYY')
		,SRV_FILTER_UPD_DT = sysdate
		,SRV_FILTER_UPD_USER_ID = #{ResultCreator}
		,SRV_FILTER_LAST_SERIAL= #{lastSerialNo}
        , SRV_FILTER_PREV_SERIAL = #{oldSerialNo}
     <!--    (SELECT SRV_FILTER_LAST_SERIAL
        FROM SAL0087D
        WHERE SRV_CONFIG_ID =
        #{SrvConfigID} and SRV_FILTER_STK_ID = #{BSResultPartID}
         and SRV_FILTER_STUS_ID = 1) -->
		where SRV_CONFIG_ID = #{SrvConfigID}
		and SRV_FILTER_STUS_ID = 1
		and
		SRV_FILTER_STK_ID = #{BSResultPartID}
	</update>

    <update id="updateQryFilter_rev" parameterType="Map">
        update SAL0087D
        set
        SRV_FILTER_PRV_CHG_DT = to_date(NVL(#{SettleDate},'01/01/1900'),'DD/MM/YYYY')
        ,SRV_FILTER_UPD_DT = sysdate
        ,SRV_FILTER_UPD_USER_ID = #{ResultCreator}
        ,SRV_FILTER_LAST_SERIAL=
        (SELECT SRV_FILTER_PREV_SERIAL
        FROM SAL0087D
        WHERE SRV_CONFIG_ID =
        #{SrvConfigID} and SRV_FILTER_STK_ID = #{BSResultPartID}
         AND SRV_FILTER_STUS_ID = 1)
         <!-- ,SRV_FILTER_PREV_SERIAL = #{oldSerialNo} -->
         ,SRV_FILTER_PREV_SERIAL = ''
        where SRV_CONFIG_ID = #{SrvConfigID}
        and SRV_FILTER_STUS_ID = 1
        and
        SRV_FILTER_STK_ID = #{BSResultPartID}
    </update>

	<update id="updateIsReturn" parameterType="Map">
		update SAL0087D
		set
		IS_RETURN = #{isReturn}
		where SRV_CONFIG_ID = #{srvConfigId}
		and
		SRV_FILTER_STUS_ID = 1
		and SRV_FILTER_STK_ID = #{stkId}
	</update>

	<insert id="addBsResultDet_NoFilter" parameterType="Map">
		insert into
		SVC0007D
		(BS_RESULT_ITM_ID
		,BS_RESULT_ID
		,BS_RESULT_PART_ID
		,BS_RESULT_PART_DESC
		,BS_RESULT_PART_QTY
		,BS_RESULT_REM
		,BS_RESULT_CRT_DT
		,BS_RESULT_CRT_USER_ID
		,BS_RESULT_FILTER_CLM
		)
		values
		(SVC0007D_BS_RESULT_ITM_ID_SEQ.nextval
		,#{BSResultID}
		,#{BSResultPartID}
		,#{BSResultPartDesc}
		,#{BSResultPartQty}
		,#{BSResultRemark}
		,sysdate
		,#{BSResultCreateBy}
		,#{BSResultFilterClaim}
		)
	</insert>


	<select id="selectHsOrderInMonth" parameterType="Map"
		resultType="egovMap">
		SELECT SALES_ORD_ID
		FROM SVC0008D
		WHERE 1=1
		AND YEAR(+) =
		#{myBSYear}
		AND Month(+) = #{myBSMonth}
		AND SALES_ORD_ID IN(
		select
		SALES_ORD_ID
		from SAL0001D S1D
		where S1D.SALES_ORD_NO= #{saleOrdList}
		)

	</select>





	<select id="hSMgtResultViewResult" parameterType="Map"
		resultType="egovMap">
                   <![CDATA[
 SELECT Limit1.RESULT_ID RESULT_ID  ,
       Limit1.SALES_ORD_ID SALES_ORD_ID  ,
       Limit1.SALES_ORD_NO SALES_ORD_NO  ,
       Limit1.NO1 NO  ,
       Limit1.MONTH MONTH  ,
       Limit1.YEAR YEAR  ,
       Limit1.NO NO1  ,
       Limit1.STUS_CODE_ID STUS_CODE_ID  ,
       Limit1.CODE CODE  ,
       (Limit1.SETL_DT) C1  ,
       Limit1.REN_COLCT_ID REN_COLCT_ID  ,
       Limit1.CODE1 CODE1  ,
       Limit1.RESN_DESC RESN_DESC  ,
       CASE
            WHEN ( Limit1.SRV_REM IS NOT NULL ) THEN Limit1.SRV_REM
       ELSE ''
          END C2  ,
       Limit1.CODY_ID CODY_ID  ,
       Limit1.MEM_CODE MEM_CODE  ,
       Limit1.NAME NAME  ,
       Limit1.FAIL_RESN_ID FAIL_RESN_ID  ,
       Limit1.CODE2 CODE2  ,
       Limit1.REASONDESC1 REASONDESC1  ,
       Limit1.WH_LOC_CODE WH_LOC_CODE  ,
       Limit1.WH_LOC_DESC WH_LOC_DESC  ,
       Limit1.RESULT_REM RESULT_REM  ,
       Limit1.USER_NAME USER_NAME  ,
       Limit1.RESULT_CRT_DT RESULT_CRT_DT  ,
       Limit1.RESULT_IS_CURR RESULT_IS_CURR  ,
       Limit1.REN_COLCT_desc
  FROM ( SELECT Extent1.RESULT_ID RESULT_ID  ,
                Extent1.NO NO  ,
                Extent1.SALES_ORD_ID SALES_ORD_ID  ,
                Extent1.CODY_ID CODY_ID  ,
                Extent1.SETL_DT SETL_DT  ,
                Extent1.FAIL_RESN_ID FAIL_RESN_ID  ,
                Extent1.REN_COLCT_ID REN_COLCT_ID  ,
               (SELECT RESN_DESC
                    From SYS0032M where 174 = resn_type_id  and resn_id = Extent1.REN_COLCT_ID ) REN_COLCT_desc ,
                Extent1.RESULT_REM RESULT_REM  ,
                Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                Extent2.NO NO1  ,
                Extent2.MONTH MONTH  ,
                Extent2.YEAR YEAR  ,
                Extent3.SALES_ORD_NO SALES_ORD_NO  ,
                Extent4.SRV_REM SRV_REM  ,
                Extent5.STUS_CODE_ID STUS_CODE_ID  ,
                Extent5.CODE CODE  ,
                Extent6.CODE CODE1  ,
                Extent6.RESN_DESC RESN_DESC  ,
                Extent7.MEM_CODE MEM_CODE  ,
                Extent7.NAME NAME  ,
                Extent8.CODE CODE2  ,
                Extent8.RESN_DESC REASONDESC1  ,
                Extent9.WH_LOC_CODE WH_LOC_CODE  ,
                Extent9.WH_LOC_DESC WH_LOC_DESC  ,
                Extent10.USER_FULL_NAME USER_NAME
         FROM SVC0006D Extent1
                JOIN SVC0008D Extent2   ON Extent2.SCHDUL_ID = Extent1.SCHDUL_ID
                JOIN SAL0001D Extent3   ON Extent3.SALES_ORD_ID = Extent2.SALES_ORD_ID
                JOIN SAL0090D Extent4   ON ( Extent4.SRV_SO_ID = Extent3.SALES_ORD_ID )
                AND ( 1 = Extent4.SRV_STUS_ID )
                JOIN SYS0038M Extent5   ON Extent5.STUS_CODE_ID = Extent1.RESULT_STUS_CODE_ID
                LEFT JOIN SYS0032M Extent6   ON Extent6.RESN_ID = Extent1.REN_COLCT_ID
                LEFT JOIN ORG0001D Extent7   ON Extent7.MEM_ID = Extent1.CODY_ID
                LEFT JOIN SYS0032M Extent8   ON Extent8.RESN_ID = Extent1.FAIL_RESN_ID
                LEFT JOIN SYS0028M Extent9   ON Extent9.WH_LOC_ID = Extent1.WH_ID
                LEFT JOIN SYS0047M Extent10   ON Extent10.USER_ID = Extent1.RESULT_CRT_USER_ID
          WHERE  Extent1.RESULT_ID = #{MresultId} AND ROWNUM <= 1 ) Limit1
                        ]]>
	</select>



	<select id="hSMgtResultViewResultFilter" parameterType="Map"
		resultType="egovMap">
                   <![CDATA[
SELECT Distinct1.C1 C1  ,
       Distinct1.STK_ID STK_ID  ,
       Distinct1.STK_CODE STK_CODE  ,
       Distinct1.STK_DESC STK_DESC  ,
       Distinct1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
       Distinct1.BS_RESULT_FILTER_CLM BS_RESULT_FILTER_CLM
  FROM ( SELECT DISTINCT Extent1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                         decode(Extent1.BS_RESULT_FILTER_CLM,'0','X','O') BS_RESULT_FILTER_CLM  ,
                         Extent2.STK_ID STK_ID  ,
                         Extent2.STK_CODE STK_CODE  ,
                         Extent2.STK_DESC STK_DESC  ,
                         1 C1
         FROM SVC0007D Extent1
                JOIN SYS0026M Extent2   ON Extent1.BS_RESULT_PART_ID = Extent2.STK_ID
          WHERE  ( Extent1.BS_RESULT_ID = #{MresultId} )
                   AND ( Extent1.BS_RESULT_PART_QTY > 0 )
                   AND ( 0 <> Extent1.BS_RESULT_PART_ID ) ) Distinct1

                        ]]>
	</select>


	<select id="assignDeptMemUp" parameterType="Map" resultType="egovMap">
		SELECT MEM_ID, MEM_UP_ID, DEPT_CODE, BRNCH_ID
		FROM ORG0005D
		<if test="deptList != null and deptList != ''">
			WHERE DEPT_CODE IN
			<foreach item="item" collection="deptListSpl" index="index"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		AND MEM_LVL = '3'
	</select>


	<select id="selectCMList" parameterType="Map" resultType="egovMap">
		SELECT * FROM (
		SELECT A.DEPT_CODE AS CODE_ID, A.DEPT_CODE || '-' ||
		B.NAME AS CODE_NAME
		FROM ORG0005D A, ORG0001D B, SYS0005M C
		WHERE
		A.MEM_ID = B.MEM_ID
		AND A.BRNCH_ID = C.BRNCH_ID
		AND A.DEPT_CODE IS NOT
		NULL
		AND B.MEM_TYPE = 2
		AND A.MEM_LVL = '3'
		AND A.BRNCH_ID = #{groupCode}
		AND B.STUS = '1'

		<if test="groupCode == '151'.toString() ">
			UNION
			SELECT A.DEPT_CODE AS CODE_ID
			,A.DEPT_CODE || '-' ||
			B.NAME AS CODE_NAME
			/*,B.MEM_CODE || '-' || B.NAME AS CODE_NAME*/
			FROM
			ORG0005D A
			,ORG0001D B
			,SYS0005M C
			WHERE A.MEM_ID = B.MEM_ID
			AND
			A.BRNCH_ID = C.BRNCH_ID
			AND A.DEPT_CODE IS NOT NULL
			AND A.BRNCH_ID =
			'151'
			AND B.STUS = '1'
		</if>

		) PROJECT
		ORDER BY CODE_NAME
	</select>




	<select id="hsResultSync" parameterType="Map" resultType="java.lang.Integer">
        <![CDATA[
 SELECT   COUNT(*) CNT
 FROM SVC0008D  A,
      ORG0001D B
 WHERE  NO =#{serviceNo}
    AND A.CODY_ID = B.MEM_ID
    AND B.MEM_CODE =#{userId}
        ]]>
	</select>

	<update id="updateInstRemark" parameterType="Map">
     <![CDATA[
        update SAL0045D
           set INSTCT = #{instct}
              ,UPD_DT = sysdate
              ,UPD_USER_ID = #{userId}
         where SALES_ORD_ID = #{SalesOrderId}
        ]]>
	</update>


	<select id="getASEntryDocNo" parameterType="Map" resultType="egovMap">
       <![CDATA[
                SELECT FN_GET_DOCNO(#{DOCNO})  asno  FROM DUAL
        ]]>
	</select>

	<!-- Added for solving HS Result number being wasted issue. Hui Ding, 2020-10-21 -->
	<select id="getHsResultDocNo" parameterType="Map" resultType="egovMap">
       <![CDATA[
                SELECT FN_GET_DOCNO(#{DOCNO})  hsrno  FROM DUAL
        ]]>
	</select>


	<select id="getASEntryId" parameterType="Map" resultType="egovMap">
       <![CDATA[

                 SELECT  SVC0001D_AS_ID_SEQ.nextval   seq FROM DUAL

        ]]>
	</select>

	<insert id="insertSVC0001D" parameterType="Map">
       <![CDATA[
       INSERT INTO SVC0001D (
                           AS_ID, AS_NO, AS_SO_ID,
                           AS_MEM_ID, AS_MEM_GRP, AS_REQST_DT,
                           AS_REQST_TM, AS_APPNT_DT, AS_APPNT_TM,
                           AS_BRNCH_ID, AS_MALFUNC_ID, AS_MALFUNC_RESN_ID,
                           AS_REM_REQSTER, AS_REM_REQSTER_CNTC, AS_CALLLOG_ID,
                           AS_STUS_ID, AS_SMS, AS_CRT_USER_ID,
                           AS_CRT_DT, AS_UPD_USER_ID, AS_UPD_DT,
                           AS_ENTRY_IS_SYNCH, AS_ENTRY_IS_EDIT, AS_TYPE_ID,
                           AS_REQSTER_TYPE_ID, AS_IS_BS_WITHIN_30DAYS, AS_ALLOW_COMM,
                           AS_PREV_MEM_ID, AS_REM_ADD_CNTC, AS_REM_REQSTER_CNTC_SMS,
                           AS_REM_ADD_CNTC_SMS, AS_SESION_CODE, CALL_MEM,
                           REF_REQST, NO
                         )
                        VALUES (
                           #{AS_ID},
                           #{AS_NO},
                           #{AS_SO_ID},
                           #{AS_MEM_ID},
                           #{AS_MEM_GRP},
                           TO_DATE(#{AS_REQST_DT},'DD/MM/YYYY'),
                           #{AS_REQST_TM},
                           TO_DATE(#{AS_APPNT_DT},'DD/MM/YYYY'),
                           #{AS_APPNT_TM},
                           #{AS_BRNCH_ID},
                           #{AS_MALFUNC_ID},
                           #{AS_MALFUNC_RESN_ID},
                           #{AS_REM_REQSTER},
                           #{AS_REM_REQSTER_CNTC},
                           #{AS_CALLLOG_ID},
                           #{AS_STUS_ID},
                           #{AS_SMS},
                           #{USER_ID},
                           SYSDATE,
                           #{USER_ID},
                           SYSDATE,
                           #{AS_ENTRY_IS_SYNCH},
                           #{AS_ENTRY_IS_EDIT},
                           #{AS_TYPE_ID},
                           #{AS_REQSTER_TYPE_ID},
                           #{AS_IS_BS_WITHIN_30DAYS},
                           #{AS_ALLOW_COMM},
                           #{AS_PREV_MEM_ID},
                           #{AS_REM_ADD_CNTC},
                           #{AS_REM_REQSTER_CNTC_SMS},
                           #{AS_REM_ADD_CNTC_SMS},
                           #{AS_SESION_CODE},
                           #{CALL_MEMBER},
                           #{REF_REQUEST},
                           #{NO}
                           )
        ]]>
	</insert>

	<insert id="insertSVC0003D" parameterType="Map">
       <![CDATA[
                           INSERT INTO  SVC0003D (
                                               AS_PIC_ID, AS_ID, PIC_NAME,
                                               PIC_CNTC, CRT_DT, CRT_USER_ID)
                               VALUES ( SVC0003D_AS_PIC_ID_SEQ.NEXTVAL , #{AS_ID} , #{PIC_NAME},
                                               #{PIC_CNTC},SYSDATE , #{USER_ID})
        ]]>
	</insert>

	<insert id="updateStateSVC0001D" parameterType="Map">
		UPDATE SVC0001D
		SET AS_STUS_ID =#{AS_RESULT_STUS_ID},
		AS_UPD_USER_ID =#{USER_ID},
		AS_UPD_DT =SYSDATE
		WHERE AS_ID =#{AS_ENTRY_ID}
	</insert>


	<insert id="insertSVC0004D" parameterType="Map">

		INSERT INTO SVC0004D (
		AS_RESULT_ID,
		AS_RESULT_NO,
		AS_ENTRY_ID,
		AS_SO_ID,
		AS_CT_ID,
		AS_SETL_DT,
		AS_SETL_TM,
		AS_RESULT_STUS_ID,
		AS_FAIL_RESN_ID,
		AS_REN_COLCT_ID,
		AS_CMMS,
		AS_BRNCH_ID,
		AS_WH_ID,
		AS_RESULT_REM,
		AS_RESULT_CRT_DT,
		AS_RESULT_CRT_USER_ID,
		AS_MALFUNC_ID,
		AS_MALFUNC_RESN_ID,
		AS_DEFECT_TYPE_ID,
		AS_DEFECT_GRP_ID,
		AS_DEFECT_ID,
		AS_DEFECT_PART_GRP_ID,
		AS_DEFECT_PART_ID,
		AS_DEFECT_DTL_RESN_ID,
		AS_SLUTN_RESN_ID,
		AS_WORKMNSH,
		AS_FILTER_AMT,
		AS_ACSRS_AMT,
		AS_TOT_AMT,
		AS_RESULT_IS_SYNCH,
		AS_RCALL,
		AS_RESULT_STOCK_USE,
		AS_RESULT_TYPE_ID,
		AS_RESULT_IS_CURR,
		AS_RESULT_MTCH_ID,
		AS_RESULT_NO_ERR,
		AS_RESULT_UPD_DT,
		AS_RESULT_UPD_USER_ID,
		AS_ENTRY_POINT,
		AS_WORKMNSH_TAX_CODE_ID,
		AS_WORKMNSH_TXS,
		AS_RESULT_MOBILE_ID,
		APPNT_DT,
		APPNT_TM,
		IN_HUSE_REPAIR_REM,
		IN_HUSE_REPAIR_REPLACE_YN,
		IN_HUSE_REPAIR_PROMIS_DT,
		IN_HUSE_REPAIR_GRP_CODE,
		IN_HUSE_REPAIR_PRODUCT_CODE,
		IN_HUSE_REPAIR_SERIAL_NO,
		RESULT_CUST_NAME,
		RESULT_MOBILE_NO,
		RESULT_REP_EMAIL_NO,
		RESULT_ACEPT_NAME,
		SGN_DT,
		TRNSC_ID,
		NO
		)
		VALUES (
		#{AS_RESULT_ID},
		#{AS_RESULT_NO},
		#{AS_ENTRY_ID},
		#{AS_SO_ID},
		#{AS_CT_ID},
		to_DATE(#{AS_SETL_DT},'dd/mm/yyyy'),
		#{AS_SETL_TM},
		NVL(#{AS_RESULT_STUS_ID},0),
		NVL(#{AS_FAIL_RESN_ID},0),
		NVL(#{AS_REN_COLCT_ID},0),
		NVL(#{AS_CMMS},0),
		NVL(#{AS_BRNCH_ID},0),
		NVL(#{AS_WH_ID},0),
		#{AS_RESULT_REM},
		sysdate,
		#{updator},
		NVL(#{AS_MALFUNC_ID},0),
		NVL(#{AS_MALFUNC_RESN_ID},0),
		NVL(#{AS_DEFECT_TYPE_ID},0),
		NVL(#{AS_DEFECT_GRP_ID},0),
		NVL(#{AS_DEFECT_ID},0),
		NVL(#{AS_DEFECT_PART_GRP_ID},0),
		NVL(#{AS_DEFECT_PART_ID},0),
		NVL(#{AS_DEFECT_DTL_RESN_ID},0),
		NVL(#{AS_SLUTN_RESN_ID},0),
		NVL(#{AS_WORKMNSH},0),
		NVL((#{AS_FILTER_AMT}),0),
		NVL(#{AS_ACSRS_AMT},0),
		NVL((#{AS_TOT_AMT}),0),
		NVL(#{AS_RESULT_IS_SYNCH},0),
		NVL(#{AS_RCALL},0),
		NVL(#{AS_RESULT_STOCK_USE},0),
		NVL(#{AS_RESULT_TYPE_ID},0),
		#{AS_RESULT_IS_CURR},
		#{AS_RESULT_MTCH_ID},
		#{AS_RESULT_NO_ERR},
		sysdate,
		#{updator},
		NVL(#{AS_ENTRY_POINT},0),
		NVL(#{AS_WORKMNSH_TAX_CODE_ID},0),
		NVL(#{AS_WORKMNSH_TXS},0),
		#{AS_RESULT_MOBILE_ID},
		to_date(#{APPNT_DT},'dd/mm/yyyy'),
		#{APPNT_TM},
		#{IN_HUSE_REPAIR_REM},
		#{IN_HUSE_REPAIR_REPLACE_YN},
		to_date(#{IN_HUSE_REPAIR_PROMIS_DT},'dd/mm/yyyy'),
		#{IN_HUSE_REPAIR_GRP_CODE},
		#{IN_HUSE_REPAIR_PRODUCT_CODE},
		#{IN_HUSE_REPAIR_SERIAL_NO},
		#{RESULT_CUST_NAME},
		#{RESULT_MOBILE_NO},
		#{RESULT_REP_EMAIL_NO},
		#{RESULT_ACEPT_NAME},
		#{SGN_DT},
		#{TRNSC_ID},
		#{NO}
		)
	</insert>

	<select id="getResultASEntryId" parameterType="Map" resultType="egovMap">
       <![CDATA[
                SELECT SVC0004D_AS_RESULT_ID_SEQ.NEXTVAL seq FROM DUAL
        ]]>
	</select>


	<insert id="insertSVC0005D" parameterType="Map">
		INSERT INTO SVC0005D (
		ASR_ITM_ID,
		AS_RESULT_ID,
		ASR_ITM_PART_ID,
		ASR_ITM_PART_DESC,
		ASR_ITM_PART_QTY,
		ASR_ITM_PART_PRC,
		ASR_ITM_CHRG_AMT,
		ASR_ITM_REM,
		ASR_ITM_CRT_USER_ID,
		ASR_ITM_CRT_DT,
		ASR_ITM_CHRG_FOC,
		ASR_ITM_EXCHG_ID,
		ASR_ITM_CLM,
		ASR_ITM_TAX_CODE_ID,
		ASR_ITM_TXS_AMT
		<!-- SERIAL_NO, EXCHN_ID, FILTER_BARCD_SERIAL_NO -->
		)
		VALUES (
		SVC0005D_ASR_ITM_ID_SEQ.nextval,
		#{AS_RESULT_ID},
		#{ASR_ITM_PART_ID},
		#{ASR_ITM_PART_DESC},
		#{ASR_ITM_PART_QTY},
		nvl(#{ASR_ITM_PART_PRC},0),
		nvl(#{ASR_ITM_CHRG_AMT},0),
		#{ASR_ITM_REM},
		#{ASR_ITM_CRT_USER_ID},
		sysdate,
		#{ASR_ITM_CHRG_FOC},
		#{ASR_ITM_EXCHG_ID},
		#{ASR_ITM_CLM},
		#{ASR_ITM_TAX_CODE_ID},
		nvl(#{ASR_ITM_TXS_AMT},0)
		<!-- #{SERIAL_NO}, #{EXCHG_ID}, #{FILTER_BARCD_SERIAL_NO} -->
		)
	</insert>


	<select id="getBSFilterInfo" parameterType="Map" resultType="egovMap">
            <![CDATA[
                            SELECT Distinct1.C1 C1  ,
                                   Distinct1.NO NO  ,
                                   Distinct1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                   Distinct1.STK_ID STK_ID  ,
                                   Distinct1.STK_CODE STK_CODE  ,
                                   Distinct1.STK_DESC STK_DESC  ,
                                   Distinct1.BS_RESULT_FILTER_CLM BS_RESULT_FILTER_CLM  ,
                                   Distinct1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                   Distinct1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                   Distinct1.USER_NAME USER_NAME,
                                   Distinct1.AMT,
                                   Distinct1.TOTAL_AMT
                              FROM ( SELECT DISTINCT Filter1.NO NO  ,
                                                     Filter1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                                     Filter1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                                     Filter1.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                                     decode(Filter1.BS_RESULT_FILTER_CLM,'0','X','O') BS_RESULT_FILTER_CLM,
                                                     Filter1.STK_ID STK_ID  ,
                                                     Filter1.STK_CODE STK_CODE  ,
                                                     Filter1.STK_DESC STK_DESC  ,
                                                     1 C1  ,
                                                     Extent4.USER_NAME USER_NAME ,
                                                     AMT,
                                                     Filter1.BS_RESULT_PART_QTY * AMT AS TOTAL_AMT
                                     FROM ( SELECT Extent1.NO NO  ,
                                                   Extent1.SCHDUL_ID SCHDUL_ID  ,
                                                   Extent1.RESULT_CRT_DT RESULT_CRT_DT  ,
                                                   Extent1.RESULT_CRT_USER_ID RESULT_CRT_USER_ID  ,
                                                   Extent1.RESULT_IS_CURR RESULT_IS_CURR  ,
                                                   Extent2.BS_RESULT_PART_QTY BS_RESULT_PART_QTY  ,
                                                   Extent2.BS_RESULT_FILTER_CLM BS_RESULT_FILTER_CLM  ,
                                                   Extent3.STK_ID STK_ID  ,
                                                   Extent3.STK_CODE STK_CODE  ,
                                                   Extent3.STK_DESC STK_DESC ,
                                                   NVL(Extent5.AMT,0) AMT
                                            FROM SVC0006D Extent1
                                                   JOIN SVC0007D Extent2   ON Extent1.RESULT_ID = Extent2.BS_RESULT_ID
                                                   JOIN SYS0026M Extent3   ON Extent2.BS_RESULT_PART_ID = Extent3.STK_ID
                                                   LEFT JOIN SAL0016M Extent5 ON Extent5.STK_ID = Extent3.STK_ID
                                             WHERE  ( 306 = Extent1.TYPE_ID )
                                                      AND ( 0 <> Extent2.BS_RESULT_PART_ID )
                                                      AND ( Extent2.BS_RESULT_PART_QTY > 0 )
                                                      AND Extent1.RESULT_STUS_CODE_ID <> 12 ) Filter1
                                            LEFT JOIN SYS0047M Extent4   ON Filter1.RESULT_CRT_USER_ID = Extent4.USER_ID
                                      WHERE  Filter1.SCHDUL_ID = #{selSchdulId}
                                      and result_is_curr = 1) Distinct1
                                      WHERE  Distinct1.STK_ID = 1428

                        ]]>

	</select>

	<select id="selectOrderMailingInfoByOrderID" parameterType="Map"
		resultType="egovMap">
		SELECT V1.ORD_ID
		, V1.ADDR_DTL
		, V1.STREET
		, V1.MAIL_AREA
		,
		V1.MAIL_POST_CODE
		, V1.MAIL_CITY
		, V1.MAIL_STATE
		, V1.MAIL_CNTY
		,
		V1.MAIL_CNT_NAME
		, V1.MAIL_CNT_NRIC
		, V1.MAIL_CNT_EMAIL
		,
		V1.MAIL_CNT_TEL_M
		, V1.MAIL_CNT_TEL_O
		, V1.MAIL_CNT_TEL_R
		,
		V1.MAIL_CNT_TEL_F
		, V1.MAIL_CNT_GENDER
		, V1.BILL_GRP_NO
		,
		V1.BILL_STATE_EMAIL
		, V1.BILL_STATE
		, V1.BILL_SMS
		, V1.BILL_POST
		,
		V1.MAIL_CNTC_ID
		, V1.MAIL_ADDR_ID
		, V1.MAIL_CNT_DEPT
		, V1.MAIL_CNT_POST
		FROM SAL1011V V1
		WHERE V1.ORD_ID = #{salesOrderId}
	</select>

	<select id="selectBasicInfo" parameterType="Map" resultType="egovMap">
		SELECT V1.ORD_ID
		, V1.ORD_NO
		, V1.RENTAL_STUS
		, V1.ORD_STUS_ID
		,
		V1.ORD_STUS_CODE
		, V1.ORD_STUS_NAME
		, V1.ORD_DT
		, V1.INSTLMT_PRIOD
		,
		V1.ORD_AMT
		, V1.ORD_MTH_RENTAL
		, V1.ORD_PV
		, V1.ORD_PV_MONTH
		,
		V1.ORD_PV_YEAR
		, V1.ORD_REF_NO
		, V1.ORD_PO_NO
		, V1.ORD_DEPT_CODE
		,
		V1.ORD_GRP_CODE
		, V1.ORD_ORG_CODE
		, V1.ORD_CRT_USER_ID
		, V1.ORD_CRT_DT
		,
		V1.APP_TYPE_ID
		, V1.APP_TYPE_CODE
		, V1.APP_TYPE_DESC
		, V1.ITM_PRC_ID
		,
		V1.STOCK_ID
		, V1.STOCK_CODE
		, V1.STOCK_DESC
		, V1.MASTER_STK_ID
		,
		V1.CUST_ID
		, V1.CUST_TYPE
		, V1.CUST_NAME
		, V1.CUST_NRIC
		, V1.CUST_DOB
		,
		V1.CUST_NATION
		, V1.CUST_GENDER
		, V1.CUST_RACE
		, V1.CUST_EMAIL
		,
		V1.CUST_VA_NO
		, TO_CHAR(V1.CUST_PASSPORT_EXPR, 'DD/MM/YYYY')
		CUST_PASSPORT_EXPR
		, TO_CHAR(V1.CUST_VISA_EXPR, 'DD/MM/YYYY')
		CUST_VISA_EXPR
		, V1.ORD_PROMO_ID
		, V1.ORD_PROMO_CODE
		, V1.ORD_PROMO_DESC
		, V1.ORD_MEM_ID
		, V1.ORD_MEM_CODE
		, V1.ORD_MEM_NAME
		, V1.ORD_MEM_NRIC
		,
		V1.ORD_MEM_TYPE_ID
		, V1.ORD_MEM_TYPE_CODE
		, V1.ORD_MEM_TYPE_NAME
		,
		V1.COOL_OFF_PRIOD
		, V1.KEYIN_BRNCH_ID
		, V1.KEYIN_BRNCH_CODE
		,
		V1.KEYIN_BRNCH_NAME
		, V1.ORD_REM
		, V1.RENT_CHK_ID
		, V1.ORD_HM_ID
		,
		V1.ORD_SM_ID
		, V1.ORD_GM_ID
		, V1.ORD_ADDR_ID
		, V1.ORD_CNTC_ID
		,
		V1.CUST_CARE_CNT_ID
		, V1.ORD_PROMO_RELATED_NO
		, V1.UPD_DT
		,
		V1.UPD_USER_ID
		, V1.JOM_PAY_REF
		, V1.STK_CTGRY_ID
		, V1.STK_CTGRY_NAME
		,
		V1.CUST_TYPE_ID
		, V1.CUST_BILL_ID
		, V1.OBLIGT_YEAR
		, NVL(V1.EMP_CHK, 0)
		AS EMP_CHK
		, NVL(V1.EX_TRADE, 0) AS EX_TRADE
		, NVL(V1.GST_CHK, 0) AS
		GST_CHK
		, V1.CNVR_SCHEME_ID
		, V1.PROMO_DISC_PERIOD_TP
		,
		V1.PROMO_DISC_PERIOD_TP_NM
		, V1.PROMO_DISC_PERIOD
		, V1.NOR_AMT
		,
		V1.NOR_RNT_FEE
		, V1.DISC_RNT_FEE
		, V1.SRV_PAC_ID
		, V1.ADV_BILL
		,
		V1.CRT_DUR
		FROM SAL1006V V1
		WHERE V1.ORD_ID = #{salesOrderId}
	</select>

	<select id="getSeqPay0031D" resultType="java.lang.Integer">
		SELECT
		PAY0031D_SEQ.NEXTVAL FROM DUAL
	</select>



	<select id="selectTaxInvoice" parameterType="Map" resultType="egovMap">


		SELECT search.TAX_INVOICE_CUST_NAME, search.TAX_INVOICE_CONT_PERS
		from
		(
		SELECT B.NAME TAX_INVOICE_CONT_PERS , D.NAME TAX_INVOICE_CUST_NAME ,
		Rank()
		over(order by c.CUST_BILL_ID desc ) rcnt_info
		FROM
		SAL0001D A,
		SAL0027D B,
		SAL0024D C,
		SAL0029D D
		WHERE A.CUST_CNT_ID = B.CUST_CNTC_ID
		AND A.CUST_BILL_ID = C.CUST_BILL_ID
		AND A.CUST_ID = D.CUST_ID
		AND
		A.SALES_ORD_ID = #{AS_SO_ID}

		) search
		where search.rcnt_info = 1
	</select>

	<select id="checkStkDuration" parameterType="Map" resultType="egovMap">
    <![CDATA[
                SELECT SRV_FILTER_STK_ID
        FROM (
            SELECT SRV_SO_ID ,fc.SRV_CONFIG_ID, SRV_FILTER_STK_ID , SRV_FILTER_PRIOD , SRV_FILTER_PRV_CHG_DT , BUFF_DAY ,
            TO_CHAR(ADD_MONTHS(SRV_FILTER_PRV_CHG_DT,SRV_FILTER_PRIOD),'YYYYMMDD') AS ECHG_PRIOD
            FROM SAL0087D fc
        LEFT JOIN SAL0090D cf ON cf.SRV_CONFIG_ID = fc.SRV_CONFIG_ID
        LEFT JOIN SVC0067M buf ON fc.SRV_FILTER_STK_ID = buf.STK_ID
        WHERE
        fc.SRV_FILTER_STUS_ID = 1
        AND cf.SRV_SO_ID = #{salesOrderId}
        AND fc.SRV_FILTER_STK_ID = #{stkId}
        ) A
            WHERE TO_CHAR(SYSDATE,'YYYYMMDD') >= ECHG_PRIOD
                AND TO_CHAR(SYSDATE,'YYYYMMDD') <= TO_CHAR((TO_DATE(ECHG_PRIOD,'YYYYMMDD') + BUFF_DAY),'YYYYMMDD')

             ]]>
	</select>


	<insert id="insert_Pay0031d" parameterType="Map">

		INSERT INTO PAY0031D
		(
		TAX_INVC_ID, TAX_INVC_REF_NO, TAX_INVC_REF_DT,
		TAX_INVC_SVC_NO,
		TAX_INVC_TYPE, TAX_INVC_CUST_NAME,
		TAX_INVC_CNTC_PERSON,
		TAX_INVC_ADDR1, TAX_INVC_ADDR2,
		TAX_INVC_ADDR3, TAX_INVC_ADDR4,
		TAX_INVC_POST_CODE,
		TAX_INVC_STATE_NAME, TAX_INVC_CNTY,
		TAX_INVC_TASK_ID,
		TAX_INVC_REM, TAX_INVC_CHRG, TAX_INVC_TXS,
		TAX_INVC_AMT_DUE, TAX_INVC_CRT_DT, TAX_INVC_CRT_USER_ID, AREA_ID
		,ADDR_DTL, STREET)
		VALUES (
		#{taxInvcId},
		#{taxInvcRefNo},
		SYSDATE,
		#{taxInvcSvcNo},
		#{taxInvcType},
		#{taxInvcCustName},
		#{taxInvcCntcPerson},
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select
		sales_ord_no from sal0001d where sales_ord_id =#{AS_SO_ID})
		,'ADDR1')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from
		sal0001d where sales_ord_id =#{AS_SO_ID})
		,'ADDR2')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id =#{AS_SO_ID})
		,'ADDR3')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id =#{AS_SO_ID})
		,'ADDR4')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id =#{AS_SO_ID})
		,'POST')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id =#{AS_SO_ID})
		,'STATE')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id =#{AS_SO_ID})
		,'CNTY')),
		#{taxInvcTaskId},
		#{taxInvcRem},
		#{taxInvcChrg},
		#{taxInvcTxs},
		#{taxInvcAmtDue},
		#{taxInvcCrtDt},
		#{taxInvcCrtUserId},
		FN_GET_SVC_BILL_MADDRESS( (select
		sales_ord_no from sal0001d where sales_ord_id =#{AS_SO_ID})
		,'AREA_ID'),
		FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from
		sal0001d where sales_ord_id =#{AS_SO_ID})
		,'ADDR1'),
		FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d where
		sales_ord_id =#{AS_SO_ID})
		,'ADDR2')
		)
	</insert>


	<insert id="insert_Pay0032d" parameterType="Map">

		INSERT INTO PAY0032D
		(
		INVC_ITM_ID, TAX_INVC_ID, INVC_ITM_TYPE,
		INVC_ITM_ORD_NO,
		INVC_ITM_PO_NO, INVC_ITM_CODE,
		INVC_ITM_DESC1, INVC_ITM_DESC2,
		INVC_ITM_SERIAL_NO,
		INVC_ITM_QTY, INVC_ITM_UNIT_PRC, INVC_ITM_GST_RATE,
		INVC_ITM_GST_TXS, INVC_ITM_CHRG, INVC_ITM_AMT_DUE,
		INVC_ITM_ADD1,
		INVC_ITM_ADD2, INVC_ITM_ADD3,
		INVC_ITM_ADD4, INVC_ITM_POST_CODE,
		INVC_ITM_AREA_NAME,
		INVC_ITM_STATE_NAME, INVC_ITM_CNTY,
		INVC_ITM_INSTALL_DT,
		INVC_ITM_RETN_DT, INVC_ITM_BILL_REF_NO ,AREA_ID
		,ADDR_DTL, STREET)
		VALUES (
		PAY0032D_SEQ.NEXTVAL,
		#{taxInvcId},
		#{invcItmType},
		(select sales_ord_no from sal0001d where sales_ord_id
		=#{invcItmOrdNo}),
		#{invcItmPoNo},
		#{invcItmCode},
		#{invcItmDesc1},
		#{invcItmDesc2},
		#{invcItmSerialNo},
		#{invcItmQty},
		#{invcItmUnitPrc},
		#{invcItmGstRate},
		#{invcItmGstTxs},
		#{invcItmChrg},
		#{invcItmAmtDue},
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR1')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR2')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR3')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR4')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'POST')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'CITY')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'STATE')),
		UPPER(FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d
		where sales_ord_id
		=#{invcItmOrdNo}) ,'CNTY')),
		#{invcItmInstallDt},
		#{invcItmRetnDt},
		#{invcItmBillRefNo},
		FN_GET_SVC_BILL_MADDRESS( (select
		sales_ord_no from sal0001d where sales_ord_id
		=#{invcItmOrdNo})
		,'AREA_ID'),
		FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from
		sal0001d where sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR1'),
		FN_GET_SVC_BILL_MADDRESS( (select sales_ord_no from sal0001d where
		sales_ord_id
		=#{invcItmOrdNo}) ,'ADDR2')
		)

	</insert>


	<insert id="insert_Pay0016d" parameterType="Map">

		INSERT INTO PAY0016D
		(
		ACC_BILL_ID, ACC_BILL_TASK_ID, ACC_BILL_REF_DT,
		ACC_BILL_REF_NO,
		ACC_BILL_ORD_ID, ACC_BILL_ORD_NO,
		ACC_BILL_TYPE_ID, ACC_BILL_MODE_ID,
		ACC_BILL_SCHDUL_ID,
		ACC_BILL_SCHDUL_PRIOD, ACC_BILL_ADJ_ID,
		ACC_BILL_SCHDUL_AMT,
		ACC_BILL_ADJ_AMT, ACC_BILL_TXS_AMT,
		ACC_BILL_NET_AMT,
		ACC_BILL_STUS, ACC_BILL_REM, ACC_BILL_CRT_DT,
		ACC_BILL_CRT_USER_ID, ACC_BILL_GRP_ID, ACC_BILL_TAX_CODE_ID,
		ACC_BILL_TAX_RATE, ACC_BILL_ACCT_CNVR, ACC_BILL_CNTRCT_ID)
		VALUES (
		PAY0016D_SEQ.NEXTVAL,
		#{accBillTaskId},
		#{accBillRefDt},
		#{accBillRefNo},
		#{accBillOrdId},
		(SELECT SALES_ORD_NO FROM SAL0001D
		WHERE SALES_ORD_ID =#{accBillOrdId} ) ,
		#{accBillTypeId},
		#{accBillModeId},
		#{accBillSchdulId},
		#{accBillSchdulPriod},
		#{accBillAdjId},
		#{accBillSchdulAmt},
		#{accBillAdjAmt},
		#{accBillTxsAmt},
		#{accBillNetAmt},
		#{accBillStus},
		#{accBillRem},
		#{accBillCrtDt},
		#{accBillCrtUserId},
		#{accBillGrpId},
		#{accBillTaxCodeId},
		#{accBillTaxRate},
		#{accBillAcctCnvr},
		#{accBillCntrctId}
		)
	</insert>

	<insert id="insert_Pay0006d" parameterType="Map">

		INSERT INTO PAY0006D
		(
		AS_LDGR_ID, AS_ID, AS_DOC_NO,
		AS_LG_DOC_TYPE_ID, AS_LG_DT, AS_LG_AMT,
		AS_LG_UPD_USER_ID, AS_LG_UPD_DT, AS_SO_NO,
		AS_RESULT_NO, AS_SO_ID,
		AS_ADV_PAY,
		R01)
		VALUES (
		PAY0006D_SEQ.NEXTVAL,
		#{asId},
		#{asDocNo},
		#{asLgDocTypeId},
		#{asLgDt},
		#{asLgAmt},
		#{asLgUpdUserId},
		#{asLgUpdDt},
		(SELECT SALES_ORD_NO FROM SAL0001D WHERE SALES_ORD_ID =#{asSoId} ) ,
		#{asResultNo},
		#{asSoId},
		#{asAdvPay},
		#{r01}
		)
	</insert>


	<insert id="insert_Pay0007d" parameterType="Map">
		INSERT INTO PAY0007D
		(
		BILL_ID, BILL_TYPE_ID, BILL_SO_ID,
		BILL_MEM_ID, BILL_AS_ID,
		BILL_PAY_TYPE_ID,
		BILL_NO, BILL_MEM_SHIP_NO, BILL_DT,
		BILL_AMT,
		BILL_REM, BILL_IS_PAID,
		BILL_IS_COMM, UPD_USER_ID, UPD_DT,
		SYNC_CHK,
		COURS_ID, STUS_ID)
		VALUES (
		PAY0007D_SEQ.NEXTVAL,
		#{billTypeId},
		#{billSoId},
		#{billMemId},
		#{billAsId},
		#{billPayTypeId},
		#{billNo},
		#{billMemShipNo},
		#{billDt},
		#{billAmt},
		#{billRem},
		#{billIsPaid},
		#{billIsComm},
		#{updUserId},
		#{updDt},
		#{syncChk},
		#{coursId},
		#{stusId})
	</insert>

	<select id="selectQryUsedFilter" parameterType="Map" resultType="egovMap">

		select a.BS_RESULT_PART_ID
		,a.BS_RESULT_PART_DESC
		,a.BS_RESULT_PART_QTY
		,a.BS_RESULT_REM
		,a.BS_RESULT_FILTER_CLM
		,c.NO
		,d.CUST_ID
		,TO_CHAR(b.RESULT_CRT_DT, 'DD/MM/YYYY') RESULT_CRT_DT
		,a.SERIAL_NO
		,A.OLD_FILTER_BARCD_SERIAL_NO old_serial_no
		,c.CODY_ID
		,b.RESULT_ID
		from SVC0007D a
		left join SVC0006D b ON
		b.RESULT_ID = a.BS_RESULT_ID
		left join SVC0008D c ON c.SCHDUL_ID =
		b.SCHDUL_ID
		left join SAL0001D d ON d.SALES_ORD_ID = b.SALES_ORD_ID
		where a.BS_RESULT_ID = #{ResultMatchID}
		order by a.BS_RESULT_ITM_ID

	</select>

	<select id="selectQryUsedFilter2" parameterType="Map"
		resultType="egovMap">
		SELECT a.BS_RESULT_PART_ID
		, a.BS_RESULT_PART_DESC
		,
		a.BS_RESULT_PART_QTY
		, a.BS_RESULT_REM
		, a.BS_RESULT_FILTER_CLM
		, c.NO
		,
		d.CUST_ID
		, TO_DATE(b.RESULT_CRT_DT, 'DD/MM/YYYY') RESULT_CRT_DT
		,
		a.SERIAL_NO
		, c.CODY_ID
		, b.RESULT_ID
		FROM SVC0007D a
		LEFT JOIN SVC0006D b
		ON b.RESULT_ID = a.BS_RESULT_ID
		LEFT JOIN SVC0008D c ON c.SCHDUL_ID =
		b.SCHDUL_ID
		LEFT JOIN SAL0001D d ON d.SALES_ORD_ID = b.SALES_ORD_ID
		WHERE a.BS_RESULT_ID = #{BSResultID}
		ORDER BY a.BS_RESULT_ITM_ID
	</select>

	<insert id="addusedFilter_Rev" parameterType="Map">
		insert into
		log0082m
		(SEQ
		,SVC_ORD_ID
		,CUST_ID
		,SVC_DT
		,STK_ID
		,QTY
		,OLD_SERIAL
		,MEM_ID
		,RESULT_ID
		)
		values
		(
		LOG0082M_SEQ.NEXTVAL
		,#{HSNo}
		,#{CustId}
		,TO_DATE(#{CreatedDt}, 'DD/MM/YYYY')
		,#{PartId}
		,#{PartQty}
		,nvl(#{OldSerialNo}, '')
		,#{CodyId}
		,#{ResultId}

		)
	</insert>

	<insert id="addusedFilter" parameterType="Map">
		insert into log0082m
		(SEQ
		,SVC_ORD_ID
		,CUST_ID
		,SVC_DT
		,STK_ID
		,QTY
		,OLD_SERIAL
		,MEM_ID
		,RESULT_ID
		)
		values
		(
		LOG0082M_SEQ.NEXTVAL
		,#{HSNo}
		,#{CustId}
		,sysdate
		,#{BSResultPartID}
		,#{BSResultPartQty}
		,nvl(#{oldSerialNo}, '')
		,#{CodyId}
		,#{ResultId}

		)
	</insert>

	<select id="selectTotalFilter" parameterType="Map" resultType="Integer">

		select COUNT(*)
		from SVC0007D
		where BS_RESULT_ID = #{ResultMatchID}


	</select>

	<select id="selectQryUsedFilterNew" parameterType="Map"
		resultType="egovMap">

		select c.NO
		,d.CUST_ID
		,TO_CHAR(b.RESULT_CRT_DT,
		'DD/MM/YYYY') RESULT_CRT_DT
		,c.CODY_ID
		,b.RESULT_ID
		from SVC0006D b
		left
		join SVC0008D c ON c.SCHDUL_ID = b.SCHDUL_ID
		left join SAL0001D d ON
		d.SALES_ORD_ID = b.SALES_ORD_ID
		where b.RESULT_ID = #{ResultMatchID}


	</select>

	<select id="selectCustomer" parameterType="Map" resultType="Integer">

		select A.CUST_ID
		from SAL0001D A
		where A.SALES_ORD_ID = #{hidSalesOrdId}


	</select>

	<select id="selectSerialNo" parameterType="Map" resultType="String">

		select A.SERIAL_NO
		from SVC0007D A
		where A.BS_RESULT_ID = #{bsResultId}


	</select>


	<select id="selectCody" parameterType="Map" resultType="Integer">

		select
		A.CODY_ID
		from SVC0008D A
		where A.SCHDUL_ID = #{hidschdulId}


	</select>

	<insert id="insertUsedFilter" parameterType="Map">
		insert into log0082m
		(SEQ
		,SVC_ORD_ID
		,CUST_ID
		,SVC_DT
		,STK_ID
		,QTY
		,OLD_SERIAL
		,NEW_SERIAL
		,MEM_ID
		,RESULT_ID
		)
		values
		(
		LOG0082M_SEQ.NEXTVAL
		,#{hsNo}
		,#{custId}
		,sysdate
		,#{bsResultPartId}
		,#{bsResultPartQty}
		,nvl(#{oldSerialNo}, '')
		,nvl(#{serialNo}, '')
		,#{bsCodyId}
		,#{bsResultId}

		)
	</insert>

	<select id="checkHsBillASInfo" parameterType="Map" resultType="egovMap">
    <![CDATA[
SELECT
    SVC.SALES_ORD_ID,
    SOM.SALES_ORD_NO,
    SOD.ITM_STK_ID ITM_STK_ID,
    SVC.NO,
    SVDD.BS_RESULT_PART_ID,
    SVC.STUS_CODE_ID,
    EXTENT1.TAX_INVC_ID TAXINVOICEID1,
    EXTENT1.TAX_INVC_REF_NO BR_NO,
    EXTENT2.INVC_ITM_ID TXINVOICEITEMID,
    EXTENT2.INVC_ITM_TYPE TXINVOICEITEMTYPEID,
    EXTENT2.INVC_ITM_ORD_NO INVC_ITM_ORD_NO,
    EXTENT2.INVC_ITM_CODE INVC_ITM_CODE,
    EXTENT2.INVC_ITM_DESC1 INVC_ITM_DESC1,
    EXTENT2.INVC_ITM_QTY INVC_ITM_QTY,
    EXTENT2.INVC_ITM_UNIT_PRC INVC_ITM_UNIT_PRC,
    EXTENT2.INVC_ITM_GST_RATE INVC_ITM_GST_RATE,
    EXTENT2.INVC_ITM_GST_TXS INVC_ITM_GST_TXS,
    EXTENT2.INVC_ITM_CHRG INVC_ITM_CHRG,
    EXTENT2.INVC_ITM_AMT_DUE INVC_ITM_AMT_DUE,
    EXTENT1.TAX_INVC_SVC_NO INVC_SVC_NO,
    EXTENT3.AS_ENTRY_ID AS_ID,
    FN_GET_ORDER_SERIAL(SVC.SALES_ORD_ID, STK.STK_CODE) LAST_SERIAL_NO,
    SVD.NO HSR_NO
FROM
   SVC0008D SVC
    JOIN SAL0001D SOM ON SVC.SALES_ORD_ID = SOM.SALES_ORD_ID
    JOIN SAL0002D SOD ON SOM.SALES_ORD_ID = SOD.SALES_ORD_ID
    JOIN SVC0006D SVD ON SVD.RESULT_ID = (SELECT MAX(RESULT_ID) FROM SVC0006D WHERE SCHDUL_ID = SVC.SCHDUL_ID AND RESULT_STUS_CODE_ID = 4)
    LEFT JOIN SVC0007D SVDD ON SVD.RESULT_ID = SVDD.BS_RESULT_ID AND SVDD.BS_RESULT_PART_ID = 1428
    LEFT JOIN SVC0004D EXTENT3 ON EXTENT3.NO = SVD.NO
                              AND AS_RESULT_STUS_ID = 4
    LEFT JOIN PAY0031D EXTENT1 ON EXTENT1.TAX_INVC_SVC_NO = EXTENT3.AS_RESULT_NO
    LEFT JOIN PAY0032D EXTENT2 ON EXTENT1.TAX_INVC_ID = EXTENT2.TAX_INVC_ID
    JOIN SYS0026M STK ON STK.STK_ID = SOD.ITM_STK_ID
WHERE
            som.STUS_CODE_ID = 4
              AND svc.MONTH = EXTRACT(MONTH FROM SYSDATE)
             AND svc.YEAR = EXTRACT(YEAR FROM SYSDATE)
            AND svc.SCHDUL_ID = #{schdulId}
			AND svc.SALES_ORD_ID = #{salesOrdId}

             ]]>
	</select>

	<select id="checkDuplicateReverse" parameterType="Map" resultType="int">
	   SELECT COUNT(*) FROM (
		   SELECT RESULT_MTCH_ID, ROW_NUMBER() OVER (ORDER BY RESULT_ID DESC) R FROM SVC0006D WHERE SCHDUL_ID = #{schdulId}
	   ) WHERE R = 1 AND RESULT_MTCH_ID <![CDATA[ <> ]]> 0
	</select>

	<select id="checkHsBillASInfoPass" parameterType="Map"
		resultType="egovMap">
    <![CDATA[
      SELECT SVC.SALES_ORD_ID,
                 SOM.SALES_ORD_NO,
                 SOD.ITM_STK_ID ITM_STK_ID,
                 SVC.NO,
                 SVDD.BS_RESULT_PART_ID,
                 SVC.STUS_CODE_ID,
                 EXTENT1.TAX_INVC_ID TAXINVOICEID1,
                 EXTENT1.TAX_INVC_REF_NO BR_NO,
                 EXTENT2.INVC_ITM_ID TXINVOICEITEMID,
                 EXTENT2.INVC_ITM_TYPE TXINVOICEITEMTYPEID,
                 EXTENT2.INVC_ITM_ORD_NO INVC_ITM_ORD_NO,
                 EXTENT2.INVC_ITM_CODE INVC_ITM_CODE,
                 EXTENT2.INVC_ITM_DESC1 INVC_ITM_DESC1,
                 EXTENT2.INVC_ITM_QTY INVC_ITM_QTY,
                 EXTENT2.INVC_ITM_UNIT_PRC INVC_ITM_UNIT_PRC,
                 EXTENT2.INVC_ITM_GST_RATE INVC_ITM_GST_RATE,
                 EXTENT2.INVC_ITM_GST_TXS INVC_ITM_GST_TXS,
                 EXTENT2.INVC_ITM_CHRG INVC_ITM_CHRG,
                 EXTENT2.INVC_ITM_AMT_DUE INVC_ITM_AMT_DUE,
                 EXTENT1.TAX_INVC_SVC_NO INVC_SVC_NO,
                 EXTENT3.AS_ENTRY_ID AS_ID,
                 FN_GET_ORDER_SERIAL(SVC.SALES_ORD_ID, STK.STK_CODE) LAST_SERIAL_NO,
                 SVD.NO HSR_NO
      FROM SVC0008D SVC
       JOIN SAL0001D SOM ON SVC.SALES_ORD_ID = SOM.SALES_ORD_ID
       JOIN SAL0002D SOD ON SOM.SALES_ORD_ID = SOD.SALES_ORD_ID
       JOIN SVC0006D SVD ON SVD.RESULT_ID = (SELECT MAX(RESULT_ID)
                                                                    FROM SVC0006D
                                                                    WHERE SCHDUL_ID = SVC.SCHDUL_ID
                                                                        AND RESULT_STUS_CODE_ID = 4)
       LEFT JOIN SVC0007D SVDD ON SVD.RESULT_ID = SVDD.BS_RESULT_ID AND SVDD.BS_RESULT_PART_ID = 1428
       LEFT JOIN SVC0004D EXTENT3 ON EXTENT3.NO = SVD.NO
                                                AND AS_RESULT_STUS_ID = 4
       LEFT JOIN PAY0031D EXTENT1 ON EXTENT1.TAX_INVC_SVC_NO = EXTENT3.AS_RESULT_NO
       LEFT JOIN PAY0032D EXTENT2 ON EXTENT1.TAX_INVC_ID = EXTENT2.TAX_INVC_ID
       JOIN SYS0026M STK ON STK.STK_ID = SOD.ITM_STK_ID
      WHERE som.STUS_CODE_ID = 4
          AND svc.SCHDUL_ID = #{schdulId}
          AND svc.SALES_ORD_ID = #{salesOrdId}
   ]]>
	</select>

	<update id="updateHsResultMas" parameterType="Map">
		update SVC0006D
		set
		RESULT_STUS_CODE_ID = #{ResultStatusCodeID}
		,RESULT_IS_CURR = 0
		,RESULT_UPD_USER_ID = #{ResultCreator}
		,RESULT_UPD_DT = SYSDATE
		where
		SCHDUL_ID = #{ScheduleID}
	</update>

	<update id="updateIsCurrent_SVC0004D" parameterType="Map">
		UPDATE
		SVC0004D SET AS_RESULT_IS_CURR = 0
		WHERE AS_ENTRY_ID = #{AS_ENTRY_ID}
	</update>

	<select id="checkWarrentyStatus" parameterType="Map" resultType="egovMap">
    <![CDATA[
SELECT DISTINCT A.MEMBERSHIP_NO FROM (
    SELECT SRV_MEM_NO MEMBERSHIP_NO,
             SRV_STUS_CODE_ID SRV_STUS
      FROM SAL0095D
      WHERE SRV_MEM_ID IN ( SELECT MAX(SRV_MEM_ID) FROM SAL0095D
                   WHERE SRV_SALES_ORD_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
                   AND SYSDATE BETWEEN SRV_START_DT AND SRV_EXPR_DT GROUP BY SRV_SALES_ORD_ID)
                   AND SRV_STUS_CODE_ID = 4
    UNION ALL

            SELECT SRV_CNTRCT_REF_NO MEMBERSHIP_NO ,
            SRV_CNTRCT_STUS_ID SRV_STUS
             FROM SAL0077D SC
              LEFT JOIN SAL0088D P
                     ON P.SRV_PRD_CNTRCT_ID = SC.SRV_CNTRCT_ID
            WHERE SC.SRV_CNTRCT_ORD_ID  IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
            AND SC.SRV_CNTRCT_STUS_ID = 4

            AND FN_GET_FIRST_DAY_MONTH(SYSDATE) BETWEEN FN_GET_FIRST_DAY_MONTH(SRV_PRD_START_DT) AND FN_GET_LAST_DAY_MONTH(SRV_PRD_EXPR_DT)
       ) A WHERE A.MEMBERSHIP_NO IS NOT NULL


             ]]>
	</select>

	<select id="checkSvcMembershipInfo" parameterType="Map"
		resultType="egovMap">
    <![CDATA[
SELECT DISTINCT A.ORD_ID FROM (
    SELECT MAX(SRV_SALES_ORD_ID) AS ORD_ID
    FROM SAL0095D
    WHERE SRV_SALES_ORD_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
    AND SRV_STUS_CODE_ID = 4
    AND SRV_MEM_PAC_ID IN (9,12,14,17,19,22,23)
        AND FN_GET_FIRST_DAY_MONTH(SYSDATE) BETWEEN FN_GET_FIRST_DAY_MONTH(SRV_START_DT) AND FN_GET_LAST_DAY_MONTH(SRV_EXPR_DT)
        AND SRV_DUR <> 84

    UNION ALL

            SELECT SC.SRV_CNTRCT_ORD_ID AS ORD_ID
             FROM SAL0077D SC
              LEFT JOIN SAL0088D P
                     ON P.SRV_PRD_CNTRCT_ID = SC.SRV_CNTRCT_ID
            WHERE SC.SRV_CNTRCT_ORD_ID  IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
            AND SC.SRV_CNTRCT_STUS_ID = 4
            AND SC.SRV_CNTRCT_PCKG_ID = 1
            AND FN_GET_FIRST_DAY_MONTH(SYSDATE) BETWEEN FN_GET_FIRST_DAY_MONTH(SRV_PRD_START_DT) AND FN_GET_LAST_DAY_MONTH(SRV_PRD_EXPR_DT)
            ) A WHERE A.ORD_ID IS NOT NULL

             ]]>
	</select>


	<select id="checkRentalStatusInfo" parameterType="Map"
		resultType="egovMap">
    <![CDATA[
    SELECT SALES_ORD_ID , STUS_CODE_ID FROM SAL0071D WHERE
    SALES_ORD_ID IN (SELECT SALES_ORD_ID FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo})
    AND STUS_CODE_ID IN ('INV','SUS','RET','TER','CAN','WOF')
             ]]>
	</select>

	<select id="checkOrderStatusInfo" parameterType="Map"
		resultType="egovMap">
    <![CDATA[
    SELECT SALES_ORD_ID , STUS_CODE_ID  FROM SAL0001D WHERE SALES_ORD_NO = #{salesOrderNo} AND STUS_CODE_ID IN (1,10)
             ]]>
	</select>


	<select id="getAppTypeList" parameterType="Map" resultType="egovMap">
		SELECT Project1.CODE_ID CODE_ID ,
		Project1.CODE_MASTER_ID
		CODE_MASTER_ID ,
		Project1.CODE CODE ,
		Project1.CODE_NAME CODE_NAME ,
		Project1.DISAB DISAB ,
		Project1.CRT_DT CRT_DT ,
		Project1.CRT_USER_ID
		CRT_USER_ID ,
		Project1.UPD_DT UPD_DT ,
		Project1.UPD_USER_ID UPD_USER_ID
		,
		Project1.OLD_CODE_ID OLD_CODE_ID
		FROM
		(SELECT Extent1.CODE_ID CODE_ID ,
		Extent1.CODE_MASTER_ID CODE_MASTER_ID ,
		Extent1.CODE CODE ,
		Extent1.CODE_NAME CODE_NAME ,
		Extent1.DISAB DISAB ,
		Extent1.CRT_DT
		CRT_DT ,
		Extent1.CRT_USER_ID CRT_USER_ID ,
		Extent1.UPD_DT UPD_DT ,
		Extent1.UPD_USER_ID UPD_USER_ID ,
		Extent1.OLD_CODE_ID OLD_CODE_ID
		FROM
		SYS0013M Extent1
		WHERE ( Extent1.CODE_MASTER_ID = #{codeId} )
		AND
		CODE_ID IN (66,67,68,141,142,143,144,145,1412,140)
		) Project1
		ORDER BY
		Project1.CODE_NAME ASC
	</select>

	<update id="updateDisinfecSrv" parameterType="Map">
		UPDATE SAL0090D SET DISINF_SRV = 1,
		DISINF_SRV_DT = SYSDATE
		WHERE
		SRV_SO_ID =#{hidSalesOrdId}
		AND SRV_STUS_ID = 1
		AND DISINF_SRV <![CDATA[ <> ]]>
		1
	</update>

	<select id="instChkLst" parameterType="Map" resultType="egovMap">
    <![CDATA[
      SELECT ROWNUM AS ROW_NUMBER
               , Extent1.CODE_ID CODE_ID
               , Extent1.CODE_NAME CODE_NAME
               , Extent1.CODE_DESC CODE_DESC
               , Extent1.DISAB DISAB
      FROM SYS0013M Extent1
      WHERE CODE_MASTER_ID = '453' AND DISAB = 0
      ORDER BY CODE_ID
    ]]>
	</select>

	<update id="editHSEditSettleDate" parameterType="Map">
        UPDATE SVC0006D
        SET
        SETL_DT = TO_DATE(#{settleDt}, 'DD/MM/YY')
        ,RESULT_UPD_USER_ID = #{updator}
        ,RESULT_UPD_DT = SYSDATE
        WHERE SCHDUL_ID = #{selSchdulId}
        AND RESULT_ID = #{resultId}
    </update>

    <select id="selectFilterSerial" parameterType="Map" resultType="int">
        SELECT COUNT(1) AS CNT
          FROM LOG0100M
        WHERE SERIAL_NO = #{serialNo}
        and LAST_LOC_ID = #{lastLocId}
    </select>

    <update id="updateHsFilterSerial" parameterType="Map">
        UPDATE LOG0100M
        SET
        STUS_CODE = 'C'
        , LAST_SALES_ORD_ID = #{salesOrdId}
        , HS_NO = #{serviceNo}
        , UPD_USER_ID = '349'
        , UPD_DT = SYSDATE
        WHERE SERIAL_NO = #{serialNo}
        and LAST_LOC_ID = #{lastLocId}
    </update>

    <select id="selectBrchDt" parameterType="Map" resultType="egovMap">
        SELECT BRNCH.BRNCH_ID, T9.DEPT_CODE, T9.GRP_CODE, T9.ORG_CODE
        FROM SYS0005M BRNCH
        LEFT JOIN SYS0047M USR ON USR.USER_BRNCH_ID = BRNCH.BRNCH_ID
        LEFT JOIN ORG0001D ORG ON ORG.MEM_CODE = USR.HR_CODE
        LEFT JOIN ORG1001V T9  ON T9.MEM_CODE = USR.USER_NAME
        WHERE 1 = 1
        AND USR.USER_BRNCH_ID = (SELECT BRNCH FROM ORG0001D WHERE MEM_ID = #{hidCodyId})
        AND USR.HR_CODE = #{userId}
    </select>

    <select id="selectOldContactDt" parameterType="Map" resultType="egovMap">
        <!-- 20230305 Celeste: To change to update Installation Contact -->
        <!-- SELECT CUST.CUST_CNTC_ID,
        CUST.TEL_M1 OLD_HP_NO,
        CUST.TEL_O OLD_OFFICE_NO,
        CUST.TEL_R OLD_HOME_NO,
        CUST.EMAIL OLD_EMAIL,
        SAL.CUST_ID,
        CUSTM.NAME CUST_NAME
        FROM SAL0001D SAL
        JOIN SAL0027D CUST ON SAL.CUST_ID = CUST.CUST_ID AND SAL.CUST_CNT_ID = CUST.CUST_CNTC_ID
        JOIN SAL0029D CUSTM ON CUSTM.CUST_ID = CUST.CUST_ID
        JOIN SVC0008D HS   ON HS.SALES_ORD_ID = SAL.SALES_ORD_ID
        WHERE HS.SALES_ORD_ID = #{orderId} AND HS.NO = #{hsNo} -->

        SELECT CUST.CUST_CNTC_ID,
        CUST.TEL_M1 OLD_HP_NO,
        CUST.TEL_O OLD_OFFICE_NO,
        CUST.TEL_R OLD_HOME_NO,
        CUST.EMAIL OLD_EMAIL,
        CUST.CUST_ID,
        CUST.NAME CUST_NAME
        FROM SVC0008D HS
        JOIN SAL0045D INSTL ON INSTL.SALES_ORD_ID = HS.SALES_ORD_ID
        JOIN SAL0027D CUST ON INSTL.CNT_ID = CUST.CUST_CNTC_ID
        WHERE HS.SALES_ORD_ID = #{orderId} AND HS.NO = #{hsNo}
    </select>

    <insert id="insertSAL0329D" parameterType="Map">
        INSERT INTO SAL0329D
        (TICKET_NO
        , HS_NO
        , HSR_NO
        , ORDER_ID
        , ORDER_NO
        , CUST_ID
        , CUST_NAME
        , STATUS
        , CNTC_ID
        , REQST_DT
        , OLD_HP_NO
        , OLD_HOME_NO
        , OLD_OFFICE_NO
        , OLD_EMAIL
        , NEW_HP_NO
        , NEW_HOME_NO
        , NEW_OFFICE_NO
        , NEW_EMAIL
        , POSTING_BRCH
        , DEPT_CODE
        , ORG_CODE
        , GRP_CODE
        , REM
        , CRT_DT
        , CRT_USER_ID
        , UPD_DT
        , UPD_USER_ID
        )
        VALUES
        (SAL0329D_TICKET_NO_SEQ.NEXTVAL
        , #{hsNo}
        , #{hsrNo}
        , #{salesOrderId}
        , #{salesOrderNo}
        , #{custId}
        , #{custName}
        , #{status}
        , #{cntcId}
        , SYSDATE
        , #{oldHpNo}
        , #{oldHomeNo}
        , #{oldOfficeNo}
        , #{oldEmail}
        , #{newHpNo}
        , #{newHomeNo}
        , #{newOfficeNo}
        , #{newEmail}
        , #{brnchId}
        , #{deptCode}
        , #{orgCode}
        , #{grpCode}
        , #{rem}
        , SYSDATE
        , (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{userId})
        , SYSDATE
        ,  (SELECT USER_ID FROM SYS0047M WHERE USER_NAME = #{userId})
        )

    </insert>

    <select id="selectOldQryConfig" parameterType="Map" resultType="egovMap">
        select NVL(s07.OLD_FILTER_BARCD_SERIAL_NO,'') old_serial_no
          from svc0007d s07
           join svc0006d s06 on s06.result_id = s07.bs_result_id
           join (
           select max(SCHDUL_ID) SCHDUL_ID
           from svc0008d where sales_ord_id  = #{salOrdId}
           and no <![CDATA[<>]]> #{hsNo}
           ) s08
           on s08.SCHDUL_ID = s06.SCHDUL_ID
    </select>

</mapper>