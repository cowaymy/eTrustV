<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
    namespace="com.coway.trust.biz.organization.organization.impl.MemberListMapper">

    <select id="getDocNo" parameterType="Map" resultType="egovMap">
        select FN_GET_DOCNO(#{docNo})  doc_No  , #{docNo} as doc_No_Id FROM DUAL
    </select>

    <!-- searchOrganization Gruop List -->
    <select id="nationality" parameterType="Map" resultType="egovMap">
        SELECT
        Extent1.CNTY_ID CountryID,
        Extent1.CODE Code,
        Extent1.NAME Name,
        Extent1.STUS_CODE_ID StatusCodeID,
        Extent1.CRT_DT Created,
        Extent1.CRT_USER_ID Creator,
        Extent1.UPD_DT Updated,
        Extent1.UPD_USER_ID Updator
        FROM SYS0015M Extent1
        ORDER BY Extent1.NAME ASC
    </select>

    <select id="selectStatus" parameterType="Map" resultType="egovMap">
        SELECT
        Distinct1.StatusCodeID StatusCodeID,
        Distinct1.Code Code,
        Distinct1.Name Name
        FROM ( SELECT DISTINCT
        Extent1.STUS_CODE_ID StatusCodeID,
        Extent1.CODE Code,
        Extent1.NAME Name
        FROM  SYS0038M Extent1
        INNER JOIN ORG0001D Extent2 ON Extent1.STUS_CODE_ID = Extent2.STUS
         union
        SELECT DISTINCT
        Extent1.STUS_CODE_ID StatusCodeID,
        Extent1.CODE Code,
        Extent1.NAME Name
        FROM  SYS0038M Extent1
        INNER JOIN ORG0003D Extent2 ON Extent1.STUS_CODE_ID = Extent2.STUS_ID
    )  Distinct1
    </select>

        <select id="selectPosition" parameterType="Map" resultType="egovMap">
            select b.mem_org_lvl as position_level
                   , b.mem_org_desc as position_name
              from sys0013m a,
                    ORG0012D b
            where a.code_id = b.mem_type_id
            and b.mem_type_id = #{memberType}
          </select>

        <select id="selectReplaceCTList" parameterType="Map" resultType="egovMap">
            select a.mem_id  as code_Id, a.mem_code || ' - ' || a.name as code_Name, a.name,a.stus, c.name, a.mem_type, b.code, d.mem_lvl, e.mem_org_desc,a.brnch as brnch_id, f.name, d.ct_sub_grp
            FROM   ORG0001D a ,   /*Member eg.get mem_type eg HP, CODY, CT*/
                        SYS0013M b,  /*CodeDetail eg.HP, CODY, CT full desc*/
                        SYS0038M c,  /*StatusCode    eg.active, not active*/
                        ORG0005D d,  /*MemberOrganization eg.get mem_LVL*/
                        ORG0012D e,  /* MemberOrganizationDesc eg get full desc of mem_type and mem_LVL*/
                        SYS0005M f   /*Branch*/
             WHERE a.MEM_TYPE = b.CODE_ID
             AND  a.STUS = c.STUS_CODE_ID
             AND d.MEM_ID = a.MEM_ID
             AND  e.MEM_TYPE_ID =  a.MEM_TYPE
             AND e.MEM_ORG_LVL =  d.MEM_LVL
             AND  f.brnch_id = d.brnch_id
             AND a.stus = 1                          /* fixed*/
             AND d.mem_lvl IN ('3', '4')                     /* fixed*/
             AND a.brnch =#{brnch_id}                    /*dynamid get from parameter*/
             <!-- AND d.ct_sub_grp = (select  ct_sub_grp from ORG0005D where mem_id =#{mem_id}) -->    /*dynamid get from parameter*/
             AND a.mem_code != #{mem_code}   /*dynamid get from parameter*/
          </select>

    <select id="selectUserBranch" parameterType="Map" resultType="egovMap">
        SELECT
        Project1.BranchID AS BranchID,
        Project1.C1 C1
        FROM ( SELECT
            Extent1.BRNCH_ID BranchID,
            Extent1.CODE||' - '||Extent1.NAME C1
            FROM SYS0005M Extent1
            WHERE 1 = Extent1.STUS_ID
          )  Project1
        ORDER BY Project1.C1 ASC
    </select>

     <select id="selectUser" parameterType="Map" resultType="egovMap">
        <![CDATA[
        SELECT
         Extent1 . USER_ID   UserID ,
         Extent1 . USER_NAME   UserName ,
         Extent1 . USER_PASSWD   UserPassword ,
         Extent1 . USER_FULL_NAME   UserFullName ,
         Extent1 . USER_EMAIL   UserEmail ,
         Extent1 . USER_STUS_ID   UserStatusID ,
         Extent1 . USER_BRNCH_ID   UserBranchID ,
         Extent1 . USER_DEPT_ID   UserDeptID ,
         Extent1 . USER_UPD_USER_ID   UserUpdateBy ,
         Extent1 . USER_UPD_DT   UserUpdateAt ,
         Extent1 . USER_SYNC_CHK   UserSyncCheck ,
         Extent1 . USER_NRIC   UserNRIC ,
         Extent1 . USER_DT_JOIN   UserDateJoin ,
         Extent1 . USER_GSEC_SYN_CHK   UserGsecSynCheck ,
         Extent1 . USER_PASSWD_LAST_UPD_DT   UserPasswdLastUpdateAt ,
         Extent1 . USER_TYPE_ID   UserTypeID ,
         Extent1 . USER_DFLT_PASSWD   UserDefaultPasswd ,
         Extent1 . USER_VAL_ID_FROM   UserValidFrom ,
         Extent1 . USER_VAL_ID_TO   UserValidTo ,
         Extent1 . USER_SEC_QUES_ID   UserSecQuesID ,
         Extent1 . USER_SEC_QUES_ANS   UserSecQuesAns ,
         Extent1 . USER_WORK_NO   UserWorkNo ,
         Extent1 . USER_MOBILE_NO   UserMobileNo ,
         Extent1 . USER_EXT_NO   UserExtNo ,
         Extent1 . USER_IS_PART_TM   UserIsPartTime ,
         Extent1 . USER_DEPT_ID   UserDepartmentID ,
         Extent1 . USER_IS_EXTRNL   UserIsExternal
        FROM SYS0047M  Extent1
        WHERE (1 =  Extent1 . USER_STUS_ID ) AND (1 <>  Extent1 . USER_TYPE_ID ) AND (2 <>  Extent1 . USER_TYPE_ID ) AND (3 <>  Extent1 . USER_TYPE_ID )
        ORDER BY  Extent1 . USER_NAME  ASC
        ]]>
    </select>

    <select id="selectMemberList" parameterType="Map" resultType="egovMap">
        <![CDATA[
           SELECT row_number,
            Project1.MEM_ID MemberID,
            Project1.MEM_TYPE  MemberType,
            Project1.MEM_CODE MemberCode,
            Project1.CODE_NAME CodeName,
            Project1.NAME Name,
            Project1.NRIC NRIC,
            Project1.status_name,
            Project1.UPD_DT Updated,
            Project1.STUS Status,
            Project1.position_name,
            Project1.brnch_id,
            Project1.ct_sub_grp,
            Project1.C1 C1,
            project1.TRAINEE_TYPE,
            project1.TEST_RESULT,
            project1.approved_by,
            project1.branch,
            project1.CRT_DT,
            project1.ADDRESS,
            project1.GRP_CODE,
             project1.PV_YEAR   || ' / ' ||  TO_CHAR(project1.PV_MONTH,'00') AS LAST_ACT_DT,

             project1.VACCINE_STATUS,
             project1.REASON_ID

            FROM ( SELECT Project1.C1 C1,
                     Project1.MEM_ID MEM_ID,
                     Project1.MEM_CODE MEM_CODE,
                     Project1.MEM_TYPE MEM_TYPE,
                     Project1.NAME NAME,
                     Project1.NRIC NRIC,
                     Project1.STUS STUS,
                    TO_CHAR(Project1.UPD_DT,'DD-MM-YYYY') UPD_DT,
                     Project1.CODE_NAME CODE_NAME,
                     Project1.status_name,
                     Project1.position_name,
                     Project1.brnch_id,
                    Project1.ct_sub_grp,
                    project1.TRAINEE_TYPE,
                    project1.TEST_RESULT,
                    project1.approved_by,
                    project1.branch,
                    TO_CHAR(Project1.CRT_DT,'DD-MM-YYYY') CRT_DT,
                    project1.ADDRESS,
                    project1.GRP_CODE,
                    project1.PV_MONTH ,
                    project1.PV_YEAR ,

                    project1.VACCINE_STATUS,
                    project1.REASON_ID,

                     row_number() OVER (ORDER BY Project1.MEM_CODE ASC) AS row_number

                     FROM ( SELECT DISTINCT
                    GroupBy1.A1 C1,
                    Extent1.MEM_ID MEM_ID,
                    Extent1.MEM_CODE MEM_CODE,
                    Extent1.MEM_TYPE MEM_TYPE,
                    Extent1.NAME NAME,
                    Extent1.NRIC NRIC,
                    Extent1.STUS STUS,
                    Extent1.UPD_DT UPD_DT,
                    Extent2.CODE_NAME CODE_NAME,
                    Extent3.NAME as status_name,
                    Extent1.brnch as brnch_id,
                    Extent5.ct_sub_grp,
                    extent1.TRAINEE_TYPE,
                    Extend6.MEM_ORG_DESC position_name,
                    CASE
                        WHEN ( Extend8.COURS_TEST_RESULT = 'P' )
                        THEN 'Pass'
                        WHEN ( Extend8.COURS_TEST_RESULT = 'F' )
                        THEN 'Fail'
                        WHEN ( Extend8.COURS_TEST_RESULT = 'AB' )
                        THEN 'Absent'
                    ELSE ''
                    END TEST_RESULT,
                    Extent9.USER_NAME as approved_by,
                    Extent10.CODE as branch,
                    Extent1.CRT_DT,
                    CASE WHEN (Extent1.AREA_ID IS NOT NULL OR Extent1.ADDR_DTL IS NOT NULL) THEN
                            (Extent1.ADDR_DTL || ' ' ||
                            CASE WHEN Extent1.STREET IS NOT NULL THEN Extent1.STREET || ', ' ELSE '' END ||
                            CASE WHEN Extent11.AREA IS NOT NULL THEN Extent11.AREA || ', ' ELSE '' END ||
                            CASE WHEN Extent11.POSTCODE IS NOT NULL THEN  Extent11.POSTCODE || ', ' ELSE '' END ||
                            CASE WHEN Extent11.CITY IS NOT NULL THEN  Extent11.CITY || ', ' ELSE '' END ||
                            CASE WHEN Extent11.STATE IS NOT NULL THEN  Extent11.STATE || ', ' ELSE '' END ||
                            Extent11.COUNTRY)
                        ELSE Extent1.ADDR1 || ', ' || Extent1.ADDR2 || ', ' ||
                            (CASE WHEN Extent1.ADDR3 IS NULL THEN '' ELSE Extent1.ADDR3 || ', ' END) ||
                            (CASE WHEN Extent1.ADDR4 IS NULL THEN '' ELSE Extent1.ADDR4 || ', ' END) ||
                            Extent1.POSTCODE || ' ' ||Extent15.AREA_NAME || ', ' || Extent14.NAME || ', ' || Extent13.NAME
                        END
                    as ADDRESS,
                    Extent12.GRP_CODE ,
                    B.PV_MONTH ,
                    B.PV_YEAR,
                    /*vaccination information */
                    V.VACCINE_STATUS,
                    V.REASON_ID

                    FROM   ORG0001D Extent1                                                                    /*Member eg.get mem_type eg HP, CODY, CT*/
                    INNER JOIN SYS0013M Extent2 ON Extent1.MEM_TYPE = Extent2.CODE_ID   /*CodeDetail eg.HP, CODY, CT full desc*/
                    INNER JOIN SYS0038M Extent3 ON Extent1.STUS = Extent3.STUS_CODE_ID   /*StatusCode   eg.active, not active*/
                    LEFT JOIN ORG0005D Extent5 ON Extent5.MEM_ID = Extent1.MEM_ID          /*MemberOrganization eg.get mem_LVL*/
                    LEFT JOIN ORG0012D Extend6 ON Extend6.MEM_TYPE_ID =  Extent1.MEM_TYPE and Extend6.MEM_ORG_LVL =  Extent5.MEM_LVL /* MemberOrganizationDesc eg get full desc of mem_type and mem_LVL*/
                    LEFT JOIN SYS0047M Extent9 ON Extent1.CRT_USER_ID = Extent9.USER_ID
                    LEFT JOIN SYS0005M Extent10 ON Extent1.BRNCH = Extent10.BRNCH_ID
                    LEFT JOIN SYS0064M Extent11 ON Extent1.AREA_ID = Extent11.AREA_ID
                    LEFT JOIN ORG1001V Extent12 ON Extent1.MEM_ID = Extent12.MEM_ID
                    LEFT JOIN SYS0015M Extent13 ON Extent1.COUNTRY = Extent13.CNTY_ID
                    LEFT JOIN SYS0035M Extent14 ON Extent1.STATE = Extent14.STATE_ID
                    LEFT JOIN SYS0039M Extent15 ON Extent1.STATE = Extent15.AREA_STATE_ID AND Extent1.AREA = Extent15.AREA_ID
                    LEFT JOIN ORG0040D V ON V.MEM_ID = Extent1.MEM_ID /* Vaccination info */

                    LEFT JOIN (SELECT * FROM (
                    SELECT B.* , ROW_NUMBER() OVER (PARTITION BY MEM_ID ORDER BY SALES_ORD_ID DESC) ITM_ROWS
                    FROM SAL0001D B
                    WHERE B.PV_YEAR <> 0 AND B.PV_MONTH <> 0 AND B.STUS_CODE_ID = 4 )
                    WHERE ITM_ROWS = 1
                    )B ON Extent1.MEM_ID = B.MEM_ID

                    CROSS JOIN  (SELECT
                        COUNT(1) A1
                        FROM ORG0001D Extent4,
                        ORG0005D Extent7

                         WHERE 1=1 AND Extent4.MEM_ID = Extent7.MEM_ID
                         ]]>
                         <if test="memTypeCom != null and memTypeCom != ''">
                           AND  Extent4.MEM_TYPE =  #{memTypeCom}
                         </if>
                         <if test="code != null and code != ''">
                           AND  UPPER(Extent4.MEM_CODE) LIKE  UPPER('%' ||  #{code} || '%')
                         </if>
                         <if test="name != null and name != ''">
                           AND  UPPER(Extent4.NAME) LIKE UPPER('%' || #{name} || '%')
                         </if>
                         <if test="icNum != null and icNum != ''">
                           AND  Extent4.NRIC LIKE   '%' || #{icNum} || '%'
                         </if>
                         <if test="birth != null and birth != ''">
                           AND Extent4.DOB =  TO_DATE(#{birth}, 'DD/MM/YYYY')
                         </if>
                         <if test="nation != null and nation != ''">
                           AND  Extent4.NATION =  #{nation}
                         </if>
                         <if test="race != null and race != ''">
                           AND  Extent4.RACE =  #{race}
                         </if>
                         <if test="status != null and status != ''">
                           AND  Extent4.STUS =  #{status}
                         </if>
                         <if test="keyUser != null and keyUser != ''">
                           AND  Extent4.CRT_USER_ID =  #{keyUser}
                         </if>
                         <if test="keyBranch != null and keyBranch != ''">
                           AND  Extent4.BRNCH =  #{keyBranch}
                         </if>
                         <if test="createDate != '' and endDate != '' ">
                            <![CDATA[  AND TO_DATE(Extent4.CRT_DT)  between TO_DATE(#{createDate}, 'DD/MM/YYYY') and  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                         <if test="contact != null and contact != ''">
                            AND (( Extent4.TEL_HUSE LIKE '%' || #{contact}|| '%' ) OR ( Extent4.TEL_OFFICE LIKE '%' || #{contact}|| '%' ) OR ( Extent4.TEL_MOBILE LIKE '%' || #{contact}|| '%' ) ) AND ( Extent4.TEL_MOBILE = #{contact} OR Extent4.TEL_HUSE = #{contact} OR Extent4.TEL_OFFICE = #{contact})
                         </if>
                         <if test="sponsor != null and sponsor != ''">
                            AND   UPPER(Extent4.SPONS_CODE) LIKE UPPER('%' || #{sponsor} || '%')
                         </if>
                         <if test="position != null and position != ' ' ">
                            AND Extent7.MEM_LVL= #{position}
                         </if>
                         <if test="code == null or code == ''">
                            <if test="sessionTypeID != 4 and sessionTypeID != 6">
                                <choose>
                                    <when test="memberLevel == 1">
                                        AND Extent7.LAST_ORG_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                                    </when>
                                    <when test="memberLevel == 2">
                                        AND Extent7.LAST_GRP_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE =#{userName} )
                                    </when>
                                    <when test="memberLevel == 3">
                                        AND Extent7.LAST_DEPT_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                                    </when>
                                    <when test="memberLevel == 4">
                                        AND Extent4.MEM_CODE = #{userName}
                                    </when>
                                </choose>
                            </if>
                         </if>
                        )  GroupBy1
                        LEFT JOIN (  SELECT *
                                          FROM (SELECT A.*, ROW_NUMBER() OVER (PARTITION BY COURS_MEM_ID
                                                                             ORDER BY COURS_ITM_ID DESC) ITM_ROWS
                                                FROM MSC0009D A WHERE COURS_MEM_STUS_ID <![CDATA[  <>  ]]> 8)
                                          WHERE ITM_ROWS = 1 ) Extend8 ON Extent1.MEM_ID = Extend8.COURS_MEM_ID

                        WHERE 1=1

                        <if test="memTypeCom != null and memTypeCom != ''">
                          AND   Extent1.MEM_TYPE =  #{memTypeCom}
                         </if>
                         <if test="code != null and code != ''">
                           AND  UPPER(Extent1.MEM_CODE) LIKE  UPPER('%' ||  #{code} || '%')
                         </if>
                         <if test="name != null and name != ''">
                           AND  UPPER(Extent1.NAME) LIKE UPPER('%' || #{name} || '%')
                         </if>
                         <if test="icNum != null and icNum != ''">
                           AND  Extent1.NRIC LIKE   '%' || #{icNum} || '%'
                         </if>
                         <if test="birth != null and birth != ''">
                           AND Extent1.DOB =  TO_DATE(#{birth}, 'DD/MM/YYYY')
                         </if>
                          <if test="nation != null and nation != ''">
                           AND  Extent1.NATION =  #{nation}
                         </if>
                         <if test="race != null and race != ''">
                           AND Extent1.RACE =  #{race}
                         </if>
                         <if test="status != null and status != ''">
                           AND  Extent1.STUS =  #{status}
                         </if>
                         <if test="keyUser != null and keyUser != ''">
                           AND  Extent1.CRT_USER_ID =  #{keyUser}
                         </if>
                         <if test="keyBranch != null and keyBranch != ''">
                           AND  TO_NUMBER(Extent1.BRNCH,99999.99) =  #{keyBranch}
                         </if>

                          <if test="createDate != '' and endDate != '' ">
                            <![CDATA[  AND TO_DATE(Extent1.CRT_DT)  between TO_DATE(#{createDate}, 'DD/MM/YYYY') and  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="contact != null and contact != ''">
                            AND  ((Extent1.TEL_HUSE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.TEL_OFFICE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.TEL_MOBILE LIKE '%' || #{contact}|| '%' ) ) AND ( Extent1.TEL_MOBILE = #{contact} OR Extent1.TEL_HUSE = #{contact} OR Extent1.TEL_OFFICE = #{contact})
                         </if>
                         <if test="sponsor != null and sponsor != ''">
                            AND   UPPER(Extent1.SPONS_CODE) LIKE UPPER('%' || #{sponsor} || '%')
                         </if>
                          <if test="position != null and position != ''">
                            AND Extent5.MEM_LVL= #{position}
                         </if>

                         <if test="orgCode != null and orgCode != '' ">
                            AND EXTENT12.ORG_CODE = #{orgCode}
                         </if>
                         <if test="grpCode != null and grpCode != '' ">
                            AND EXTENT12.GRP_CODE = #{grpCode}
                         </if>
                         <if test="deptCode != null and deptCode != '' ">
                            AND EXTENT12.DEPT_CODE = #{deptCode}
                         </if>
                         <if test="sessionTypeID != 4 and sessionTypeID != 6">
                            <choose>
                                <when test="memberLevel == 1">
<!--                                     AND Extent5.LAST_ORG_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} ) -->
                                            AND extent12.ORG_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                                </when>
                                <when test="memberLevel == 2">
<!--                                     AND Extent5.LAST_GRP_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE =#{userName} ) -->
                                            AND extent12.GRP_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE =#{userName} )
                                </when>
                                <when test="memberLevel == 3">
<!--                                     AND Extent5.LAST_DEPT_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} ) -->
                                      AND extent12.DEPT_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                                </when>
                                <when test="memberLevel == 4">
                                    <if test="code == null or code == ''">
                                    /* here */
                                    AND Extent1.MEM_CODE = #{userName}
                                    </if>
                                </when>
                            </choose>
                         </if>
                  <![CDATA[
                )   Project1
            )  Project1
            WHERE Project1.row_number >  0
            ORDER BY Project1.MEM_CODE ASC
             ]]>
    </select>

<!-- CYC select HP Applicant -->
<select id="selectHPApplicantList" parameterType="Map" resultType="egovMap">
        <![CDATA[
           SELECT row_number,
            Project1.MEM_ID MemberID,
            Project1.MEM_TYPE  MemberType,
            Project1.MEM_CODE MemberCode,
            Project1.CODE_NAME CodeName,
            Project1.NAME Name,
            Project1.NRIC NRIC,
            Project1.status_name,
            Project1.UPD_DT Updated,
            Project1.STUS Status,
            Project1.position_name,
            Project1.brnch_id,
            Project1.ct_sub_grp,
            Project1.C1 C1
            FROM ( SELECT Project1.C1 C1,
                     Project1.MEM_ID MEM_ID,
                     Project1.MEM_CODE MEM_CODE,
                     Project1.MEM_TYPE MEM_TYPE,
                     Project1.NAME NAME,
                     Project1.NRIC NRIC,
                     Project1.STUS STUS,
                    TO_CHAR(Project1.UPD_DT,'DD-MM-YYYY') UPD_DT,
                     Project1.CODE_NAME CODE_NAME,
                     Project1.status_name,
                     Project1.position_name,
                     Project1.brnch_id,
                    Project1.ct_sub_grp,
                     row_number() OVER (ORDER BY Project1.MEM_CODE ASC) AS row_number
                     FROM ( SELECT
                   '' C1,
                    Extent1.APLCTN_ID MEM_ID,
                    Extent1.APLICNT_CODE MEM_CODE,
                    Extent1.APLICNT_TYPE MEM_TYPE,
                    Extent1.APLICNT_NAME NAME,
                    Extent1.APLICNT_NRIC NRIC,
                    Extent1.STUS_ID STUS,
                    Extent1.UPD_DT UPD_DT,
                    Extent2.CODE_NAME CODE_NAME,
                    Extent3.NAME as status_name,
                    '' as brnch_id,
                    '' ct_sub_grp,
                    '' position_name,
                    Extent4.LAST_GRP_CODE GRP_CODE,
                    Extent4.LAST_ORG_CODE ORG_CODE
                    FROM   ORG0003D Extent1                                                                    /*Member eg.get mem_type eg HP, CODY, CT*/
                    INNER JOIN SYS0013M Extent2 ON Extent1.APLICNT_type = Extent2.CODE_ID   /*CodeDetail eg.HP, CODY, CT full desc*/
                    INNER JOIN SYS0038M Extent3 ON Extent1.STUS_ID = Extent3.STUS_CODE_ID   /*StatusCode    eg.active, not active*/
                    INNER JOIN ORG0005D Extent4 ON Extent1.DEPT_CODE = Extent4.DEPT_CODE AND Extent4.MEM_LVL = '3'
                    ]]>
                        WHERE 1=1
                        AND Extent1.APLICNT_TYPE IN ('1', '2803')
                         <if test="code != null and code != ''">
                           AND  UPPER(Extent1.APLICNT_CODE) LIKE  UPPER('%' ||  #{code} || '%')
                         </if>
                         <if test="name != null and name != ''">
                           AND  UPPER(Extent1.APLICNT_NAME) LIKE UPPER('%' || #{name} || '%')
                         </if>
                         <if test="icNum != null and icNum != ''">
                           AND  Extent1.APLICNT_NRIC LIKE   '%' || #{icNum} || '%'
                         </if>
                         <if test="birth != null and birth != ''">
                           AND Extent1.APLICNT_DOB =  TO_DATE(#{birth}, 'DD/MM/YYYY')
                         </if>
                          <if test="nation != null and nation != ''">
                           AND  Extent1.APLICNT_NATION =  #{nation}
                         </if>
                         <if test="race != null and race != ''">
                           AND Extent1.APLICNT_RACE =  #{race}
                         </if>
                         <if test="status != null and status != ''">
                           AND  Extent1.STUS_ID =  #{status}
                         </if>
                         <if test="keyUser != null and keyUser != ''">
                           AND  Extent1.CRT_USER_ID =  #{keyUser}
                         </if>
                         <if test="createDate != '' and endDate == '' ">
                            <![CDATA[ AND  TO_DATE(TO_CHAR(Extent1.CRT_DT,'YYYY-MM-DD'),'YYYY-MM-DD') >= TO_DATE(#{createDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="endDate != '' and createDate == '' ">
                            <![CDATA[  AND TO_DATE(TO_CHAR(Extent1.CRT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   <=  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="createDate != '' and endDate != '' ">
                            <![CDATA[  AND Extent1.CRT_DT  between TO_DATE(#{createDate}, 'DD/MM/YYYY') and  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="contact != null and contact != ''">
                            AND  ((Extent1.APLICNT_TEL_HUSE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.APLICNT_TEL_OFFICE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.APLICNT_TEL_MOBILE LIKE '%' || #{contact}|| '%' ) ) AND ( Extent1.APLICNT_TEL_MOBILE = #{contact} OR Extent1.APLICNT_TEL_HUSE = #{contact} OR Extent1.APLICNT_TEL_OFFICE = #{contact})
                         </if>
                          <if test="sponsor != null and sponsor != ''">
                            AND   UPPER(Extent1.APLICNT_SPONS_CODE) LIKE UPPER('%' || #{sponsor} || '%')
                         </if>
                         <if test = 'memberLevel == "3" '>
                            <if test="deptCodeHd != null and deptCodeHd != ''">
                                AND Extent1.DEPT_CODE = #{deptCodeHd}
                            </if>
                         </if>
                         <if test = 'memberLevel == "2" '>
                            <if test="grpCodeHd != null and grpCodeHd != ''">
                                AND Extent4.LAST_GRP_CODE = #{grpCodeHd}
                            </if>
                         </if>
                         <if test = 'memberLevel == "1" '>
                            <if test="orgCodeHd != null and orgCodeHd != ''">
                                AND Extent4.LAST_ORG_CODE = #{orgCodeHd}
                            </if>
                         </if>
                  <![CDATA[
                )   Project1
            )  Project1
            WHERE Project1.row_number >  0
            ORDER BY Project1.MEM_CODE ASC
             ]]>
    </select>

    <resultMap id="clobMap" type="EgovMap">
        <result property="C59" column="C59" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>


    <select id="selectMemberListView" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT Limit1.MEM_ID MEM_ID  ,
        Limit1.AREA_ID,
        Limit1.STREET,
        Limit1.ADDR_DTL,
         Limit1.CITY,
        Limit1.AREA,
        Limit1.POSTCODE,
        Limit1.STATE,
        Limit1.COUNTRY,
       Limit1.TRAINEE_TYPE ,
       Limit1.C3 C3  ,
       Limit1.C4 C4  ,
       Limit1.C5 C5  ,
       Limit1.C8 C8  ,
       Limit1.C9 C9  ,
       Limit1.EMAIL EMAIL  ,
       Limit1.GENDER GENDER  ,
       Limit1.C10 C10  ,
       Limit1.C11 C11  ,
       Limit1.C12 C12  ,
       Limit1.C13 C13  ,
       Limit1.C14 C14  ,
       Limit1.C15 C15  ,
       Limit1.C16 C16  ,
       Limit1.C17 C17  ,
       Limit1.C18 C18  ,
       Limit1.C19 C19  ,
       Limit1.C20 C20  ,
       Limit1.C21 C21  ,
       Limit1.C22 C22  ,
       Limit1.C23 C23  ,
       Limit1.C24 C24  ,
       Limit1.C25 C25  ,
       Limit1.C26 C26  ,
       Limit1.C27 C27  ,
       Limit1.C28 C28  ,
       Limit1.BANK BANK  ,
       Limit1.BANK_ACC_NO BANK_ACC_NO  ,
       Limit1.C29 C29  ,
       Limit1.C30 C30  ,
       Limit1.C31 C31  ,
       Limit1.C32 C32  ,
       Limit1.NAME1 NAME  ,
       Limit1.MEM_CODE MEM_CODE  ,
       Limit1.NAME NAME1  ,
       Limit1.NRIC NRIC  ,
       Limit1.MEM_TYPE MEM_TYPE  ,
       Limit1.CODE_NAME CODE_NAME  ,
       Limit1.C33 C33  ,
       Limit1.C34 C34  ,
       Limit1.C35 C35  ,
       Limit1.C36 C36  ,
       Limit1.C39 C39  ,
       Limit1.C40 C40  ,
       Limit1.C41 C41  ,
       Limit1.C42 C42  ,
       Limit1.C43 C43  ,
       Limit1.C44 C44  ,
       Limit1.C45 C45  ,
       Limit1.C46 C46  ,
       Limit1.C47 C47  ,
       Limit1.C48 C48  ,
       Limit1.C51 C51  ,
       Limit1.C52 C52  ,
       Limit1.C53 C53  ,
       Limit1.C54 C54  ,
       Limit1.C55 C55  ,
       Limit1.C56 C56  ,
       Limit1.TR_NO TR_NO  ,
       Limit1.TEL_MOBILE TEL_MOBILE  ,
       Limit1.TEL_HUSE TEL_HUSE  ,
       Limit1.TEL_OFFICE TEL_OFFICE  ,
       Limit1.C57 C57  ,
       Limit1.SPUSE_CODE SPUSE_CODE  ,
       Limit1.SPOUSE_NAME SPOUSE_NAME  ,
       Limit1.SPOUSE_NRIC SPOUSE_NRIC  ,
       Limit1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
       Limit1.C58 C58  ,
       Limit1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
       Limit1.C59 C59  ,
       Limit1.RANK RANK  ,
       Limit1.C60 C60  ,
       Limit1.HSPTLZ  HSPTLZ,
       Limit1.RELIGION,
       Limit1.CNFM_DT,
       /*
       (select NAME from SYS0105M WHERE MAIN_DEPT_CODE = Limit1.MAIN_DEPT) MAIN_DEPT,
       (select NAME from SYS0105M WHERE SUB_DEPT_CODE = Limit1.SUB_DEPT) SUB_DEPT,
       */
       (select CODE_DESC DEPT_NAME from sys0013M  WHERE CODE_MASTER_ID = 359 and code =  Limit1.MAIN_DEPT) MAIN_DEPT,
       (select CODE_DESC SUB_DEPT from sys0013M  WHERE CODE_MASTER_ID = 360 and code =  Limit1.SUB_DEPT) SUB_DEPT,
       Limit1.BANK_NAME,
       (SELECT COURS_ID  FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID AND COURS_ITM_ID = (SELECT MAX(COURS_ITM_ID) FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID)) AS course,
       Limit1.APLICNT_MEETPOINT,
       Limit1.MOBILE_USE_YN,
       Limit1.NO_TBB
       <!-- ,Limit1.INC_TAX -->
  FROM (
SELECT Extent1.MEM_ID MEM_ID  ,
                Extent1.MEM_CODE MEM_CODE  ,
                Extent1.MEM_TYPE MEM_TYPE  ,
                Extent1.NAME NAME  ,
                Extent1.NRIC NRIC  ,
                Extent1.JOIN_DT ,
                Extent1.GENDER GENDER  ,
                Extent26.AREA_ID,
                NVL(Extent1.STREET, Extent1.ADDR1) STREET,
                NVL(Extent1.ADDR_DTL, Extent1.ADDR2 || ' ' || Extent1.ADDR3 || ' ' || Extent1.ADDR4) ADDR_DTL,
                NVL(Extent26.CITY, Extent33.CITY) CITY,
                NVL(Extent26.AREA, Extent32.AREA_NAME) AREA,
                NVL(Extent26.POSTCODE, Extent1.POSTCODE) POSTCODE,
                NVL(Extent26.STATE, Extent31.NAME) STATE,
                NVL(Extent26.COUNTRY, Extent30.NAME) COUNTRY,
                Extent1.TEL_OFFICE TEL_OFFICE  ,
                Extent1.TEL_HUSE TEL_HUSE  ,
                Extent1.TEL_MOBILE TEL_MOBILE  ,
                Extent1.EMAIL EMAIL  ,
                Extent1.SPUSE_CODE SPUSE_CODE  ,
                Extent1.SPOUSE_NAME SPOUSE_NAME  ,
                Extent1.SPOUSE_NRIC SPOUSE_NRIC  ,
                Extent1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
                Extent1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
                Extent1.BANK BANK  ,
                Extent1.BANK_ACC_NO BANK_ACC_NO  ,
                Extent1.RANK RANK  ,
                Extent1.TR_NO TR_NO  ,
                Extent1.HSPTLZ HSPTLZ  ,
                Extent1.TRAINEE_TYPE,
                Extent2.NAME NAME1  ,

                Extent3.CODE_NAME CODE_NAME   ,
                CASE
                     WHEN ( Extent1.BRNCH IS NOT NULL ) THEN TO_NUMBER(Extent1.BRNCH,99999.99)
                ELSE 0
                   END C3  ,
                CASE
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.CODE
                ELSE ''
                   END C4  ,
                CASE
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.NAME
                ELSE ''
                   END C5  ,
                CASE
                     WHEN ( Extent1.EDC_LEV IS NOT NULL ) THEN TO_NUMBER(Extent1.EDC_LEV,99999.99)
                ELSE 0
                   END C8  ,
                CASE
                     WHEN ( Extent11.CODE_ID IS NOT NULL ) THEN Extent11.CODE_NAME
                ELSE ''
                   END C9  ,
                CASE
                     WHEN ( Extent1.LANG IS NOT NULL ) THEN TO_NUMBER(Extent1.LANG,99999.99)
                ELSE 0
                   END C10  ,
                CASE
                     WHEN ( Extent12.CODE_ID IS NOT NULL ) THEN Extent12.CODE_NAME
                ELSE ''
                   END C11  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.MEM_CODE
                ELSE ''
                   END C12  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.NAME
                ELSE ''
                   END C13  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_MOBILE
                ELSE ''
                   END C14  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_OFFICE
                ELSE ''
                   END C15  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_HUSE
                ELSE ''
                   END C16  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.MEM_CODE
                ELSE ''
                   END C17  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.NAME
                ELSE ''
                   END C18  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_MOBILE
                ELSE ''
                   END C19  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_OFFICE
                ELSE ''
                   END C20  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_HUSE
                ELSE ''
                   END C21  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.MEM_CODE
                ELSE ''
                   END C22  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.NAME
                ELSE ''
                   END C23  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_MOBILE
                ELSE ''
                   END C24  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_OFFICE
                ELSE ''
                   END C25  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_HUSE
                ELSE ''
                   END C26  ,
                CASE
                     WHEN ( Extent1.MARTL IS NOT NULL ) THEN TO_NUMBER(Extent1.MARTL,99999.99)
                ELSE 0
                   END C27  ,
                CASE
                     WHEN ( Extent21.CODE_ID IS NOT NULL ) THEN Extent21.CODE_NAME
                ELSE ''
                   END C28  ,
                CASE
                     WHEN ( Extent1.DOB IS NOT NULL ) THEN to_char(Extent1.DOB,'dd/mm/yyyy')
                ELSE ''
                   END C29  ,
                CASE
                     WHEN ( Extent1.JOIN_DT IS NOT NULL ) THEN TO_char(Extent1.JOIN_DT,'dd/mm/yyyy')
                ELSE ''
                   END C30  ,
                CASE
                     WHEN ( Extent25.USER_VAL_ID_TO IS NOT NULL ) THEN to_char(Extent25.USER_VAL_ID_TO,'dd/mm/yyyy')
                ELSE ''
                   END C31  ,
                CASE
                     WHEN ( Extent1.STUS IS NOT NULL ) THEN Extent1.STUS
                ELSE 0
                   END C32   ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_UP_ID
                ELSE 0
                   END C33  ,
                CASE
                     WHEN ( Extent22.WH_LOC_ID IS NOT NULL ) THEN Extent22.WH_LOC_ID
                ELSE 0
                   END C34  ,
                CASE
                     WHEN ( Extent1.NATION IS NOT NULL ) THEN TO_NUMBER(Extent1.NATION,99999.99)
                ELSE 0
                   END C35  ,
                CASE
                     WHEN ( Extent17.CNTY_ID IS NOT NULL ) THEN Extent17.NAME
                ELSE ''
                   END C36  ,
                CASE
                     WHEN ( Extent1.RACE IS NOT NULL ) THEN TO_NUMBER(Extent1.RACE,99999.99)
                ELSE 0
                   END C39  ,
                CASE
                     WHEN ( Extent18.CODE_ID IS NOT NULL ) THEN Extent18.CODE_NAME
                ELSE ''
                   END C40,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.DEPT_CODE
                ELSE ''
                   END C41  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.GRP_CODE
                ELSE ''
                   END C42  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.ORG_CODE
                ELSE ''
                   END C43  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_LVL
                ELSE 0
                   END C44  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL3_UP_ID
                ELSE 0
                   END C45  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL2_UP_ID
                ELSE 0
                   END C46  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL1_UP_ID
                ELSE 0
                   END C47,
               CASE
                     WHEN ( Extent1.RESIGN_DT IS NOT NULL ) THEN to_char(Extent1.RESIGN_DT,'yyyy-mm-dd')
                ELSE ''
                   END C48  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.MEM_CODE
                ELSE ''
                   END C51  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NAME
                ELSE ''
                   END C52  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NRIC
                ELSE ''
                   END C53  ,
                CASE
                     WHEN ( Extent1.TRM_DT IS NOT NULL ) THEN to_char(Extent1.TRM_DT,'yyyy-mm-dd')
                ELSE ''
                   END C54  ,
                CASE
                     WHEN ( Extent1.TRNSPRT IS NOT NULL ) THEN Extent1.TRNSPRT
                ELSE 0
                   END C55  ,
                CASE
                     WHEN ( Extent19.CODE_ID IS NOT NULL ) THEN Extent19.CODE_NAME
                ELSE ''
                   END C56  ,
                CASE
                     WHEN ( Extent5.MEM_ORG_DESC_ID IS NOT NULL ) THEN Extent5.MEM_ORG_DESC
                ELSE ''
                   END C57  ,
                CASE
                     WHEN ( Extent1.SPOUSE_DOB IS NOT NULL ) THEN to_char(Extent1.SPOUSE_DOB,'dd/mm/yyyy')
                ELSE ''
                   END C58  ,
                CASE
                     WHEN dbms_lob.getlength(Extent23.CODE_DESC) = 0 THEN null
                ELSE Extent23.CODE_DESC
                   END C59  ,
                CASE
                     WHEN ( Extent24.CODE_NAME IS NULL ) THEN ''
                ELSE Extent24.CODE_NAME
                   END C60,
                CASE
                     WHEN ( Extent27.CODE_NAME IS NULL ) THEN ''
                  ELSE Extent27.CODE_NAME
                END RELIGION,
                CASE
                     WHEN ( Extent28.CNFM_DT IS NULL ) THEN ''
                  ELSE TO_CHAR(Extent28.CNFM_DT,'yyyy-mm-dd')
                END CNFM_DT,
                EXTENT1.MAIN_DEPT,
                EXTENT1.SUB_DEPT,
                BANK.NAME AS BANK_NAME,
                EXTENT29.MEET_POINT_CODE || ' - ' || MEET_POINT_DESC APLICNT_MEETPOINT,
                Extent1.MOBILE_USE_YN,
                Extent1.NO_TBB
                <!-- ,Extent1.INC_TAX -->
         FROM ORG0001D Extent1
                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS
                JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.MEM_TYPE
        LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID
                            FROM ORG1001V vMemberOrg  ) Extent4   ON Extent4.MEM_ID = Extent1.MEM_ID
                LEFT JOIN ORG0012D Extent5   ON ( Extent5.MEM_ORG_LVL = Extent4.MEM_LVL )
                AND ( Extent5.MEM_TYPE_ID = Extent1.MEM_TYPE )
                LEFT JOIN SYS0005M Extent10   ON Extent10.BRNCH_ID = UTILS.CONVERT_TO_NUMBER(Extent1.BRNCH,99999.99)
                LEFT JOIN SYS0013M Extent11   ON Extent11.CODE_ID = TO_NUMBER(Extent1.EDC_LEV,99999.99)
                LEFT JOIN SYS0013M Extent12   ON Extent12.CODE_ID = TO_NUMBER(Extent1.LANG,99999.99)
                LEFT JOIN ORG0001D Extent13   ON Extent13.MEM_ID = Extent4.LVL1_UP_ID
                LEFT JOIN ORG0001D Extent14   ON Extent14.MEM_ID = Extent4.LVL2_UP_ID
                LEFT JOIN ORG0001D Extent15   ON Extent15.MEM_ID = Extent4.LVL3_UP_ID
                LEFT JOIN SYS0013M Extent16   ON Extent16.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0015M Extent17   ON Extent17.CNTY_ID = TO_NUMBER(Extent1.NATION,99999.99)
                LEFT JOIN SYS0013M Extent18   ON Extent18.CODE_ID = TO_NUMBER(Extent1.RACE,99999.99)
                LEFT JOIN SYS0013M Extent19   ON Extent19.CODE_ID = Extent1.TRNSPRT
                LEFT JOIN ORG0001D Extent20   ON Extent20.MEM_CODE = Extent1.SPONS_CODE
                LEFT JOIN SYS0013M Extent21   ON Extent21.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0028M Extent22   ON ( Extent22.WH_LOC_CODE = Extent1.MEM_CODE )
                    AND ( Extent1.MEM_TYPE IN ( 2,3 ))
                LEFT JOIN SYS0013M Extent23   ON Extent23.CODE_ID = Extent1.RANK
                LEFT JOIN SYS0013M Extent24   ON Extent24.CODE_ID = TO_NUMBER(Extent1.BIZ_TYPE,99999.99)
                LEFT JOIN SYS0047M Extent25   ON Extent25.HR_CODE = Extent1.MEM_CODE
                LEFT JOIN SYS0064M Extent26   ON Extent26.AREA_ID = Extent1.AREA_ID
                LEFT JOIN SYS0004M BANK        ON BANK.BANK_ID = Extent1.BANK
                LEFT JOIN SYS0013M Extent27   ON Extent27.CODE_ID = Extent1.RELIGION
                LEFT JOIN ORG0003D Extent28   ON Extent28.APLCTN_ID = Extent1.APLICNT_ID
                LEFT JOIN SYS0089M Extent29   ON Extent28.APLICNT_MEETPOINT = Extent29.MEET_POINT_ID
                LEFT JOIN SYS0015M Extent30   ON Extent1.COUNTRY = Extent30.CNTY_ID
                LEFT JOIN SYS0035M Extent31   ON Extent1.STATE = Extent31.STATE_ID
                LEFT JOIN SYS0039M Extent32   ON Extent1.STATE = Extent32.AREA_STATE_ID
                    AND Extent1.AREA = Extent32.AREA_ID
                LEFT JOIN SYS0064M Extent33   ON Extent1.POSTCODE = Extent33.POSTCODE
          WHERE  Extent1.MEM_ID = #{MemberID} AND ROWNUM <= 1  ) Limit1
           ]]>
    </select>


    <resultMap id="clobMap1" type="EgovMap">
        <result property="CODE_DESC" column="CODE_DESC" jdbcType="CLOB"  javaType="java.lang.String" />
        <result property="REM" column="REM" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>

    <select id="selectPromote" parameterType="Map" resultType="egovMap">
            <![CDATA[
                 SELECT
                 Extent1.PROMO_ID PROMO_ID,
                 Extent1.MEM_TYPE_ID MEM_TYPE_ID,
                 Extent4.CODE_DESC CODE_DESC,
                 Extent1.MEM_LVL_FROM MEM_LVL_FROM,
                 Extent2.MEM_ORG_DESC MEM_ORG_DESC,
                 Extent1.MEM_LVL_TO MEM_LVL_TO,
                 Extent3.MEM_ORG_DESC MEMORGDESCRIPTION1,
                 Extent1.DEPT_CODE_FROM DEPT_CODE_FROM,
                 Extent1.DEPT_CODE_TO DEPT_CODE_TO,
                 Extent1.PARENT_DEPT_CODE_TO PARENT_DEPT_CODE_TO,
                 Extent1.REM REM,
                 Extent5.USER_NAME USER_NAME,
                 TO_CHAR(Extent1.CRT_DT ,'DD-MM-YYYY') CRT_DT

                 FROM    ORG0007D Extent1
                 INNER JOIN ORG0012D Extent2 ON (Extent2.MEM_TYPE_ID = Extent1.MEM_TYPE_ID) AND (Extent2.MEM_ORG_LVL = Extent1.MEM_LVL_FROM)
                 INNER JOIN ORG0012D Extent3 ON (Extent3.MEM_TYPE_ID = Extent1.MEM_TYPE_ID) AND (Extent3.MEM_ORG_LVL = Extent1.MEM_LVL_TO)
                 INNER JOIN SYS0013M Extent4 ON Extent4.CODE_ID = Extent1.PROMO_TYPE_ID
                 INNER JOIN SYS0047M Extent5 ON Extent5.USER_ID = Extent1.CRT_USER_ID
                 WHERE Extent1.MEM_ID = #{MemberID} AND 4 = Extent1.STUS_ID
                  ]]>
    </select>

    <select id="selectDocSubmission" parameterType="Map" resultType="egovMap">
                  SELECT Project1.DOC_TYPE_ID DOC_TYPE_ID  ,
                   Project1.CODE_NAME CODE_NAME  ,
                   Project1.DOC_COPY_QTY DOC_COPY_QTY
                    FROM ( SELECT Extent1.DOC_TYPE_ID DOC_TYPE_ID  ,
                            Extent1.DOC_COPY_QTY DOC_COPY_QTY  ,
                            Extent2.CODE_NAME CODE_NAME
                   FROM ORG0010D Extent1
                            JOIN SYS0013M Extent2   ON Extent2.CODE_ID = Extent1.DOC_TYPE_ID
                   WHERE  ( 247 = Extent1.DOC_SUB_TYPE_ID )
                               AND ( Extent1.DOC_MEM_ID =  #{MemberID})
                               AND ( 1 = Extent1.STUS_ID ) ) Project1
                     ORDER BY Project1.CODE_NAME ASC
    </select>


    <select id="selectPaymentHistory" parameterType="Map" resultType="egovMap">
            SELECT Project1.MEM_ID MEM_ID  ,
                   Project1.OR_NO OR_NO  ,
                   Project1.C1 C1  ,
                   Project1.BILL_NO BILL_NO  ,
                   Project1.CODE_NAME CODE_NAME  ,
                   Project1.C2 C2  ,
                   Project1.C3 C3  ,
                   Project1.C4 C4
                  FROM ( SELECT Extent1.MEM_ID MEM_ID  ,
                    Extent2.BILL_NO BILL_NO  ,
                    Extent3.CODE_NAME CODE_NAME  ,
                    Extent4.OR_NO OR_NO  ,
                    TO_CHAR(Extent4.PAY_DATA,'DD-MM-YYYY') C1  ,

                    CASE
                         WHEN ( Extent4.TOT_AMT IS NOT NULL ) THEN Extent4.TOT_AMT
                    ELSE 0
                       END C2  ,
                    TO_CHAR(Extent4.CRT_DT,'DD-MM-YYYY') C3  ,
                    CASE
                         WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME
                    ELSE ''
                       END C4
             FROM ORG0001D Extent1
                    JOIN PAY0007D Extent2   ON Extent2.BILL_MEM_ID = Extent1.MEM_ID
                    JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent2.BILL_PAY_TYPE_ID
                    JOIN PAY0064D Extent4   ON ( Extent4.BILL_ID = Extent2.BILL_ID )
                    AND ( Extent4.TYPE_ID IN ( 102,222,224,225,226 )
                   )
                    LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent4.CRT_USER_ID
              WHERE  Extent1.MEM_ID = #{MemberID}) Project1
               ORDER BY Project1.C1 ASC
    </select>



    <select id="selectRenewalHistory" parameterType="Map" resultType="egovMap">
             SELECT Project1.AG_ID AG_ID  ,
                   Project1.C1 C1  ,
                   Project1.C2 C2  ,
                   Project1.AG_EXPR_DT AG_EXPR_DT  ,
                   Project1.AG_CRT_DT AG_CRT_DT  ,
                   Project1.MEM_CODE MEM_CODE
              FROM ( SELECT Extent1.AG_ID AG_ID  ,
                            TO_CHAR(Extent1.AG_EXPR_DT,'YYYY-MM-DD') AG_EXPR_DT  ,
                            TO_CHAR(Extent1.AG_CRT_DT,'YYYY-MM-DD') AG_CRT_DT  ,
                            Extent2.MEM_CODE MEM_CODE  ,
                            'PA' C1,
                            'PA Renewal' C2
                     FROM ORG0002D Extent1
                            JOIN ORG0001D Extent2   ON ( Extent2.MEM_ID = Extent1.MEM_ID )
                            AND ( 1 = Extent1.AG_STUS_ID )
                      WHERE  ( Extent1.MEM_ID = #{MemberID} )
                               AND ( Extent1.AG_TYPE_ID = 1416 ) ) Project1
              ORDER BY Project1.AG_ID ASC
    </select>

    <resultMap id="clobMap2" type="EgovMap">
        <result property="CODE_NAME" column="CODE_NAME" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>

    <select id="selectDocSubmission2" parameterType="Map" resultType="egovMap">
    <![CDATA[
            SELECT Project1.TYPE_DT_SEQ TYPE_DT_SEQ  ,
               Project1.TYPE_ID TYPE_ID  ,
               Project1.CODE_DESC CODE_NAME  ,
               Project1.C1 DOC_COPY_QTY  ,
               Project1.C2 C2
          FROM ( SELECT Extent1.CODE_DESC CODE_DESC  ,
                        Extent2.TYPE_ID TYPE_ID  ,
                        Extent2.TYPE_DT_SEQ TYPE_DT_SEQ  ,
                        CASE
                             WHEN ( Extent3.DOC_COPY_QTY IS NULL ) THEN 0
                        ELSE Extent3.DOC_COPY_QTY
                           END C1  ,
                        CASE
                             WHEN ( ( Extent3.DOC_COPY_QTY IS NOT NULL )
                               OR ( 0 <> Extent3.DOC_COPY_QTY ) ) THEN UTILS.CONVERT_TO_NUMBER(1,1,0)
                        ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
                           END C2
                 FROM SYS0013M Extent1
                        JOIN ORG0013C Extent2   ON Extent1.CODE_ID = Extent2.TYPE_ID
                        LEFT JOIN ORG0010D Extent3   ON ( Extent3.DOC_TYPE_ID = Extent2.TYPE_ID )
                        AND ( Extent3.DOC_MEM_ID =  #{MemberID} )
                        AND ( 1 = Extent3.STUS_ID )
                  WHERE  ( 1 = Extent2.STUS_ID )
                           AND ( Extent2.TYPE_CODE_ID = 1417 )
                           AND ( Extent2.TYPE_GRP_ID = 1417 ) ) Project1
          ORDER BY Project1.TYPE_DT_SEQ ASC
            ]]>
    </select>

    <select id="selectIssuedBank" parameterType="Map" resultType="egovMap">
           SELECT Project1.BANK_ID BANK_ID  ,
               Project1.C1 C1
          FROM ( SELECT Extent1.BANK_ID BANK_ID  ,
                        Extent1.CODE CODE  ,
                        Extent1.CODE || ' - ' || Extent1.NAME C1
                 FROM SYS0004M Extent1
                        JOIN ORG0014D Extent2   ON Extent1.BANK_ID = Extent2.BANK_ID
                  WHERE  ( 848 = Extent2.TYPE_ID )
                           AND ( 1 = Extent1.STUS_CODE_ID )
                           AND ( 1 = Extent2.STUS_CODE_ID ) ) Project1
          ORDER BY Project1.CODE ASC
    </select>

     <select id="selectApplicantConfirm" parameterType="Map" resultType="egovMap">
     <![CDATA[
           SELECT Limit1.CNFM_DT CNFM_DT
          FROM ( SELECT TO_CHAR(Extent2.CNFM_DT,'YYYY-MM-DD') CNFM_DT
                 FROM ORG0001D Extent1
                 JOIN ORG0003D Extent2   ON Extent2.APLCTN_ID = Extent1.APLICNT_ID
                  WHERE  ( Extent1.MEM_ID =  #{MemberID} )
                   AND ROWNUM <= 1 ) Limit1
        ]]>
    </select>

    <select id="selectCodyPAExpired" parameterType="Map" resultType="egovMap">
     <![CDATA[
          SELECT TO_CHAR(Extent1.AG_EXPR_DT, 'DD/MM/YYYY') AG_EXPR_DT
          FROM ORG0002D Extent1
         WHERE  ( Extent1.MEM_ID = #{MemberID} )
          AND ( 1 = Extent1.AG_STUS_ID ) AND ROWNUM <= 1
        ]]>
    </select>


    <select id="selectDocNo" parameterType="String" resultType="egovMap">
     <![CDATA[
         SELECT Extent1.DOC_NO_ID DOC_NO_ID  ,
               CASE
                    WHEN ( Extent1.DOC_NO IS NOT NULL ) THEN Extent1.DOC_NO
               ELSE ''
                  END C1  ,
               CASE
                    WHEN ( Extent1.DOC_NO_PREFIX IS NOT NULL ) THEN Extent1.DOC_NO_PREFIX
               ELSE ''
                  END C2
          FROM SYS0022C Extent1
         WHERE  Extent1.DOC_NO_ID =#{docNoId}  AND ROWNUM <= 1
        ]]>
    </select>

     <update id="updateDocNo" parameterType="Map">
     <![CDATA[
        UPDATE SYS0022C
         SET DOC_NO = #{nextDocNo}
           WHERE  ( DOC_NO_ID = #{docNoId} )
        ]]>
    </update>

     <insert id="insertMember" parameterType="Map">
        INSERT INTO ORG0001D
        ( MEM_ID
        , MEM_CODE
        , MEM_TYPE
        , NAME
        , FULL_NAME
        , PASSWD
        , NRIC
        , DOB
        , GENDER
        , RACE
        , MARTL
        , NATION
        , TEL_OFFICE
        , TEL_HUSE
        , TEL_MOBILE
        , EMAIL
        , SPUSE_CODE
        , SPOUSE_NAME
        , SPOUSE_NRIC
        , SPOUSE_OCPAT
        , SPOUSE_TEL_CNTC
        , SPOUSE_DOB
        , EDC_LEV
        , LANG
        , BANK
        , BANK_ACC_NO
        , SPONS_CODE
        , JOIN_DT
        , RESIGN_DT
        , TRM_DT
        , RENEW_DT
        , AGRMNT_NO
        , BRNCH
        , STUS
        , SYNC_CHK
        , RANK
        , TRNSPRT
        , PROMO_DT
        , TR_NO
        , CRT_DT
        , CRT_USER_ID
        , UPD_DT
        , UPD_USER_ID
        , MEM_IS_OUT_SRC
        , APLICNT_ID
        , BIZ_TYPE
        , HSPTLZ
        , AREA_ID
        , ADDR_DTL
        , STREET
        ,TRAINEE_TYPE
        ,MAIN_DEPT
        ,SUB_DEPT
        , RELIGION
        , MOBILE_USE_YN
        <!-- , INC_TAX -->
        )
            VALUES (
            ORG0001D_MEM_ID_SEQ.NEXTVAL
            , #{memberCode}
            , #{memberType}
            , UPPER(#{memberNm})
            , UPPER(#{fulllName})
            , #{password}
            , #{nric}
            , TO_DATE(#{Birth},'dd-mm-yyyy')
            , #{gender}
            , #{race}
            , #{marrital}
            , #{nation}
            , #{officeNo}
            , #{residenceNo}
            , #{mobileNo}
            , #{email}
            , #{spouseCode}
            , #{spouseName}
            , #{spouseNric}
            , #{spouseOcc}
            , #{spouseContat}
            <if test="spouseDob != null and spouseDob != '' and spouseDob != '01/01/1900'" >
            , TO_DATE(#{spouseDob},'dd/mm/yyyy')
            </if>
             <if test="spouseDob != null and spouseDob != '' and spouseDob == '01/01/1900'" >
            , TO_DATE(#{spouseDob},'dd-mm-yyyy')
            </if>
            , #{educationLvl}
            , #{language}
            , #{issuedBank}
            , #{bankAccNo}
            , #{sponsorCd}
            , TO_DATE(#{joinDate},'dd-mm-yyyy')
            , TO_DATE(#{reSignDate},'dd-mm-yyyy')
            , TO_DATE(#{termDate},'dd-mm-yyyy')
            , TO_DATE(#{RenewDate},'dd-mm-yyyy')
            , #{AgrmntNo}
            , #{branch}
            , #{status}
            , #{SyncCheck}
            , #{rank}
            , #{transportCd}
            , TO_DATE(#{promoteDate},'dd-mm-yyyy')
            , #{trNo}
            , SYSDATE
            , #{creator}
            , SYSDATE
            , #{updator}
            , #{memIsOutSource}
            , #{applicantID}
            , #{BusinessesType}
            , #{Hospitalization}
            , #{areaId}
            , #{streetDtl}
            , #{addrDtl}
             , #{traineeType}
             , #{searchdepartment}
             , #{searchSubDept}
             , #{religion}
             , NVL(#{mobileUseYn}, 'N')
             <!-- , #{incomeTaxNo} -->
             )
    </insert>

    <select id="selectOranization" parameterType="Map" resultType="egovMap">
     <![CDATA[
         SELECT Extent1.MEM_ID MEM_ID  ,
           Extent1.MEM_UP_ID MEM_UP_ID  ,
           Extent1.MEM_LVL MEM_LVL  ,
           Extent1.DEPT_CODE DEPT_CODE  ,
           Extent1.ORG_UPD_USER_ID ORG_UPD_USER_ID  ,
           Extent1.ORG_UPD_DT ORG_UPD_DT  ,
           Extent1.PREV_DEPT_CODE PREV_DEPT_CODE  ,
           Extent1.PREV_GRP_CODE PREV_GRP_CODE  ,
           Extent1.PREV_MEM_ID_ID PREV_MEM_ID_ID  ,
           Extent1.PREV_MEM_LVL PREV_MEM_LVL  ,
           Extent1.ORG_STUS_CODE_ID ORG_STUS_CODE_ID  ,
           Extent1.PR_CODE PR_CODE  ,
           Extent1.PR_MEM_ID PR_MEM_ID  ,
           Extent1.GRAND_PR_CODE GRAND_PR_CODE  ,
           Extent1.GRAND_PR_MEM_ID GRAND_PR_MEM_ID  ,
           Extent1.LAST_DEPT_CODE LAST_DEPT_CODE  ,
           Extent1.LAST_GRP_CODE LAST_GRP_CODE  ,
           Extent1.LAST_ORG_CODE LAST_ORG_CODE  ,
           Extent1.LAST_TOP_ORG_CODE LAST_TOP_ORG_CODE  ,
           Extent1.BRNCH_ID BRNCH_ID
      FROM ORG0005D Extent1
     WHERE  ( 3 = Extent1.MEM_LVL )
          AND ( Extent1.DEPT_CODE =#{deptCode})
        ]]>
    </select>

      <select id="selectMemberId" parameterType="Map" resultType="String">

      <if test="code != null and code == 'mem'">
          SELECT MAX(MEM_ID) MEMBERID FROM ORG0001D
      </if>

      <if test="code != null and code == 'tax'">
         SELECT MAX(TAX_INVC_ID) TAXINVCID  FROM PAY0031D
      </if>

      <if test="code != null and code == 'memApp'">
         SELECT MAX(TAX_INVC_ID) TAXINVCID  FROM PAY0031D
      </if>
       <if test="code != null and code == 'user'">
        SELECT MAX(USER_ID) USER_ID FROM SYS0047M
       </if>
    </select>

<select id="selectLastGroupCode" parameterType="Map" resultType="String">

     <!--   <choose>
        <when test="divParam == 1">
           SELECT distinct Dept_code FROM ORG0001D mem
           join ORG0005D memorg on memorg.MEM_ID = MEM.MEM_ID
           where MEMORG.mem_up_id = #{memberUpId}
        </when>
        SELECT distinct Dept_code FROM ORG0001D mem
           join ORG0005D memorg on memorg.MEM_ID = MEM.MEM_ID
           where MEMORG.Dept_code = #{memberUpId} and MEMORG.MEM_LVL = 3
        <when>
        </when>
        <otherwise>
           SELECT distinct Dept_code FROM ORG0001D mem
           join ORG0005D memorg on memorg.MEM_ID = MEM.MEM_ID
           where MEMORG.Dept_code = #{memberUpId} and MEMORG.MEM_LVL = 3
        </otherwise>
      </choose>-->
    </select>

    <select id="selectHpDocSubmission" parameterType="Map" resultType="egovMap">

       <!--  SELECT Project1.DOC_TYPE_ID CODE_ID  ,
                   Project1.CODE_NAME CODE_NAME  ,
                   Project1.DOC_COPY_QTY DOC_QTY
                    FROM ( SELECT Extent1.DOC_TYPE_ID DOC_TYPE_ID  ,
                            Extent1.DOC_COPY_QTY DOC_COPY_QTY  ,
                            Extent2.CODE_NAME CODE_NAME
                   FROM ORG0010D Extent1
                            JOIN SYS0013M Extent2   ON Extent2.CODE_ID = Extent1.DOC_TYPE_ID
                   WHERE  ( 247 = Extent1.DOC_SUB_TYPE_ID )
                               AND ( Extent1.DOC_MEM_ID =  #{memberID})
                               AND ( 1 = Extent1.STUS_ID ) ) Project1
                     ORDER BY Project1.CODE_NAME ASC -->

      <if test="memType !='2803'">
      <![CDATA[



        SELECT DOCLIST.* ,NVL( MEMINFO.DOC_COPY_QTY , 0 ) DOC_QTY
            FROM (
                 SELECT Extent1.CODE_ID CODE_ID ,
                    Extent1.CODE_DESC CODE_NAME,
                    Extent2.TYPE_ID TYPE_ID ,
                    Extent2.TYPE_DT_SEQ TYPE_DT_SEQ
                  FROM SYS0013M Extent1
                  JOIN ORG0013C Extent2
                  ON Extent1.CODE_ID           = Extent2.TYPE_ID
                  WHERE ( Extent2.TYPE_CODE_ID = 247 )
                  AND ( 1                      = Extent2.STUS_ID )
                  AND ( Extent2.TYPE_GRP_ID    = 247 )
                  ORDER BY Extent2.TYPE_DT_SEQ ASC
                ) DOCLIST , (
                SELECT B.*
                FROM ORG0001D A,
                  ORG0010D B
                WHERE A.MEM_ID    = B.DOC_MEM_ID
                AND  A.MEM_ID    = #{memberID}) MEMINFO
                WHERE DOCLIST.CODE_ID = MEMINFO.DOC_TYPE_ID(+)
               ]]>
               </if>

      <if test="memType =='2803'">
      <![CDATA[

        SELECT DOCLIST.* ,NVL( MEMINFO.DOC_COPY_QTY , 0 ) DOC_QTY
            FROM (
                 SELECT Extent1.CODE_ID CODE_ID ,
                    Extent1.CODE_DESC CODE_NAME,
                    Extent2.TYPE_ID TYPE_ID ,
                    Extent2.TYPE_DT_SEQ TYPE_DT_SEQ
                  FROM SYS0013M Extent1
                  JOIN ORG0013C Extent2
                  ON Extent1.CODE_ID           = Extent2.TYPE_ID
                  WHERE ( Extent2.TYPE_CODE_ID = 247 )
                  AND ( 1                      = Extent2.STUS_ID )
                  AND ( Extent2.TYPE_GRP_ID    = 247 )
                  ORDER BY Extent2.TYPE_DT_SEQ ASC
                ) DOCLIST , (
                SELECT B.*
                FROM ORG0003D A,
                  ORG0010D B
                WHERE A.APLCTN_ID    = B.DOC_MEM_ID
                AND  A.APLCTN_ID    = #{memberID}) MEMINFO
                WHERE DOCLIST.CODE_ID = MEMINFO.DOC_TYPE_ID(+)
               ]]>
            </if>
  </select>




  <select id="selectCodyDocSubmission" parameterType="Map" resultType="egovMap">
        <!--         SELECT Project1.CODE_ID CODE_ID  ,
               Project1.TYPE_ID TYPE_ID  ,
               Project1.CODE_DESC CODE_NAME,
               Project1.C1 C1  ,
               Project1.C2 C2
          FROM ( SELECT Extent1.CODE_ID CODE_ID  ,
                        Extent1.CODE_DESC CODE_DESC,
                        Extent2.TYPE_ID TYPE_ID  ,
                        Extent2.TYPE_DT_SEQ TYPE_DT_SEQ  ,
                        0 C1  ,
                        CASE
                             WHEN ( 252 = Extent1.CODE_ID ) THEN UTILS.CONVERT_TO_NUMBER(1,1,0)
                        ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
                           END C2
                 FROM SYS0013M Extent1
                        JOIN ORG0013C Extent2   ON Extent1.CODE_ID = Extent2.TYPE_ID
                  WHERE  ( Extent2.TYPE_CODE_ID = 1417 )
                           AND ( 1 = Extent2.STUS_ID )
                           AND ( Extent2.TYPE_GRP_ID = 1417 ) ) Project1
          ORDER BY Project1.TYPE_DT_SEQ ASC -->
          SELECT DOCLIST.* ,NVL( MEMINFO.DOC_COPY_QTY , 0 ) DOC_QTY
            FROM (
                 SELECT Extent1.CODE_ID CODE_ID ,
                    Extent1.CODE_DESC CODE_NAME,
                    Extent2.TYPE_ID TYPE_ID ,
                    Extent2.TYPE_DT_SEQ TYPE_DT_SEQ
                  FROM SYS0013M Extent1
                  JOIN ORG0013C Extent2
                  ON Extent1.CODE_ID           = Extent2.TYPE_ID
                  WHERE ( Extent2.TYPE_CODE_ID = 1417 )
                  AND ( 1                      = Extent2.STUS_ID )
                  AND ( Extent2.TYPE_GRP_ID    = 1417 )
                  ORDER BY Extent2.TYPE_DT_SEQ ASC
                ) DOCLIST , (
                SELECT B.*
                FROM ORG0001D A,
                  ORG0010D B
                WHERE A.MEM_ID    = B.DOC_MEM_ID
                AND  A.MEM_ID    = #{memberID}) MEMINFO
                WHERE DOCLIST.CODE_ID = MEMINFO.DOC_TYPE_ID(+)

  </select>

    <insert id="insertOrganization" parameterType="Map">
    INSERT INTO ORG0005D
        ( MEM_ID
        , MEM_UP_ID
        , MEM_LVL
        , DEPT_CODE
        , ORG_UPD_USER_ID
        , ORG_UPD_DT
        , PREV_DEPT_CODE
        , PREV_GRP_CODE
        , PREV_MEM_ID_ID
        , PREV_MEM_LVL
        , ORG_STUS_CODE_ID
        , PR_CODE
        , PR_MEM_ID
        , GRAND_PR_CODE
        , GRAND_PR_MEM_ID
        , LAST_DEPT_CODE
        , LAST_GRP_CODE
        , LAST_ORG_CODE
        , LAST_TOP_ORG_CODE
        , BRNCH_ID )
           VALUES (
           #{memberId}
           , #{memberUpID}
           , #{memberLvl}
           , #{deptCode}
           , #{orgUpdateBy}
           , SYSDATE
           , #{prevDeptCode}
           , #{prevGroupCode}
           , #{prevMemberUpId}
           , #{prevMemberLvl}
           , #{orgStatusCodeId}
           , #{prCode}
           , #{prMemberId}
           , #{grandPrCode}
           , #{grandPrMemberId}
           , #{lastDeptCode}
           , #{lastGrpCode}
           , #{lastOrgCode}
           , #{lastTopOrgCode}
           , #{branchId} )
  </insert>

  <insert id="insertAccBill" parameterType="Map">
    INSERT INTO PAY0007D
        ( BILL_ID
        , BILL_TYPE_ID
        , BILL_SO_ID
        , BILL_MEM_ID
        , BILL_AS_ID
        , BILL_PAY_TYPE_ID
        , BILL_NO
        , BILL_MEM_SHIP_NO
        , BILL_DT
        , BILL_AMT
        , BILL_REM
        , BILL_IS_PAID
        , BILL_IS_COMM
        , UPD_USER_ID
        , UPD_DT
        , SYNC_CHK
        , COURS_ID
        , STUS_ID )
          VALUES (
          PAY0007D_SEQ.NEXTVAL
          , #{billTypeId}
          , #{billSOID}
          , #{billMemId}
          , #{billASID}
          , #{billPayTypeId}
          , #{billINo}
          , #{billMemberShipNo}
          , SYSDATE
          , #{billAmt}
          , #{billRemark}
          , #{billIsPaid}
          , #{billIsComm}
          , #{updator}
          , SYSDATE
          , #{syncCheck}
          , #{courseId}
          , #{statusId}
         )
  </insert>

  <insert id="insertAccOrderBill" parameterType="Map">
       INSERT INTO PAY0016D
             ( ACC_BILL_ID
             , ACC_BILL_TASK_ID
             , ACC_BILL_REF_DT
             , ACC_BILL_REF_NO
             , ACC_BILL_ORD_ID
             , ACC_BILL_ORD_NO
             , ACC_BILL_TYPE_ID
             , ACC_BILL_MODE_ID
             , ACC_BILL_SCHDUL_ID
             , ACC_BILL_SCHDUL_PRIOD
             , ACC_BILL_ADJ_ID
             , ACC_BILL_SCHDUL_AMT
             , ACC_BILL_ADJ_AMT
             , ACC_BILL_TXS_AMT
             , ACC_BILL_NET_AMT
             , ACC_BILL_STUS
             , ACC_BILL_REM
             , ACC_BILL_CRT_DT
             , ACC_BILL_CRT_USER_ID
             , ACC_BILL_GRP_ID
             , ACC_BILL_TAX_CODE_ID
             , ACC_BILL_TAX_RATE
             , ACC_BILL_ACCT_CNVR
             , ACC_BILL_CNTRCT_ID )
               VALUES (
              PAY0016D_SEQ.NEXTVAL
               , #{accBillTaskId}
               ,  SYSDATE
               , #{accBillRefNo}
               , #{accBillOrderId}
               , #{accBillOrderNo}
               , #{accBillTypeId}
               , #{accBillModeId}
               , #{accBillScheduleId}
               , #{accBillSchedulePeriod}
               , #{accBillAdjustmentId}
               , #{accBillScheduleAmount}
               , #{accBillAdjustmentAmount}
               , #{accBillTaxesAmount}
               , #{accBillNetAmount}
               , #{accBillStatus}
               , #{accBillRemark}
               , SYSDATE
               , #{accBillCreateBy}
               , #{accBillGroupId}
               , #{accBillTaxCodeId}
               , #{accBillTaxRate}
               , #{accBillAcctConversion}
               , #{accBillContractId}
              )
  </insert>

    <select id="selectMiscList" parameterType="Map" resultType="egovMap">
    <!--
     <![CDATA[

          SELECT Extent1.MEM_ID MEM_ID  ,
               #{memberName} C1  ,
               #{membetFullName} C2  ,
               #{address1} C3  ,
               #{address2} C4  ,
               #{address3} C5  ,
               #{address4} C6  ,
               Extent5.POST_CODE POST_CODE  ,
               Extent3.NAME NAME  ,
               Extent2.NAME NAME1  ,
               #{memberNirc} C7
          FROM ORG0001D Extent1
                 JOIN SYS0015M Extent2   ON UTILS.CONVERT_TO_NUMBER(Extent1.CNTY,10,0) = Extent2.CNTY_ID
                 LEFT JOIN SYS0035M Extent3   ON UTILS.CONVERT_TO_NUMBER(Extent1.STATE,10,0) = Extent3.STATE_ID
                 LEFT JOIN SYS0039M Extent4   ON Extent1.AREAL = Extent4.AREA_ID
                 LEFT JOIN SYS0030C Extent5   ON Extent1.POST_CODE = Extent5.POST_CODE_ID
         WHERE  Extent1.MEM_ID = #{memberId} AND ROWNUM <= 1
        ]]>
        -->
        SELECT A.MEM_ID MEM_ID  ,
                     #{memberName} C1  ,
                     #{membetFullName} C2  ,
                     #{address1} C3  ,
                     #{address2} C4  ,
                     #{address3} C5  ,
                     #{address4} C6  ,
                       B.POSTCODE POST_CODE  ,
                       B.STATE NAME  ,
                       B.COUNTRY NAME1  ,
                       #{memberNirc} C7,
                       a.AREA_ID,
                       a.ADDR_DTL,
                       a.STREET
          FROM org0001d a, sys0064m b
         WHERE 1 = 1
         AND a.area_id = b.area_id
         AND A.MEM_ID = #{memberId}
    </select>

      <insert id="insertInvMISC" parameterType="Map">
            INSERT INTO PAY0031D
          ( TAX_INVC_ID
          , TAX_INVC_REF_NO
          , TAX_INVC_REF_DT
          , TAX_INVC_SVC_NO
          , TAX_INVC_TYPE
          , TAX_INVC_CUST_NAME
          , TAX_INVC_CNTC_PERSON
          , TAX_INVC_ADDR1
          , TAX_INVC_ADDR2
          , TAX_INVC_ADDR3
          , TAX_INVC_ADDR4
          , TAX_INVC_POST_CODE
          , TAX_INVC_STATE_NAME
          , TAX_INVC_CNTY
          , TAX_INVC_TASK_ID
          , TAX_INVC_REM
          , TAX_INVC_CHRG
          , TAX_INVC_TXS
          , TAX_INVC_AMT_DUE
          , TAX_INVC_CRT_DT
          , TAX_INVC_CRT_USER_ID
          , AREA_ID
          , ADDR_DTL
          , STREET)
          VALUES (
          PAY0031D_SEQ.NEXTVAL
          , #{taxInvoiceRefNo}
          , SYSDATE
          , #{taxInvoiceServiceNo}
          , #{taxInvoiceType}
          , #{taxInvoiceCustName}
          , #{taxInvoiceContactPerson}
          , #{taxInvoiceAddress1}
          , #{taxInvoiceAddress2}
          , #{taxInvoiceAddress3}
          , #{taxInvoiceAddress4}
          , #{taxInvoicePostCode}
          , #{taxInvoiceStateName}
          , #{taxInvoiceCountry}
          , #{taxInvoiceTaskID}
          , #{taxInvoiceRemark}
          , #{taxInvoiceCharges}
          , #{taxInvoiceTaxes}
          , #{taxInvoiceAmountDue}
          , SYSDATE
          , #{taxInvoiceCreator}
          , #{areaId}
          , #{addrDtl}
          , #{street}
          )
      </insert>
      <insert id="insertInvMISCD" parameterType="Map">
          INSERT INTO PAY0032D
             ( INVC_ITM_ID
             , TAX_INVC_ID
             , INVC_ITM_TYPE
             , INVC_ITM_ORD_NO
             , INVC_ITM_PO_NO
             , INVC_ITM_CODE
             , INVC_ITM_DESC1
             , INVC_ITM_DESC2
             , INVC_ITM_SERIAL_NO
             , INVC_ITM_QTY
             , INVC_ITM_UNIT_PRC
             , INVC_ITM_GST_RATE
             , INVC_ITM_GST_TXS
             , INVC_ITM_CHRG
             , INVC_ITM_AMT_DUE
             , INVC_ITM_ADD1
             , INVC_ITM_ADD2
             , INVC_ITM_ADD3
             , INVC_ITM_ADD4
             , INVC_ITM_POST_CODE
             , INVC_ITM_AREA_NAME
             , INVC_ITM_STATE_NAME
             , INVC_ITM_CNTY
             , INVC_ITM_INSTALL_DT
             , INVC_ITM_RETN_DT
             , INVC_ITM_BILL_REF_NO
             , AREA_ID
             , ADDR_DTL
             , STREET
             )
               VALUES (
                PAY0032D_SEQ.NEXTVAL
               , #{taxInvoiceID}
               , #{invoiceItemType}
               , #{invoiceItemOrderNo}
               , #{invoiceItemPONo}
               , #{invoiceItemCode}
               , #{invoiceItemDescription1}
               , #{invoiceItemDescription2}
               , #{invoiceItemSerialNo}
               , #{invoiceItemQuantity}
               , 0
               , #{invoiceItemGSTRate}
               , #{invoiceItemGSTTaxes}
               , #{invoiceItemCharges}
               , #{invoiceItemAmountDue}
               , #{invoiceItemAdd1}
               , #{invoiceItemAdd2}
               , #{invoiceItemAdd3}
               , NULL
               , #{invoiceItemPostCode}
               , NULL
               , #{invoiceItemStateName}
               , #{invoiceItemCountry}
               , NULL
               , NULL
               , NULL
              , #{areaId}
              , #{addrDtl}
              , #{street}
                )

      </insert>

      <update id="updateBillRem" parameterType="Map">
      UPDATE PAY0016D
       SET ACC_BILL_REM = #{accBillRemark}
     WHERE  ( ( ACC_BILL_ID = (SELECT MAX(ACC_BILL_ID) FROM PAY0016D ))
      AND ( ACC_BILL_TASK_ID = #{accBillTaskId} ) )
      </update>

      <insert id="insertUser" parameterType="Map">
      INSERT INTO SYS0047M
        ( USER_ID
        , USER_NAME
        , USER_PASSWD
        , USER_FULL_NAME
        , USER_EMAIL
        , USER_STUS_ID
        , USER_BRNCH_ID
        , USER_DEPT_ID
        , USER_UPD_USER_ID
        , USER_UPD_DT
        , USER_SYNC_CHK
        , USER_NRIC
        , USER_DT_JOIN
        , USER_GSEC_SYN_CHK
        , USER_PASSWD_LAST_UPD_DT
        , USER_TYPE_ID
        , USER_DFLT_PASSWD
        , USER_VAL_ID_FROM
        , USER_VAL_ID_TO
        , USER_SEC_QUES_ID
        , USER_SEC_QUES_ANS
        , USER_WORK_NO
        , USER_MOBILE_NO
        , USER_EXT_NO
        , USER_IS_PART_TM
        , USER_DEPT_ID1
        , USER_IS_EXTRNL
         )
         VALUES (
           SYS0047M_USER_ID_SEQ.nextval
          ,  #{userName}
          , #{password}
          , #{userFullName}
          , #{userEmail}
          , #{userStatusID}
          , #{userBranchID}
          , #{userDeptID}
          , #{userUpdateBy}
          , SYSDATE
          , #{userSyncCheck}
          , #{userNRIC}
          , TO_DATE(#{userDateJoin},'dd-mm-yyyy')
          , #{userGsecSynCheck}
          , SYSDATE
          , #{userTypeID}
          , #{userDefaultPasswd}
          , TO_DATE(#{userValidFrom},'dd-mm-yyyy')
          ,  TO_DATE(#{userValidTo},'dd-mm-yyyy')
          , #{userSecQuesID}
          , #{userSecQuesAns}
          , #{userWorkNo}
          , #{userMobileNo}
          , #{userExtNo}
          , #{userIsPartTime}
          , #{userDepartmentID}
          , #{userIsExternal}
          )
        </insert>

        <insert id="insertRoleUser" parameterType="Map">
        INSERT INTO SYS0045M
            ( ROLE_ID
            , USER_ID
            , STUS_ID
            , CRT_DT
            , CRT_USER_ID
            , UPD_DT
            , UPD_USER_ID
            )
        VALUES
        ( #{roleID}
        , #{userID}
        , #{statusID}
        , SYSDATE
        , #{createdBy}
        , SYSDATE
        , #{updatedBy}
        )
  </insert>
  <insert id="insertMemApp" parameterType="Map">
      INSERT INTO ORG0003D (
         APLCTN_ID
       , APLICNT_CODE
       , APLICNT_TYPE
       , APLICNT_NAME
       , APLICNT_FULL_NAME
       , APLICNT_IDNTFC
       , APLICNT_NRIC
       , APLICNT_DOB
       , APLICNT_GENDER
       , APLICNT_RACE
       , APLICNT_MARTL
       , APLICNT_NATION
       , APLICNT_TEL_OFFICE
       , APLICNT_TEL_HUSE
       , APLICNT_TEL_MOBILE
       , APLICNT_EMAIL
       , APLICNT_SPOUSE_CODE
       , APLICNT_SPOUSE_NAME
       , APLICNT_SPOUSE_NRIC
       , APLICNT_SPOUSE_OCPAT
       , APLICNT_SPOUSE_TEL_CNTC
       , APLICNT_SPOUSE_DOB
       , APLICNT_EDU_LEV
       , APLICNT_LANG
       , APLICNT_BANK_ID
       , APLICNT_BANK_ACC_NO
       , APLICNT_SPONS_CODE
       , APLICNT_TRNSPRT
       , REM, STUS_ID
       , CRT_DT
       , CRT_USER_ID
       , UPD_DT
       , UPD_USER_ID
       , CNFM
       , CNFM_DT
       , DEPT_CODE
       , AREA_ID
       , ADDR_DTL
       , STREET
       , MAIN_DEPT
       , SUB_DEPT
       , APLICNT_MEETPOINT
       )
      VALUES (
      ORG0003D_APLCTN_ID_SEQ.NEXTVAL
        , #{applicantCode}
      , #{applicantType}
      , UPPER(#{applicantName})
      , UPPER(#{applicantFullName})
      , #{applicantIdentification}
      , #{applicantNRIC}
      , TO_DATE(#{applicantDOB},'dd-mm-yyyy')
      , #{applicantGender}
      , #{applicantRace}
      , #{applicantMarital}
      , #{applicantNationality}
      , #{applicantTelOffice}
      , #{applicantTelHouse}
      , #{applicantTelMobile}
      , #{applicantEmail}
      , #{applicantSpouseCode}
      , #{applicantSpouseName}
      , #{applicantSpouseNRIC}
      , #{applicantSpouseOccupation}
      , #{applicantSpouseTelContact}
      ,TO_DATE(#{applicantSpouseDOB},'dd-mm-yyyy')
      , #{applicantEduLevel}
      , #{applicantLanguage}
      , #{applicantBankID}
      , #{applicantBankAccNo}
      , #{applicantSponsorCode}
      , #{applicantTransport}
      , #{remark}
      , #{statusId}
      , SYSDATE
      , 52366
      , SYSDATE
      , 52366
      , #{confirmation}
      , TO_DATE(#{confirmDate},'DD-MM-YYYY')
      , #{deptCode}
      , #{areaId}
      , #{addrDtl}
      , #{streetDtl}
      , #{searchdepartment}
      , #{searchSubDept}
      , #{meetingPoint}
      )
  </insert>
  <insert id="insertMemberAgr" parameterType="Map">
      INSERT INTO ORG0002D (
         AG_ID
       , AG_REF_NO
       , MEM_ID
       , AG_TYPE_ID
       , AG_STUS_ID
       , AG_REM
       , AG_START_DT
       , AG_EXPR_DT
       , AG_CRT_USER_ID
       , AG_CRT_DT
       , AG_UPD_USER_ID
       , AG_UPD_DT )
      VALUES (
      ORG0002D_AG_ID_SEQ.NEXTVAL
       , #{agreementRefNo}
       , #{memberID}
       , #{agreementTypeID}
       , #{agreementStatusID}
       , #{agreementRemark}
       , TO_DATE(#{agreementStartDate},'dd-mm-yyyy')
       ,  TO_DATE(#{agreementExpiryDate},'dd-mm-yyyy')
       , #{agreementCreator}
       , SYSDATE
       , NULL
       , SYSDATE )
  </insert>
   <insert id="insertinvWH" parameterType="Map">
      INSERT INTO SYS0028M (
         WH_LOC_ID
       , WH_LOC_CODE
       , WH_LOC_DESC
      -- , WH_LOC_ADD1
       --, WH_LOC_ADD2
      -- , WH_LOC_ADD3
       --, WH_LOC_AREA_ID
       --, WH_LOC_POST_CODE_ID
       --, WH_LOC_STATE_ID
       --, WH_LOC_CNTY_ID
       , WH_LOC_TEL1
       , WH_LOC_TEL2
       , WH_LOC_BRNCH_ID
       , WH_LOC_TYPE_ID
       , WH_LOC_STK_GRAD
       , WH_LOC_STUS_ID
       , WH_LOC_UPD_USER_ID
       , WH_LOC_UPD_DT
       , CODE2
       , DESC2
       , WH_LOC_IS_SYNC
       , WH_LOC_MOBILE
       )
      VALUES (
      (SELECT MAX(WH_LOC_ID)+1 FROM SYS0028M)
      , #{WHLocCode}
      , #{WHLocDesc}
     <!--  , #{WHLocAdd1}
      , #{WHLocAdd2}
      , #{WHLocAdd3}
      , #{WHLocAreaId}
      , #{WHLocPostcodeID}
      , #{WHLocStateID}
      , #{WHLocCountryID} -->
      , #{WHLocTel1}
      , #{WHLocTel2}
      , #{WHLocBranchID}
      , #{WHLocTypeID}
      , #{WHLocStkGrade}
      , #{WHLocStatusID}
      , 52366
      , SYSDATE
      , #{Code2}
      , #{Desc2}
      , #{WHLocIsSync}
      , 0
      )
  </insert>

  <insert id="insertDocSubmission" parameterType="Map">
      INSERT INTO ORG0010D (
         DOC_SUB_ID
       , DOC_SUB_TYPE_ID
       , DOC_TYPE_ID
       , DOC_SO_ID
       , DOC_MEM_ID
       , DOC_SUB_DT
       , DOC_COPY_QTY
       , STUS_ID
       , CRT_USER_ID
       , CRT_DT
       , UPD_USER_ID
       , UPD_DT
       , DOC_SUB_BATCH_ID
       , DOC_SUB_BRNCH_ID
       )
      VALUES (
      ORG0010D_DOC_SUB_ID_SEQ.NEXTVAL
      , #{docSubTypeId}
      , #{docTypeID}
      , #{docSOID}
      , #{docMemId}
      , SYSDATE
      , #{docCopyQty}
      , #{statusID}
      , #{creator}
      , SYSDATE
      , #{creator}
      , SYSDATE
      , #{docSubBatchId}
      , #{docSubBrnchId}
      )
  </insert>

  <insert id="insertSmsEntry" parameterType="Map">
      INSERT INTO MSC0015D (
         SMS_ID
       , SMS_MSG
       , SMS_MSISDN
       , SMS_TYPE_ID
       , SMS_PRIO
       , SMS_REF_NO
       , SMS_BATCH_UPLOAD_ID
       , SMS_REM
       , SMS_START_DT
       , SMS_EXPR_DT
       , SMS_STUS_ID
       , SMS_RETRY
       , SMS_CRT_DT
       , SMS_CRT_USER_ID
       , SMS_UPD_DT
       , SMS_UPD_USER_ID
       , SMS_VENDOR_ID
       )
        VALUES (
        MSC0015D_SEQ.NEXTVAL
         , #{SMSMessage}
         , #{SMSMSISDN}
         , #{SMSTypeID}
         , #{SMSPriority}
         , #{SMSReferenceNo}
         , #{SMSBatchUploadID}
         , #{SMSRemark}
         , SYSDATE
         , SYSDATE
         , #{SMSStatusID}
         , #{SMSRetry}
         , SYSDATE
         , 52366
         , SYSDATE
         , 52366
         , #{SMSVendorID}
         )
   </insert>

   <insert id="insertSmsReply" parameterType="Map">
      INSERT INTO MSC0017D (
         REPLY_ID
       , SMS_ID
       , REPLY_CODE
       , REPLY_REM
       , REPLY_CRT_DT
       , REPLY_CRT_USER_ID
       , REPLY_FDBCK_ID
        )
      VALUES (
      MSC0017D_REPLY_ID_SEQ.NEXTVAL
      ,#{SMSID}
      , #{replyCode}
      , #{replyRemark}
      , SYSDATE
      , #{replyCreateBy}
      , #{replyFeedbackID}
      )
   </insert>

   <select id="selectMember" parameterType="Map" resultType="egovMap">
      SELECT Extent1.MEM_ID MEM_ID  ,
           Extent1.MEM_CODE MEM_CODE  ,
           Extent1.MEM_TYPE MEM_TYPE  ,
           Extent1.NAME NAME  ,
           Extent1.FULL_NAME FULL_NAME  ,
           Extent1.PASSWD PASSWD  ,
           Extent1.NRIC NRIC  ,
           Extent1.DOB DOB  ,
           Extent1.GENDER GENDER  ,
           Extent1.RACE RACE  ,
           Extent1.MARTL MARTL  ,
           Extent1.NATION NATION  ,
           --Extent1.ADDR1 ADDR1  ,
          -- Extent1.ADDR2 ADDR2  ,
          -- Extent1.ADDR3 ADDR3  ,
          -- Extent1.ADDR4 ADDR4  ,
          -- Extent1.AREAL AREAL  ,
         --  Extent1.POST_CODE POST_CODE  ,
         -- Extent1.STATE STATE  ,
        --   Extent1.CNTY CNTY  ,
           Extent1.TEL_OFFICE TEL_OFFICE  ,
           Extent1.TEL_HUSE TEL_HUSE  ,
           Extent1.TEL_MOBILE TEL_MOBILE  ,
           Extent1.EMAIL EMAIL  ,
           Extent1.SPUSE_CODE SPUSE_CODE  ,
           Extent1.SPOUSE_NAME SPOUSE_NAME  ,
           Extent1.SPOUSE_NRIC SPOUSE_NRIC  ,
           Extent1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
           Extent1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
           Extent1.SPOUSE_DOB SPOUSE_DOB  ,
           Extent1.EDC_LEV EDC_LEV  ,
           Extent1.LANG LANG  ,
           Extent1.BANK BANK  ,
           Extent1.BANK_ACC_NO BANK_ACC_NO  ,
           Extent1.SPONS_CODE SPONS_CODE  ,
           Extent1.JOIN_DT JOIN_DT  ,
           Extent1.RESIGN_DT RESIGN_DT  ,
           Extent1.TRM_DT TRM_DT  ,
           Extent1.RENEW_DT RENEW_DT  ,
           Extent1.AGRMNT_NO AGRMNT_NO  ,
           Extent1.BRNCH BRNCH  ,
           Extent1.STUS STUS  ,
           Extent1.SYNC_CHK SYNC_CHK  ,
           Extent1.RANK RANK  ,
           Extent1.TRNSPRT TRNSPRT  ,
           Extent1.PROMO_DT PROMO_DT  ,
           Extent1.TR_NO TR_NO  ,
           Extent1.CRT_DT CRT_DT  ,
           Extent1.CRT_USER_ID CRT_USER_ID  ,
           Extent1.UPD_DT UPD_DT  ,
           Extent1.UPD_USER_ID UPD_USER_ID  ,
           Extent1.MEM_IS_OUT_SRC MEM_IS_OUT_SRC  ,
           Extent1.APLICNT_ID APLICNT_ID  ,
           Extent1.BIZ_TYPE BIZ_TYPE  ,
           Extent1.HSPTLZ HSPTLZ
      FROM ORG0001D Extent1
     WHERE  Extent1.MEM_ID = #{memberId}
   </select>
    <select id="selectOrganization" parameterType="Map" resultType="egovMap">
           SELECT Extent1.MEM_ID MEM_ID  ,
               Extent1.MEM_UP_ID MEM_UP_ID  ,
               Extent1.MEM_LVL MEM_LVL  ,
               Extent1.DEPT_CODE DEPT_CODE  ,
               Extent1.ORG_UPD_USER_ID ORG_UPD_USER_ID  ,
               Extent1.ORG_UPD_DT ORG_UPD_DT  ,
               Extent1.PREV_DEPT_CODE PREV_DEPT_CODE  ,
               Extent1.PREV_GRP_CODE PREV_GRP_CODE  ,
               Extent1.PREV_MEM_ID_ID PREV_MEM_ID_ID  ,
               Extent1.PREV_MEM_LVL PREV_MEM_LVL  ,
               Extent1.ORG_STUS_CODE_ID ORG_STUS_CODE_ID  ,
               Extent1.PR_CODE PR_CODE  ,
               Extent1.PR_MEM_ID PR_MEM_ID  ,
               Extent1.GRAND_PR_CODE GRAND_PR_CODE  ,
               Extent1.GRAND_PR_MEM_ID GRAND_PR_MEM_ID  ,
               Extent1.LAST_DEPT_CODE LAST_DEPT_CODE  ,
               Extent1.LAST_GRP_CODE LAST_GRP_CODE  ,
               Extent1.LAST_ORG_CODE LAST_ORG_CODE  ,
               Extent1.LAST_TOP_ORG_CODE LAST_TOP_ORG_CODE  ,
               Extent1.BRNCH_ID BRNCH_ID
          FROM ORG0005D Extent1
         WHERE  Extent1.MEM_ID = #{memberId}
 </select>
 <select id="selectMemberOrgs" parameterType="Map" resultType="egovMap">
         SELECT Extent1.MEM_ID MEM_ID  ,
               Extent1.MEM_CODE MEM_CODE  ,
               Extent1.MEM_LVL MEM_LVL  ,
               Extent1.DEPT_CODE DEPT_CODE  ,
               Extent1.GRP_CODE GRP_CODE  ,
               Extent1.ORG_CODE ORG_CODE  ,
               Extent1.TOP_ORG_CODE TOP_ORG_CODE  ,
               Extent1.MEM_UP_ID MEM_UP_ID  ,
               Extent1.LVL3_UP_ID LVL3_UP_ID  ,
               Extent1.LVL2_UP_ID LVL2_UP_ID  ,
               Extent1.LVL1_UP_ID LVL1_UP_ID  ,
               Extent1.LVL0_UP_ID LVL0_UP_ID
          FROM ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                        vMemberOrg.MEM_CODE MEM_CODE  ,
                        vMemberOrg.MEM_LVL MEM_LVL  ,
                        vMemberOrg.DEPT_CODE DEPT_CODE  ,
                        vMemberOrg.GRP_CODE GRP_CODE  ,
                        vMemberOrg.ORG_CODE ORG_CODE  ,
                        vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                        vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                        vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                        vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                        vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                        vMemberOrg.LVL0_UP_ID LVL0_UP_ID
                 FROM ORG1001V vMemberOrg ) Extent1
         WHERE  Extent1.MEM_ID = #{memberId}
 </select>
 <update id="updateOrganization" parameterType="Map">
     UPDATE ORG0005D
       SET ORG_UPD_DT = SYSDATE,
           ORG_STUS_CODE_ID = #{orgStatusCodeID},
           LAST_TOP_ORG_CODE = #{lastTopOrgCode}
     WHERE  ( MEM_ID = #{memId} )
     </update>
     <insert id="insertPromoEntry" parameterType="Map">
       INSERT INTO ORG0007D (
             PROMO_ID
           , REQST_NO
           , STUS_ID
           , PROMO_TYPE_ID
           , MEM_TYPE_ID
           , MEM_ID
           , MEM_LVL_FROM
           , MEM_LVL_TO
           , CRT_DT
           , CRT_USER_ID
           , UPD_DT
           , UPD_USER_ID
           , DEPT_CODE_FROM
           , DEPT_CODE_TO
           , PARENT_ID_FROM
           , PARENT_ID_TO
           , STUS_ID_FROM
           , STUS_ID_TO
           , REM
           , PARENT_DEPT_CODE_FROM
           , PARENT_DEPT_CODE_TO
           , PR_CODE
           , PROMO_SYNC
           , LAST_DEPT_CODE
           , LAST_GRP_CODE
           , LAST_ORG_CODE
           , PR_MEM_ID
           , BRNCH_ID
           , EVT_APPLY_DT
            )
          VALUES (
          ORG0007D_PROMO_ID_SEQ.NEXTVAL
           , #{requestNo}
           , #{statusId}
           , #{promoTypeId}
           , #{memTypeId}
           , #{memberId}
           , #{memberLvlFrom}
           , #{memberLvlTo}
           , SYSDATE
           , #{creator} <!-- 52366 -->
           ,SYSDATE
           , #{updator} <!-- 52366 -->
           , #{deptCodeFrom}
           , #{deptCodeTo}
           , #{parentIdFrom}
           , #{parentIdTo}
           , #{statusIdFrom}
           , #{statusIdTo}
           , #{remark}
           , #{parentDeptCodeFrom}
           , #{parentDeptCodeTo}
           , #{PRCode}
           , #{promoSync}
           , #{lastDeptCode}
           , #{lastGrpCode}
           , #{lastOrgCode}
           , #{PRmemId}
           , #{branchId}
           ,  to_date(#{evtApplyDt} ,'dd/mm/yyyy')
            )
     </insert>


     <insert id="insertVacationEntry" parameterType="Map">
       INSERT INTO ORG0007D (
             PROMO_ID
           , REQST_NO
           , STUS_ID
           , PROMO_TYPE_ID
           , MEM_TYPE_ID
           , MEM_ID
           , CRT_DT
           , CRT_USER_ID
           , UPD_DT
           , UPD_USER_ID
           , REM
           , BRNCH_ID
           , VACT_TYPE_ID
           , VACT_STD_DT
           , VACT_END_DT
           , VACT_REPL_CT
            )
          VALUES (
          ORG0007D_PROMO_ID_SEQ.NEXTVAL
           , #{requestNo}
           , #{statusId}
           , 2740
           , #{memTypeId}
           , #{memberId}
           , SYSDATE
           , #{creator} <!-- 52366 -->
           , SYSDATE
           , #{updator} <!-- 52366 -->
           , #{remark}
           , #{branchId}
           , #{vactTypeId}
           , to_date(#{vactStdDt},'dd/mm/yyyy')
           , to_date(#{vactEndDt},'dd/mm/yyyy')
           , #{vactReplCt}
            )
     </insert>

     <update id="updateMember" parameterType="Map">
       UPDATE ORG0001D
       SET RESIGN_DT = to_date(#{resignDate},'dd-mm-yyyy'),
           TRM_DT =  to_date(#{termDate},'dd-mm-yyyy'),
           STUS =#{status},
           SYNC_CHK = NULL,
           UPD_DT = SYSDATE,
           UPD_USER_ID = #{updator}
     WHERE  ( MEM_ID =  #{memId} )
     </update>
     <select id="selectUserName" parameterType="Map" resultType="egovMap">
             SELECT Extent1.USER_ID USER_ID  ,
               Extent1.USER_NAME USER_NAME  ,
               Extent1.USER_PASSWD USER_PASSWD  ,
               Extent1.USER_FULL_NAME USER_FULL_NAME  ,
               Extent1.USER_EMAIL USER_EMAIL  ,
               Extent1.USER_STUS_ID USER_STUS_ID  ,
               Extent1.USER_BRNCH_ID USER_BRNCH_ID  ,
               Extent1.USER_DEPT_ID USER_DEPT_ID  ,
               Extent1.USER_UPD_USER_ID USER_UPD_USER_ID  ,
               Extent1.USER_UPD_DT USER_UPD_DT  ,
               Extent1.USER_SYNC_CHK USER_SYNC_CHK  ,
               Extent1.USER_NRIC USER_NRIC  ,
               Extent1.USER_DT_JOIN USER_DT_JOIN  ,
               Extent1.USER_GSEC_SYN_CHK USER_GSEC_SYN_CHK  ,
               Extent1.USER_PASSWD_LAST_UPD_DT USER_PASSWD_LAST_UPD_DT  ,
               Extent1.USER_TYPE_ID USER_TYPE_ID  ,
               Extent1.USER_DFLT_PASSWD USER_DFLT_PASSWD  ,
               Extent1.USER_VAL_ID_FROM USER_VAL_ID_FROM  ,
               Extent1.USER_VAL_ID_TO USER_VAL_ID_TO  ,
               Extent1.USER_SEC_QUES_ID USER_SEC_QUES_ID  ,
               Extent1.USER_SEC_QUES_ANS USER_SEC_QUES_ANS  ,
               Extent1.USER_WORK_NO USER_WORK_NO  ,
               Extent1.USER_MOBILE_NO USER_MOBILE_NO  ,
               Extent1.USER_EXT_NO USER_EXT_NO  ,
               Extent1.USER_IS_PART_TM USER_IS_PART_TM  ,
               Extent1.USER_DEPT_ID USER_DEPT_ID  ,
               Extent1.USER_IS_EXTRNL USER_IS_EXTRNL
          FROM SYS0047M Extent1
         WHERE  ( Extent1.USER_NAME = #{memCode} )
                  AND ( Extent1.USER_TYPE_ID = #{memType}  )
     </select>

     <update id="updateUser" parameterType="Map">
            UPDATE SYS0047M
           SET USER_STUS_ID = #{userStatusID},
               USER_UPD_USER_ID = #{userUpdateBy},
               USER_UPD_DT = SYSDATE
         WHERE  ( USER_ID = #{userId} )
     </update>
     <select id="selectSuperiorTeam" parameterType="Map" resultType="egovMap">
     <![CDATA[
         SELECT
               Distinct1.C1 C1  ,
               Distinct1.MEM_ID CODE_ID  ,
               Distinct1.DEPT_CODE DEPT_CODE  ,
               Distinct1.C2 CODE_NAME
         FROM (
               SELECT
                   DISTINCT Extent1.MEM_ID MEM_ID  ,
                   Extent2.DEPT_CODE DEPT_CODE  ,
                   1 C1  ,
                   Extent2.DEPT_CODE || ' - ' || Extent1.NAME C2
                FROM ORG0001D Extent1
                JOIN ORG0005D Extent2
                    ON ( Extent2.MEM_ID = Extent1.MEM_ID )
                    AND ( 1 = Extent2.ORG_STUS_CODE_ID )
                    AND ( Extent2.MEM_LVL = #{memberLvl} )
                WHERE  ( Extent1.MEM_TYPE = #{memberType} )
                   AND ( 1 = Extent1.STUS )
                   AND ( Extent1.MEM_ID <> #{memberID} )
         ) Distinct1
         ORDER BY Distinct1.DEPT_CODE
        ]]>
        <!-- <if test="cmbSuperior != null and cmbSuperior != ''">
        WHERE Distinct1.MEM_ID = #{cmbSuperior}
        </if> -->
         </select>
         <select id="selectDeptCode" parameterType="Map" resultType="egovMap">
                SELECT Distinct1.C1 C1  ,
       Distinct1.DEPT_CODE CODE_ID  ,
       Distinct1.C2 CODE_NAME
  FROM ( SELECT DISTINCT Extent1.DEPT_CODE DEPT_CODE  ,
                         1 C1  ,
                         Extent1.DEPT_CODE || ' - ' || Extent2.NAME C2
         FROM ORG0005D Extent1
                JOIN ORG0001D Extent2   ON Extent1.MEM_ID = Extent2.MEM_ID
          WHERE  ( Extent1.MEM_LVL = #{memberLvl} <!-- or Extent1.MEM_LVL = '2' -->)
                   AND (Extent1.BRNCH_ID = #{branchVal})
                   AND ( Extent1.DEPT_CODE LIKE #{flag}
                   <if test="flag2 != null and flag2 != '' ">
                   OR Extent1.DEPT_CODE LIKE #{flag2}
                   </if>
                   )
                   AND ( 1 = Extent1.ORG_STUS_CODE_ID ) ) Distinct1  ORDER BY  Distinct1.C2
            </select>

            <select id="selectDeptCodeHp" parameterType="Map" resultType="egovMap">
                SELECT Distinct1.C1 C1  ,
       Distinct1.DEPT_CODE CODE_ID  ,
       Distinct1.C2 CODE_NAME
  FROM ( SELECT DISTINCT Extent1.DEPT_CODE DEPT_CODE  ,
                         1 C1  ,
                         Extent1.DEPT_CODE || ' - ' || Extent2.NAME C2
         FROM ORG0005D Extent1
                JOIN ORG0001D Extent2   ON Extent1.MEM_ID = Extent2.MEM_ID
          WHERE  ( Extent1.MEM_LVL = #{memberLvl} )
                   AND ( Extent1.DEPT_CODE LIKE #{flag})
                   AND ( 1 = Extent1.ORG_STUS_CODE_ID ) ) Distinct1 ORDER BY Distinct1.C2
            </select>

          <select id="selectCourse" resultType="egovMap">
                SELECT COURS_ID CODE_ID, COURS_NAME CODE_NAME FROM MSC0008D WHERE COURS_TYPE_CODE_ID = '1022' AND COURS_START >= TO_DATE('2017-01-01','YYYY-MM-DD')
          </select>


    <insert id="traineeUpdate" parameterType="Map" >

         UPDATE ORG0001D
          SET   MEM_CODE = DECODE ( TRAINEE_TYPE , '3' , FN_GET_DOCNO(7) , '2' ,FN_GET_DOCNO(6) , '7' , FN_GET_DOCNO(163) ,'5758' , FN_GET_DOCNO(171) ) ,
                  MEM_TYPE = TRAINEE_TYPE,
                  TRAINEE_CODE = MEM_CODE,
                  UPD_DT     = SYSDATE
                  <if test = "joinDt != null and joinDt != '' ">
                  , JOIN_DT = #{joinDt}
                  </if>
         WHERE  MEM_ID   = #{memberId}
    </insert>

   <select id="afterSelTrainee" resultType="egovMap">
        SELECT MEM_CODE, MEM_ID   FROM ORG0001D  WHERE MEM_ID =#{memberId}
  </select>

  <select id="getMemberListView" parameterType="Map" resultType="egovMap">
    <![CDATA[
    SELECT Limit1.MEM_ID MEM_ID  ,
        Limit1.AREA_ID,
        Limit1.STREET,
        Limit1.ADDR_DTL,
         Limit1.CITY,
        Limit1.AREA,
        Limit1.POSTCODE,
        Limit1.STATE,
        Limit1.COUNTRY,
       Limit1.C3 C3  ,
       Limit1.C4 C4  ,
       Limit1.C5 C5  ,
       Limit1.C8 C8  ,
       Limit1.C9 C9  ,
       Limit1.EMAIL EMAIL  ,
       Limit1.GENDER GENDER  ,
       Limit1.C10 C10  ,
       Limit1.C11 C11  ,
       Limit1.C12 C12  ,
       Limit1.C13 C13  ,
       Limit1.C14 C14  ,
       Limit1.C15 C15  ,
       Limit1.C16 C16  ,
       Limit1.C17 C17  ,
       Limit1.C18 C18  ,
       Limit1.C19 C19  ,
       Limit1.C20 C20  ,
       Limit1.C21 C21  ,
       Limit1.C22 C22  ,
       Limit1.C23 C23  ,
       Limit1.C24 C24  ,
       Limit1.C25 C25  ,
       Limit1.C26 C26  ,
       Limit1.C27 C27  ,
       Limit1.C28 C28  ,
       Limit1.BANK BANK  ,
       Limit1.BANK_ACC_NO BANK_ACC_NO  ,
       Limit1.C29 C29  ,
       Limit1.C30 C30  ,
       Limit1.C31 C31  ,
       Limit1.C32 C32  ,
       Limit1.NAME1 NAME  ,
       Limit1.MEM_CODE MEM_CODE  ,
       Limit1.NAME NAME1  ,
       Limit1.NRIC NRIC  ,
       Limit1.MEM_TYPE MEM_TYPE  ,
       Limit1.CODE_NAME CODE_NAME  ,
       Limit1.C33 C33  ,
       Limit1.C34 C34  ,
       Limit1.C35 C35  ,
       Limit1.C36 C36  ,
       Limit1.C39 C39  ,
       Limit1.C40 C40  ,
       Limit1.C41 C41  ,
       Limit1.C42 C42  ,
       Limit1.C43 C43  ,
       Limit1.C44 C44  ,
       Limit1.C45 C45  ,
       Limit1.C46 C46  ,
       Limit1.C47 C47  ,
       Limit1.C48 C48  ,
       Limit1.C51 C51  ,
       Limit1.C52 C52  ,
       Limit1.C53 C53  ,
       Limit1.C54 C54  ,
       Limit1.C55 C55  ,
       Limit1.C56 C56  ,
       Limit1.TR_NO TR_NO  ,
       Limit1.TEL_MOBILE TEL_MOBILE  ,
       Limit1.TEL_HUSE TEL_HUSE  ,
       Limit1.TEL_OFFICE TEL_OFFICE  ,
       Limit1.C57 C57  ,
       Limit1.SPUSE_CODE SPUSE_CODE  ,
       Limit1.SPOUSE_NAME SPOUSE_NAME  ,
       Limit1.SPOUSE_NRIC SPOUSE_NRIC  ,
       Limit1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
       Limit1.C58 C58  ,
       Limit1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
       Limit1.C59 C59  ,
       Limit1.RANK RANK  ,
       Limit1.C60 C60  ,
       Limit1.HSPTLZ  HSPTLZ,
       Limit1.C61 C61,
       Limit1.C62 C62,
       Limit1.C63 C63,
       Limit1.C64 C64,
       Limit1.C65 C65,
       Limit1.C66 C66,
       Limit1.C67 C67,
       Limit1.C68 c68,
       Limit1.MAIN_DEPT,
       Limit1.SUB_DEPT,
       (SELECT ID FROM SYS0105M WHERE MAIN_DEPT_CODE = Limit1.MAIN_DEPT AND SUB_DEPT_CODE = Limit1.SUB_DEPT) DEPT_ID,
       Limit1.RELIGION,
       (SELECT COURS_ID  FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID AND COURS_ITM_ID = (SELECT MAX(COURS_ITM_ID) FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID)) AS course,
       Limit1.MEETPOINT_ID
       <!-- ,Limit1.INC_TAX -->
  FROM (
SELECT Extent1.MEM_ID MEM_ID  ,
                Extent1.MEM_CODE MEM_CODE  ,
                Extent1.MEM_TYPE MEM_TYPE  ,
                Extent1.NAME NAME  ,
                Extent1.NRIC NRIC  ,
                Extent1.GENDER GENDER  ,
                Extent26.AREA_ID,
                Extent1.STREET,
                Extent1.ADDR_DTL,
                Extent26.CITY,
                Extent26.AREA,
                Extent26.POSTCODE,
                Extent26.STATE,
                Extent26.COUNTRY,
                Extent1.TEL_OFFICE TEL_OFFICE  ,
                Extent1.TEL_HUSE TEL_HUSE  ,
                Extent1.TEL_MOBILE TEL_MOBILE  ,
                Extent1.EMAIL EMAIL  ,
                Extent1.SPUSE_CODE SPUSE_CODE  ,
                Extent1.SPOUSE_NAME SPOUSE_NAME  ,
                Extent1.SPOUSE_NRIC SPOUSE_NRIC  ,
                Extent1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
                Extent1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
                Extent1.BANK BANK  ,
                Extent1.BANK_ACC_NO BANK_ACC_NO  ,
                Extent1.RANK RANK  ,
                Extent1.TR_NO TR_NO  ,
                Extent1.HSPTLZ HSPTLZ  ,
                Extent2.NAME NAME1  ,
                Extent3.CODE_NAME CODE_NAME   ,
                CASE
                     WHEN ( Extent1.BRNCH IS NOT NULL ) THEN TO_NUMBER(Extent1.BRNCH,99999.99)
                ELSE 0
                   END C3  ,
                CASE
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.CODE
                ELSE ''
                   END C4  ,
                CASE
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.NAME
                ELSE ''
                   END C5  ,
                CASE
                     WHEN ( Extent1.EDC_LEV IS NOT NULL ) THEN TO_NUMBER(Extent1.EDC_LEV,99999.99)
                ELSE 0
                   END C8  ,
                CASE
                     WHEN ( Extent11.CODE_ID IS NOT NULL ) THEN Extent11.CODE_NAME
                ELSE ''
                   END C9  ,
                CASE
                     WHEN ( Extent1.LANG IS NOT NULL ) THEN TO_NUMBER(Extent1.LANG,99999.99)
                ELSE 0
                   END C10  ,
                CASE
                     WHEN ( Extent12.CODE_ID IS NOT NULL ) THEN Extent12.CODE_NAME
                ELSE ''
                   END C11  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.MEM_CODE
                ELSE ''
                   END C12  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.NAME
                ELSE ''
                   END C13  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_MOBILE
                ELSE ''
                   END C14  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_OFFICE
                ELSE ''
                   END C15  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_HUSE
                ELSE ''
                   END C16  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.MEM_CODE
                ELSE ''
                   END C17  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.NAME
                ELSE ''
                   END C18  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_MOBILE
                ELSE ''
                   END C19  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_OFFICE
                ELSE ''
                   END C20  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_HUSE
                ELSE ''
                   END C21  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.MEM_CODE
                ELSE ''
                   END C22  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.NAME
                ELSE ''
                   END C23  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_MOBILE
                ELSE ''
                   END C24  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_OFFICE
                ELSE ''
                   END C25  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_HUSE
                ELSE ''
                   END C26  ,
                CASE
                     WHEN ( Extent1.MARTL IS NOT NULL ) THEN TO_NUMBER(Extent1.MARTL,99999.99)
                ELSE 0
                   END C27  ,
                CASE
                     WHEN ( Extent21.CODE_ID IS NOT NULL ) THEN Extent21.CODE_NAME
                ELSE ''
                   END C28  ,
                CASE
                     WHEN ( Extent1.DOB IS NOT NULL ) THEN to_char(Extent1.DOB,'DD/MM/YYYY')
                ELSE ''
                   END C29  ,
                CASE
                     WHEN ( Extent1.JOIN_DT IS NOT NULL ) THEN TO_char(Extent1.JOIN_DT,'yyyy-mm-dd')
                ELSE ''
                   END C30  ,
                CASE
                     WHEN ( Extent25.USER_VAL_ID_TO IS NOT NULL ) THEN to_char(Extent25.USER_VAL_ID_TO,'yyyy-mm-dd')
                ELSE ''
                   END C31  ,
                CASE
                     WHEN ( Extent1.STUS IS NOT NULL ) THEN Extent1.STUS
                ELSE 0
                   END C32   ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_UP_ID
                ELSE 0
                   END C33  ,
                CASE
                     WHEN ( Extent22.WH_LOC_ID IS NOT NULL ) THEN Extent22.WH_LOC_ID
                ELSE 0
                   END C34  ,
                CASE
                     WHEN ( Extent1.NATION IS NOT NULL ) THEN TO_NUMBER(Extent1.NATION,99999.99)
                ELSE 0
                   END C35  ,
                CASE
                     WHEN ( Extent17.CNTY_ID IS NOT NULL ) THEN Extent17.NAME
                ELSE ''
                   END C36  ,
                CASE
                     WHEN ( Extent1.RACE IS NOT NULL ) THEN TO_NUMBER(Extent1.RACE,99999.99)
                ELSE 0
                   END C39  ,
                CASE
                     WHEN ( Extent18.CODE_ID IS NOT NULL ) THEN Extent18.CODE_NAME
                ELSE ''
                   END C40,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.DEPT_CODE
                ELSE ''
                   END C41  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.GRP_CODE
                ELSE ''
                   END C42  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.ORG_CODE
                ELSE ''
                   END C43  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_LVL
                ELSE 0
                   END C44  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL3_UP_ID
                ELSE 0
                   END C45  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL2_UP_ID
                ELSE 0
                   END C46  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL1_UP_ID
                ELSE 0
                   END C47,
               CASE
                     WHEN ( Extent1.RESIGN_DT IS NOT NULL ) THEN to_char(Extent1.RESIGN_DT,'yyyy-mm-dd')
                ELSE ''
                   END C48  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.MEM_CODE
                ELSE ''
                   END C51  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NAME
                ELSE ''
                   END C52  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NRIC
                ELSE ''
                   END C53  ,
                CASE
                     WHEN ( Extent1.TRM_DT IS NOT NULL ) THEN to_char(Extent1.TRM_DT,'yyyy-mm-dd')
                ELSE ''
                   END C54  ,
                CASE
                     WHEN ( Extent1.TRNSPRT IS NOT NULL ) THEN Extent1.TRNSPRT
                ELSE 0
                   END C55  ,
                CASE
                     WHEN ( Extent19.CODE_ID IS NOT NULL ) THEN Extent19.CODE_NAME
                ELSE ''
                   END C56  ,
                CASE
                     WHEN ( Extent5.MEM_ORG_DESC_ID IS NOT NULL ) THEN Extent5.MEM_ORG_DESC
                ELSE ''
                   END C57  ,
                CASE
                     WHEN ( Extent1.SPOUSE_DOB IS NOT NULL ) THEN to_char(Extent1.SPOUSE_DOB,'yyyy-mm-dd')
                ELSE ''
                   END C58  ,
                CASE
                     WHEN dbms_lob.getlength(Extent23.CODE_DESC) = 0 THEN null
                ELSE Extent23.CODE_DESC
                   END C59  ,
                CASE
                     WHEN ( Extent24.CODE_NAME IS NULL ) THEN ''
                ELSE Extent24.CODE_NAME
                   END C60 ,
                CASE
                 WHEN ( Extent18.code_id IS NOT NULL ) THEN Extent18.code_id
                 ELSE 0
               END                     C61,
               CASE
                     WHEN ( Extent19.CODE_ID IS NOT NULL ) THEN Extent19.CODE_ID
                ELSE 0
                   END C62,
                   CASE
                     WHEN ( Extent11.CODE_ID IS NOT NULL ) THEN Extent11.CODE_ID
                ELSE 0
                   END C63,
                 Extent25.USER_ID c64,
                 Extent1.FULL_NAME c65,
                 Extent1.AGRMNT_NO c66,
                 Extent1.SYNC_CHK c67,
                 Extent26.AREA_ID c68,
                 Extent1.RELIGION,
                 EXTENT1.MAIN_DEPT,
                 EXTENT1.SUB_DEPT,
                 EXTENT23.APLICNT_MEETPOINT MEETPOINT_ID
                 <!-- ,EXTENT1.INC_TAX -->
         FROM ORG0001D Extent1
                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS
                JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.MEM_TYPE
        LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID
                            FROM ORG1001V vMemberOrg  ) Extent4   ON Extent4.MEM_ID = Extent1.MEM_ID
                LEFT JOIN ORG0012D Extent5   ON ( Extent5.MEM_ORG_LVL = Extent4.MEM_LVL )
                AND ( Extent5.MEM_TYPE_ID = Extent1.MEM_TYPE )
                LEFT JOIN SYS0005M Extent10   ON Extent10.BRNCH_ID = UTILS.CONVERT_TO_NUMBER(Extent1.BRNCH,99999.99)
                LEFT JOIN SYS0013M Extent11   ON Extent11.CODE_ID = TO_NUMBER(Extent1.EDC_LEV,99999.99)
                LEFT JOIN SYS0013M Extent12   ON Extent12.CODE_ID = TO_NUMBER(Extent1.LANG,99999.99)
                LEFT JOIN ORG0001D Extent13   ON Extent13.MEM_ID = Extent4.LVL1_UP_ID
                LEFT JOIN ORG0001D Extent14   ON Extent14.MEM_ID = Extent4.LVL2_UP_ID
                LEFT JOIN ORG0001D Extent15   ON Extent15.MEM_ID = Extent4.LVL3_UP_ID
                LEFT JOIN SYS0013M Extent16   ON Extent16.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0015M Extent17   ON Extent17.CNTY_ID = TO_NUMBER(Extent1.NATION,99999.99)
                LEFT JOIN SYS0013M Extent18   ON Extent18.CODE_ID = TO_NUMBER(Extent1.RACE,99999.99)
                LEFT JOIN SYS0013M Extent19   ON Extent19.CODE_ID = Extent1.TRNSPRT
                LEFT JOIN ORG0001D Extent20   ON Extent20.MEM_CODE = Extent1.SPONS_CODE
                LEFT JOIN SYS0013M Extent21   ON Extent21.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0028M Extent22   ON ( Extent22.WH_LOC_CODE = Extent1.MEM_CODE )
                AND ( Extent1.MEM_TYPE IN ( 2,3 )
               )
        LEFT JOIN SYS0013M Extent23   ON Extent23.CODE_ID = Extent1.RANK
                LEFT JOIN SYS0013M Extent24   ON Extent24.CODE_ID = TO_NUMBER(Extent1.BIZ_TYPE,99999.99)
                LEFT JOIN SYS0047M Extent25   ON Extent25.HR_CODE = Extent1.MEM_CODE
                LEFT JOIN SYS0064M Extent26   ON Extent26.AREA_ID = Extent1.AREA_ID
                LEFT JOIN ORG0003D Extent23   ON Extent1.APLICNT_ID = Extent23.APLCTN_ID
          WHERE  Extent1.MEM_ID = #{MemberID} AND ROWNUM <= 1  ) Limit1
           ]]>
    </select>

    <update id="memberListUpdate_user" parameterType="Map">
     <![CDATA[
        UPDATE SYS0047M

            SET USER_UPD_USER_ID = #{user_id},
                  USER_UPD_DT = SYSDATE,
                  USER_BRNCH_ID = #{selectBranch}

        WHERE ( User_ID = #{userId} )
        ]]>
    </update>

    <update id="memberListUpdate_memorg" parameterType="Map">
     <![CDATA[
        UPDATE ORG0005D
        SET ORG_UPD_DT = SYSDATE
            ,BRNCH_ID = #{selectBranch}
            ,ORG_UPD_USER_ID = #{user_id}
        WHERE  ( MEM_ID = #{MemberID} )
        ]]>
    </update>

    <update id="memberListUpdate_memorg2" parameterType="Map">
     <![CDATA[
        UPDATE ORG0001D
        SET UPD_DT = SYSDATE
            ,BRNCH = #{selectBranch}
            ,UPD_USER_ID = #{user_id}
        WHERE  ( MEM_ID = #{MemberID} )
        ]]>
    </update>

      <!--20180918 - BY KV - update data for Service Capacity purpose. -->
     <update id="memberListUpdate_memorg3" parameterType="Map">
     <![CDATA[
        UPDATE ORG0015M
        SET UPD_DT = SYSDATE
              ,UPD_USER_ID = #{user_id}
              ,BRNCH_ID = #{selectBranch}
        WHERE  ( CT_ID = #{MemberID} )
        ]]>
    </update>




<update id="updateMemberValidateDt" parameterType="Map">
     UPDATE SYS0047M SET USER_VAL_ID_TO =TO_DATE(#{memberValidDt},'DD-MM-YYYY')  ,USER_UPD_DT= SYSDATE,USER_UPD_USER_ID = #{user_id} WHERE USER_NAME = #{membercode}
    </update>


    <update id="memberListUpdate_member" parameterType="Map">
     <![CDATA[
        UPDATE ORG0001D
        SET

              NAME = #{memberNm},
              FULL_NAME = #{memberNm},
              DOB = TO_DATE(#{Birth},'DD-MM-YYYY'),
              GENDER = TRIM(#{gender}),
              RACE=TO_NUMBER(TRIM(#{cmbRace})),
              MARTL = TO_NUMBER(TRIM(#{marrital})),
              NATION = TO_NUMBER(TRIM(#{national})),
              ]]>
              <!--
              ADDR1 = #{},
              ADDR2 = #{},
              ADDR3 = #{},
              ADDR4 = #{},
              AREAL = #{},

              -->
              <![CDATA[
              AREA_ID = #{areaId},
              ADDR_DTL = #{addrDtl1},
              STREET = #{streetDtl1},

              TEL_OFFICE = #{officeNo},
              TEL_HUSE = #{residenceNo},
              TEL_MOBILE = #{mobileNo},
              EMAIL = #{email},
              SPUSE_CODE = #{spouseCode},
              SPOUSE_NAME = #{spouseName},
              SPOUSE_NRIC = #{spouseNric},
              SPOUSE_OCPAT = #{spouseOcc},
              SPOUSE_TEL_CNTC = trim(#{spouseContat}),
              HSPTLZ    = #{hsptlz},
              ]]>
            <if test="spouseDob != null and spouseDob != '' and spouseDob != '01/01/1900'" >
            SPOUSE_DOB = TO_DATE(#{spouseDob},'DD/MM/YYYY'),
            </if>
             <if test="spouseDob != null and spouseDob != '' and spouseDob == '01/01/1900'" >
            SPOUSE_DOB = TO_DATE(#{spouseDob},'DD/MM/YYYY'),
            </if>

            <if test="religion != null and religion != '' " >
            RELIGION = #{religion},
            </if>

            <!--  <choose>
             <when test="hsptlzCheck !=null and hsptlzCheck !='' ">
               hsptlz = 1,
             </when>
             <otherwise>
                hsptlz = 0,
             </otherwise>
             </choose>
              -->

              EDC_LEV = TO_NUMBER(TRIM(#{educationLvl})),
              LANG = TO_NUMBER(TRIM(#{language})),
              BANK= #{issuedBank},
              BANK_ACC_NO = #{bankAccNo},
              SPONS_CODE = #{sponsorCd},
              AGRMNT_NO = #{agrmntNo},

              SYNC_CHK = TO_NUMBER(TRIM(#{syncChk})),
              TRNSPRT = TO_NUMBER(TRIM(#{transportCd})),
              TR_NO = #{trNo},
              UPD_DT = SYSDATE,
              UPD_USER_ID = TO_NUMBER(TRIM(#{user_id})),
              JOIN_DT = TO_DATE(#{joinDate},'DD-MM-YYYY'),
              RANK = TO_NUMBER(TRIM(#{rank})),
              MAIN_DEPT = #{searchdepartment},
              SUB_DEPT = #{inputSubDept},
              <if test="businessType != null and businessType != '' " >
              BIZ_TYPE =#{businessType},
              </if>
              BRNCH =#{selectBranch},
              MOBILE_USE_YN = NVL(#{mobileUseYn}, 'N')

              <!-- ,INC_TAX = #{incomeTaxNo} -->

        WHERE  ( MEM_ID = TO_NUMBER(TRIM(#{MemberID})) )

    </update>

    <update id="updateMemberName" parameterType="Map">
        MERGE INTO ORG0003D A
        USING (
            SELECT
                APLICNT_ID,
                NAME
            FROM ORG0001D
            WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        ) SRC
        ON (A.APLCTN_ID = SRC.APLICNT_ID)
        WHEN MATCHED THEN UPDATE
        SET APLICNT_NAME = SRC.NAME,
        APLICNT_FULL_NAME = SRC.NAME,
        UPD_DT = SYSDATE,
        UPD_USER_ID = TO_NUMBER(TRIM(#{user_id}))
    </update>

    <update id="updateDocSubmissionDel" parameterType="docSubmissionVO">
       UPDATE ORG0010D
          SET STUS_ID     = 8
            , UPD_USER_ID = #{updUserId}
            , UPD_DT      = SYSDATE
        WHERE DOC_TYPE_ID = #{docTypeId}
          AND DOC_SO_ID   = #{docSoId}
    </update>


    <select id="getORG0001D_SEQ"  resultType="java.lang.String">
         SELECT ORG0001D_MEM_ID_SEQ.nextval  seq  FROM DUAL
    </select>


    <insert id="hpMemRegister" parameterType="Map">
        INSERT INTO ORG0001D
        (
        MEM_ID      ,MEM_CODE       ,MEM_TYPE       ,NAME       ,FULL_NAME
        ,NRIC       ,PASSWD           ,DOB      ,GENDER         ,RACE       ,MARTL
        ,NATION         ,TEL_OFFICE         ,TEL_HUSE       ,TEL_MOBILE         ,EMAIL
        ,SPUSE_CODE         ,SPOUSE_NAME        ,SPOUSE_NRIC        ,SPOUSE_OCPAT       ,SPOUSE_TEL_CNTC
        ,SPOUSE_DOB         ,EDC_LEV        ,LANG       ,BANK       ,BANK_ACC_NO
        ,SPONS_CODE         ,CRT_DT         ,CRT_USER_ID        ,UPD_DT         ,UPD_USER_ID,  stus, APLICNT_ID
        ,MAIN_DEPT , SUB_DEPT, JOIN_DT , AREA_ID, ADDR_DTL, STREET, BRNCH, MOBILE_USE_YN
        )
        select
                #{memId},
                #{memberCode}  AS MEM_CODE,
                '1'  AS MEM_TYPE,
                APLICNT_NAME AS NAME,
                APLICNT_FULL_NAME AS FULL_NAME,

                APLICNT_NRIC AS  NRIC,
                SUBSTR(APLICNT_NRIC, 7) AS PASSWD,
                APLICNT_DOB AS DOB,
                APLICNT_GENDER AS GENDER,
                APLICNT_RACE AS RACE,
                APLICNT_MARTL AS MARTL,

                APLICNT_NATION AS NATION,
                APLICNT_TEL_OFFICE AS TEL_OFFICE,
                APLICNT_TEL_HUSE AS TEL_HUSE,
                APLICNT_TEL_MOBILE AS TEL_MOBILE,
                APLICNT_EMAIL AS EMAIL,

                APLICNT_SPOUSE_CODE AS SPOUSE_CODE,
                APLICNT_SPOUSE_NAME AS SPOUSE_NAME,
                APLICNT_SPOUSE_NRIC AS SPOUSE_NRIC,
                APLICNT_SPOUSE_OCPAT AS SPOUSE_OCPAT,
                APLICNT_SPOUSE_TEL_CNTC AS SPOUSE_TEL_CNTC,

                APLICNT_SPOUSE_DOB AS SPOUSE_DOB,
                APLICNT_EDU_LEV AS EDC_LEV,
                APLICNT_LANG AS LANG,
                APLICNT_BANK_ID AS BANK_ID,
                APLICNT_BANK_ACC_NO AS BANK_ACC_NO,

                APLICNT_SPONS_CODE AS SPONS_CODE,
                SYSDATE CRT_DT,
                #{userid},
                SYSDATE UPD_DT,
                #{userid},  '1' AS stus, APLCTN_ID
                ,MAIN_DEPT , SUB_DEPT
                ,SYSDATE JOIN_DT, AREA_ID, ADDR_DTL, STREET,
                #{branchId}
                ,'Y'
        from ORG0003D   d
        where 1=1 and APLCTN_ID = #{MemberID}
    </insert>


    <select id="selectHpOranization" parameterType="Map" resultType="egovMap">
     <![CDATA[
         SELECT Extent1.MEM_ID MEM_ID  ,
           Extent1.MEM_UP_ID MEM_UP_ID  ,
           Extent1.MEM_LVL MEM_LVL  ,
           Extent1.DEPT_CODE DEPT_CODE  ,
           Extent1.ORG_UPD_USER_ID ORG_UPD_USER_ID  ,
           Extent1.ORG_UPD_DT ORG_UPD_DT  ,
           Extent1.PREV_DEPT_CODE PREV_DEPT_CODE  ,
           Extent1.PREV_GRP_CODE PREV_GRP_CODE  ,
           Extent1.PREV_MEM_ID_ID PREV_MEM_ID_ID  ,
           Extent1.PREV_MEM_LVL PREV_MEM_LVL  ,
           Extent1.ORG_STUS_CODE_ID ORG_STUS_CODE_ID  ,
           Extent1.PR_CODE PR_CODE  ,
           Extent1.PR_MEM_ID PR_MEM_ID  ,
           Extent1.GRAND_PR_CODE GRAND_PR_CODE  ,
           Extent1.GRAND_PR_MEM_ID GRAND_PR_MEM_ID  ,
           Extent1.LAST_DEPT_CODE LAST_DEPT_CODE  ,
           Extent1.LAST_GRP_CODE LAST_GRP_CODE  ,
           Extent1.LAST_ORG_CODE LAST_ORG_CODE  ,
           Extent1.LAST_TOP_ORG_CODE LAST_TOP_ORG_CODE  ,
           Extent1.BRNCH_ID BRNCH_ID
      FROM ORG0005D Extent1
     WHERE  ( 3 = Extent1.MEM_LVL )
          AND ( Extent1.DEPT_CODE = (SELECT DEPT_CODE FROM ORG0003D WHERE 1=1 AND APLCTN_ID =#{MemberID}))
        ]]>
    </select>


     <update id="updateHpApproval" parameterType="Map">
     <![CDATA[
        UPDATE ORG0003D
         SET STUS_ID = '5',
               UPD_DT =  SYSDATE,
               UPD_USER_ID =  #{updUserId}
           WHERE  APLCTN_ID = #{MemberID}
        ]]>
    </update>

    <select id="selectMainDept"  resultType="egovMap">
         <!-- SELECT DEPT_ID, DEPT_NAME FROM SYS0040M WHERE DEPT_PARENT_ID = '1' -->
          SELECT CODE DEPT_ID
                             , CODE_DESC DEPT_NAME
                          FROM GBSLCVD.SYS0013M
                         WHERE CODE_MASTER_ID = 359
                         ORDER BY CODE
    </select>

    <select id="selectSubDept"  resultType="egovMap">
                    SELECT CODE CODE_ID
                         , CODE_DESC CODE_NAME
                      FROM GBSLCVD.SYS0013M
                     WHERE CODE_MASTER_ID = 360

                          <if test = "groupCode != null and groupCode != '' ">
                                   AND CODE IN (SELECT SUB_DEPT_CODE FROM SVC0063C WHERE MAIN_DEPT_CODE = #{groupCode})
                         </if>

                          ORDER BY CODE
    </select>

     <update id="traineeUpdateInfo" parameterType="Map">
     <![CDATA[
        UPDATE MSC0009D
        SET COURS_MEM_STUS_ID = '8'
        WHERE 1=1
        AND COURS_MEM_ID  =#{MemberID}
        AND COURS_ITM_ID = (SELECT MAX(COURS_ITM_ID) FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  =#{MemberID})
        ]]>
    </update>

    <insert id="traineeInsertInfor" parameterType="Map">
        INSERT INTO MSC0009D
        (
            COURS_ITM_ID, COURS_ID, COURS_MEM_ID, COURS_MEM_STUS_ID, COURS_D_UPD_USER_ID, COURS_D_UPD_DT, COURS_D_MEM_NAME, COURS_D_MEM_NRIC
        )
        VALUES
        (
        MSC0009D_COURS_ITM_ID_SEQ.NEXTVAL ,
        #{course},
        #{MemberId},
        '1',
        #{creator},
        SYSDATE,
        #{memberNm},
        #{nric}
        )
    </insert>


    <select id="getDeptCdListList"  resultType="egovMap">
         SELECT C.DEPT_CODE CODE_ID,  (SELECT DEPT_NAME FROM SYS0040M WHERE DEPT_STUS_ID = 1 AND DEPT_ID = B.USER_DEPT_ID) AS CODE_NAME
          FROM ORG0001D A,
               SYS0047M B,
               ORG0005D C
         WHERE A.MEM_CODE = B.USER_NAME
           AND A.MEM_ID = C.MEM_ID
           AND B.USER_NAME =  #{userName}
    </select>


    <select id="getSpouseInfoView"  resultType="egovMap">
        SELECT A.MEM_CODE,
               A.NAME,
               A.NRIC,
               to_char(A.DOB, 'dd/mm/yyyy') DOB,
               A.TEL_MOBILE
          FROM ORG0001D A,
               SYS0047M B
         WHERE A.MEM_CODE = B.USER_NAME
           AND B.USER_NAME = #{userName}

    </select>

  <select id="getHPMemberListView" parameterType="Map" resultType="egovMap">
    <![CDATA[
SELECT Limit1.MEM_ID MEM_ID  ,
        Limit1.AREA_ID,
        Limit1.STREET,
        Limit1.ADDR_DTL,
         Limit1.CITY,
        Limit1.AREA,
        Limit1.POSTCODE,
        Limit1.STATE,
        Limit1.COUNTRY,
       Limit1.C3 C3  ,
       Limit1.C4 C4  ,
       Limit1.C5 C5  ,
       Limit1.C8 C8  ,
       Limit1.C9 C9  ,
       Limit1.EMAIL EMAIL  ,
       Limit1.GENDER GENDER  ,
       Limit1.C10 C10  ,
       Limit1.C11 C11  ,
       Limit1.C12 C12  ,
       Limit1.C13 C13  ,
       Limit1.C14 C14  ,
       Limit1.C15 C15  ,
       Limit1.C16 C16  ,
       Limit1.C17 C17  ,
       Limit1.C18 C18  ,
       Limit1.C19 C19  ,
       Limit1.C20 C20  ,
       Limit1.C21 C21  ,
       Limit1.C22 C22  ,
       Limit1.C23 C23  ,
       Limit1.C24 C24  ,
       Limit1.C25 C25  ,
       Limit1.C26 C26  ,
       Limit1.C27 C27  ,
       Limit1.C28 C28  ,
       Limit1.BANK BANK  ,
       Limit1.BANK_NAME BANK_NAME,
       Limit1.BANK_ACC_NO BANK_ACC_NO  ,
       Limit1.C29 C29  ,
       Limit1.C30 C30  ,
       Limit1.C31 C31  ,
       Limit1.C32 C32  ,
       Limit1.NAME1 NAME  ,
       Limit1.MEM_CODE MEM_CODE  ,
       Limit1.NAME NAME1  ,
       Limit1.NRIC NRIC  ,
       Limit1.MEM_TYPE MEM_TYPE  ,
       Limit1.CODE_NAME CODE_NAME  ,
       Limit1.C33 C33  ,
       Limit1.C34 C34  ,
       Limit1.C35 C35  ,
       Limit1.C36 C36  ,
       Limit1.C39 C39  ,
       Limit1.C40 C40  ,
       Limit1.C41 C41  ,
       Limit1.C42 C42  ,
       Limit1.C43 C43  ,
       Limit1.C44 C44  ,
       Limit1.C45 C45  ,
       Limit1.C46 C46  ,
       Limit1.C47 C47  ,
       Limit1.C48 C48  ,
       Limit1.C51 C51  ,
       Limit1.C52 C52  ,
       Limit1.C53 C53  ,
       Limit1.C54 C54  ,
       Limit1.C55 C55  ,
       Limit1.C56 C56  ,
       Limit1.TR_NO TR_NO  ,
       Limit1.TEL_MOBILE TEL_MOBILE  ,
       Limit1.TEL_HUSE TEL_HUSE  ,
       Limit1.TEL_OFFICE TEL_OFFICE  ,
       Limit1.C57 C57  ,
       Limit1.SPUSE_CODE SPUSE_CODE  ,
       Limit1.SPOUSE_NAME SPOUSE_NAME  ,
       Limit1.SPOUSE_NRIC SPOUSE_NRIC  ,
       Limit1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
       Limit1.C58 C58  ,
       Limit1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
       Limit1.C59 C59  ,
       Limit1.RANK RANK  ,
       Limit1.C60 C60  ,
       Limit1.HSPTLZ  HSPTLZ,
       Limit1.MAIN_DEPT,
      Limit1.SUB_DEPT,
       (SELECT COURS_ID  FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID AND COURS_ITM_ID = (SELECT MAX(COURS_ITM_ID) FROM MSC0009D WHERE 1=1 AND COURS_MEM_ID  = Limit1.MEM_ID)) AS course,
       Limit1.APLICNT_MEETPOINT
  FROM (
SELECT Extent1.APLCTN_ID MEM_ID  ,
                Extent1.APLICNT_CODE MEM_CODE  ,
                Extent1.APLICNT_TYPE MEM_TYPE  ,
                Extent1.APLICNT_NAME NAME  ,
                Extent1.APLICNT_NRIC NRIC  ,
                Extent1.APLICNT_GENDER GENDER  ,
                Extent26.AREA_ID,
                Extent1.STREET,
                Extent1.ADDR_DTL,
                Extent26.CITY,
                Extent26.AREA,
                Extent26.POSTCODE,
                Extent26.STATE,
                Extent26.COUNTRY,
                Extent1.APLICNT_TEL_OFFICE TEL_OFFICE  ,
                Extent1.APLICNT_TEL_HUSE TEL_HUSE  ,
                Extent1.APLICNT_TEL_MOBILE TEL_MOBILE  ,
                Extent1.APLICNT_EMAIL EMAIL  ,
                Extent1.APLICNT_SPOUSE_CODE SPUSE_CODE  ,
                Extent1.APLICNT_SPOUSE_NAME SPOUSE_NAME  ,
                Extent1.APLICNT_SPOUSE_NRIC SPOUSE_NRIC  ,
                Extent1.APLICNT_SPOUSE_OCPAT SPOUSE_OCPAT  ,
                Extent1.APLICNT_SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
                Extent1.APLICNT_BANK_ID BANK  ,
                Extent27.CODE || ' - ' || Extent27.NAME BANK_NAME,
                Extent1.APLICNT_BANK_ACC_NO BANK_ACC_NO  ,
                '' RANK  ,
                '' TR_NO  ,
                '' HSPTLZ  ,
                Extent2.NAME NAME1  ,
                Extent3.CODE_NAME CODE_NAME   ,
                '' C3  ,
                '' C4  ,
                '' C5  ,
                CASE
                     WHEN ( Extent1.APLICNT_EDU_LEV IS NOT NULL ) THEN TO_NUMBER(Extent1.APLICNT_EDU_LEV,99999.99)
                ELSE 0
                   END C8  ,
                CASE
                     WHEN ( Extent11.CODE_ID IS NOT NULL ) THEN Extent11.CODE_NAME
                ELSE ''
                   END C9  ,
                CASE
                     WHEN ( Extent1.APLICNT_LANG IS NOT NULL ) THEN TO_NUMBER(Extent1.APLICNT_LANG,99999.99)
                ELSE 0
                   END C10  ,
                CASE
                     WHEN ( Extent12.CODE_ID IS NOT NULL ) THEN Extent12.CODE_NAME
                ELSE ''
                   END C11  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.MEM_CODE
                ELSE ''
                   END C12  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.NAME
                ELSE ''
                   END C13  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_MOBILE
                ELSE ''
                   END C14  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_OFFICE
                ELSE ''
                   END C15  ,
                CASE
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_HUSE
                ELSE ''
                   END C16  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.MEM_CODE
                ELSE ''
                   END C17  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.NAME
                ELSE ''
                   END C18  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_MOBILE
                ELSE ''
                   END C19  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_OFFICE
                ELSE ''
                   END C20  ,
                CASE
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_HUSE
                ELSE ''
                   END C21  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.MEM_CODE
                ELSE ''
                   END C22  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.NAME
                ELSE ''
                   END C23  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_MOBILE
                ELSE ''
                   END C24  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_OFFICE
                ELSE ''
                   END C25  ,
                CASE
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_HUSE
                ELSE ''
                   END C26  ,
                CASE
                     WHEN ( Extent1.APLICNT_MARTL IS NOT NULL ) THEN TO_NUMBER(Extent1.APLICNT_MARTL,99999.99)
                ELSE 0
                   END C27  ,
                CASE
                     WHEN ( Extent21.CODE_ID IS NOT NULL ) THEN Extent21.CODE_NAME
                ELSE ''
                   END C28  ,
                CASE
                     WHEN ( Extent1.APLICNT_DOB IS NOT NULL ) THEN to_char(Extent1.APLICNT_DOB,'dd/mm/yyyy')
                ELSE ''
                   END C29  ,
                '' C30  ,
                CASE
                     WHEN ( Extent25.USER_VAL_ID_TO IS NOT NULL ) THEN to_char(Extent25.USER_VAL_ID_TO,'yyyy-mm-dd')
                ELSE ''
                   END C31  ,
                CASE
                     WHEN ( Extent1.STUS_ID IS NOT NULL ) THEN Extent1.STUS_ID
                ELSE 0
                   END C32   ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_UP_ID
                ELSE 0
                   END C33  ,
                CASE
                     WHEN ( Extent22.WH_LOC_ID IS NOT NULL ) THEN Extent22.WH_LOC_ID
                ELSE 0
                   END C34  ,
                CASE
                     WHEN ( Extent1.APLICNT_NATION IS NOT NULL ) THEN TO_NUMBER(Extent1.APLICNT_NATION,99999.99)
                ELSE 0
                   END C35  ,
                CASE
                     WHEN ( Extent17.CNTY_ID IS NOT NULL ) THEN Extent17.NAME
                ELSE ''
                   END C36  ,
                CASE
                     WHEN ( Extent1.APLICNT_RACE IS NOT NULL ) THEN TO_NUMBER(Extent1.APLICNT_RACE,99999.99)
                ELSE 0
                   END C39  ,
                CASE
                     WHEN ( Extent18.CODE_ID IS NOT NULL ) THEN Extent18.CODE_NAME
                ELSE ''
                   END C40,
                CASE
                    WHEN ( Extent1.DEPT_CODE IS NOT NULL ) THEN Extent1.DEPT_CODE
                ELSE ''
                   END C41  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.GRP_CODE
                ELSE ''
                   END C42  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.ORG_CODE
                ELSE ''
                   END C43  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_LVL
                ELSE 0
                   END C44  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL3_UP_ID
                ELSE 0
                   END C45  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL2_UP_ID
                ELSE 0
                   END C46  ,
                CASE
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL1_UP_ID
                ELSE 0
                   END C47,
               '' C48  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.MEM_CODE
                ELSE ''
                   END C51  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NAME
                ELSE ''
                   END C52  ,
                CASE
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NRIC
                ELSE ''
                   END C53  ,
                '' C54  ,
                '' C55  ,
                '' C56  ,
                CASE
                     WHEN ( Extent5.MEM_ORG_DESC_ID IS NOT NULL ) THEN Extent5.MEM_ORG_DESC
                ELSE ''
                   END C57  ,
                CASE
                     WHEN ( Extent1.APLICNT_SPOUSE_DOB IS NOT NULL ) THEN to_char(Extent1.APLICNT_SPOUSE_DOB,'yyyy-mm-dd')
                ELSE ''
                   END C58  ,
                '' C59  ,
                '' C60,
                EXTENT1.MAIN_DEPT,
                EXTENT1.SUB_DEPT,
                EXTENT29.MEET_POINT_CODE || ' - ' || MEET_POINT_DESC APLICNT_MEETPOINT
         FROM ORG0003D Extent1
                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_ID
                JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.APLICNT_TYPE
        LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID
                            FROM ORG1001V vMemberOrg  ) Extent4   ON Extent4.MEM_ID = Extent1.APLCTN_ID
                LEFT JOIN ORG0012D Extent5   ON ( Extent5.MEM_ORG_LVL = Extent4.MEM_LVL )
                AND ( Extent5.MEM_TYPE_ID = Extent1.APLICNT_TYPE )
--                LEFT JOIN SYS0005M Extent10   ON Extent10.BRNCH_ID = UTILS.CONVERT_TO_NUMBER(Extent1.BRNCH,99999.99)
                LEFT JOIN SYS0013M Extent11   ON Extent11.CODE_ID = TO_NUMBER(Extent1.APLICNT_EDU_LEV,99999.99)
                LEFT JOIN SYS0013M Extent12   ON Extent12.CODE_ID = TO_NUMBER(Extent1.APLICNT_LANG,99999.99)
                LEFT JOIN ORG0001D Extent13   ON Extent13.MEM_ID = Extent4.LVL1_UP_ID
                LEFT JOIN ORG0001D Extent14   ON Extent14.MEM_ID = Extent4.LVL2_UP_ID
                LEFT JOIN ORG0001D Extent15   ON Extent15.MEM_ID = Extent4.LVL3_UP_ID
--                LEFT JOIN SYS0013M Extent16   ON Extent16.CODE_ID = TO_NUMBER(Extent1.APLICNT_MARTL,99999.99)
                LEFT JOIN SYS0015M Extent17   ON Extent17.CNTY_ID = TO_NUMBER(Extent1.APLICNT_NATION,99999.99)
                LEFT JOIN SYS0013M Extent18   ON Extent18.CODE_ID = TO_NUMBER(Extent1.APLICNT_RACE,99999.99)
--                LEFT JOIN SYS0013M Extent19   ON Extent19.CODE_ID = Extent1.TRNSPRT
                LEFT JOIN ORG0001D Extent20   ON Extent20.MEM_CODE = Extent1.APLICNT_SPONS_CODE
                LEFT JOIN SYS0013M Extent21   ON Extent21.CODE_ID = TO_NUMBER(Extent1.APLICNT_MARTL,99999.99)
                LEFT JOIN SYS0028M Extent22   ON ( Extent22.WH_LOC_CODE = Extent1.APLICNT_CODE )
                AND ( Extent1.APLICNT_TYPE IN ( 2,3 )
               )
--        LEFT JOIN SYS0013M Extent23   ON Extent23.CODE_ID = Extent1.RANK
--                LEFT JOIN SYS0013M Extent24   ON Extent24.CODE_ID = TO_NUMBER(Extent1.BIZ_TYPE,99999.99)
                LEFT JOIN SYS0047M Extent25   ON Extent25.USER_FULL_NAME = Extent1.APLICNT_FULL_NAME
                LEFT JOIN SYS0064M Extent26   ON Extent26.AREA_ID = Extent1.AREA_ID
                LEFT JOIN SYS0004M Extent27   ON Extent1.APLICNT_BANK_ID = Extent27.BANK_ID and 1 = Extent27.STUS_CODE_ID
                LEFT JOIN ORG0014D Extent28   ON Extent27.BANK_ID = Extent28.Bank_ID and 848 = Extent28.TYPE_ID and 1 = Extent28.STUS_CODE_ID
                LEFT JOIN SYS0089M Extent29 ON Extent1.APLICNT_MEETPOINT = Extent29.MEET_POINT_ID
          WHERE  Extent1.APLCTN_ID = #{MemberID} AND ROWNUM <= 1  ) Limit1
           ]]>
    </select>

         <select id="selectCoureCode" parameterType="Map" resultType="egovMap">

         <choose>
            <when test="groupCode == 2">
            <![CDATA[
            SELECT MS8.COURS_ID AS CODE_ID, MS8.COURS_NAME AS CODE_NAME
              FROM MSC0008D MS8,
                   (SELECT   COURS_ID, COUNT (1) CNT
                        FROM MSC0009D
                       WHERE 1 = 1
                             AND COURS_MEM_STUS_ID = '1'
                    GROUP BY COURS_ID) MS9
             WHERE 1 = 1
               AND MS8.COURS_ID = MS9.COURS_ID(+)
               AND COURS_MEM_TYPE_ID = '2'
               AND COURS_STUS_ID = '1'
               AND COURS_LIMIT > nvl (MS9.CNT, 0)
               AND COURS_START  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_CLS_DT >= TO_DATE(#{curDt}, 'yyyymmdd')
            ]]>
            </when>
            <when test="groupCode == 3">
            <![CDATA[
            SELECT MS8.COURS_ID AS CODE_ID, MS8.COURS_NAME AS CODE_NAME
              FROM MSC0008D MS8,
                   (SELECT   COURS_ID, COUNT (1) CNT
                        FROM MSC0009D
                       WHERE 1 = 1
                             AND COURS_MEM_STUS_ID = '1'
                    GROUP BY COURS_ID) MS9
             WHERE 1 = 1
               AND MS8.COURS_ID = MS9.COURS_ID(+)
               AND COURS_MEM_TYPE_ID = '3'
               AND COURS_STUS_ID = '1'
               AND COURS_LIMIT > nvl (MS9.CNT, 0)
               AND COURS_START  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_END  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_CLS_DT >= TO_DATE(#{curDt}, 'yyyymmdd')
            ]]>
            </when>
             <when test="groupCode == 7">
            <![CDATA[
            SELECT MS8.COURS_ID AS CODE_ID, MS8.COURS_NAME AS CODE_NAME
              FROM MSC0008D MS8,
                   (SELECT   COURS_ID, COUNT (1) CNT
                        FROM MSC0009D
                       WHERE 1 = 1
                             AND COURS_MEM_STUS_ID = '1'
                    GROUP BY COURS_ID) MS9
             WHERE 1 = 1
               AND MS8.COURS_ID = MS9.COURS_ID(+)
               AND COURS_MEM_TYPE_ID = '7'
               AND COURS_STUS_ID = '1'
               AND COURS_LIMIT > nvl (MS9.CNT, 0)
               AND COURS_START  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_END  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_CLS_DT >= TO_DATE(#{curDt}, 'yyyymmdd')
            ]]>
            </when>
                  <when test="groupCode == 5758">
            <![CDATA[
            SELECT MS8.COURS_ID AS CODE_ID, MS8.COURS_NAME AS CODE_NAME
              FROM MSC0008D MS8,
                   (SELECT   COURS_ID, COUNT (1) CNT
                        FROM MSC0009D
                       WHERE 1 = 1
                             AND COURS_MEM_STUS_ID = '1'
                    GROUP BY COURS_ID) MS9
             WHERE 1 = 1
               AND MS8.COURS_ID = MS9.COURS_ID(+)
               AND COURS_MEM_TYPE_ID = '5758'
               AND COURS_STUS_ID = '1'
               AND COURS_LIMIT > nvl (MS9.CNT, 0)
               AND COURS_START  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_END  BETWEEN to_date(#{startDay},'yyyymm') and to_date(#{endDay},'yyyymm')
               AND COURS_CLS_DT >= TO_DATE(#{curDt}, 'yyyymmdd')
            ]]>
            </when>


         </choose>

         </select>

         <select id="selectTypeGroupCode" parameterType="Map" resultType="String">
           SELECT B.TYPE_ID  FROM ORG0001D A, SYS0005M B WHERE   A.BRNCH = B.BRNCH_ID AND A.MEM_CODE = #{userName}

        </select>

        <select id="selectORG001DInfo" parameterType="Map" resultType="egovMap">
           SELECT NAME AS MEMBER_NM,
                      FULL_NAME AS FULL_NAME,
                      ADDR_DTL AS ADDRESS1,
                       B.STATE AS ADDRESS2,
                       '' AS ADDRESS3,
                       '' AS ADDRESS4,
                       NRIC
                FROM ORG0001D A, SYS0064M B
                WHERE 1=1
                AND MEM_ID = #{MemberId}
                AND A.AREA_ID = B.AREA_ID
        </select>

    <select id="selectDepartmentCodeLit"  resultType="egovMap">
        SELECT B.DEPT_CODE AS CODE_ID, B.DEPT_CODE AS CODE_NAME
          FROM ORG0001D A, ORG0005D B
         WHERE A.MEM_ID = B.MEM_ID
           AND A.STUS = '1'
           AND A.MEM_TYPE = '1'
           AND B.MEM_LVL = '3'
    </select>

    <select id="selectBranchCodeLit"  resultType="egovMap">
        SELECT BRNCH_ID CODE_ID
               , CODE ||'-'|| NAME  CODE_NAME
        FROM SYS0005M
        WHERE TYPE_ID = '2841'
        ORDER BY CODE_ID
    </select>

    <select id="selectLastCode" parameterType="Map" resultType="egovMap">
        SELECT LAST_DEPT_CODE,
          LAST_GRP_CODE,
          LAST_ORG_CODE,
          BRNCH_ID
        FROM ORG0005D
        WHERE DEPT_CODE = #{deptCodeTo}
        AND MEM_LVL     = #{memberLvl}
    </select>

    <select id="checkNRIC1"  parameterType="Map" resultType="egovMap">
    <![CDATA[
        SELECT *
        FROM ORG0003D
        WHERE APLICNT_NRIC = #{nric}
        AND STUS_ID <> '6'
        AND APLICNT_TYPE IN ('1', '2803')
    ]]>
    </select>

    <select id="checkNRIC2"  parameterType="Map" resultType="egovMap">
    <![CDATA[
        SELECT
            MEM_TYPE,
            TO_CHAR(RESIGN_DT, 'YYYYMMDD') RESIGN_DT,
            STUS
        FROM ORG0001D
        WHERE NRIC = #{nric}
    ]]>
    </select>

    <select id="checkNRIC3"  parameterType="Map" resultType="egovMap">
    SELECT *
        FROM (SELECT TO_NUMBER(SUBSTR(#{nric}, 0, 2))+18||SUBSTR(#{nric}, 3, 4) VALID
                  FROM DUAL)
        WHERE VALID > TO_CHAR(SYSDATE, 'YYMMDD')
    </select>

    <select id="checkSponsor"  parameterType="Map" resultType="egovMap">
    <!-- modify jgkim -->
        SELECT a.MEM_CODE, a.NAME, a.NRIC
        FROM ORG0001D a
        <if test="userTypeId != null and userTypeId != '' ">
        INNER JOIN ORG0005D b
            ON a.MEM_ID = b.MEM_ID
        </if>
        WHERE a.MEM_CODE = #{sponsorCd}
        <if test="deptCodeHd != null and deptCodeHd != '' ">
            and b.LAST_DEPT_CODE = #{deptCodeHd}
        </if>
        <if test="grpCodeHd != null and grpCodeHd != '' ">
            and b.LAST_GRP_CODE = #{grpCodeHd}
        </if>
        <if test="orgCodeHd != null and orgCodeHd != '' ">
            and b.LAST_ORG_CODE = #{orgCodeHd}
        </if>
    </select>


    <select id="selectBusinessType"  resultType="egovMap">
       select CODE_ID, CODE_NAME
        from sys0013M
        where code_master_id = 146


    </select>

    <select id="selectParentIdFrom"  resultType="egovMap">
        SELECT MEM_UP_ID FROM ORG0005D
       WHERE MEM_ID = #{memberId}
    </select>

    <select id="selectParentDCFrom"  resultType="egovMap">
        SELECT B.DEPT_CODE
        FROM ORG0005D A
        JOIN ORG0005D B ON A.MEM_UP_ID = B.MEM_ID
        WHERE A.MEM_ID = #{memberId}
    </select>

     <select id="selectHpMemberView"  parameterType="Map" resultType="egovMap">

      SELECT
        A.APLICNT_TYPE,
        A.APLICNT_NAME MEM_NAME,
        A.APLICNT_GENDER gender,
        C.NAME ,
        A.APLICNT_EMAIL email,
        A.APLICNT_TEL_MOBILE tel_Mobile,
        A.APLICNT_SPOUSE_CODE spon_Cd,
        A.APLICNT_BANK_ID bank,
        A.APLICNT_NRIC nric,
        B.CODE_ID  MEM_TYPE,
        A.APLICNT_TEL_OFFICE tel_Office,
        A.DEPT_CODE ,
        A. APLICNT_BANK_ACC_NO bank_Acc_No,
        SYSDATE,
        A.APLICNT_TEL_HUSE tel_Huse ,
        A.APLICNT_RACE,
        APLICNT_MARTL marrital,
        A.STUS_ID
        FROM
        ORG0003D A, SYS0013M B,
        SYS0015M C, SYS0004M F
        WHERE  A.APLICNT_TYPE = B.CODE_ID(+)
        AND    A. APLICNT_NATION = C.CNTY_ID(+)
        AND   A. APLICNT_BANK_ID  =  F.BANK_ID(+)
        AND      A.APLCTN_ID  = #{MemberID}


     </select>


     <select id="selectOneHPMember"  parameterType="Map" resultType="egovMap">

         SELECT
            A.ADDR_DTL,
            A.Street,
            A.DEPT_CODE c41,
            to_char( A.APLICNT_DOB ,'DD/MM/YYYY' ) c29,
            C.NAME c36,
            A.APLICNT_CODE Mem_Code,
            B.AREA area_Id,
            B.COUNTRY,
            B.CITY,
            B.STATE,
            B.POSTCODE,
             to_char( SYSDATE ,'DD/MM/YYYY' ) c30
            FROM ORG0003D A,  SYS0064M B
            ,SYS0015M C
            WHERE A.AREA_ID = B.AREA_ID
             AND    A. APLICNT_NATION = C.CNTY_ID(+)
            AND     A.APLCTN_ID = #{MemberID}

     </select>



     <update id="updateHpMember" parameterType="Map" >
     update ORG0003D
     SET APLCTN_ID = APLCTN_ID
           <if test="areaId != null and areaId != '' ">
           , AREA_ID = #{areaId}
           </if>
           <if test="streetDtl1 != null and streetDtl1 != '' ">
           , STREET =#{streetDtl1}
           </if>
           <if test="addrDtl1 != null and addrDtl1 != '' ">
           , ADDR_DTL =#{addrDtl1}
           </if>
            <if test="gender != null and gender != '' ">
           , APLICNT_GENDER =#{gender}
           </if>
             <if test="memberNm != null and memberNm != '' ">
           , APLICNT_NAME =#{memberNm}
           </if>
             <if test="nric != null and nric != '' ">
           , APLICNT_NRIC =#{nric}
           </if>
             <if test="email != null and email != '' ">
           , APLICNT_EMAIL =#{email}
           </if>
             <if test="mobileNo != null and mobileNo != '' ">
           , APLICNT_TEL_MOBILE =#{mobileNo}
           </if>
             <if test="officeNo != null and officeNo != '' ">
           , APLICNT_TEL_OFFICE =#{officeNo}
           </if>
             <if test="cmbRace != null and cmbRace != '' ">
           , APLICNT_RACE =#{cmbRace}
           </if>
             <if test="marrital != null and marrital != '' ">
           , APLICNT_MARTL =#{marrital}
           </if>
            <if test="sponsorCd != null and sponsorCd != '' ">
           , APLICNT_SPOUSE_CODE =#{sponsorCd}
           </if>
             <if test="bankAccNo != null and bankAccNo != '' ">
           , APLICNT_BANK_ACC_NO =#{bankAccNo}
           </if>
             <if test="issuedBank != null and issuedBank != '' ">
           , APLICNT_BANK_ID =#{issuedBank}
           </if>
           <if test="Birth != null and Birth != '' ">
            ,APLICNT_DOB  =to_date( #{Birth} , 'DD-MM-YYYY' )
           </if>
            <if test="statusID != null and statusID != '' ">
            , STUS_ID = #{statusID}
           </if>
           <if test="meetingPoint != null and meetingPoint != '' ">
            , APLICNT_MEETPOINT = #{meetingPoint}
           </if>
     where  APLCTN_ID = #{MemberID}


     </update>

     <select id="branch" parameterType="Map" resultType="egovMap">
        SELECT BRNCH_ID,CODE BRANCH_CODE, NAME BRANCH_NAME FROM SYS0005M WHERE STUS_ID = 1 order by branch_code
    </select>

    <select id="selectMemberValidDate" parameterType="Map" resultType="egovMap">
        select TO_CHAR(USER_VAL_ID_TO, 'DD/MM/YYYY') memberValidTo  from sys0047m where user_name = #{membercode} and USER_STUS_ID = 1
    </select>

    <update id="updateMemberBranch" parameterType="Map" >
        UPDATE ORG0001D
           SET BRNCH = #{selectBranch}
                ,UPD_DT = SYSDATE
                ,UPD_USER_ID = #{user_id}
          WHERE MEM_ID = #{MemberID}
    </update>

    <update id="updateMemberBranch2" parameterType="Map" >
        UPDATE ORG0005D
           SET BRNCH_ID = #{selectBranch}
                ,ORG_UPD_DT = SYSDATE
                ,ORG_UPD_USER_ID = #{user_id}
          WHERE MEM_ID = #{MemberID}
    </update>

     <select id="selectOneDocSub" parameterType="Map" resultType="egovMap">
       <if test="memType != '2803' ">
       SELECT B.*
       FROM ORG0001D A,
      ORG0010D B
      WHERE A.MEM_ID    = B.DOC_MEM_ID
       AND A.MEM_ID   = #{memId}
       AND B.DOC_TYPE_ID = #{codeId}

       </if>
       <if test=" memType == '2803' ">
        SELECT B.*
       FROM ORG0003D A,
      ORG0010D B
      WHERE A.APLCTN_ID    = B.DOC_MEM_ID
       AND A.APLCTN_ID   = #{memId}
       AND B.DOC_TYPE_ID = #{codeId}

       </if>


    </select>

    <update id="updateDocSub" parameterType="Map">
    UPDATE ORG0010D
    SET UPD_USER_ID =#{userId}
    , UPD_DT = SYSDATE
    , DOC_COPY_QTY = #{docQty}

    WHERE DOC_MEM_ID = #{memId}
    AND DOC_TYPE_ID = #{codeId}

    </update>
    <insert id="insertDocSub" parameterType="Map">
    INSERT INTO ORG0010D (
         DOC_SUB_ID, DOC_SUB_TYPE_ID , DOC_TYPE_ID
       , DOC_SO_ID, DOC_MEM_ID, DOC_SUB_DT
       , DOC_COPY_QTY, STUS_ID , CRT_USER_ID
       , CRT_DT, UPD_USER_ID, UPD_DT
         , DOC_SUB_BATCH_ID, DOC_SUB_BRNCH_ID
       )
      VALUES (
      ORG0010D_DOC_SUB_ID_SEQ.NEXTVAL , #{subTypeId}  , #{codeId}
      , 0, #{memId}, SYSDATE
      , #{docQty}, 1 , #{userId}
      , SYSDATE
      , #{userId}
      , SYSDATE
      , 0
      , #{docSubBrnchId}
      )
    </insert>

    <delete id="deleteDocSub" parameterType="Map">
    DELETE FROM ORG0010D
    WHERE DOC_MEM_ID = #{memId}
    AND DOC_TYPE_ID = #{codeId}

    </delete>

    <select id="selectNricExist"  parameterType="Map" resultType="egovMap">
        SELECT MEM_CODE FROM ORG0001D
        WHERE NRIC = #{nric}
        AND MEM_TYPE = '1'
     </select>

    <update id="updateCodyPaDate" parameterType="Map">
         <!-- <![CDATA[
    UPDATE ORG0002D Extent1
    set  Extent1.AG_EXPR_DT = TO_DATE(#{codyPaExpr}, 'DD-MM-YYYY')
    WHERE  ( Extent1.MEM_ID = #{MemberID} )
    AND ( 1 = Extent1.AG_STUS_ID ) AND ROWNUM <= 1
        ]]> -->
    MERGE INTO ORG0002D
    USING DUAL
    ON (MEM_ID = #{MemberID} AND AG_STUS_ID = '1')
    WHEN MATCHED THEN
        UPDATE SET
            AG_EXPR_DT = TO_DATE(#{codyPaExpr}, 'DD/MM/YYYY'),
            AG_UPD_USER_ID = #{user_id},
            AG_UPD_DT = SYSDATE
    WHEN NOT MATCHED THEN
        INSERT (AG_ID, MEM_ID, AG_TYPE_ID, AG_STUS_ID, AG_START_DT, AG_EXPR_DT, AG_CRT_USER_ID, AG_CRT_DT, AG_UPD_USER_ID, AG_UPD_DT)
        VALUES (ORG0002D_AG_ID_SEQ.NEXTVAL, #{MemberID}, '1416', '1', SYSDATE, TO_DATE(#{codyPaExpr}, 'DD/MM/YYYY'), #{user_id}, SYSDATE, #{user_id}, SYSDATE)
    </update>

     <update id="updateHpApprovalReject" parameterType="Map">

        UPDATE ORG0003D
        SET STUS_ID = 6 ,
        UPD_DT = SYSDATE ,
        REM = 'HP REJECT' ,
        UPD_USER_ID = #{UpdUserId}
        where APLCTN_ID = #{memberId}

     </update>


        <select id="selectMemberType" parameterType="Map" resultType="egovMap">
                SELECT Project1.CODE_ID code_Id  ,
                       Project1.CODE_MASTER_ID CODE_MASTER_ID  ,
                       Project1.CODE code  ,
                       Project1.CODE_NAME CODE_NAME  ,
                       Project1.CODE_DESC CODE_DESC  ,
                       Project1.DISAB DISAB  ,
                       Project1.CRT_DT CRT_DT  ,
                       Project1.CRT_USER_ID CRT_USER_ID  ,
                       Project1.UPD_DT UPD_DT  ,
                       Project1.UPD_USER_ID UPD_USER_ID  ,
                       Project1.OLD_CODE_ID OLD_CODE_ID
                  FROM ( SELECT Extent1.CODE_ID CODE_ID  ,
                                Extent1.CODE_MASTER_ID CODE_MASTER_ID  ,
                                Extent1.CODE CODE  ,
                                Extent1.CODE_NAME CODE_NAME  ,
                                Extent1.CODE_DESC CODE_DESC  ,
                                Extent1.DISAB DISAB  ,
                                Extent1.CRT_DT CRT_DT  ,
                                Extent1.CRT_USER_ID CRT_USER_ID  ,
                                Extent1.UPD_DT UPD_DT  ,
                                Extent1.UPD_USER_ID UPD_USER_ID  ,
                                Extent1.OLD_CODE_ID OLD_CODE_ID
                         FROM SYS0013M Extent1
                          WHERE  Extent1.CODE_MASTER_ID = 1 ) Project1
                  ORDER BY Project1.CODE_ID ASC


          </select>



        <select id="selectSponBrnchList" parameterType="Map" resultType="egovMap">
              SELECT Project1.BRNCH_ID code_Id  ,
                   Project1.C1 CODE_NAME
              FROM ( SELECT Extent1.BRNCH_ID BRNCH_ID  ,
                            Extent1.CODE || N'-' || Extent1.NAME C1
                     FROM SYS0005M Extent1
                      WHERE  ( 1 = Extent1.STUS_ID )
                                ) Project1
              ORDER BY Project1.C1 ASC

          </select>




        <select id="selectSponMemberSearch" parameterType="Map" resultType="egovMap">

                SELECT *
                  FROM ( SELECT Project1.MEM_ID MEM_ID  ,
                                Project1.MEM_TYPE MEM_TYPE  ,
                                Project1.MEM_CODE MEM_CODE  ,
                                Project1.CODE_NAME CODE_NAME  ,
                                Project1.NAME NAME  ,
                                Project1.NRIC NRIC  ,
                                Project1.NAME1 NAME1  ,
                                Project1.UPD_DT UPD_DT  ,
                                Project1.STUS STUS  ,
                                Project1.C1 C1
                  FROM ( SELECT Project1.C1 C1  ,
                                Project1.MEM_ID MEM_ID  ,
                                Project1.MEM_CODE MEM_CODE  ,
                                Project1.MEM_TYPE MEM_TYPE  ,
                                Project1.NAME NAME  ,
                                Project1.NRIC NRIC  ,
                                Project1.STUS STUS  ,
                                Project1.UPD_DT UPD_DT  ,
                                Project1.CODE_NAME CODE_NAME  ,
                                Project1.NAME1 NAME1  ,
                                ROW_NUMBER() OVER ( ORDER BY Project1.MEM_CODE ASC  ) ROW_NUMBER
                         FROM ( SELECT GroupBy1.A1 C1  ,
                                       Extent1.MEM_ID MEM_ID  ,
                                       Extent1.MEM_CODE MEM_CODE  ,
                                       Extent1.MEM_TYPE MEM_TYPE  ,
                                       Extent1.NAME NAME  ,
                                       Extent1.NRIC NRIC  ,
                                       Extent1.STUS STUS  ,
                                       Extent1.UPD_DT UPD_DT  ,
                                       Extent2.CODE_NAME CODE_NAME  ,
                                       Extent3.NAME NAME1
                                FROM ORG0001D Extent1
                                       JOIN SYS0013M Extent2   ON Extent1.MEM_TYPE = Extent2.CODE_ID
                                       JOIN SYS0038M Extent3   ON Extent1.STUS = Extent3.STUS_CODE_ID
                                       CROSS JOIN ( SELECT COUNT(1)  A1
                                                    FROM ORG0001D Extent4
                                                     WHERE  1=1
                                                         <if test="cmbMemberType != null and cmbMemberType != '' ">
                                                            AND (Extent4.MEM_TYPE = #{cmbMemberType})
                                                         </if>
                                                         <if test="txtMemberCode != null and txtMemberCode != '' ">
                                                            AND ( Extent4.MEM_CODE LIKE #{txtMemberCode})
                                                         </if>
                                                         <if test="txtMemberName != null and txtMemberName != '' ">
                                                            AND ( Extent4.NAME LIKE #{txtMemberName})
                                                         </if>
                                                         <if test="txtICNumber != null and txtICNumber != '' ">
                                                            AND ( Extent4.NRIC LIKE #{txtICNumber})
                                                         </if>
                                                         <if test="cmbBranch != null and cmbBranch != '' ">
                                                            AND ( UTILS.CONVERT_TO_NUMBER(Extent4.BRNCH,10,0) = #{cmbBranch} )
                                                         </if>
                                                         ) GroupBy1
                                       INNER JOIN ORG0005D Extent5 ON Extent1.MEM_ID = Extent5.MEM_ID
                                       /* LEFT JOIN SYS0047M Extent6 ON Extent1.MEM_CODE = Extent6.USER_NAME */
                                                    WHERE  1=1
                                                         <if test="cmbMemberType != null and cmbMemberType != '' ">
                                                            AND (Extent1.MEM_TYPE = #{cmbMemberType})
                                                         </if>
                                                         <if test="txtMemberCode != null and txtMemberCode != '' ">
                                                            AND ( Extent1.MEM_CODE LIKE #{txtMemberCode})
                                                         </if>
                                                         <if test="txtMemberName != null and txtMemberName != '' ">
                                                            AND ( Extent1.NAME LIKE #{txtMemberName} )
                                                         </if>
                                                         <if test="txtICNumber != null and txtICNumber != '' ">
                                                            AND ( Extent1.NRIC LIKE #{txtICNumber})
                                                         </if>
                                                         <if test="cmbBranch != null and cmbBranch != '' ">
                                                            AND ( UTILS.CONVERT_TO_NUMBER(Extent1.BRNCH,10,0) = #{cmbBranch} )
                                                         </if>
                                                         <if test="orgCd != null and orgCd != '' ">
                                                            AND ( Extent5.LAST_ORG_CODE = #{orgCd})
                                                         </if>
                                                         AND Extent1.STUS = 1
                                                         ) Project1
                                             ) Project1
                 WHERE  Project1.ROW_NUMBER > 0
                    ORDER BY Project1.MEM_CODE ASC )


          </select>



        <select id="getMemIdwithCode" parameterType="String" resultType="EgovMap">
           <choose>
           <when test = "memberType != null and memberType != '2803' "  >
                Select mem_id
                from org0001d
                where mem_code= #{memCode}
            </when>
            <otherwise>
                Select APLCTN_ID mem_id
                from org0003d
                where APLICNT_CODE= #{memCode}
            </otherwise>
        </choose>

        </select>




        <select id="selectTrainType" parameterType="Map" resultType="egovMap">
                 select TRAINEE_TYPE train
                 from org0001d
                where mem_id= #{memId}

        </select>
     <update id="updateDocSubWhenApproval" parameterType="Map">
    UPDATE ORG0010D
    SET UPD_USER_ID =#{userId}
    , UPD_DT = SYSDATE
    , DOC_MEM_ID = #{hpMemId}

    WHERE DOC_MEM_ID = #{MemberID}


    </update>


    <resultMap id="memrtnCode" type="egovMap"></resultMap>
    <resultMap id="memrtnMsg" type="egovMap"></resultMap>

    <select id="SP_DAY_USER_CRT" parameterType="Map"  statementType="CALLABLE" >
      {
            call SP_DAY_USER_CRT( #{IN_MEMCODE},#{p1 , mode=OUT , jdbcType=INTEGER , javaType=int , resultMap=memrtnCode}, #{p2, mode=OUT, jdbcType=VARCHAR, javaType=String, resultMap=memrtnMsg} )
      }
     </select>

     <select id="selectAreaInfo" parameterType="Map" resultType="egovMap">
               SELECT AREA_ID,
                          ISO,
                          COUNTRY,
                          STATE,
                          CITY,
                          POSTCODE,
                          AREA,
                          AREA
                          || ' '
                          || POSTCODE
                          || ' '
                          || CITY
                          || ' '
                          || STATE
                          || ' '
                          || COUNTRY AS FULL_ADDRESS
                        FROM SYS0064M
                        WHERE ISO = 'MY'
                        AND AREA_ID = #{areaId}
                        AND STATUS_ID = 1
      </select>

      <update id="SP_SVC_LOG_SYS0028M" parameterType="Map"  statementType="CALLABLE" >
      {
            call SP_SVC_LOG_SYS0028M( #{P_MEM_CODE} )
      }
     </update>

     <select id="selectAllBranchCode" parameterType="Map" resultType="egovMap">
        SELECT
            Project1.BranchID AS CODE_ID,
            Project1.C1 CODE_NAME
        FROM ( SELECT
                    Extent1.BRNCH_ID BranchID,
                    Extent1.CODE||' - '||Extent1.NAME C1
                    FROM SYS0005M Extent1
                    WHERE 1 = Extent1.STUS_ID
                  )  Project1
        ORDER BY Project1.C1 ASC
    </select>

     <select id="validateHpStatus" parameterType="Map" resultType="egovMap">
        select
            APLCTN_ID,
            IDNTFC,
            STUS_ID,
            STUS_NM,
            CNFM,
            CNFM_DT,
            APLICNT_NAME,
            APLICNT_NRIC,
            BNK_NM,
            APLICNT_BANK_ACC_NO
        from (
                select
                    aplicnt.APLCTN_ID,
                    aplicnt.APLICNT_IDNTFC IDNTFC,
                    aplicnt.STUS_ID,
                    s.NAME STUS_NM,
                    aplicnt.CNFM,
                    TO_CHAR(aplicnt.CNFM_DT, 'YYYY-MM-DD') CNFM_DT,
                    aplicnt.APLICNT_NAME,
                    aplicnt.APLICNT_NRIC,
                    bnk.NAME BNK_NM,
                    aplicnt.APLICNT_BANK_ACC_NO
                from ORG0003D aplicnt
                inner join SYS0038M s
                    on aplicnt.STUS_ID = s.STUS_CODE_ID
                INNER JOIN SYS0096M bnk
                    on bnk.BANK_ID = aplicnt.APLICNT_BANK_ID
                where
                    1=1
                    <if test="aplcntCode != null and aplcntCode != '' ">
                        and aplicnt.APLICNT_CODE = #{aplcntCode}
                    </if>
                    <if test="aplcntNRIC != null and aplcntNRIC != '' ">
                        and aplicnt.APLICNT_NRIC = #{aplcntNRIC}
                    </if>
                    <if test="aplcntName != null and aplcntName != '' ">
                        and aplicnt.APLICNT_NAME = #{aplcntName}
                    </if>
                    <if test="aplcntMobile != null and aplcntMobile != '' ">
                        and aplicnt.APLICNT_TEL_MOBILE = #{aplcntMobile}
                    </if>
                    <if test="aplcntId != null and aplcntId != '' ">
                        and aplicnt.APLCTN_ID = #{aplcntId}
                    </if>
                order by aplicnt.APLCTN_ID desc)
            where ROWNUM = 1
      </select>

     <update id="updateHpCfm" parameterType="Map">
        UPDATE ORG0003D
         SET CNFM = #{cnfm},
               CNFM_DT = SYSDATE,
               UPD_DT =  SYSDATE
               <if test="stusId != null and stusId != '' ">
                   , STUS_ID = #{stusId}
               </if>
           WHERE  APLCTN_ID = #{userId}
     </update>

     <select id="getHPCtc" parameterType="Map" resultType="egovMap">
        select
        <if test="src == 'aplicant' ">
            APLICNT_TEL_MOBILE MOBILE,
            APLICNT_EMAIL EMAIL
            from ORG0003D
            where APLICNT_CODE = #{memCode}
        </if>
        <if test="src == 'member' ">
            TEL_MOBILE MOBILE,
            EMAIL
            from ORG0001D
            where
            <if test="memCode != null and memCode != '' ">
                MEM_CODE = #{memCode}
            </if>
            <if test="memberId != null and memberId != '' ">
                MEM_ID = #{memberId}
            </if>
        </if>
      </select>

      <select id="verifyAccess" parameterType="Map" resultType="egovMap">
        SELECT
            COUNT(1) CNT
        FROM ORG0003D
        WHERE APLCTN_ID = #{memberID}
            AND APLICNT_IDNTFC = #{identification}
            AND APLICNT_NRIC = #{nric}
      </select>

      <select id="getApplicantDetails" parameterType="Map" resultType="egovMap">
        SELECT
            A.APLICNT_NAME,
            A.APLICNT_NRIC,
            B.NAME BANK_NAME,
            A.APLICNT_BANK_ACC_NO,
            A.APLICNT_IDNTFC
            /*,NVL(A.AGMT_SMS_CNT, 0) AGMT_SMS_CNT*/
        FROM ORG0003D A
        LEFT JOIN SYS0004M B
            ON A.APLICNT_BANK_ID = B.BANK_ID
        WHERE A.APLCTN_ID = #{memberID}
            <if test='identification != "" and identification != null'>
                AND A.APLICNT_IDNTFC = #{identification}
            </if>
            <if test='identification != "" and identification != null'>
                AND A.APLICNT_NRIC = #{nric}
            </if>
      </select>

      <select id="checkBankAcc" parameterType="Map" resultType="egovMap">
        SELECT
            COUNT(1) CNT
        <if test="srcA != '' and srcA != null ">
            <![CDATA[
                FROM ORG0003D
                WHERE APLICNT_BANK_ACC_NO = #{bankAccNo}
                AND STUS_ID <> '6'
            ]]>
        </if>
        <if test="srcM != '' and srcM != null ">
            <![CDATA[
                FROM ORG0001D
                WHERE BANK_ACC_NO = #{bankAccNo}
                AND STUS <> '51'
                AND STUS <> '3'
            ]]>
        </if>
      </select>

      <select id="checkAccLen" parameterType="Map" resultType="egovMap">
          SELECT
              ACC_LEN
          FROM SYS0096M
          WHERE BANK_ID = #{bankId}
      </select>

      <select id="getUserRole" parameterType="Map" resultType="egovMap">
      select
        a.USER_ID userId,
        a.USER_NAME userName,
        a.USER_FULL_NAME userFullName,
        a.USER_TYPE_ID memType,
        b.ROLE_ID roleId,
        c.ROLE_CODE roleCode,
        c.ROLE_DESC roleDesc
      from SYS0047M a
      inner join SYS0045M b
        on a.USER_ID = b.USER_ID
        and b.STUS_ID = 1
      inner join SYS0044M c
        on c.ROLE_ID = b.ROLE_ID
      where a.USER_ID = #{userId}
      </select>

    <select id="selectAccBank" parameterType="Map" resultType="egovMap">
    SELECT
        BANK_ID CODE_ID,
        CODE,
        CODE || ' - ' || NAME CODE_NAME
    FROM SYS0096M
    WHERE STUS = '1'
    ORDER BY CODE
    </select>

<!--
    <select id="getCDDtls" parameterType="Map" resultType="egovMap">
        select
            MEM_CODE mem_Code,
            TO_CHAR(MEM_TYPE) member_Type,
            FULL_NAME member_Nm,
            NRIC,
            DOB birth,
            TO_CHAR(GENDER) GENDER,
            TO_CHAR(RACE) cmb_Race,
            TO_CHAR(MARTL) marrital,
            TO_CHAR(NATION) national,
            TEL_OFFICE office_No,
            TEL_HUSE residence_No,
            TEL_MOBILE mobile_No,
            EMAIL,
            SPUSE_CODE spouse_Code,
            SPOUSE_NAME spouse_Name,
            SPOUSE_NRIC spouse_Nric,
            SPOUSE_OCPAT spouse_Occ,
            SPOUSE_TEL_CNTC spouse_Contat,
            SPOUSE_DOB spouse_Dob,
            TO_CHAR(EDC_LEV) education_Lvl,
            TO_CHAR(LANG) language,
            TO_CHAR(BANK) issued_Bank,
            BANK_ACC_NO,
            SPONS_CODE sponsor_Cd,
            STREET street_Dtl,
            ADDR_DTL addr_Dtl
        from ORG0001D
        where MEM_ID = #{memberId}
    </select>
-->

    <update id="updateCodyCfm" parameterType="Map">
        MERGE INTO ORG0003D
        USING(
            SELECT
                B.APLICNT_ID
            FROM SYS0047M A
            INNER JOIN ORG0001D B
            <choose>
                <when test=' userType == "4" '>
                    ON A.HR_CODE = B.MEM_CODE
                </when>
                <otherwise>
                    ON A.USER_NAME = B.MEM_CODE
                </otherwise>
            </choose>
            WHERE A.USER_NAME = #{userId}
        ) SRC
        ON (ORG0003D.APLCTN_ID = SRC.APLICNT_ID)
        WHEN MATCHED THEN UPDATE
        SET CNFM = #{cnfm},
              CNFM_DT = SYSDATE,
              UPD_DT = SYSDATE,
              STUS_ID = #{stusId}
     </update>

    <select id="getCDInfo" parameterType="Map" resultType="egovMap">
        SELECT
            a.APLCTN_ID,
            a.STUS_ID,
            a.CNFM,
            TO_CHAR(a.CNFM_DT, 'YYYY-MM-DD') CNFM_DT
        FROM ORG0003D a
        INNER JOIN ORG0001D b
            ON b.APLICNT_ID = a.APLCTN_ID
        WHERE b.MEM_CODE = #{userId}
    </select>

    <select id="getCdAplId" parameterType="Map" resultType="egovMap">
        SELECT
            a.APLCTN_ID
        FROM ORG0003D a
        INNER JOIN ORG0001D b
            ON b.MEM_CODE = a.APLICNT_CODE
        WHERE b.MEM_CODE = #{applicantCode}
    </select>

    <update id="updateCodyAplCde" parameterType="Map">
        MERGE INTO ORG0003D A USING
            ( SELECT
                A.MEM_CODE,
                A.MEM_TYPE,
                A.NAME,
                A.FULL_NAME,
                A.NRIC,
                A.DOB,
                A.GENDER,
                A.RACE,
                A.MARTL,
                A.NATION,
                A.TEL_OFFICE,
                A.TEL_HUSE,
                A.TEL_MOBILE,
                A.EMAIL,
                A.SPUSE_CODE,
                A.SPOUSE_NAME,
                A.SPOUSE_NRIC,
                A.SPOUSE_OCPAT,
                A.SPOUSE_TEL_CNTC,
                A.SPOUSE_DOB,
                A.EDC_LEV,
                A.LANG,
                A.BANK,
                A.BANK_ACC_NO,
                A.SPONS_CODE,
                A.TRNSPRT,
                A.AREA_ID,
                A.ADDR_DTL,
                A.STREET,
                A.UPD_USER_ID,
                B.DEPT_CODE
            FROM ORG0001D A
            INNER JOIN ORG0005D B
                    ON A.MEM_ID = B.MEM_ID
            WHERE MEM_CODE = #{memCode}
          ) SRC
      ON (A.APLICNT_CODE = SRC.MEM_CODE)
      WHEN NOT MATCHED THEN INSERT (
            APLCTN_ID,
            APLICNT_CODE,
            APLICNT_TYPE,
            APLICNT_NAME,
            APLICNT_FULL_NAME,
            APLICNT_IDNTFC,
            APLICNT_NRIC,
            APLICNT_DOB,
            APLICNT_GENDER,
            APLICNT_RACE,
            APLICNT_MARTL,
            APLICNT_NATION,
            APLICNT_TEL_OFFICE,
            APLICNT_TEL_HUSE,
            APLICNT_TEL_MOBILE,
            APLICNT_EMAIL,
            APLICNT_SPOUSE_CODE,
            APLICNT_SPOUSE_NAME,
            APLICNT_SPOUSE_NRIC,
            APLICNT_SPOUSE_OCPAT,
            APLICNT_SPOUSE_TEL_CNTC,
            APLICNT_SPOUSE_DOB,
            APLICNT_EDU_LEV,
            APLICNT_LANG,
            APLICNT_BANK_ID,
            APLICNT_BANK_ACC_NO,
            APLICNT_SPONS_CODE,
            APLICNT_TRNSPRT,
            STUS_ID,
            CRT_DT,
            CRT_USER_ID,
            UPD_DT,
            UPD_USER_ID,
            CNFM,
            CNFM_DT,
            DEPT_CODE,
            AREA_ID,
            ADDR_DTL,
            STREET
      ) VALUES ( #{aplcntId},
                      SRC.MEM_CODE,
                      2,
                      SRC.NAME,
                      SRC.FULL_NAME,
                      '1',
                      SRC.NRIC,
                      SRC.DOB,
                      SRC.GENDER,
                      SRC.RACE,
                      SRC.MARTL,
                      SRC.NATION,
                      SRC.TEL_OFFICE,
                      SRC.TEL_HUSE,
                      SRC.TEL_MOBILE,
                      SRC.EMAIL,
                      SRC.SPUSE_CODE,
                      SRC.SPOUSE_NAME,
                      SRC.SPOUSE_NRIC,
                      SRC.SPOUSE_OCPAT,
                      SRC.SPOUSE_TEL_CNTC,
                      SRC.SPOUSE_DOB,
                      SRC.EDC_LEV,
                      SRC.LANG,
                      SRC.BANK,
                      SRC.BANK_ACC_NO,
                      SRC.SPONS_CODE,
                      SRC.TRNSPRT,
                      44,
                      SYSDATE,
                      SRC.UPD_USER_ID,
                      SYSDATE,
                      SRC.UPD_USER_ID,
                      0,
                      '01-JAN-1900',
                      SRC.DEPT_CODE,
                      SRC.AREA_ID,
                      SRC.ADDR_DTL,
                      SRC.STREET
      )
     </update>

     <select id="getOrgDtls" parameterType="Map" resultType="egovMap">
        SELECT
            C.MEM_LVL,
            C.LAST_DEPT_CODE,
            C.LAST_GRP_CODE,
            C.LAST_ORG_CODE
        FROM
            SYS0047M A
            LEFT JOIN ORG0001D B
                ON A.USER_NAME = B.MEM_CODE
            LEFT JOIN ORG0005D C
                ON B.MEM_ID = C.MEM_ID
        WHERE
            A.USER_ID = #{userId}
    </select>

    <select id="selectHpMeetPoint" parameterType="Map" resultType="egovMap">
        SELECT
            MEET_POINT_ID CODE_ID,
            MEET_POINT_CODE || ' - ' || MEET_POINT_DESC CODE_NAME
        FROM SYS0089M
        WHERE STUS = 1
        ORDER BY MEET_POINT_CODE
    </select>

    <select id="getAplcntId" parameterType="Map" resultType="egovMap">
        SELECT ORG0003D_APLCTN_ID_SEQ.NEXTVAL aplcntId FROM DUAL
    </select>

    <update id="updateCdApl" parameterType="Map">
        UPDATE ORG0001D
             SET APLICNT_ID = #{aplcntId},
                   UPD_USER_ID = #{userId}
         WHERE MEM_CODE = #{memCode}
    </update>

    <update id="updateMeetpoint" parameterType="Map">
        MERGE INTO ORG0003D A
        USING (
            SELECT
                APLICNT_ID
            FROM ORG0001D
            WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        ) SRC
        ON (A.APLCTN_ID = SRC.APLICNT_ID)
        WHEN MATCHED THEN UPDATE
        SET A.APLICNT_MEETPOINT = #{meetingPoint}
    </update>

    <select id="selectMemberTypeHP" parameterType="Map" resultType="egovMap">
        SELECT CODE_ID CODE_ID  ,
               CODE_NAME CODE_NAME
        FROM SYS0013M
        WHERE CODE_MASTER_ID = 1
          AND CODE_ID = 1
        ORDER BY CODE_ID ASC
    </select>


    <select id="selectApprovalBranch" parameterType="Map" resultType="egovMap">
        SELECT BRNCH_ID CODE_ID  ,
               CODE || '-' || NAME CODE_NAME
        FROM SYS0005M
        WHERE TYPE_ID = 45
        ORDER BY CODE ASC
    </select>

<!-- LaiKW - Comment starts here -->
    <update id="memberListUpdate_SYS47" parameterType="Map">
        UPDATE SYS0047M
        SET USER_UPD_USER_ID = #{user_id}
          , USER_UPD_DT = SYSDATE
          <if test="selectBranchUpd != null and selectBranchUpd != '' ">
              , USER_BRNCH_ID = #{selectBranchUpd}
          </if>
          <if test="convStaffFlgUpd != null and convStaffFlgUpd != '' ">
              , HR_CODE = #{memberCodeUpd}
          </if>
        WHERE HR_CODE = (
            SELECT MEM_CODE
            FROM ORG0001D
            WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        )
    </update>

    <update id="memberListUpdate_ORG05" parameterType="Map">
        UPDATE ORG0005D
        SET ORG_UPD_USER_ID = #{user_id}
          , ORG_UPD_DT = SYSDATE
          , BRNCH_ID = #{selectBranchUpd}
        WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
    </update>

    <update id="memberListUpdate_ORG01" parameterType="Map">
        UPDATE ORG0001D
        SET UPD_USER_ID = #{user_id}
          , UPD_DT = SYSDATE
        <if test="convStaffFlgUpd != null and convStaffFlgUpd != '' ">
          , MEM_TYPE = '4'
          <if test="memberCodeUpd != null and memberCodeUpd != ''">
            , MEM_CODE = #{memberCodeUpd}
          </if>
        </if>
        <if test="memberNmUpd != null and memberNmUpd != '' ">
          , NAME = UPPER(#{memberNmUpd})
          , FULL_NAME = UPPER(#{memberNmUpd})
        </if>
        <if test="cmbRaceUpd != null and cmbRaceUpd != '' ">
          , RACE = #{cmbRaceUpd}
        </if>
        <if test="marritalUpd != null and marritalUpd != '' ">
          , MARTL = #{marritalUpd}
        </if>
        <if test="officeNoUpd != null">
          , TEL_OFFICE = #{officeNoUpd}
        </if>
        <if test="residenceNoUpd != null ">
          , TEL_HUSE = #{residenceNoUpd}
        </if>
        <if test="mobileNoUpd != null and mobileNoUpd != '' ">
          , TEL_MOBILE = #{mobileNoUpd}
        </if>
        <if test="emailUpd != null and emailUpd != '' ">
          , EMAIL = #{emailUpd}
        </if>
        <if test="spouseCodeUpd != null">
          , SPUSE_CODE = #{spouseCodeUpd}
        </if>
        <if test="spouseNameUpd != null">
          , SPOUSE_NAME = UPPER(#{spouseNameUpd})
        </if>
        <if test="spouseNricUpd != null">
          , SPOUSE_NRIC = #{spouseNricUpd}
        </if>
        <if test="spouseOccUpd != null">
          , SPOUSE_OCPAT = #{spouseOccUpd}
        </if>
        <if test="spouseContatUpd != null">
          , SPOUSE_TEL_CNTC = #{spouseContatUpd}
        </if>
        <if test="spouseDobUpd != null">
          , SPOUSE_DOB = TO_DATE(#{spouseDobUpd},'DD/MM/YYYY')
        </if>
        <if test="educationLvlUpd != null and educationLvlUpd != '' ">
          , EDC_LEV = #{educationLvlUpd}
        </if>
        <if test="languageUpd != null and languageUpd != '' ">
          , LANG = #{languageUpd}
        </if>
        <if test="issuedBankUpd != null and issuedBankUpd != '' ">
          , BANK = #{issuedBankUpd}
        </if>
        <if test="bankAccNoUpd != null and bankAccNoUpd != '' ">
          , BANK_ACC_NO = #{bankAccNoUpd}
        </if>
        <if test="selectBranchUpd != null and selectBranchUpd != '' ">
          , BRNCH = #{selectBranchUpd}
        </if>
        <if test="transportCdUpd != null and transportCdUpd != '' ">
          , TRNSPRT = #{transportCdUpd}
        </if>
        <if test="trNoUpd != null and trNoUpd != '' ">
          , TR_NO = #{trNoUpd}
        </if>
        <if test="hsptlz != null and hsptlz != '' ">
          , HSPTLZ = #{hsptlz}
        </if>
        <if test="areaIdUpd != null and areaIdUpd != '' ">
          , AREA_ID = #{areaIdUpd}
        </if>
        <if test="addrDtlUpd != null and addrDtlUpd != '' ">
          , ADDR_DTL = #{addrDtlUpd}
        </if>
        <if test="streetDtlUpd != null and streetDtlUpd != '' ">
          , STREET = #{streetDtlUpd}
        </if>
        <if test="searchdepartmentUpd != null and searchdepartmentUpd != '' ">
          , MAIN_DEPT = (SELECT MAIN_DEPT_CODE FROM SYS0105M WHERE ID = #{searchdepartmentUpd})
        </if>
        <if test="inputSubDeptUpd != null and inputSubDeptUpd != '' ">
          , SUB_DEPT = (SELECT SUB_DEPT_CODE FROM SYS0105M WHERE ID = #{searchdepartmentUpd})
        </if>
        <if test="religionUpd != null and religionUpd != '' ">
          , RELIGION = #{religionUpd}
        </if>
        <if test="mobileUseYnUpd != null and mobileUseYnUpd != '' ">
          , MOBILE_USE_YN = #{mobileUseYnUpd}
        </if>
        <if test="noTBBChkboxUpd != null and noTBBChkboxUpd != '' ">
          , NO_TBB = #{noTBBChkboxUpd}
        </if>
        WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
    </update>

    <update id="memberListUpdate_ORG03" parameterType="Map">
        UPDATE ORG0003D
        SET UPD_USER_ID = #{user_id}
          , UPD_DT = SYSDATE
        <if test="memberNmUpd != null and memberNmUpd != '' ">
          , APLICNT_NAME = UPPER(#{memberNmUpd})
          , APLICNT_FULL_NAME = UPPER(#{memberNmUpd})
        </if>
        <if test="cmbRaceUpd != null and cmbRaceUpd != '' ">
          , APLICNT_RACE = #{cmbRaceUpd}
        </if>
        <if test="marritalUpd != null and marritalUpd != '' ">
          , APLICNT_MARTL = #{marritalUpd}
        </if>
        <if test="officeNoUpd != null">
          , APLICNT_TEL_OFFICE = #{officeNoUpd}
        </if>
        <if test="residenceNoUpd != null">
          , APLICNT_TEL_HUSE = #{residenceNoUpd}
        </if>
        <if test="mobileNoUpd != null and mobileNoUpd != '' ">
          , APLICNT_TEL_MOBILE = #{mobileNoUpd}
        </if>
        <if test="emailUpd != null and emailUpd != '' ">
          , APLICNT_EMAIL = #{emailUpd}
        </if>
        <if test="spouseCodeUpd != null">
          , APLICNT_SPUSE_CODE = #{spouseCodeUpd}
        </if>
        <if test="spouseNameUpd != null">
          , APLICNT_SPOUSE_NAME = UPPER(#{spouseNameUpd})
        </if>
        <if test="spouseNricUpd != null">
          , APLICNT_SPOUSE_NRIC = #{spouseNricUpd}
        </if>
        <if test="spouseOccUpd != null">
          , APLICNT_SPOUSE_OCPAT = #{spouseOccUpd}
        </if>
        <if test="spouseContatUpd != null">
          , APLICNT_SPOUSE_TEL_CNTC = #{spouseContatUpd}
        </if>
        <if test="spouseDobUpd != null">
          , APLICNT_SPOUSE_DOB = TO_DATE(#{spouseDobUpd},'DD/MM/YYYY')
        </if>
        <if test="educationLvlUpd != null and educationLvlUpd != '' ">
          , APLICNT_EDC_LEV = #{educationLvlUpd}
        </if>
        <if test="languageUpd != null and languageUpd != '' ">
          , APLICNT_LANG = #{languageUpd}
        </if>
        <if test="issuedBankUpd != null and issuedBankUpd != '' ">
          , APLICNT_BANK_ID = #{issuedBankUpd}
        </if>
        <if test="bankAccNoUpd != null and bankAccNoUpd != '' ">
          , APLICNT_BANK_ACC_NO = #{bankAccNoUpd}
        </if>
        <if test="transportCdUpd != null and transportCdUpd != '' ">
          , APLICNT_TRNSPRT = #{transportCdUpd}
        </if>
        <if test="areaIdUpd != null and areaIdUpd != '' ">
          , AREA_ID = #{areaIdUpd}
        </if>
        <if test="addrDtlUpd != null and addrDtlUpd != '' ">
          , ADDR_DTL = #{addrDtlUpd}
        </if>
        <if test="streetDtlUpd != null and streetDtlUpd != '' ">
          , STREET = #{streetDtlUpd}
        </if>
        <if test="searchdepartmentUpd != null and searchdepartmentUpd != '' ">
          , MAIN_DEPT = #{searchdepartmentUpd}
        </if>
        <if test="inputSubDeptUpd != null and inputSubDeptUpd != '' ">
          , SUB_DEPT = #{inputSubDeptUpd}
        </if>
        <if test="meetingPointUpd != null and meetingPointUpd != '' ">
          , APLICNT_MEETPOINT = #{meetingPointUpd}
        </if>
        WHERE APLCTN_ID = (
            SELECT APLICNT_ID
            FROM ORG0001D
            WHERE MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        )
    </update>

    <select id="selectMemCourse" parameterType="Map" resultType="egovMap">
        SELECT
            COURS_ITM_ID,
            COURS_ID,
            COURS_TEST_RESULT,
            COURS_MEM_STUS_ID
        FROM MSC0009D
        WHERE COURS_MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        AND COURS_MEM_STUS_ID = 1
        AND COURS_TEST_RESULT IS NULL
    </select>

    <update id="memberListUpdate_MSC09" parameterType="Map">
        UPDATE MSC0009D
        SET COURS_D_UPD_USER_ID = #{user_id}
          , COURS_D_UPD_DT = SYSDATE
          , COURS_ID = #{courseUpd}
        WHERE COURS_MEM_ID = TO_NUMBER(TRIM(#{MemberID}))
        AND COURS_ITM_ID = #{coursItmId}
    </update>

    <update id="memberListUpdate_ORG02" parameterType="Map">
    MERGE INTO ORG0002D
    USING DUAL
    ON (MEM_ID = #{MemberID} AND AG_STUS_ID = '1')
    WHEN MATCHED THEN
        UPDATE SET
            AG_EXPR_DT = TO_DATE(#{codyPaExprUpd}, 'DD/MM/YYYY'),
            AG_UPD_USER_ID = #{user_id},
            AG_UPD_DT = SYSDATE
    WHEN NOT MATCHED THEN
        INSERT (AG_ID, MEM_ID, AG_TYPE_ID, AG_STUS_ID, AG_START_DT, AG_EXPR_DT, AG_CRT_USER_ID, AG_CRT_DT, AG_UPD_USER_ID, AG_UPD_DT)
        VALUES (ORG0002D_AG_ID_SEQ.NEXTVAL, #{MemberID}, '1416', '1', SYSDATE, TO_DATE(#{codyPaExprUpd}, 'DD/MM/YYYY'), #{user_id}, SYSDATE, #{user_id}, SYSDATE)
    </update>

    <select id="checkMemCode" parameterType="Map" resultType="int">
        SELECT COUNT(*) EXIST
        FROM ORG0001D
        WHERE EXISTS (
            SELECT *
            FROM SYS0047M
            WHERE ORG0001D.MEM_CODE = SYS0047M.USER_NAME
        )
        AND ORG0001D.MEM_CODE = #{username}
    </select>
<!-- LaiKW - Comment ends here -->

<!-- HLTANG - add additional info for LMS project usage -->
    <select id="selectTraining" parameterType="Map" resultType="egovMap">
        SELECT
            C.COURS_CODE || ' - ' || C.COURS_NAME COURSE_CODE,
            TO_CHAR(C.COURS_START, 'DD/MM/YYYY') C_DATE,
            CASE WHEN B.COURS_TEST_RESULT = 'P' THEN 'PASS'
                 WHEN B.COURS_TEST_RESULT = 'AB' THEN 'ABSENT'
                 WHEN B.COURS_TEST_RESULT = 'F' THEN 'FAILED'
                 ELSE '-'
            END RESULT,
            C.COURS_LOC,

            C.COURS_CODE COURSE_CODE1,
            C.COURS_NAME COURS_NAME1,
            B.COURS_MEM_SHIRT_SIZE SHIRT_SIZE1,
            A.trainee_code trainee_code1
        FROM ORG0001D A
        LEFT JOIN MSC0009D B
            ON A.MEM_ID = B.COURS_MEM_ID
        LEFT JOIN MSC0008D C
            ON B.COURS_ID = C.COURS_ID
            AND C.COURS_STUS_ID = 1
        WHERE A.MEM_ID = #{MemberID}
    </select>

    <select id="getNextMPID" parameterType="Map" resultType="int">
        SELECT
            MAX(MEET_POINT_ID) + 1
        FROM SYS0089M
    </select>

    <select id="searchMP" parameterType="Map" resultType="egovMap">
        SELECT
            MEET_POINT_ID,
            MEET_POINT_CODE,
            MEET_POINT_DESC,
            CASE WHEN STUS = 1 THEN 'ACTIVE'
                 ELSE 'INACTIVE'
            END STUS
        FROM SYS0089M
        WHERE 1=1
        <if test="mpCode != null and mpCode != '' ">
            AND MEET_POINT_CODE = #{mpCode}
        </if>
        <if test="mpName != null and mpName != '' ">
            AND MEET_POINT_DESC like '%' || #{mpCode} || '%'
        </if>
        ORDER BY MEET_POINT_ID
    </select>

    <insert id="addMeetingPoint" parameterType="Map">
        INSERT INTO SYS0089M
        VALUES (
            #{meetPointId},
            UPPER(#{meetPointCode}),
            UPPER(#{meetPointDesc}),
            CASE WHEN #{stus} = 'ACTIVE' THEN '1' ELSE '0' END,
            #{userId},
            SYSDATE,
            #{userId},
            SYSDATE
        )
    </insert>

    <update id="updMeetingPoint" parameterType="Map">
        UPDATE SYS0089M
        SET MEET_POINT_CODE = UPPER(#{meetPointCode}),
            MEET_POINT_DESC = UPPER(#{meetPointDesc}),
            STUS = CASE WHEN #{stus} = 'ACTIVE' THEN '1' ELSE '0' END,
            UPD_USER_ID = #{userId},
            UPD_DT = SYSDATE
        WHERE MEET_POINT_ID = #{meetPointId}
    </update>

    <update id="updHPMeetingPoint" parameterType="java.util.List">
        MERGE INTO ORG0003D T
        USING (
        <foreach collection="list" item="item" index="index" separator=" UNION ALL ">
            SELECT
                APLICNT_ID,
                #{item.meetpoint} APLICNT_MEETPOINT,
                #{userId} UPD_USER_ID
            FROM ORG0001D
            WHERE MEM_CODE = #{item.memCode}
        </foreach>
        )S
        ON (T.APLCTN_ID = S.APLICNT_ID)
        WHEN MATCHED THEN UPDATE
        SET T.APLICNT_MEETPOINT = S.APLICNT_MEETPOINT,
            T.UPD_USER_ID = S.UPD_USER_ID,
            T.UPD_DT = SYSDATE
    </update>

    <select id="getUpdUserID" parameterType="Map" resultType="String">
        SELECT
            USER_ID
        FROM ORG0001D A,
             SYS0047M B
        WHERE A.MEM_CODE = B.HR_CODE
          AND A.MEM_ID = #{memberID}
          AND A.MEM_TYPE = #{memType}
    </select>

    <update id="updateOrgUserPW" parameterType="Map">
        UPDATE SYS0047M
        SET USER_PASSWD = #{userPasswd},
            USER_UPD_DT = SYSDATE,
            USER_PASSWD_LAST_UPD_DT = SYSDATE,
            USER_UPD_USER_ID = #{userID}
        WHERE USER_ID = #{updUserId}
    </update>

    <update id="insertHPorientation" parameterType="Map">
        MERGE INTO MSC0009D T
        USING (
            SELECT
                A.MEM_ID,
                A.NAME,
                A.NRIC,
                A.CRT_USER_ID,
                B.COURS_ID
            FROM ORG0001D A, ORG0003D B
            WHERE A.APLICNT_ID = B.APLCTN_ID
            AND B.APLCTN_ID = #{MemberID}
        ) S
        ON (T.COURS_MEM_ID = S.MEM_ID AND T.COURS_ID = S.COURS_ID)
        WHEN NOT MATCHED THEN INSERT (
            COURS_ITM_ID,
            COURS_ID,
            COURS_MEM_ID,
            COURS_MEM_STUS_ID,
            COURS_D_UPD_USER_ID,
            COURS_D_UPD_DT,
            COURS_D_MEM_NAME,
            COURS_D_MEM_NRIC
        ) VALUES (
            MSC0009D_COURS_ITM_ID_SEQ.NEXTVAL,
            S.COURS_ID,
            S.MEM_ID,
            '1',
            S.CRT_USER_ID,
            SYSDATE,
            S.NAME,
            S.NRIC
        )
    </update>

    <select id="getUserID" parameterType="String" resultType="String">
        SELECT
            MEM_ID
        FROM ORG0001D
        WHERE MEM_CODE = #{memberCode}
    </select>

     <select id="getCurrOrgDtls" parameterType="Map" resultType="egovMap">
       SELECT
           C.MEM_LVL,
           C.ORG_CODE AS ORG_CODE,
           C.GRP_CODE AS GRP_CODE,
           C.DEPT_CODE AS DEPT_CODE
       FROM
           SYS0047M A
           LEFT JOIN ORG0001D B
               ON A.USER_NAME = B.MEM_CODE
           LEFT JOIN ORG0005D C
               ON B.MEM_ID = C.MEM_ID
       WHERE
           A.USER_ID = #{userId}
    </select>

    <select id="selectPromoDisHistory" parameterType="Map" resultType="egovMap">
		SELECT
		  *
		FROM
		  (
		    SELECT
		      MEM_CODE,
		      POSITION_NAME,
		      MEMBER_CODE_HISTORY,
		      NAME,
		      GMCODE,
		      SMCODE,
		      HMCODE,
		      MOTHER_MANAGER_CODE,
		      MOTHER_MANAGER_NAME,
		      MEMBER_ID,
		      SPONS_CODE,
		      PROMOTION_DATE,
		      CASE WHEN (
		        SELECT
		          PROMO_TYPE_ID
		        FROM
		          ORG0007D
		        WHERE
		          PROMO_ID = (
		            SELECT
		              MAX(PROMO_ID)
		            FROM
		              ORG0007D o
		            WHERE
		              o.MEM_ID = T.MEM_ID
		          )
		      ) = '747' THEN '-' ELSE DISCONTINUE_DATE END AS DISCONTINUE_DATE,
		      MEM_LVL,
		      ORG_CODE,
		      GRP_CODE,
		      DEPT_CODE,
		      ROW_NUMBER() OVER(
		        PARTITION BY MEM_ID
		        ORDER BY
		          PROMO_ID DESC
		      ),
		      CASE WHEN MEM_LVL_CURR = MEM_LVL
		      AND MEM_LVL_CURR = 4 THEN 1 WHEN MEM_LVL_CURR != 4
		      AND ROW_NUMBER() OVER(
		        PARTITION BY MEM_ID
		        ORDER BY
		          PROMO_ID DESC
		      ) = 1 THEN 1 ELSE 0 END MAIN,
		      MEM_LVL_CURR,
		      PROMO_ID
		    FROM
		      (
		        SELECT
		          O1.MEM_ID,
		          O1.MEM_CODE,
		          O3.CODE_NAME POSITION_NAME,
		          '' MEMBER_CODE_HISTORY,
		          NAME NAME,
		          O2.ORG_CODE GMCODE,
		          O2.GRP_CODE SMCODE,
		          O2.DEPT_CODE HMCODE,
		          '' MOTHER_MANAGER_CODE,
		          '' MOTHER_MANAGER_NAME,
		          '' MEMBER_ID,
		          SPONS_CODE SPONS_CODE,
		          TO_CHAR(JOIN_DT, 'DD/MM/YYYY') PROMOTION_DATE,
		          '' DISCONTINUE_DATE,
		          4 MEM_LVL,
		          O2.ORG_CODE,
		          O2.GRP_CODE,
		          O2.DEPT_CODE,
		          O2.MEM_LVL MEM_LVL_CURR,
		          0 PROMO_ID
		        FROM
		          ORG0001D O1
		          JOIN ORG1001V O2 ON O2.MEM_ID = O1.MEM_ID
		          JOIN SYS0013M O3 ON O3.CODE_ID = O1.MEM_TYPE
		        WHERE
		          MEM_TYPE IN (
		            '1',
		            '2',
		            '3',
		            '7'
		          )
		        UNION
		        SELECT
		          EXTENT1.MEM_ID,
		          EXTENT1.MEM_CODE,
		          EXTENT3.MEM_ORG_DESC POSITION_NAME,
		          EXTENT2.DEPT_CODE_TO MEMBER_CODE_HISTORY,
		          EXTENT1.NAME NAME,
		          CASE WHEN EXTENT2.MEM_LVL_TO IN (
		            '2',
		            '3'
		          ) THEN EXTENT2.LAST_ORG_CODE END GMCODE,
		          CASE WHEN EXTENT2.MEM_LVL_TO IN (
		            '3',
		            '4'
		          ) THEN EXTENT2.LAST_GRP_CODE END SMCODE,
		          CASE WHEN EXTENT2.MEM_LVL_TO = 4 THEN EXTENT2.LAST_DEPT_CODE END HMCODE,
		          EXTENT2.PR_CODE MOTHER_MANAGER_CODE,
		          EXTENT11.NAME MOTHER_MANAGER_NAME,
		          '' MEMBER_ID,
		          EXTENT1.SPONS_CODE SPONS_CODE,
		          TO_CHAR(EXTENT2.CRT_DT, 'DD/MM/YYYY') PROMOTION_DATE,
		          TO_CHAR(EXTENT7.CRT_DT, 'DD/MM/YYYY') DISCONTINUE_DATE,
		          EXTENT2.MEM_LVL_TO MEM_LVL,
		          EXTENT4.ORG_CODE,
		          EXTENT4.GRP_CODE,
		          EXTENT4.DEPT_CODE,
		          EXTENT4.MEM_LVL MEM_LVL_CURR,
		          EXTENT2.PROMO_ID
		        FROM
		          ORG0001D EXTENT1
		          JOIN ORG0007D EXTENT2 ON EXTENT2.MEM_ID = EXTENT1.MEM_ID
		          JOIN ORG0012D EXTENT3 ON (EXTENT3.MEM_TYPE_ID = EXTENT2.MEM_TYPE_ID)
		          AND (EXTENT3.MEM_ORG_LVL = EXTENT2.MEM_LVL_TO)
		          JOIN ORG1001V EXTENT4 ON EXTENT1.MEM_CODE = EXTENT4.MEM_CODE
		          LEFT JOIN ORG0005D EXTENT8 ON EXTENT8.MEM_ID = EXTENT1.MEM_ID
		          LEFT JOIN ORG0007D EXTENT7 ON (EXTENT7.MEM_ID = EXTENT2.MEM_ID)
		          AND (EXTENT7.DEPT_CODE_FROM = EXTENT2.DEPT_CODE_TO)
		          AND (
		            EXTENT7.PROMO_TYPE_ID IN (
		              '747',
		              '748'
		            )
		          )
		          JOIN ORG0001D EXTENT11 ON EXTENT11.MEM_ID = EXTENT2.PARENT_ID_FROM
		        WHERE
		          1 = 1
		          AND EXTENT2.PROMO_TYPE_ID IN (
		            '747'
                    )

                <if test="promoDisHismemTypeCom != null and promoDisHismemTypeCom != ''">
                 AND   Extent1.MEM_TYPE =  #{promoDisHismemTypeCom}
                </if>
                <if test="promoDisHisCode != null and promoDisHisCode != ''">
                  AND  Extent1.MEM_CODE =  #{promoDisHisCode}
                </if>
                <if test="promoDisHisName != null and promoDisHisName != ''">
                  AND  Extent1.NAME LIKE '%' || #{promoDisHisName} || '%'
                </if>
                <if test="promoDisHisIcNum != null and promoDisHisIcNum != ''">
                  AND  Extent1.NRIC LIKE   '%' || #{promoDisHisIcNum} || '%'
                </if>
                 <if test="promoDisHisContact != null and promoDisHisContact != ''">
                   AND  ((Extent1.TEL_HUSE LIKE '%' || #{promoDisHisContact}|| '%' ) OR ( Extent1.TEL_OFFICE LIKE '%' || #{promoDisHisContact}|| '%' ) OR ( Extent1.TEL_MOBILE LIKE '%' || #{promoDisHisContact}|| '%' ) ) AND ( Extent1.TEL_MOBILE = #{promoDisHisContact} OR Extent1.TEL_HUSE = #{promoDisHisContact} OR Extent1.TEL_OFFICE = #{promoDisHisContact})
                </if>
                <if test="promoDisHisSponsor != null and promoDisHisSponsor != ''">
                   AND   Extent1.SPONS_CODE LIKE '%' || #{promoDisHisSponsor} || '%'
                </if>
                 <if test="position != null and position != ''">
                   AND Extent8.MEM_LVL= #{position}
                </if>
                <if test="sessionTypeID != 4 and sessionTypeID != 6">
                   <choose>
                        <when test="memberLevel == 1">
                          AND Extent4.ORG_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                       </when>
                       <when test="memberLevel == 2">
                           AND Extent4.GRP_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE =#{userName} )
                        </when>
                        <when test="memberLevel == 3">
                           AND Extent4.DEPT_CODE IN (SELECT B.DEPT_CODE FROM ORG0001D A, ORG0005D B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_CODE = #{userName} )
                         </when>
                         <when test="memberLevel == 4">
                               <if test="promoDisHisCode == null or promoDisHisCode == ''">
                                    <if test="orgCodeHd != null and orgCodeHd != '' ">
                                       AND Extent4.ORG_CODE = #{orgCodeHd}
                                    </if>
                                    <if test="grpCodeHd != null and grpCodeHd != '' ">
                                       AND Extent4.GRP_CODE = #{grpCodeHd}
                                    </if>
                                    <if test="deptCodeHd != null and deptCodeHd != '' ">
                                       AND Extent4.DEPT_CODE = #{deptCodeHd}
                                    </if>
                                     AND Extent1.MEM_CODE = #{promoDisHisCode}
                               </if>
                          </when>
                      </choose>
                   </if>
               ) T

               )
              WHERE 1=1
               <if test="promoDisHisCode != null and promoDisHisCode != ''">
                  AND MEM_CODE =#{promoDisHisCode}
               </if>
               <if test="orgCodeHd != null and orgCodeHd != '' ">
                  AND ORG_CODE =#{orgCodeHd}
               </if>
               <if test="grpCodeHd != null and grpCodeHd != '' ">
                  AND GRP_CODE = #{grpCodeHd}
               </if>
               <if test="deptCodeHd != null and deptCodeHd != '' ">
                  AND DEPT_CODE = #{deptCodeHd}
               </if>

                ORDER BY MEM_CODE,PROMO_ID
    </select>

        <select id="validateVaccineDeclarationStatus" parameterType="Map" resultType="egovMap">
        select count(*) cnt from ORG0042D
        where
        <if test="memberID != null and memberID != '' ">
            mem_id = #{memberID}
        </if>
        and stus_id = 1

      </select>

      <select id="getVaccineDeclarationMemDetails" parameterType="Map" resultType="egovMap">
        select
        a.mem_id,
        a.mem_code,
        a.name,
        a.nric,
        a.tel_mobile,
        a.email,
        a.DOB,
        c.mem_org_desc
        from ORG0001D a
        left join ORG0005D b on b.mem_id = a.mem_id
        left join ORG0012D c on c.mem_type_id = a.mem_type and c.mem_org_lvl = b.mem_lvl
        left join org0042d d on d.mem_id = a.mem_id
        where a.mem_id =#{memberID}
      </select>

      <update id="updateVaccineDeclaration" parameterType="Map">
        UPDATE ORG0042D
         SET IS_SELECT = #{isSelect},
               REASON = #{reason},
               STUS_ID = 1,
               UPLOAD_ID = #{atchFileGrpId},
               UPD_USER_ID = #{userId},
               UPD_DT = SYSDATE
           WHERE  MEM_ID = #{memberID}
     </update>


     <!-- HLTANG - LMS project usage -->
    <select id="selectTrApplByEmail" parameterType="Map" resultType="egovMap">
        SELECT
MEM_ID, MEM_CODE, EMAIL FROM ORG0001D WHERE EMAIL = #{email} AND STUS IN (1)
    </select>

    <update id="updateMemberEmail" parameterType="Map">
     UPDATE ORG0001D SET EMAIL = #{email} WHERE MEM_ID = #{memberID}
    </update>
</mapper>