<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.coway.trust.biz.organization.organization.impl.MemberListMapper">

	<!-- searchOrganization Gruop List -->
	<select id="nationality" parameterType="Map" resultType="egovMap">
		SELECT 
		Extent1.CNTY_ID CountryID, 
		Extent1.CODE Code, 
		Extent1.NAME Name, 
		Extent1.STUS_CODE_ID StatusCodeID, 
		Extent1.CRT_DT Created, 
		Extent1.CRT_USER_ID Creator, 
		Extent1.UPD_DT Updated, 
		Extent1.UPD_USER_ID Updator
		FROM SYS0015M Extent1
		ORDER BY Extent1.NAME ASC
	</select>
	
	<select id="selectStatus" parameterType="Map" resultType="egovMap">
        SELECT 
		Distinct1.StatusCodeID StatusCodeID, 
		Distinct1.Code Code, 
		Distinct1.Name Name
		FROM ( SELECT DISTINCT 
	    Extent1.STUS_CODE_ID StatusCodeID, 
	    Extent1.CODE Code, 
	    Extent1.NAME Name
	    FROM  SYS0038M Extent1
	    INNER JOIN ORG0001D Extent2 ON Extent1.STUS_CODE_ID = Extent2.STUS
    )  Distinct1
    </select>
    
    <select id="selectUserBranch" parameterType="Map" resultType="egovMap">
        SELECT 
		Project1.BranchID AS BranchID, 
		Project1.C1 C1
		FROM ( SELECT 
		    Extent1.BRNCH_ID BranchID, 
		    Extent1.CODE||' - '||Extent1.NAME C1
		    FROM SYS0005M Extent1
		    WHERE 1 = Extent1.STUS_ID
		  )  Project1
        ORDER BY Project1.C1 ASC
    </select>
    
     <select id="selectUser" parameterType="Map" resultType="egovMap">
        <![CDATA[
        SELECT 
		 Extent1 . USER_ID   UserID , 
		 Extent1 . USER_NAME   UserName , 
		 Extent1 . USER_PASSWD   UserPassword , 
		 Extent1 . USER_FULL_NAME   UserFullName , 
		 Extent1 . USER_EMAIL   UserEmail , 
		 Extent1 . USER_STUS_ID   UserStatusID , 
		 Extent1 . USER_BRNCH_ID   UserBranchID , 
		 Extent1 . USER_DEPT_ID   UserDeptID , 
		 Extent1 . USER_UPD_USER_ID   UserUpdateBy , 
		 Extent1 . USER_UPD_DT   UserUpdateAt , 
		 Extent1 . USER_SYNC_CHK   UserSyncCheck , 
		 Extent1 . USER_NRIC   UserNRIC , 
		 Extent1 . USER_DT_JOIN   UserDateJoin , 
		 Extent1 . USER_GSEC_SYN_CHK   UserGsecSynCheck , 
		 Extent1 . USER_PASSWD_LAST_UPD_DT   UserPasswdLastUpdateAt , 
		 Extent1 . USER_TYPE_ID   UserTypeID , 
		 Extent1 . USER_DFLT_PAS_SWD   UserDefaultPasswd , 
		 Extent1 . USER_VAL_ID_FROM   UserValidFrom , 
		 Extent1 . USER_VAL_ID_TO   UserValidTo , 
		 Extent1 . USER_SEC_QUES_ID   UserSecQuesID , 
		 Extent1 . USER_SEC_QUES_ANS   UserSecQuesAns , 
		 Extent1 . USER_WORK_NO   UserWorkNo , 
		 Extent1 . USER_MOBILE_NO   UserMobileNo , 
		 Extent1 . USER_EXT_NO   UserExtNo , 
		 Extent1 . USER_IS_PART_TM   UserIsPartTime , 
		 Extent1 . USER_DEPT_ID   UserDepartmentID , 
		 Extent1 . USER_IS_EXTRNL   UserIsExternal 
		FROM SYS0047M  Extent1 
		WHERE (1 =  Extent1 . USER_STUS_ID ) AND (1 <>  Extent1 . USER_TYPE_ID ) AND (2 <>  Extent1 . USER_TYPE_ID ) AND (3 <>  Extent1 . USER_TYPE_ID )
		ORDER BY  Extent1 . USER_NAME  ASC
		]]>
    </select>
    
    <select id="selectMemberList" parameterType="Map" resultType="egovMap">
        <![CDATA[
	       SELECT row_number,
			Project1.MEM_ID MemberID, 
			Project1.MEM_TYPE  MemberType, 
			Project1.MEM_CODE MemberCode, 
			Project1.CODE_NAME CodeName, 
			Project1.NAME Name, 
			Project1.NRIC NRIC, 
			Project1.NAME1 NAME1, 
			Project1.UPD_DT Updated, 
			Project1.STUS Status, 
			Project1.C1 C1
			FROM ( SELECT Project1.C1 C1,
			         Project1.MEM_ID MEM_ID,
			         Project1.MEM_CODE MEM_CODE,
			         Project1.MEM_TYPE MEM_TYPE,
			         Project1.NAME NAME,
			         Project1.NRIC NRIC, 
			         Project1.STUS STUS, 
			        TO_CHAR(Project1.UPD_DT,'DD-MM-YYYY') UPD_DT,
			         Project1.CODE_NAME CODE_NAME, 
			         Project1.NAME1 NAME1, 
			         row_number() OVER (ORDER BY Project1.MEM_CODE ASC) AS row_number
			    FROM ( SELECT 
			        GroupBy1.A1 C1, 
			        Extent1.MEM_ID MEM_ID, 
			        Extent1.MEM_CODE MEM_CODE, 
			        Extent1.MEM_TYPE MEM_TYPE, 
			        Extent1.NAME NAME, 
			        Extent1.NRIC NRIC, 
			        Extent1.STUS STUS, 
			        Extent1.UPD_DT UPD_DT, 
			        Extent2.CODE_NAME CODE_NAME, 
			        Extent3.NAME NAME1
			        FROM   ORG0001D Extent1
			        INNER JOIN SYS0013M Extent2 ON Extent1.MEM_TYPE = Extent2.CODE_ID
			        INNER JOIN SYS0038M Extent3 ON Extent1.STUS = Extent3.STUS_CODE_ID
			        CROSS JOIN  (SELECT 
			            COUNT(1) A1
			            FROM ORG0001D Extent4
			             WHERE 1=1
			             ]]>
			             <if test="memTypeCom != null and memTypeCom != ''">
			               AND  Extent4.MEM_TYPE =  #{memTypeCom}
			             </if>
			             <if test="code != null and code != ''">
                           AND  Extent4.MEM_CODE LIKE  '%' ||  #{code} || '%'
                         </if>
                         <if test="name != null and name != ''">
                           AND  Extent4.NAME LIKE '%' || #{name} || '%'
                         </if>
                         <if test="icNum != null and icNum != ''">
                           AND  Extent4.NRIC LIKE   '%' || #{icNum} || '%'
                         </if>
                         <if test="birth != null and birth != ''">
                           AND  TO_CHAR(TO_DATE(Extent4.DOB, 'YYYY-MM-DD'), 'DD/MM/YYYY') =  #{birth}
                         </if>
                         <if test="nation != null and nation != ''">
                           AND  Extent4.NATION =  #{nation}
                         </if>
                         <if test="race != null and race != ''">
                           AND  Extent4.RACE =  #{race}
                         </if>
                         <if test="status != null and status != ''">
                           AND  Extent4.STUS =  #{status}
                         </if>
                         <if test="keyUser != null and keyUser != ''">
                           AND  Extent4.CRT_USER_ID =  #{keyUser}
                         </if>
                         <if test="keyBranch != null and keyBranch != ''">
                           AND  Extent4.BRNCH =  #{keyBranch}
                         </if>
                          <if test="createDate != '' and endDate == '' ">
                            <![CDATA[ AND  Extent4.CRT_DT  >= TO_DATE(#{createDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="endDate !='' and createDate == '' ">
                            <![CDATA[  AND Extent4.CRT_DT <=  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="createDate != '' and endDate != '' ">
                            <![CDATA[  AND Extent4.CRT_DT  between TO_DATE(#{createDate}, 'DD/MM/YYYY') and  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                         <if test="contact != null and contact != ''">
                            AND (( Extent4.TEL_HUSE LIKE '%' || #{contact}|| '%' ) OR ( Extent4.TEL_OFFICE LIKE '%' || #{contact}|| '%' ) OR ( Extent4.TEL_MOBILE LIKE '%' || #{contact}|| '%' ) ) AND ( Extent4.TEL_MOBILE = #{contact} OR Extent4.TEL_HUSE = #{contact} OR Extent4.TEL_OFFICE = #{contact})
                         </if>
			            )  GroupBy1			         
			            WHERE 1=1
			            <if test="memTypeCom != null and memTypeCom != ''">
                          AND   Extent1.MEM_TYPE =  #{memTypeCom}
                         </if>
                         <if test="code != null and code != ''">
                           AND  Extent1.MEM_CODE LIKE  '%' ||  #{code} || '%'
                         </if>
                         <if test="name != null and name != ''">
                           AND  Extent1.NAME LIKE '%' || #{name} || '%'
                         </if>
                         <if test="icNum != null and icNum != ''">
                           AND  Extent1.NRIC LIKE   '%' || #{icNum} || '%'
                         </if>
                         <if test="birth != null and birth != ''">
                           AND  TO_CHAR(TO_DATE(Extent1.DOB, 'YYYY-MM-DD'), 'DD/MM/YYYY') =  #{birth}
                         </if>
                          <if test="nation != null and nation != ''">
                           AND  Extent1.NATION =  #{nation}
                         </if>
                         <if test="race != null and race != ''">
                           AND Extent1.RACE =  #{race}
                         </if>
                         <if test="status != null and status != ''">
                           AND  Extent1.STUS =  #{status}
                         </if>
                         <if test="keyUser != null and keyUser != ''">
                           AND  Extent1.CRT_USER_ID =  #{keyUser}
                         </if>
                         <if test="keyBranch != null and keyBranch != ''">
                           AND  TO_NUMBER(Extent1.BRNCH,99999.99) =  #{keyBranch}
                         </if>
                         <if test="createDate != '' and endDate == '' ">
                            <![CDATA[ AND  Extent1.CRT_DT  >= TO_DATE(#{createDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="endDate != '' and createDate == '' ">
                            <![CDATA[  AND Extent1.CRT_DT <=  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="createDate != '' and endDate != '' ">
                            <![CDATA[  AND Extent1.CRT_DT  between TO_DATE(#{createDate}, 'DD/MM/YYYY') and  TO_DATE(#{endDate}, 'DD/MM/YYYY') ]]>
                         </if>
                          <if test="contact != null and contact != ''">
                            AND  ((Extent1.TEL_HUSE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.TEL_OFFICE LIKE '%' || #{contact}|| '%' ) OR ( Extent1.TEL_MOBILE LIKE '%' || #{contact}|| '%' ) ) AND ( Extent1.TEL_MOBILE = #{contact} OR Extent1.TEL_HUSE = #{contact} OR Extent1.TEL_OFFICE = #{contact})
                         </if>
                  <![CDATA[
			    )   Project1
			)  Project1
			WHERE Project1.row_number >  0
			ORDER BY Project1.MEM_CODE ASC
			 ]]>
    </select>
    
    <resultMap id="clobMap" type="EgovMap">
        <result property="C59" column="C59" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>
    
    
    <select id="selectMemberListView" parameterType="Map" resultType="egovMap">
    <![CDATA[
        SELECT Limit1.MEM_ID MEM_ID  ,
       Limit1.ADDR1 ADDR1  ,
       Limit1.ADDR2 ADDR2  ,
       Limit1.ADDR3 ADDR3  ,
       Limit1.C1 C1  ,
       Limit1.C2 C2  ,
       Limit1.C3 C3  ,
       Limit1.C4 C4  ,
       Limit1.C5 C5  ,
       Limit1.C6 C6  ,
       Limit1.C7 C7  ,
       Limit1.C8 C8  ,
       Limit1.C9 C9  ,
       Limit1.EMAIL EMAIL  ,
       Limit1.GENDER GENDER  ,
       Limit1.C10 C10  ,
       Limit1.C11 C11  ,
       Limit1.C12 C12  ,
       Limit1.C13 C13  ,
       Limit1.C14 C14  ,
       Limit1.C15 C15  ,
       Limit1.C16 C16  ,
       Limit1.C17 C17  ,
       Limit1.C18 C18  ,
       Limit1.C19 C19  ,
       Limit1.C20 C20  ,
       Limit1.C21 C21  ,
       Limit1.C22 C22  ,
       Limit1.C23 C23  ,
       Limit1.C24 C24  ,
       Limit1.C25 C25  ,
       Limit1.C26 C26  ,
       Limit1.C27 C27  ,
       Limit1.C28 C28  ,
       Limit1.BANK BANK  ,
       Limit1.BANK_ACC_NO BANK_ACC_NO  ,
       Limit1.C29 C29  ,
       Limit1.C30 C30  ,
       Limit1.C31 C31  ,
       Limit1.C32 C32  ,
       Limit1.NAME1 NAME  ,
       Limit1.MEM_CODE MEM_CODE  ,
       Limit1.NAME NAME1  ,
       Limit1.NRIC NRIC  ,
       Limit1.MEM_TYPE MEM_TYPE  ,
       Limit1.CODE_NAME CODE_NAME  ,
       Limit1.C33 C33  ,
       Limit1.C34 C34  ,
       Limit1.C35 C35  ,
       Limit1.C36 C36  ,
       Limit1.C37 C37  ,
       Limit1.C38 C38  ,
       Limit1.C39 C39  ,
       Limit1.C40 C40  ,
       Limit1.C41 C41  ,
       Limit1.C42 C42  ,
       Limit1.C43 C43  ,
       Limit1.C44 C44  ,
       Limit1.C45 C45  ,
       Limit1.C46 C46  ,
       Limit1.C47 C47  ,
       Limit1.C48 C48  ,
       Limit1.C49 C49  ,
       Limit1.C50 C50  ,
       Limit1.C51 C51  ,
       Limit1.C52 C52  ,
       Limit1.C53 C53  ,
       Limit1.C54 C54  ,
       Limit1.C55 C55  ,
       Limit1.C56 C56  ,
       Limit1.TR_NO TR_NO  ,
       Limit1.TEL_MOBILE TEL_MOBILE  ,
       Limit1.TEL_HUSE TEL_HUSE  ,
       Limit1.TEL_OFFICE TEL_OFFICE  ,
       Limit1.C57 C57  ,
       Limit1.SPUSE_CODE SPUSE_CODE  ,
       Limit1.SPOUSE_NAME SPOUSE_NAME  ,
       Limit1.SPOUSE_NRIC SPOUSE_NRIC  ,
       Limit1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
       Limit1.C58 C58  ,
       Limit1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
       Limit1.C59 C59  ,
       Limit1.RANK RANK  ,
       Limit1.C60 C60  ,
       Limit1.HSPTLZ  HSPTLZ 
  FROM (
SELECT Extent1.MEM_ID MEM_ID  ,
                Extent1.MEM_CODE MEM_CODE  ,
                Extent1.MEM_TYPE MEM_TYPE  ,
                Extent1.NAME NAME  ,
                Extent1.NRIC NRIC  ,
                Extent1.GENDER GENDER  ,
                Extent1.ADDR1 ADDR1  ,
                Extent1.ADDR2 ADDR2  ,
                Extent1.ADDR3 ADDR3  ,
                Extent1.TEL_OFFICE TEL_OFFICE  ,
                Extent1.TEL_HUSE TEL_HUSE  ,
                Extent1.TEL_MOBILE TEL_MOBILE  ,
                Extent1.EMAIL EMAIL  ,
                Extent1.SPUSE_CODE SPUSE_CODE  ,
                Extent1.SPOUSE_NAME SPOUSE_NAME  ,
                Extent1.SPOUSE_NRIC SPOUSE_NRIC  ,
                Extent1.SPOUSE_OCPAT SPOUSE_OCPAT  ,
                Extent1.SPOUSE_TEL_CNTC SPOUSE_TEL_CNTC  ,
                Extent1.BANK BANK  ,
                Extent1.BANK_ACC_NO BANK_ACC_NO  ,
                Extent1.RANK RANK  ,
                Extent1.TR_NO TR_NO  ,
                Extent1.HSPTLZ HSPTLZ  ,
                Extent2.NAME NAME1  ,
                Extent3.CODE_NAME CODE_NAME   ,
                CASE 
                     WHEN ( Extent1.AREAL IS NOT NULL ) THEN Extent1.AREAL
                ELSE 0
                   END C1  ,
                CASE 
                     WHEN ( Extent6.AREA_ID IS NOT NULL ) THEN Extent6.AREA_NAME
                ELSE ''
                   END C2  ,
                CASE 
                     WHEN ( Extent1.BRNCH IS NOT NULL ) THEN TO_NUMBER(Extent1.BRNCH,99999.99)
                ELSE 0
                   END C3  ,
                CASE 
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.CODE
                ELSE ''
                   END C4  ,
                CASE 
                     WHEN ( Extent10.BRNCH_ID IS NOT NULL ) THEN Extent10.NAME
                ELSE ''
                   END C5  ,
                CASE 
                     WHEN ( Extent1.CNTY IS NOT NULL ) THEN TO_NUMBER(Extent1.CNTY,99999.99)
                ELSE 0
                   END C6  ,
                CASE 
                     WHEN ( Extent9.CNTY_ID IS NOT NULL ) THEN Extent9.NAME
                ELSE ''
                   END C7  ,
                CASE 
                     WHEN ( Extent1.EDC_LEV IS NOT NULL ) THEN TO_NUMBER(Extent1.EDC_LEV,99999.99)
                ELSE 0
                   END C8  ,
                CASE 
                     WHEN ( Extent11.CODE_ID IS NOT NULL ) THEN Extent11.CODE_NAME
                ELSE ''
                   END C9  ,
                CASE 
                     WHEN ( Extent1.LANG IS NOT NULL ) THEN TO_NUMBER(Extent1.LANG,99999.99)
                ELSE 0
                   END C10  ,
                CASE 
                     WHEN ( Extent12.CODE_ID IS NOT NULL ) THEN Extent12.CODE_NAME
                ELSE ''
                   END C11  ,
                CASE 
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.MEM_CODE
                ELSE ''
                   END C12  ,
                CASE 
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.NAME
                ELSE ''
                   END C13  ,
                CASE 
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_MOBILE
                ELSE ''
                   END C14  ,
                CASE 
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_OFFICE
                ELSE ''
                   END C15  ,
                CASE 
                     WHEN ( Extent13.MEM_ID IS NOT NULL ) THEN Extent13.TEL_HUSE
                ELSE ''
                   END C16  ,
                CASE 
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.MEM_CODE
                ELSE ''
                   END C17  ,                    
                CASE 
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.NAME
                ELSE ''
                   END C18  ,
                CASE 
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_MOBILE
                ELSE ''
                   END C19  ,
                CASE 
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_OFFICE
                ELSE ''
                   END C20  ,
                CASE 
                     WHEN ( Extent14.MEM_ID IS NOT NULL ) THEN Extent14.TEL_HUSE
                ELSE ''
                   END C21  ,
                CASE 
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.MEM_CODE
                ELSE ''
                   END C22  ,
                CASE 
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.NAME
                ELSE ''
                   END C23  ,
                CASE 
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_MOBILE
                ELSE ''
                   END C24  ,
                CASE 
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_OFFICE
                ELSE ''
                   END C25  ,
                CASE 
                     WHEN ( Extent15.MEM_ID IS NOT NULL ) THEN Extent15.TEL_HUSE
                ELSE ''
                   END C26  ,
                CASE 
                     WHEN ( Extent1.MARTL IS NOT NULL ) THEN TO_NUMBER(Extent1.MARTL,99999.99)
                ELSE 0
                   END C27  ,
                CASE 
                     WHEN ( Extent21.CODE_ID IS NOT NULL ) THEN Extent21.CODE_NAME
                ELSE ''
                   END C28  ,
                CASE 
                     WHEN ( Extent1.DOB IS NOT NULL ) THEN to_char(TO_DATE(Extent1.DOB,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C29  ,
                CASE 
                     WHEN ( Extent1.JOIN_DT IS NOT NULL ) THEN to_char(TO_DATE(Extent1.JOIN_DT,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C30  ,
                CASE 
                     WHEN ( Extent25.USER_VAL_ID_TO IS NOT NULL ) THEN to_char(TO_DATE(Extent25.USER_VAL_ID_TO,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C31  ,
                CASE 
                     WHEN ( Extent1.STUS IS NOT NULL ) THEN Extent1.STUS
                ELSE 0
                   END C32   ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_UP_ID
                ELSE 0
                   END C33  ,
                CASE 
                     WHEN ( Extent22.WH_LOC_ID IS NOT NULL ) THEN Extent22.WH_LOC_ID
                ELSE 0
                   END C34  ,
                CASE 
                     WHEN ( Extent1.NATION IS NOT NULL ) THEN TO_NUMBER(Extent1.NATION,99999.99)
                ELSE 0
                   END C35  ,
                CASE 
                     WHEN ( Extent17.CNTY_ID IS NOT NULL ) THEN Extent17.NAME
                ELSE ''
                   END C36  ,
                CASE 
                     WHEN ( Extent1.POST_CODE IS NOT NULL ) THEN Extent1.POST_CODE
                ELSE 0
                   END C37  ,
                CASE 
                     WHEN ( Extent7.POST_CODE_ID IS NOT NULL ) THEN Extent7.POST_CODE
                ELSE ''
                   END C38  ,
                CASE 
                     WHEN ( Extent1.RACE IS NOT NULL ) THEN TO_NUMBER(Extent1.RACE,99999.99)
                ELSE 0
                   END C39  ,
                CASE 
                     WHEN ( Extent18.CODE_ID IS NOT NULL ) THEN Extent18.CODE_NAME
                ELSE ''
                   END C40,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.DEPT_CODE
                ELSE ''
                   END C41  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.GRP_CODE
                ELSE ''
                   END C42  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.ORG_CODE
                ELSE ''
                   END C43  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.MEM_LVL
                ELSE 0
                   END C44  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL3_UP_ID
                ELSE 0
                   END C45  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL2_UP_ID
                ELSE 0
                   END C46  ,
                CASE 
                     WHEN ( NOT ( ( Extent4.MEM_ID IS NULL )
                       AND ( Extent4.MEM_CODE IS NULL )
                       AND ( Extent4.MEM_LVL IS NULL )
                       AND ( Extent4.DEPT_CODE IS NULL )
                       AND ( Extent4.GRP_CODE IS NULL )
                       AND ( Extent4.ORG_CODE IS NULL )
                       AND ( Extent4.TOP_ORG_CODE IS NULL )
                       AND ( Extent4.MEM_UP_ID IS NULL )
                       AND ( Extent4.LVL3_UP_ID IS NULL )
                       AND ( Extent4.LVL2_UP_ID IS NULL )
                       AND ( Extent4.LVL1_UP_ID IS NULL )
                       AND ( Extent4.LVL0_UP_ID IS NULL ) ) ) THEN Extent4.LVL1_UP_ID
                ELSE 0
                   END C47,  
               CASE 
                     WHEN ( Extent1.RESIGN_DT IS NOT NULL ) THEN to_char(TO_DATE(Extent1.RESIGN_DT,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C48  ,
                CASE 
                     WHEN ( Extent1.STATE IS NOT NULL ) THEN TO_NUMBER(Extent1.STATE,99999.99)
                ELSE 0
                   END C49  ,
                CASE 
                     WHEN ( Extent8.STATE_ID IS NOT NULL ) THEN Extent8.NAME
                ELSE ''
                   END C50  ,
                CASE 
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.MEM_CODE
                ELSE ''
                   END C51  ,
                CASE 
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NAME
                ELSE ''
                   END C52  ,
                CASE 
                     WHEN ( Extent20.MEM_ID IS NOT NULL ) THEN Extent20.NRIC
                ELSE ''
                   END C53  ,
                CASE 
                     WHEN ( Extent1.TRM_DT IS NOT NULL ) THEN to_char(TO_DATE(Extent1.TRM_DT,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C54  ,
                CASE 
                     WHEN ( Extent1.TRNSPRT IS NOT NULL ) THEN Extent1.TRNSPRT
                ELSE 0
                   END C55  ,
                CASE 
                     WHEN ( Extent19.CODE_ID IS NOT NULL ) THEN Extent19.CODE_NAME
                ELSE ''
                   END C56  ,
                CASE 
                     WHEN ( Extent5.MEM_ORG_DESC_ID IS NOT NULL ) THEN Extent5.MEM_ORG_DESC
                ELSE ''
                   END C57  ,
                CASE 
                     WHEN ( Extent1.SPOUSE_DOB IS NOT NULL ) THEN to_char(TO_DATE(Extent1.SPOUSE_DOB,'yyyy-mm-dd'),'dd-mm-yyyy')
                ELSE ''
                   END C58  ,
                CASE 
                     WHEN dbms_lob.getlength(Extent23.CODE_DESC) = 0 THEN null
                ELSE Extent23.CODE_DESC
                   END C59  ,
                CASE 
                     WHEN ( Extent24.CODE_NAME IS NULL ) THEN ''
                ELSE Extent24.CODE_NAME
                   END C60  
         FROM ORG0001D Extent1 
                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS
                JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.MEM_TYPE
        LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID  
                            FROM ORG1001V vMemberOrg  ) Extent4   ON Extent4.MEM_ID = Extent1.MEM_ID
                LEFT JOIN ORG0012D Extent5   ON ( Extent5.MEM_ORG_LVL = Extent4.MEM_LVL )
                AND ( Extent5.MEM_TYPE_ID = Extent1.MEM_TYPE )
                LEFT JOIN SYS0039M Extent6   ON Extent6.AREA_ID = Extent1.AREAL
                LEFT JOIN SYS0030C Extent7   ON Extent7.POST_CODE_ID = Extent1.POST_CODE
                LEFT JOIN SYS0035M Extent8   ON Extent8.STATE_ID = TO_NUMBER(Extent1.STATE,99999.99)
                LEFT JOIN SYS0015M Extent9   ON Extent9.CNTY_ID = TO_NUMBER(Extent1.CNTY,99999.99)
                LEFT JOIN SYS0005M Extent10   ON Extent10.BRNCH_ID = UTILS.CONVERT_TO_NUMBER(Extent1.BRNCH,99999.99)
                LEFT JOIN SYS0013M Extent11   ON Extent11.CODE_ID = TO_NUMBER(Extent1.EDC_LEV,99999.99)
                LEFT JOIN SYS0013M Extent12   ON Extent12.CODE_ID = TO_NUMBER(Extent1.LANG,99999.99)
                LEFT JOIN ORG0001D Extent13   ON Extent13.MEM_ID = Extent4.LVL1_UP_ID
                LEFT JOIN ORG0001D Extent14   ON Extent14.MEM_ID = Extent4.LVL2_UP_ID
                LEFT JOIN ORG0001D Extent15   ON Extent15.MEM_ID = Extent4.LVL3_UP_ID
                LEFT JOIN SYS0013M Extent16   ON Extent16.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0015M Extent17   ON Extent17.CNTY_ID = TO_NUMBER(Extent1.NATION,99999.99)
                LEFT JOIN SYS0013M Extent18   ON Extent18.CODE_ID = TO_NUMBER(Extent1.RACE,99999.99)
                LEFT JOIN SYS0013M Extent19   ON Extent19.CODE_ID = Extent1.TRNSPRT
                LEFT JOIN ORG0001D Extent20   ON Extent20.MEM_CODE = Extent1.SPONS_CODE
                LEFT JOIN SYS0013M Extent21   ON Extent21.CODE_ID = TO_NUMBER(Extent1.MARTL,99999.99)
                LEFT JOIN SYS0028M Extent22   ON ( Extent22.WH_LOC_CODE = Extent1.MEM_CODE )
                AND ( Extent1.MEM_TYPE IN ( 2,3 )
               )
        LEFT JOIN SYS0013M Extent23   ON Extent23.CODE_ID = Extent1.RANK
                LEFT JOIN SYS0013M Extent24   ON Extent24.CODE_ID = TO_NUMBER(Extent1.BIZ_TYPE,99999.99)
                LEFT JOIN SYS0047M Extent25   ON Extent25.USER_FULL_NAME = Extent1.FULL_NAME
          WHERE  Extent1.MEM_ID = #{MemberID} AND ROWNUM <= 1  ) Limit1
           ]]>
    </select>
    
    <resultMap id="clobMap1" type="EgovMap">
        <result property="CODE_DESC" column="CODE_DESC" jdbcType="CLOB"  javaType="java.lang.String" />
        <result property="REM" column="REM" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>
    
    <select id="selectPromote" parameterType="Map" resultType="egovMap">
            <![CDATA[
                 SELECT 
                 Extent1.PROMO_ID PROMO_ID, 
                 Extent1.MEM_TYPE_ID MEM_TYPE_ID, 
                 Extent4.CODE_DESC CODE_DESC, 
                 Extent1.MEM_LVL_FROM MEM_LVL_FROM, 
                 Extent2.MEM_ORG_DESC MEM_ORG_DESC, 
                 Extent1.MEM_LVL_TO MEM_LVL_TO, 
                 Extent3.MEM_ORG_DESC MEMORGDESCRIPTION1, 
                 Extent1.DEPT_CODE_FROM DEPT_CODE_FROM, 
                 Extent1.DEPT_CODE_TO DEPT_CODE_TO, 
                 Extent1.PARENT_DEPT_CODE_TO PARENT_DEPT_CODE_TO, 
                 Extent1.REM REM, 
                 Extent5.USER_NAME USER_NAME, 
                 TO_CHAR(TO_DATE(Extent1.CRT_DT ,'YYYY-MM-DD'),'DD-MM-YYYY') CRT_DT
                 FROM    ORG0007D Extent1
                 INNER JOIN ORG0012D Extent2 ON (Extent2.MEM_TYPE_ID = Extent1.MEM_TYPE_ID) AND (Extent2.MEM_ORG_LVL = Extent1.MEM_LVL_FROM)
                 INNER JOIN ORG0012D Extent3 ON (Extent3.MEM_TYPE_ID = Extent1.MEM_TYPE_ID) AND (Extent3.MEM_ORG_LVL = Extent1.MEM_LVL_TO)
                 INNER JOIN SYS0013M Extent4 ON Extent4.CODE_ID = Extent1.PROMO_TYPE_ID
                 INNER JOIN SYS0047M Extent5 ON Extent5.USER_ID = Extent1.CRT_USER_ID
                 WHERE Extent1.MEM_ID = #{MemberID} AND 4 = Extent1.STUS_ID
                  ]]>
    </select>
    
    <select id="selectDocSubmission" parameterType="Map" resultType="egovMap">
                    SELECT Project1.DOC_TYPE_ID DOC_TYPE_ID  ,
			       Project1.CODE_NAME CODE_NAME  ,
			       Project1.DOC_COPY_QTY DOC_COPY_QTY  
			        FROM ( SELECT Extent1.DOC_TYPE_ID DOC_TYPE_ID  ,
			                Extent1.DOC_COPY_QTY DOC_COPY_QTY  ,
			                Extent2.CODE_NAME CODE_NAME  
			       FROM ORG0010D Extent1
			                JOIN SYS0013M Extent2   ON Extent2.CODE_ID = Extent1.DOC_TYPE_ID
			       WHERE  ( 247 = Extent1.DOC_SUB_TYPE_ID )
			                   AND ( Extent1.DOC_MEM_ID =  #{MemberID})
			                   AND ( 1 = Extent1.STUS_ID ) ) Project1
			         ORDER BY Project1.CODE_NAME ASC
    </select>
    
    
    <select id="selectPaymentHistory" parameterType="Map" resultType="egovMap">
           SELECT Project1.MEM_ID MEM_ID  ,
			       Project1.OR_NO OR_NO  ,
			       Project1.C1 C1  ,
			       Project1.BILL_NO BILL_NO  ,
			       Project1.CODE_NAME CODE_NAME  ,
			       Project1.C2 C2  ,
			       Project1.C3 C3  ,
			       Project1.C4 C4  
				  FROM ( SELECT Extent1.MEM_ID MEM_ID  ,
	                Extent2.BILL_NO BILL_NO  ,
	                Extent3.CODE_NAME CODE_NAME  ,
	                Extent4.OR_NO OR_NO  ,
	               TO_CHAR(TO_DATE(Extent4.PAY_DATA,'YYYY-MM-DD'),'DD-MM-YYYY') C1  ,
	                CASE 
	                     WHEN ( Extent4.TOT_AMT IS NOT NULL ) THEN Extent4.TOT_AMT
	                ELSE 0
	                   END C2  ,
	                TO_CHAR(TO_DATE(Extent4.CRT_DT,'YYYY-MM-DD'),'DD-MM-YYYY') C3  ,
	                CASE 
	                     WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME
	                ELSE ''
	                   END C4  
	         FROM ORG0001D Extent1
	                JOIN PAY0007D Extent2   ON Extent2.BILL_MEM_ID = Extent1.MEM_ID
	                JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent2.BILL_PAY_TYPE_ID
	                JOIN PAY0064D Extent4   ON ( Extent4.BILL_ID = Extent2.BILL_ID )
	                AND ( Extent4.TYPE_ID IN ( 102,224,225,226 )
	               )
	                LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent4.CRT_USER_ID
	          WHERE  Extent1.MEM_ID = #{MemberID}) Project1
	           ORDER BY Project1.C1 ASC
    </select>
    
    
    
    <select id="selectRenewalHistory" parameterType="Map" resultType="egovMap">
             SELECT Project1.AG_ID AG_ID  ,
			       Project1.C1 C1  ,
			       Project1.C2 C2  ,
			       Project1.AG_EXPR_DT AG_EXPR_DT  ,
			       Project1.AG_CRT_DT AG_CRT_DT  ,
			       Project1.MEM_CODE MEM_CODE  
			  FROM ( SELECT Extent1.AG_ID AG_ID  ,
			                TO_CHAR(TO_DATE(Extent1.AG_EXPR_DT,'YYYY-MM-DD'),'DD-MM-YYYY') AG_EXPR_DT  ,
			                TO_CHAR(Extent1.AG_CRT_DT,'DD-MM-YYYY') AG_CRT_DT  ,
			                Extent2.MEM_CODE MEM_CODE  ,
			                'PA' C1,
			                'PA Renewal' C2
			         FROM ORG0002D Extent1
			                JOIN ORG0001D Extent2   ON ( Extent2.MEM_ID = Extent1.MEM_ID )
			                AND ( 1 = Extent1.AG_STUS_ID )
			          WHERE  ( Extent1.MEM_ID = #{MemberID} )
			                   AND ( Extent1.AG_TYPE_ID = 1416 ) ) Project1
			  ORDER BY Project1.AG_ID ASC
    </select>
    
    <resultMap id="clobMap2" type="EgovMap">
        <result property="CODE_NAME" column="CODE_NAME" jdbcType="CLOB"  javaType="java.lang.String" />
    </resultMap>
    
    <select id="selectDocSubmission2" parameterType="Map" resultType="egovMap">
    <![CDATA[
            SELECT Project1.TYPE_DT_SEQ TYPE_DT_SEQ  ,
		       Project1.TYPE_ID TYPE_ID  ,
		       Project1.CODE_DESC CODE_NAME  ,
		       Project1.C1 DOC_COPY_QTY  ,
		       Project1.C2 C2  
		  FROM ( SELECT Extent1.CODE_DESC CODE_DESC  ,
		                Extent2.TYPE_ID TYPE_ID  ,
		                Extent2.TYPE_DT_SEQ TYPE_DT_SEQ  ,
		                CASE 
		                     WHEN ( Extent3.DOC_COPY_QTY IS NULL ) THEN 0
		                ELSE Extent3.DOC_COPY_QTY
		                   END C1  ,
		                CASE 
		                     WHEN ( ( Extent3.DOC_COPY_QTY IS NOT NULL )
		                       OR ( 0 <> Extent3.DOC_COPY_QTY ) ) THEN UTILS.CONVERT_TO_NUMBER(1,1,0)
		                ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
		                   END C2  
		         FROM SYS0013M Extent1
		                JOIN ORG0013C Extent2   ON Extent1.CODE_ID = Extent2.TYPE_ID
		                LEFT JOIN ORG0010D Extent3   ON ( Extent3.DOC_TYPE_ID = Extent2.TYPE_ID )
		                AND ( Extent3.DOC_MEM_ID =  #{MemberID} )
		                AND ( 1 = Extent3.STUS_ID )
		          WHERE  ( 1 = Extent2.STUS_ID )
		                   AND ( Extent2.TYPE_CODE_ID = 1417 )
		                   AND ( Extent2.TYPE_GRP_ID = 1417 ) ) Project1
		  ORDER BY Project1.TYPE_DT_SEQ ASC
		    ]]>
    </select>
    
    <select id="selectIssuedBank" parameterType="Map" resultType="egovMap">
		   SELECT Project1.BANK_ID BANK_ID  ,
		       Project1.C1 C1  
		  FROM ( SELECT Extent1.BANK_ID BANK_ID  ,
		                Extent1.CODE CODE  ,
		                Extent1.CODE || ' - ' || Extent1.NAME C1  
		         FROM SYS0004M Extent1
		                JOIN ORG0014D Extent2   ON Extent1.BANK_ID = Extent2.BANK_ID
		          WHERE  ( 848 = Extent2.TYPE_ID )
		                   AND ( 1 = Extent1.STUS_CODE_ID )
		                   AND ( 1 = Extent2.STUS_CODE_ID ) ) Project1
		  ORDER BY Project1.CODE ASC
    </select>
    
     <select id="selectApplicantConfirm" parameterType="Map" resultType="egovMap">
     <![CDATA[
           SELECT Limit1.CNFM_DT CNFM_DT  
		  FROM ( SELECT TO_CHAR(Extent2.CNFM_DT,'YYYY-MM-DD') CNFM_DT  
		         FROM ORG0001D Extent1
		         JOIN ORG0003D Extent2   ON Extent2.APLCTN_ID = Extent1.APLICNT_ID
		          WHERE  ( Extent1.MEM_ID =  #{MemberID} )
		     AND ( 1 = Extent1.STUS ) AND ROWNUM <= 1 ) Limit1
		]]>
    </select>
    
    <select id="selectCodyPAExpired" parameterType="Map" resultType="egovMap">
     <![CDATA[
          SELECT Extent1.AG_EXPR_DT AG_EXPR_DT  
		  FROM ORG0002D Extent1
		 WHERE  ( Extent1.MEM_ID = #{MemberID} )
          AND ( 1 = Extent1.AG_STUS_ID ) AND ROWNUM <= 1
        ]]>
    </select>
    
    
    <select id="selectDocNo" parameterType="String" resultType="egovMap">
     <![CDATA[
		 SELECT Extent1.DOC_NO_ID DOC_NO_ID  ,
		       CASE 
		            WHEN ( Extent1.DOC_NO IS NOT NULL ) THEN Extent1.DOC_NO
		       ELSE ''
		          END C1  ,
		       CASE 
		            WHEN ( Extent1.DOC_NO_PREFIX IS NOT NULL ) THEN Extent1.DOC_NO_PREFIX
		       ELSE ''
		          END C2  
		  FROM SYS0022C Extent1
		 WHERE  Extent1.DOC_NO_ID =#{docNoId}  AND ROWNUM <= 1
        ]]>
    </select>
    
     <update id="updateDocNo" parameterType="Map">
     <![CDATA[
        UPDATE SYS0022C
         SET DOC_NO = #{nextDocNo}
           WHERE  ( DOC_NO_ID = #{docNoId} )
        ]]>
    </update>
    
     <insert id="insertMember" parameterType="Map">
        INSERT INTO ORG0001D
        ( MEM_ID 
        , MEM_CODE
        , MEM_TYPE
        , NAME
        , FULL_NAME
        , PASSWD
        , NRIC
        , DOB
        , GENDER
        , RACE
        , MARTL
        , NATION
        , ADDR1
        , ADDR2
        , ADDR3
        , ADDR4
        , AREAL
        , POST_CODE
        , STATE
        , CNTY
        , TEL_OFFICE
        , TEL_HUSE
        , TEL_MOBILE
        , EMAIL
        , SPUSE_CODE
        , SPOUSE_NAME
        , SPOUSE_NRIC
        , SPOUSE_OCPAT
        , SPOUSE_TEL_CNTC
        , SPOUSE_DOB
        , EDC_LEV
        , LANG
        , BANK
        , BANK_ACC_NO
        , SPONS_CODE
        , JOIN_DT
        , RESIGN_DT
        , TRM_DT
        , RENEW_DT
        , AGRMNT_NO
        , BRNCH
        , STUS
        , SYNC_CHK
        , RANK
        , TRNSPRT
        , PROMO_DT
        , TR_NO
        , CRT_DT
        , CRT_USER_ID
        , UPD_DT
        , UPD_USER_ID
        , MEM_IS_OUT_SRC
        , APLICNT_ID
        , BIZ_TYPE
        , HSPTLZ )
            VALUES (
             (SELECT MAX(MEM_ID)+1 FROM ORG0001D )
            , #{memberCode}
            , #{memberType}
            , #{memberNm}
            , #{fulllName}
            , #{password}
            , #{nric}
            , TO_CHAR(TO_DATE(#{Birth},'dd-mm-yyyy'),'yyyy-mm-dd')
            , #{gender}
            , #{race}
            , #{marrital}
            , #{nation}
            , #{address1}
            , #{address2}
            , #{address3}
            , #{address4}
            , #{area}
            , #{postCode}
            , #{state}
            , #{country}
            , #{officeNo}
            , #{residenceNo}
            , #{mobileNo}
            , #{email}
            , #{spouseCode}
            , #{spouseName}
            , #{spouseNric}
            , #{spouseOcc}
            , #{spouseContat}
            <if test="spouseDob != null and spouseDob != '' and spouseDob != '1900-01-01'" >
            , TO_CHAR(TO_DATE(#{spouseDob},'dd-mm-yyyy'),'yyyy-mm-dd')
            </if>
             <if test="spouseDob != null and spouseDob != '' and spouseDob == '1900-01-01'" >
            , #{spouseDob}
            </if>
            , #{educationLvl}
            , #{language}
            , #{issuedBank}
            , #{bankAccNo}
            , #{sponsorCd}
            , TO_CHAR(TO_DATE(#{joinDate},'dd-mm-yyyy'),'yyyy-mm-dd')
            , #{reSignDate}
            , #{termDate}
            , TO_CHAR(TO_DATE(#{RenewDate},'dd-mm-yyyy'),'yyyy-mm-dd')
            , #{AgrmntNo}
            , #{branch}
            , #{status}
            , #{SyncCheck}
            , #{rank}
            , #{transportCd}
            , #{promoteDate}
            , #{trNo}
            , SYSDATE
            , #{creator}
            , SYSDATE
            , #{updator}
            , #{memIsOutSource}
            , #{applicantID}
            , #{BusinessesType}
            , #{Hospitalization}
             )
    </insert>
    
    <select id="selectOranization" parameterType="Map" resultType="egovMap">
     <![CDATA[
         SELECT Extent1.MEM_ID MEM_ID  ,
	       Extent1.MEM_UP_ID MEM_UP_ID  ,
	       Extent1.MEM_LVL MEM_LVL  ,
	       Extent1.DEPT_CODE DEPT_CODE  ,
	       Extent1.ORG_UPD_USER_ID ORG_UPD_USER_ID  ,
	       Extent1.ORG_UPD_DT ORG_UPD_DT  ,
	       Extent1.PREV_DEPT_CODE PREV_DEPT_CODE  ,
	       Extent1.PREV_GRP_CODE PREV_GRP_CODE  ,
	       Extent1.PREV_MEM_ID_ID PREV_MEM_ID_ID  ,
	       Extent1.PREV_MEM_LVL PREV_MEM_LVL  ,
	       Extent1.ORG_STUS_CODE_ID ORG_STUS_CODE_ID  ,
	       Extent1.PR_CODE PR_CODE  ,
	       Extent1.PR_MEM_ID PR_MEM_ID  ,
	       Extent1.GRAND_PR_CODE GRAND_PR_CODE  ,
	       Extent1.GRAND_PR_MEM_ID GRAND_PR_MEM_ID  ,
	       Extent1.LAST_DEPT_CODE LAST_DEPT_CODE  ,
	       Extent1.LAST_GRP_CODE LAST_GRP_CODE  ,
	       Extent1.LAST_ORG_CODE LAST_ORG_CODE  ,
	       Extent1.LAST_TOP_ORG_CODE LAST_TOP_ORG_CODE  ,
	       Extent1.BRNCH_ID BRNCH_ID  
	  FROM ORG0005D Extent1
	 WHERE  ( 3 = Extent1.MEM_LVL )
          AND ( Extent1.DEPT_CODE =#{deptCode}) 
        ]]>
    </select>
    
      <select id="selectMemberId" parameterType="Map" resultType="String">
      
      <if test="code != null and code == 'mem'">
          SELECT MAX(MEM_ID) MEMBERID FROM ORG0001D
      </if>
      
      <if test="code != null and code == 'tax'">
         SELECT MAX(TAX_INVC_ID) TAXINVCID  FROM PAY0031D
      </if>
      
      <if test="code != null and code == 'memApp'">
         SELECT MAX(TAX_INVC_ID) TAXINVCID  FROM PAY0031D
      </if>
       <if test="code != null and code == 'user'">
        SELECT MAX(USER_ID)+1 FROM SYS0047M
       </if>
    </select>
    
    
    <select id="selectHpDocSubmission" parameterType="Map" resultType="egovMap">
      <![CDATA[
        SELECT Project1.CODE_ID CODE_ID  ,
           Project1.TYPE_ID TYPE_ID  ,
           Project1.CODE_DESC CODE_NAME  ,
           Project1.C1 C1  ,
           Project1.C2 C2  
        FROM ( SELECT Extent1.CODE_ID CODE_ID  ,
                    Extent1.CODE_DESC CODE_DESC ,
                    Extent2.TYPE_ID TYPE_ID  ,
                    Extent2.TYPE_DT_SEQ TYPE_DT_SEQ  ,
                    0 C1  ,
                    CASE 
                         WHEN ( 252 = Extent1.CODE_ID ) THEN UTILS.CONVERT_TO_NUMBER(1,1,0)
                    ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
                       END C2  
             FROM SYS0013M Extent1
                    JOIN ORG0013C Extent2   ON Extent1.CODE_ID = Extent2.TYPE_ID
              WHERE  ( Extent2.TYPE_CODE_ID = 247 )
                       AND ( 1 = Extent2.STUS_ID )
                       AND ( Extent2.TYPE_GRP_ID = 247 ) ) Project1
           ORDER BY Project1.TYPE_DT_SEQ
               ]]>
  </select>
  
   
  <select id="selectCodyDocSubmission" parameterType="Map" resultType="egovMap">
		        SELECT Project1.CODE_ID CODE_ID  ,
		       Project1.TYPE_ID TYPE_ID  ,
		       Project1.CODE_DESC CODE_NAME,
		       Project1.C1 C1  ,
		       Project1.C2 C2  
		  FROM ( SELECT Extent1.CODE_ID CODE_ID  ,
		                Extent1.CODE_DESC CODE_DESC,
		                Extent2.TYPE_ID TYPE_ID  ,
		                Extent2.TYPE_DT_SEQ TYPE_DT_SEQ  ,
		                0 C1  ,
		                CASE 
		                     WHEN ( 252 = Extent1.CODE_ID ) THEN UTILS.CONVERT_TO_NUMBER(1,1,0)
		                ELSE UTILS.CONVERT_TO_NUMBER(0,1,0)
		                   END C2  
		         FROM SYS0013M Extent1
		                JOIN ORG0013C Extent2   ON Extent1.CODE_ID = Extent2.TYPE_ID
		          WHERE  ( Extent2.TYPE_CODE_ID = 1417 )
		                   AND ( 1 = Extent2.STUS_ID )
		                   AND ( Extent2.TYPE_GRP_ID = 1417 ) ) Project1
		  ORDER BY Project1.TYPE_DT_SEQ ASC

  </select>
  
    <insert id="insertOrganization" parameterType="Map">
    INSERT INTO ORG0005D
        ( MEM_ID
        , MEM_UP_ID
        , MEM_LVL
        , DEPT_CODE
        , ORG_UPD_USER_ID
        , ORG_UPD_DT
        , PREV_DEPT_CODE
        , PREV_GRP_CODE
        , PREV_MEM_ID_ID
        , PREV_MEM_LVL
        , ORG_STUS_CODE_ID
        , PR_CODE
        , PR_MEM_ID
        , GRAND_PR_CODE
        , GRAND_PR_MEM_ID
        , LAST_DEPT_CODE
        , LAST_GRP_CODE
        , LAST_ORG_CODE
        , LAST_TOP_ORG_CODE
        , BRNCH_ID )
           VALUES ( 
           #{memberId}
           , #{memberUpID}
           , #{memberLvl}
           , #{deptCode}
           , #{orgUpdateBy}
           , SYSDATE
           , #{prevDeptCode}
           , #{prevGroupCode}
           , #{prevMemberUpId}
           , #{prevMemberLvl}
           , #{orgStatusCodeId}
           , #{prCode}
           , #{prMemberId}
           , #{grandPrCode}
           , #{grandPrMemberId}
           , #{lastDeptCode}
           , #{lastGrpCode}
           , #{lastOrgCode}
           , #{lastTopOrgCode}
           , #{branchId} )
  </insert>
  
  <insert id="insertAccBill" parameterType="Map">
    INSERT INTO PAY0007D
        ( BILL_ID
        , BILL_TYPE_ID
        , BILL_SO_ID
        , BILL_MEM_ID
        , BILL_AS_ID
        , BILL_PAY_TYPE_ID
        , BILL_NO
        , BILL_MEM_SHIP_NO
        , BILL_DT
        , BILL_AMT
        , BILL_REM
        , BILL_IS_PAID
        , BILL_IS_COMM
        , UPD_USER_ID
        , UPD_DT
        , SYNC_CHK
        , COURS_ID
        , STUS_ID )
          VALUES (
          (select max(bill_id)+1 from PAY0007D)
          , #{billTypeId}
          , #{billSOID}
          , #{billMemId}
          , #{billASID}
          , #{billPayTypeId}
          , #{billINo}
          , #{billMemberShipNo}
          , SYSDATE
          , #{billAmt}
          , #{billRemark}
          , #{billIsPaid}
          , #{billIsComm}
          , #{updator}
          , SYSDATE
          , #{syncCheck}
          , #{courseId}
          , #{statusId}
		 )
  </insert>
  
  <insert id="insertAccOrderBill" parameterType="Map">
	   INSERT INTO PAY0016D
	         ( ACC_BILL_ID
	         , ACC_BILL_TASK_ID
	         , ACC_BILL_REF_DT
	         , ACC_BILL_REF_NO
	         , ACC_BILL_ORD_ID
	         , ACC_BILL_ORD_NO
	         , ACC_BILL_TYPE_ID
	         , ACC_BILL_MODE_ID
	         , ACC_BILL_SCHDUL_ID
	         , ACC_BILL_SCHDUL_PRIOD
	         , ACC_BILL_ADJ_ID
	         , ACC_BILL_SCHDUL_AMT
	         , ACC_BILL_ADJ_AMT
	         , ACC_BILL_TXS_AMT
	         , ACC_BILL_NET_AMT
	         , ACC_BILL_STUS
	         , ACC_BILL_REM
	         , ACC_BILL_CRT_DT
	         , ACC_BILL_CRT_USER_ID
	         , ACC_BILL_GRP_ID
	         , ACC_BILL_TAX_CODE_ID
	         , ACC_BILL_TAX_RATE
	         , ACC_BILL_ACCT_CNVR
	         , ACC_BILL_CNTRCT_ID )
	           VALUES ( 
	           (SELECT MAX(ACC_BILL_ID)+1 FROM PAY0016D )
	           , #{accBillTaskId}
	           ,  SYSDATE
	           , #{accBillRefNo}
	           , #{accBillOrderId}
	           , #{accBillOrderNo}
	           , #{accBillTypeId}
	           , #{accBillModeId}
	           , #{accBillScheduleId}
	           , #{accBillSchedulePeriod}
	           , #{accBillAdjustmentId}
	           , #{accBillScheduleAmount}
	           , #{accBillAdjustmentAmount}
	           , #{accBillTaxesAmount}
	           , #{accBillNetAmount}
	           , #{accBillStatus}
	           , #{accBillRemark}
	           , SYSDATE
	           , #{accBillCreateBy}
	           , #{accBillGroupId}
	           , #{accBillTaxCodeId}
	           , #{accBillTaxRate}
	           , #{accBillAcctConversion}
	           , #{accBillContractId} 
	          )
  </insert>
 
    <select id="selectMiscList" parameterType="Map" resultType="egovMap">
     <![CDATA[
		  SELECT Extent1.MEM_ID MEM_ID  ,
		       #{memberName} C1  ,
		       #{membetFullName} C2  ,
		       #{address1} C3  ,
		       #{address2} C4  ,
		       #{address3} C5  ,
		       #{address4} C6  ,
		       Extent5.POST_CODE POST_CODE  ,
		       Extent3.NAME NAME  ,
		       Extent2.NAME NAME1  ,
		       #{memberNirc} C7  
		  FROM ORG0001D Extent1
		         JOIN SYS0015M Extent2   ON UTILS.CONVERT_TO_NUMBER(Extent1.CNTY,10,0) = Extent2.CNTY_ID
		         LEFT JOIN SYS0035M Extent3   ON UTILS.CONVERT_TO_NUMBER(Extent1.STATE,10,0) = Extent3.STATE_ID
		         LEFT JOIN SYS0039M Extent4   ON Extent1.AREAL = Extent4.AREA_ID
		         LEFT JOIN SYS0030C Extent5   ON Extent1.POST_CODE = Extent5.POST_CODE_ID
		 WHERE  Extent1.MEM_ID = #{memberId} AND ROWNUM <= 1
        ]]>
    </select>
    
      <insert id="insertInvMISC" parameterType="Map">
		    INSERT INTO PAY0031D
		  ( TAX_INVC_ID
		  , TAX_INVC_REF_NO
		  , TAX_INVC_REF_DT
		  , TAX_INVC_SVC_NO
		  , TAX_INVC_TYPE
		  , TAX_INVC_CUST_NAME
		  , TAX_INVC_CNTC_PERSON
		  , TAX_INVC_ADDR1
		  , TAX_INVC_ADDR2
		  , TAX_INVC_ADDR3
		  , TAX_INVC_ADDR4
		  , TAX_INVC_POST_CODE
		  , TAX_INVC_STATE_NAME
		  , TAX_INVC_CNTY
		  , TAX_INVC_TASK_ID
		  , TAX_INVC_REM
		  , TAX_INVC_CHRG
		  , TAX_INVC_TXS
		  , TAX_INVC_AMT_DUE
		  , TAX_INVC_CRT_DT
		  , TAX_INVC_CRT_USER_ID )
		  VALUES ( 
		  (select MAX(TAX_INVC_ID)+1 from PAY0031D)
		  , #{taxInvoiceRefNo}
		  , SYSDATE
		  , #{taxInvoiceServiceNo}
		  , #{taxInvoiceType}
		  , #{taxInvoiceCustName}
		  , #{taxInvoiceContactPerson}
		  , #{taxInvoiceAddress1}
		  , #{taxInvoiceAddress2}
		  , #{taxInvoiceAddress3}
		  , #{taxInvoiceAddress4}
		  , #{taxInvoicePostCode}
		  , #{taxInvoiceStateName}
		  , #{taxInvoiceCountry}
		  , #{taxInvoiceTaskID}
		  , #{taxInvoiceRemark}
		  , #{taxInvoiceCharges}
		  , #{taxInvoiceTaxes}
		  , #{taxInvoiceAmountDue}
		  , SYSDATE
		  , #{taxInvoiceCreator}
		  )
      </insert>
      <insert id="insertInvMISCD" parameterType="Map">
	      INSERT INTO PAY0032D
	         ( INVC_ITM_ID
	         , TAX_INVC_ID
	         , INVC_ITM_TYPE
	         , INVC_ITM_ORD_NO
	         , INVC_ITM_PO_NO
	         , INVC_ITM_CODE
	         , INVC_ITM_DESC1
	         , INVC_ITM_DESC2
	         , INVC_ITM_SERIAL_NO
	         , INVC_ITM_QTY
	         , INVC_ITM_UNIT_PRC
	         , INVC_ITM_GST_RATE
	         , INVC_ITM_GST_TXS
	         , INVC_ITM_CHRG
	         , INVC_ITM_AMT_DUE
	         , INVC_ITM_ADD1
	         , INVC_ITM_ADD2
	         , INVC_ITM_ADD3
	         , INVC_ITM_ADD4
	         , INVC_ITM_POST_CODE
	         , INVC_ITM_AREA_NAME
	         , INVC_ITM_STATE_NAME
	         , INVC_ITM_CNTY
	         , INVC_ITM_INSTALL_DT
	         , INVC_ITM_RETN_DT
	         , INVC_ITM_BILL_REF_NO )
	           VALUES (
	            (select max(INVC_ITM_ID)+1 from PAY0032D)
	           , #{taxInvoiceID}
	           , #{invoiceItemType}
	           , #{invoiceItemOrderNo}
	           , #{invoiceItemPONo}
	           , #{invoiceItemCode}
	           , #{invoiceItemDescription1}
	           , #{invoiceItemDescription2}
	           , #{invoiceItemSerialNo}
	           , #{invoiceItemQuantity}
	           , 0
	           , #{invoiceItemGSTRate}
	           , #{invoiceItemGSTTaxes}
	           , #{invoiceItemCharges}
	           , #{invoiceItemAmountDue}
	           , #{invoiceItemAdd1}
	           , #{invoiceItemAdd2}
	           , #{invoiceItemAdd3}
	           , NULL
	           , #{invoiceItemPostCode}
	           , NULL
	           , #{invoiceItemStateName}
	           , #{invoiceItemCountry}
	           , NULL
	           , NULL
	           , NULL )

	  </insert>
	  
	  <update id="updateBillRem" parameterType="Map">
	  UPDATE PAY0016D
	   SET ACC_BILL_REM = #{accBillRemark}
	 WHERE  ( ( ACC_BILL_ID = (SELECT MAX(ACC_BILL_ID) FROM PAY0016D ))
	  AND ( ACC_BILL_TASK_ID = #{accBillTaskId} ) )
	  </update>
	  
	  <insert id="insertUser" parameterType="Map">
	  INSERT INTO SYS0047M
        ( USER_ID
        , USER_NAME
        , USER_PASSWD
        , USER_FULL_NAME
        , USER_EMAIL
        , USER_STUS_ID
        , USER_BRNCH_ID
        , USER_DEPT_ID
        , USER_UPD_USER_ID
        , USER_UPD_DT
        , USER_SYNC_CHK
        , USER_NRIC
        , USER_DT_JOIN
        , USER_GSEC_SYN_CHK
        , USER_PASSWD_LAST_UPD_DT
        , USER_TYPE_ID
        , USER_DFLT_PAS_SWD
        , USER_VAL_ID_FROM
        , USER_VAL_ID_TO
        , USER_SEC_QUES_ID
        , USER_SEC_QUES_ANS
        , USER_WORK_NO
        , USER_MOBILE_NO
        , USER_EXT_NO
        , USER_IS_PART_TM
        , USER_DEPT_ID1
        , USER_IS_EXTRNL
         )
         VALUES (
           (SELECT MAX(USER_ID)+1 FROM SYS0047M)
          , #{userName}
          , #{password}
          , #{userFullName}
          , #{userEmail}
          , #{userStatusID}
          , #{userBranchID}
          , #{userDeptID}
          , #{userUpdateBy}
          , SYSDATE
          , #{userSyncCheck}
          , #{userNRIC}
          , TO_CHAR(TO_DATE(#{userDateJoin},'dd-mm-yyyy'),'yyyy-mm-dd')
          , #{userGsecSynCheck}
          , SYSDATE
          , #{userTypeID}
          , #{userDefaultPasswd}
          , TO_CHAR(TO_DATE(#{userValidFrom},'dd-mm-yyyy'),'yyyy-mm-dd')
          , #{userValidTo}
          , #{userSecQuesID}
          , #{userSecQuesAns}
          , #{userWorkNo}
          , #{userMobileNo}
          , #{userExtNo}
          , #{userIsPartTime}
          , #{userDepartmentID}
          , #{userIsExternal} 
          )
        </insert>
        
        <insert id="insertRoleUser" parameterType="Map">
        INSERT INTO SYS0045M
            ( ROLE_ID
            , USER_ID
            , STUS_ID
            , CRT_DT
            , CRT_USER_ID
            , UPD_DT
            , UPD_USER_ID 
            )
        VALUES 
        ( #{roleID}
        , #{userID}
        , #{statusID}
        , SYSDATE
        , #{createdBy}
        , SYSDATE
        , #{updatedBy}
        )
  </insert>
  <insert id="insertMemApp" parameterType="Map">
	  INSERT INTO ORG0003D (
	     APLCTN_ID
	   , APLICNT_CODE
	   , APLICNT_TYPE
	   , APLICNT_NAME
	   , APLICNT_FULL_NAME
	   , APLICNT_IDNTFC
	   , APLICNT_NRIC
	   , APLICNT_DOB
	   , APLICNT_GENDER
	   , APLICNT_RACE
	   , APLICNT_MARTL
	   , APLICNT_NATION
	   , APLICNT_ADD1
	   , APLICNT_ADD2
	   , APLICNT_ADD3
	   , APLICNT_ADD4
	   , APLICNT_AREAL_D
	   , APLICNT_POST_CODE_ID
	   , APLICNT_STATE_ID
	   , APLICNT_CNTY_ID
	   , APLICNT_TEL_OFFICE
	   , APLICNT_TEL_HUSE
	   , APLICNT_TEL_MOBILE
	   , APLICNT_EMAIL
	   , APLICNT_SPOUSE_CODE
	   , APLICNT_SPOUSE_NAME
	   , APLICNT_SPOUSE_NRIC
	   , APLICNT_SPOUSE_OCPAT
	   , APLICNT_SPOUSE_TEL_CNTC
	   , APLICNT_SPOUSE_DOB
	   , APLICNT_EDU_LEV
	   , APLICNT_LANG
	   , APLICNT_BANK_ID
	   , APLICNT_BANK_ACC_NO
	   , APLICNT_SPONS_CODE
	   , APLICNT_TRNSPRT
	   , REM, STUS_ID
	   , CRT_DT
	   , CRT_USER_ID
	   , UPD_DT
	   , UPD_USER_ID
	   , CNFM
	   , CNFM_DT
	   , DEPT_CODE 
	   )
	  VALUES ( 
	  (SELECT MAX(APLCTN_ID)+1 FROM ORG0003D)
	  , #{applicantCode}
	  , #{applicantType}
	  , #{applicantName}
	  , #{applicantFullName}
	  , #{applicantIdentification}
	  , #{applicantNRIC}
	  , #{applicantDOB}
	  , #{applicantGender}
	  , #{applicantRace}
	  , #{applicantMarital}
	  , #{applicantNationality}
	  , #{applicantAdd1}
	  , #{applicantAdd2}
	  , #{applicantAdd3}
	  , #{applicantAdd4}
	  , #{applicantAreald}
	  , #{applicantPostCodeId}
	  , #{applicantStateId}
	  , #{applicantCountryId}
	  , #{applicantTelOffice}
	  , #{applicantTelHouse}
	  , #{applicantTelMobile}
	  , #{applicantEmail}
	  , #{applicantSpouseCode}
	  , #{applicantSpouseName}
	  , #{applicantSpouseNRIC}
	  , #{applicantSpouseOccupation}
	  , #{applicantSpouseTelContact}
	  , TO_CHAR(TO_DATE(#{applicantSpouseDOB},'dd-mm-yyyy'),'yyyy-mm-dd')
	  , #{applicantEduLevel}
	  , #{applicantLanguage}
	  , #{applicantBankID}
	  , #{applicantBankAccNo}
	  , #{applicantSponsorCode}
	  , #{applicantTransport}
	  , #{remark}
	  , #{statusId}
	  , SYSDATE
	  , 52366
	  , SYSDATE
	  , 52366
	  , #{confirmation}
	  , #{confirmDate}
	  , #{deptCode}
	  )
  </insert>
  <insert id="insertMemberAgr" parameterType="Map">
	  INSERT INTO ORG0002D (
	     AG_ID
	   , AG_REF_NO
	   , MEM_ID
	   , AG_TYPE_ID
	   , AG_STUS_ID
	   , AG_REM
	   , AG_START_DT
	   , AG_EXPR_DT
	   , AG_CRT_USER_ID
	   , AG_CRT_DT
	   , AG_UPD_USER_ID
	   , AG_UPD_DT )
	  VALUES (
	  (SELECT MAX(AG_ID)+1 FROM ORG0002D)
	   , #{agreementRefNo}
	   , #{memberID}
	   , #{agreementTypeID}
	   , #{agreementStatusID}
	   , #{agreementRemark}
	   , #{agreementStartDate}
	   , #{agreementExpiryDate}
	   , #{agreementCreator}
	   , SYSDATE
	   , NULL
	   , NULL )
  </insert>
   <insert id="insertinvWH" parameterType="Map">
	  INSERT INTO SYS0028M (
	     WH_LOC_ID
	   , WH_LOC_CODE
	   , WH_LOC_DESC
	   , WH_LOC_ADD1
	   , WH_LOC_ADD2
	   , WH_LOC_ADD3
	   , WH_LOC_AREA_ID
	   , WH_LOC_POST_CODE_ID
	   , WH_LOC_STATE_ID
	   , WH_LOC_CNTY_ID
	   , WH_LOC_TEL1
	   , WH_LOC_TEL2
	   , WH_LOC_BRNCH_ID
	   , WH_LOC_TYPE_ID
	   , WH_LOC_STK_GRAD
	   , WH_LOC_STUS_ID
	   , WH_LOC_UPD_USER_ID
	   , WH_LOC_UPD_DT
	   , CODE2
	   , DESC2
	   , WH_LOC_IS_SYNC
	   , WH_LOC_MOBILE 
	   )
	  VALUES ( 
	  (SELECT MAX(WH_LOC_ID)+1 FROM SYS0028M)
	  , #{WHLocCode}
	  , #{WHLocDesc}
	  , #{WHLocAdd1}
	  , #{WHLocAdd2}
	  , #{WHLocAdd3}
	  , #{WHLocAreaId}
	  , #{WHLocPostcodeID}
	  , #{WHLocStateID}
	  , #{WHLocCountryID}
	  , #{WHLocTel1}
	  , #{WHLocTel2}
	  , #{WHLocBranchID}
	  , #{WHLocTypeID}
	  , #{WHLocStkGrade}
	  , #{WHLocStatusID}
	  , 52366
	  , SYSDATE
	  , #{Code2}
	  , #{Desc2}
	  , #{WHLocIsSync}
	  , 0 
	  )
  </insert>
  
  <insert id="insertDocSubmission" parameterType="Map">
	  INSERT INTO ORG0010D (
	     DOC_SUB_ID
	   , DOC_SUB_TYPE_ID
	   , DOC_TYPE_ID
	   , DOC_SO_ID
	   , DOC_MEM_ID
	   , DOC_SUB_DT
	   , DOC_COPY_QTY
	   , STUS_ID
	   , CRT_USER_ID
	   , CRT_DT
	   , UPD_USER_ID
	   , UPD_DT
	   , DOC_SUB_BATCH_ID 
	   )
	  VALUES (
	  (SELECT MAX(DOC_SUB_ID)+1 FROM ORG0010D ) 
	  , #{docSubTypeId}
	  , #{docTypeID}
	  , #{docSOID}
	  , #{docMemId}
	  ,  TO_CHAR(SYSDATE,'YYYY-MM-DD')
	  , #{docCopyQty}
	  , #{statusID}
	  , #{creator}
	  , SYSDATE
	  , #{creator}
	  , SYSDATE
	  , #{docSubBatchId}
	  )
  </insert>
  
  <insert id="insertSmsEntry" parameterType="Map">
	  INSERT INTO MSC0015D (
	     SMS_ID
       , SMS_MSG
       , SMS_MSISDN
       , SMS_TYPE_ID
       , SMS_PRIO
       , SMS_REF_NO
       , SMS_BATCH_UPLOAD_ID
       , SMS_REM
       , SMS_START_DT
       , SMS_EXPR_DT
       , SMS_STUS_ID
       , SMS_RETRY
       , SMS_CRT_DT
       , SMS_CRT_USER_ID
       , SMS_UPD_DT
       , SMS_UPD_USER_ID
       , SMS_VENDOR_ID 
       )
        VALUES (
        (SELECT MAX(SMS_ID)+1 FROM MSC0015D) 
         , #{SMSMessage}
         , #{SMSMSISDN}
         , #{SMSTypeID}
         , #{SMSPriority}
         , #{SMSReferenceNo}
         , #{SMSBatchUploadID}
         , #{SMSRemark}
         , SYSDATE
         , SYSDATE
         , #{SMSStatusID}
         , #{SMSRetry}
         , SYSDATE
         , 52366
         , SYSDATE
         , 52366
         , #{SMSVendorID}
         )
   </insert>
  
   <insert id="insertSmsReply" parameterType="Map">
	  INSERT INTO MSC0017D (
	     REPLY_ID
	   , SMS_ID
	   , REPLY_CODE
	   , REPLY_REM
	   , REPLY_CRT_DT
	   , REPLY_CRT_USER_ID
	   , REPLY_FDBCK_ID
	    )
	  VALUES (
	  (SELECT MAX(REPLY_ID)+1 FROM MSC0017D) 
	  ,#{SMSID}
	  , #{replyCode}
	  , #{replyRemark}
	  , SYSDATE
	  , #{replyCreateBy}
	  , #{replyFeedbackID}
	  )
   </insert>
</mapper>