<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.common.impl.AuthMenuMappingMapper">

<select id="selectAuthList" parameterType="Map" resultType="egovMap">
	SELECT z.auth_code ,
	           z.auth_name ,
	           z.auth_code as row_id /* PK, AUIGrid key row setting */
	   FROM ( SELECT a.code as auth_code,
	 		                a.code_name as auth_name
	 		        FROM SYS0013M a
	  		      WHERE 1=1
			          AND a.code_master_id = 313
			          <if test="authCode != null and authCode !=''">
			          AND (UPPER(a.code) LIKE  UPPER(#{authCode}) || '%' OR
			                  UPPER(a.code_name) LIKE '%' || UPPER(#{authCode}) || '%')
			          </if>
			     UNION
			     SELECT b.auth_code ,
			                b.auth_name
			        FROM SYS0053M b
			      WHERE 1=1
			          <if test="authCode != null and authCode !=''">
			          AND (UPPER(b.auth_code) LIKE  UPPER(#{authCode}) || '%' OR
			                  UPPER(b.auth_name) LIKE '%' || UPPER(#{authCode}) || '%')
		 	          </if>
	   ) z
	   ORDER BY z.auth_code desc
</select>

<select id="selectAuthMenuMappingList" parameterType="Map" resultType="egovMap">
	SELECT z.menu_lvl ,
		       z.menu_code ,
		       z.menu_name ,
		       z.pgm_code ,
		       z.pgm_name,
		       #{authCode} AS auth_code,
		       z.pgm_trn_code ,
		       z.pgm_trn_name ,
		       NVL(y.func_yn,'N') AS func_yn ,
               NVL(y.exist_yn,'N') AS exist_yn,
		       z.menu_code||z.pgm_trn_code as row_id /* PK, AUIGrid key row setting */
		  FROM (SELECT a.menu_code ,
				              a.menu_name ,
				              a.menu_lvl ,
				              b.pgm_code ,
				              b.pgm_name ,
				              CASE WHEN b.pgm_code IS NULL
					                  THEN 'MENU'
					                  ELSE b.pgm_trn_code END AS pgm_trn_code ,
				              b.pgm_trn_name ,
				              a.rn
		         FROM (SELECT e.menu_code ,
		                              e.menu_name ,
		                              e.menu_lvl ,
		                              e.pgm_code ,
		                              ROWNUM rn
		                     FROM SYS0051M e
		                    START WITH e.upper_menu_code is null
		                CONNECT BY PRIOR e.menu_code = e.upper_menu_code
		                    ORDER SIBLINGS BY e.menu_order) a ,
		              (SELECT d.pgm_code ,
		                          d.pgm_name ,
		                          d.pgm_trn_code ,
		                          d.pgm_trn_name
		                 FROM (SELECT B.PGM_CODE ,
									  B.PGM_NAME ,
									  C.PGM_TRN_CODE ,
									  CASE WHEN C.PGM_TRN_CODE = 'VIEW' THEN 'VIEW'
                                             WHEN C.PGM_TRN_CODE = 'CHNG' THEN 'CHNG'
                                             WHEN C.PGM_TRN_CODE = 'PRNT' THEN 'PRNT'
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN1' THEN b.DESC_user_dfn1
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN2' THEN b.DESC_user_dfn2
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN3' THEN b.DESC_user_dfn3
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN4' THEN b.DESC_user_dfn4
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN5' THEN b.DESC_user_dfn5
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN6' THEN b.DESC_user_dfn6
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN7' THEN b.DESC_user_dfn7
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN8' THEN b.DESC_user_dfn8
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN9' THEN b.DESC_user_dfn9
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN10' THEN b.DESC_user_dfn10
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN11' THEN b.DESC_user_dfn11
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN12' THEN b.DESC_user_dfn12
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN13' THEN b.DESC_user_dfn13
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN14' THEN b.DESC_user_dfn14
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN15' THEN b.DESC_user_dfn15
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN16' THEN b.DESC_user_dfn16
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN17' THEN b.DESC_user_dfn17
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN18' THEN b.DESC_user_dfn18
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN19' THEN b.DESC_user_dfn19
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN20' THEN b.DESC_user_dfn20
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN21' THEN b.DESC_user_dfn21
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN22' THEN b.DESC_user_dfn22
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN23' THEN b.DESC_user_dfn23
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN24' THEN b.DESC_user_dfn24
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN25' THEN b.DESC_user_dfn25
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN26' THEN b.DESC_user_dfn26
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN27' THEN b.DESC_user_dfn27
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN28' THEN b.DESC_user_dfn28
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN29' THEN b.DESC_user_dfn29
                                             WHEN C.PGM_TRN_CODE = 'USER_DFN30' THEN b.DESC_user_dfn30 END  AS PGM_TRN_NAME,
									  CASE WHEN C.PGM_TRN_CODE = 'VIEW' THEN b.func_view
									       WHEN C.PGM_TRN_CODE = 'CHNG' THEN b.func_chng
									       WHEN C.PGM_TRN_CODE = 'PRNT' THEN b.func_prt
									       WHEN C.PGM_TRN_CODE = 'USER_DFN1' THEN b.func_user_dfn1
									       WHEN C.PGM_TRN_CODE = 'USER_DFN2' THEN b.func_user_dfn2
									       WHEN C.PGM_TRN_CODE = 'USER_DFN3' THEN b.func_user_dfn3
									       WHEN C.PGM_TRN_CODE = 'USER_DFN4' THEN b.func_user_dfn4
									       WHEN C.PGM_TRN_CODE = 'USER_DFN5' THEN b.func_user_dfn5
									       WHEN C.PGM_TRN_CODE = 'USER_DFN6' THEN b.func_user_dfn6
									       WHEN C.PGM_TRN_CODE = 'USER_DFN7' THEN b.func_user_dfn7
									       WHEN C.PGM_TRN_CODE = 'USER_DFN8' THEN b.func_user_dfn8
									       WHEN C.PGM_TRN_CODE = 'USER_DFN9' THEN b.func_user_dfn9
									       WHEN C.PGM_TRN_CODE = 'USER_DFN10' THEN b.func_user_dfn10
									       WHEN C.PGM_TRN_CODE = 'USER_DFN11' THEN b.func_user_dfn11
									       WHEN C.PGM_TRN_CODE = 'USER_DFN12' THEN b.func_user_dfn12
									       WHEN C.PGM_TRN_CODE = 'USER_DFN13' THEN b.func_user_dfn13
									       WHEN C.PGM_TRN_CODE = 'USER_DFN14' THEN b.func_user_dfn14
									       WHEN C.PGM_TRN_CODE = 'USER_DFN15' THEN b.func_user_dfn15
									       WHEN C.PGM_TRN_CODE = 'USER_DFN16' THEN b.func_user_dfn16
									       WHEN C.PGM_TRN_CODE = 'USER_DFN17' THEN b.func_user_dfn17
									       WHEN C.PGM_TRN_CODE = 'USER_DFN18' THEN b.func_user_dfn18
									       WHEN C.PGM_TRN_CODE = 'USER_DFN19' THEN b.func_user_dfn19
									       WHEN C.PGM_TRN_CODE = 'USER_DFN20' THEN b.func_user_dfn20
									       WHEN C.PGM_TRN_CODE = 'USER_DFN21' THEN b.func_user_dfn21
									       WHEN C.PGM_TRN_CODE = 'USER_DFN22' THEN b.func_user_dfn22
									       WHEN C.PGM_TRN_CODE = 'USER_DFN23' THEN b.func_user_dfn23
									       WHEN C.PGM_TRN_CODE = 'USER_DFN24' THEN b.func_user_dfn24
									       WHEN C.PGM_TRN_CODE = 'USER_DFN25' THEN b.func_user_dfn25
                                           WHEN C.PGM_TRN_CODE = 'USER_DFN26' THEN b.func_user_dfn26
                                           WHEN C.PGM_TRN_CODE = 'USER_DFN27' THEN b.func_user_dfn27
                                           WHEN C.PGM_TRN_CODE = 'USER_DFN28' THEN b.func_user_dfn28
                                           WHEN C.PGM_TRN_CODE = 'USER_DFN29' THEN b.func_user_dfn29
                                           WHEN C.PGM_TRN_CODE = 'USER_DFN30' THEN b.func_user_dfn30 END AS TRANSACTION_YN
                            FROM SYS0050M b ,
                            ( SELECT CODE AS PGM_TRN_CODE FROM SYS0013M WHERE CODE_MASTER_ID = 314 AND CODE <![CDATA[<>]]> 'MENU') c) d
		                WHERE NVL(d.transaction_yn,'N') = 'Y') b
		            WHERE a.pgm_code = b.pgm_code(+) ) z,
		         (
		            SELECT k.auth_code
						     , k.menu_code
						     , k.pgm_trn_code
						     , k.func_yn
						     , k.exist_yn
					 FROM (SELECT j.auth_code
						  	            , j.menu_code
							            , j.pgm_trn_code
							            , j.func_yn
							            , j.exist_yn
							            , RANK() OVER(PARTITION BY j.menu_code, j.pgm_trn_code ORDER BY j.func_yn DESC, j.exist_yn) AS rnk
						         FROM (
						                    /* 선택한 권한*/
						                    SELECT i.auth_code
							                         , i.menu_code
							                         , i.pgm_trn_code
							                         , i.func_yn
							                         , i.auth_code as own_auth_code
							                         , 'N' as exist_yn
							                      FROM SYS0056M i
							                     WHERE i.auth_code = #{authCode}

							                     UNION
							                     /* 선택한 권한의 매핑된 Role의 상위 권한 */
							                    SELECT g.auth_code
							                         , g.menu_code
							                         , g.pgm_trn_code
							                         , g.func_yn
							                         , h.own_auth_code
							                         , CASE WHEN h.own_auth_code IS NULL AND g.func_yn = 'Y'
							                                THEN 'Y'
							                                ELSE 'N' END AS exist_yn
							                      FROM SYS0056M g ,
							                           ( SELECT f.auth_code
							                                  , CASE WHEN e.auth_code <![CDATA[<>]]> f.auth_code
							                                             THEN null
							                                             ELSE e.auth_code END AS own_auth_code

							                               FROM ( SELECT c.role_id
							                                           , d.auth_code
							                                        FROM SYS0044M c
							                                           , (SELECT a.role_id, a.auth_code
							                                                FROM SYS0053M a ,
							                                                     SYS0054M b
							                                               WHERE a.auth_code = b.auth_code
							                                                 AND a.role_id = b.role_id
							                                                 AND a.auth_code = #{authCode} ) d
							                                       WHERE c.role_id = d.role_id(+)
							                                       START WITH c.role_id = d.role_id
							                                     CONNECT BY c.role_id = PRIOR c.parent_role) e
							                                  , SYS0054M f
							                            WHERE e.role_id = f.role_id ) h
							         WHERE g.auth_code = h.auth_code
					          ) j
						 ) k
						 WHERE k.rnk = 1
		         ) y
		  WHERE z.menu_code = y.menu_code(+)
		      AND z.pgm_trn_code = y.pgm_trn_code(+)
	    <if test="menuCode != null and menuCode !=''">
              AND (UPPER(z.menu_code) LIKE  UPPER(#{menuCode}) || '%' OR
                     UPPER(z.menu_name) LIKE '%' || UPPER(#{menuCode}) || '%')
         </if>
	  ORDER BY z.rn, z.pgm_trn_code
</select>


<update id="updateAuthMenuMapping" parameterType="Map">

  MERGE INTO SYS0056M a
  USING (
        SELECT #{authCode} AS auth_code ,
               #{menuCode} AS menu_code ,
               #{pgmTrnCode} AS pgm_trn_code ,
               #{funcYn} AS func_yn ,
               #{userId} AS user_id
          FROM dual
  ) b
     ON ( a.AUTH_CODE = b.auth_code
    AND a.menu_code = b.menu_code
    AND a.pgm_trn_code = b.pgm_trn_code )
   WHEN MATCHED THEN
        UPDATE
           SET a.func_yn = b.func_yn ,
               a.upd_user_id = b.user_id ,
               a.upd_dt = sysdate
   WHEN NOT MATCHED THEN
        INSERT
        (
            a.auth_code,
            a.menu_code,
            a.pgm_trn_code,
            a.func_yn,
            a.crt_user_id,
            a.crt_dt,
            a.upd_user_id,
            a.upd_dt
        )
        VALUES
        (
            b.auth_code,
            b.menu_code,
            b.pgm_trn_code,
            b.func_yn,
            b.user_id,
            sysdate,
            b.user_id,
            sysdate
        )
</update>

</mapper>