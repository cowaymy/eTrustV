<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.common.impl.CommonMapper">

  <select id="selectMenuList" parameterType="Map" resultType="egovMap">
    SELECT 'Lvl'||MENU_LVL DIV 
			      ,A.MENU_LVL
			      ,A.MENU_CODE
			      ,A.MENU_NAME
			      ,A.PGM_CODE
			      ,B.PGM_NAME 
			      ,A.STATUS_CODE
			      ,A.UPPER_MENU_CODE
			      ,A.MENU_ORDER 
			   FROM SYS0051M A
			       ,SYS0050M B
				WHERE B.PGM_CODE(+) = A.PGM_CODE
				 <if test='menuCode !=null and menuCode != "" '>
				  AND UPPER(A.MENU_CODE) LIKE '%' || UPPER(:menuCode) || '%'
				 </if>  
				 <if test='pgmCode !=null and pgmCode !="" '>
				  AND UPPER(B.PGM_CODE(+)) LIKE '%' || UPPER(:pgmCode) || '%'
				 </if>
				ORDER BY A.MENU_CODE,A.MENU_ORDER
	</select>
	
  <delete id="deleteMenuId" parameterType="Map">
      DELETE SYS0051M  WHERE MENU_CODE  = #{menuCode}
  </delete>	
	

  <delete id="deletePgmId" parameterType="Map">
      DELETE SYS0050M  WHERE PGM_CODE  = #{pgmCode}
  </delete>
          
  <update id="updPgmIdTrans" parameterType="Map">
      UPDATE SYS0050M
         SET FUNC_VIEW        = #{funcView} 
            ,FUNC_CHNG        = #{funcChng}
            ,FUNC_PRT         = #{funcPrt}
       <choose>
         <when test='funcUserDfn1 == "Y" and descUserDfn1 == null '>
             ,FUNC_USER_DFN1   = 'N'
             ,DESC_USER_DFN1   = ''
         </when>
         <when test='funcUserDfn1 == "N" '>
             ,FUNC_USER_DFN1   = 'N'
             ,DESC_USER_DFN1   = ''
         </when>
         <otherwise>
             ,FUNC_USER_DFN1   = #{funcUserDfn1}
             ,DESC_USER_DFN1   = #{descUserDfn1} 
         </otherwise>
       </choose>
       
       <choose>
         <when test='funcUserDfn2 == "Y" and descUserDfn2 == null '>
             ,FUNC_USER_DFN2   = 'N'
             ,DESC_USER_DFN2   = ''
         </when>
         <when test='funcUserDfn2 == "N" '>
             ,FUNC_USER_DFN2   = 'N'
             ,DESC_USER_DFN2   = ''
         </when>
         <otherwise>
             ,FUNC_USER_DFN2   = #{funcUserDfn2}
             ,DESC_USER_DFN2   = #{descUserDfn2} 
         </otherwise>
       </choose>
       
       <choose>
         <when test='funcUserDfn3 == "Y" and descUserDfn3 == null '>
             ,FUNC_USER_DFN3   = 'N'
             ,DESC_USER_DFN3   = ''
         </when>
         <when test='funcUserDfn3 == "N" '>
             ,FUNC_USER_DFN3   = 'N'
             ,DESC_USER_DFN3   = ''
         </when>
         <otherwise>
             ,FUNC_USER_DFN3   = #{funcUserDfn3}
             ,DESC_USER_DFN3   = #{descUserDfn3} 
         </otherwise>
       </choose>
       
       <choose>
         <when test='funcUserDfn4 == "Y" and descUserDfn4 == null '>
             ,FUNC_USER_DFN4   = 'N'
             ,DESC_USER_DFN4   = ''
         </when>
         <when test='funcUserDfn4 == "N" '>
             ,FUNC_USER_DFN4   = 'N'
             ,DESC_USER_DFN4   = ''
         </when>
         <otherwise>
             ,FUNC_USER_DFN4   = #{funcUserDfn4}
             ,DESC_USER_DFN4   = #{descUserDfn4} 
         </otherwise>
       </choose>
       
       <choose>
         <when test='funcUserDfn5 == "Y" and descUserDfn5 == null '>
             ,FUNC_USER_DFN5   = 'N'
             ,DESC_USER_DFN5   = ''
         </when>
         <when test='funcUserDfn5 == "N" '>
             ,FUNC_USER_DFN5   = 'N'
             ,DESC_USER_DFN5   = ''
         </when>
         <otherwise>
             ,FUNC_USER_DFN5   = #{funcUserDfn5}
             ,DESC_USER_DFN5   = #{descUserDfn5} 
         </otherwise>
       </choose>
            ,UPD_USER_ID      = #{updUserId}
            ,UPD_DT           = SYSDATE
       WHERE PGM_CODE         = #{pgmCode}
  </update>
  
  <update id="updatePgmId" parameterType="Map">
      UPDATE SYS0050M
         SET PGM_NAME    = #{pgmName}
            ,PGM_PATH    = #{pgmPath}
            ,PGM_DESC    = #{pgmDesc}
            ,UPD_USER_ID = #{updUserId}
            ,UPD_DT      = SYSDATE
       WHERE PGM_CODE    = #{pgmCode}
  </update>
    
  <insert id="insertPgmId" parameterType="Map">
   INSERT INTO SYS0050M
          (                        
             PGM_CODE
            ,PGM_NAME
            ,PGM_PATH  
            ,PGM_DESC
            ,FUNC_VIEW         
            ,FUNC_CHNG        
            ,FUNC_PRT         
            ,FUNC_USER_DFN1
            ,FUNC_USER_DFN2
            ,FUNC_USER_DFN3
            ,FUNC_USER_DFN4
            ,FUNC_USER_DFN5
            ,CRT_USER_ID
            ,CRT_DT
            ,UPD_USER_ID
            ,UPD_DT
          )
    VALUES
         (
           ( SELECT #{orgCode} || LPAD(DECODE(COUNT(1),0,'1',MAX(PGMID_SEQ)+1),3,'0') PGMCD FROM
					    (
					     SELECT CASE WHEN  (( SELECT COUNT (A.PGM_CODE) FROM SYS0050M A  WHERE A.PGM_CODE = #{orgCode} || '001') > 0  )  THEN SUBSTR(B.PGM_CODE,4,6)  ELSE '0' END PGMID_SEQ
					       FROM SYS0050M B GROUP BY (SUBSTR(B.PGM_CODE,4,6))
					     )
            )          
            ,#{pgmName}
            ,#{pgmPath}
            ,#{pgmDesc}
            ,'N'
            ,'N'
            ,'N'
            ,'N'
            ,'N'
            ,'N'
            ,'N'
            ,'N'
            ,#{crtUserId}
            ,SYSDATE
            ,#{updUserId}
            ,SYSDATE
         )
  </insert>  

  <select id="selectProgramList" parameterType="Map" resultType="egovMap">
		SELECT   
		       PGM_CODE
		      ,SUBSTR(PGM_CODE,1,3) ORG_CODE
		      ,PGM_NAME
		      ,PGM_PATH
		      ,PGM_DESC
		      ,FUNC_VIEW
		      ,FUNC_CHNG
		      ,FUNC_PRT
		      ,FUNC_USER_DFN1
		      ,DESC_USER_DFN1
		      ,FUNC_USER_DFN2
		      ,DESC_USER_DFN2
		      ,FUNC_USER_DFN3
		      ,DESC_USER_DFN3
		      ,FUNC_USER_DFN4
		      ,DESC_USER_DFN4
		      ,FUNC_USER_DFN5
		      ,DESC_USER_DFN5
		      ,CRT_USER_ID
		      ,CRT_DT
		      ,UPD_USER_ID
		      ,UPD_DT
		  FROM SYS0050M
		 WHERE 1 = 1
      <if test="pgmCode !=null and pgmCode != ''">
        AND UPPER(PGM_CODE) LIKE '%' || UPPER(#{pgmCode}) || '%'
      </if>     
      <if test="pgmNm !=null and pgmNm != ''">
        AND UPPER(PGM_NAME) LIKE '%' || UPPER(#{pgmNm}) || '%'         
      </if>     
     ORDER BY  PGM_CODE
  </select>

  <select id="selectPgmTranList" parameterType="Map" resultType="egovMap">
	SELECT
				PGM_CODE
				,FUNC_VIEW
				,FUNC_CHNG
				,FUNC_PRT
				,FUNC_USER_DFN1
				,DESC_USER_DFN1
				,FUNC_USER_DFN2
				,DESC_USER_DFN2
				,FUNC_USER_DFN3
				,DESC_USER_DFN3
				,FUNC_USER_DFN4
				,DESC_USER_DFN4
				,FUNC_USER_DFN5
				,DESC_USER_DFN5
	FROM SYS0050M
	WHERE PGM_CODE = #{paramPgmId}
	ORDER BY PGM_CODE
  </select>


  <insert id="insertStatusCategoryCode" parameterType="Map">
					MERGE INTO SYS0037M       
					USING DUAL  
					   ON (STUS_CTGRY_ID = #{stusCtgryId} AND STUS_CODE_ID= #{stusCodeId} )            
					 WHEN MATCHED THEN     
					      UPDATE  
					         SET DISAB  = 0
					       WHERE STUS_CTGRY_ID = #{stusCtgryId}
					         AND STUS_CODE_ID = #{stusCodeId}
					
					 WHEN NOT MATCHED THEN                      
					      INSERT  
					      (
					        STUS_CTGRY_ID
					       ,STUS_CODE_ID
					       ,SEQ_NO
					       ,DISAB 
					      )
					     VALUES  
					     (  
					        #{stusCtgryId}
					      , #{stusCodeId}
					      , (SELECT DECODE(COUNT(SEQ_NO),0,1,(MAX(SEQ_NO)+1)) FROM ( SELECT SEQ_NO FROM SYS0037M GROUP BY STUS_CTGRY_ID,SEQ_NO HAVING STUS_CTGRY_ID = #{stusCtgryId} ) )                          
					      , 0                                                         
					     )
  </insert> 
  
    <update id="updateCategoryCodeYN" parameterType="Map">
        UPDATE  SYS0037M
          SET DISAB  = DECODE(#{codeDisab},'Y',1,0)  
        WHERE STUS_CTGRY_ID = #{stusCtgryId}
          AND STUS_CODE_ID = #{stusCodeId}
  </update>   

  <insert id="insertStatusCode" parameterType="Map">
         INSERT INTO SYS0038M
            (
              STUS_CODE_ID
             ,NAME
             ,CODE  
           )
        VALUES  
           ( 
              ( SELECT MAX(STUS_CODE_ID) +1 FROM SYS0038M  ) 
            , #{codeName}                           
            , #{code}                                                          
          )
  </insert>  

  <update id="updateStatusCode" parameterType="Map">
        UPDATE  SYS0038M
          SET NAME  = NVL(#{codeName},NAME) 
            , CODE  = #{code}   
        WHERE STUS_CODE_ID = #{stusCodeId}
  </update>  

  <insert id="insertStatusCategory" parameterType="Map">
         INSERT INTO SYS0036M
            (
              STUS_CTGRY_ID
            , STUS_CTGRY_NAME
            , STUS_CTGRY_DESC
            , CRT_DT
            , CRT_USER_ID
            , UPD_DT
            , UPD_USER_ID
           )
        VALUES  
           ( 
              (SELECT MAX(NVL(STUS_CTGRY_ID,0)) + 1 FROM SYS0036M ) 
            , #{stusCtgryName}                   
            , NVL(#{stusCtgryDesc},DBMS_LOB.SUBSTR(#{stusCtgryName} ,4000) )
            , SYSDATE
            , #{crtUserId}                           
            , SYSDATE                                
            , #{updUserId}                                                          
          )
  </insert>  

  <update id="updateStatusCategory" parameterType="Map">
        UPDATE  SYS0036M
          SET STUS_CTGRY_NAME  = NVL(#{stusCtgryName},STUS_CTGRY_NAME) 
            , STUS_CTGRY_DESC  = NVL(#{stusCtgryDesc},DBMS_LOB.SUBSTR(STUS_CTGRY_NAME,4000) )    
            , CRT_USER_ID      = #{crtUserId} 
            , UPD_USER_ID      = #{updUserId} 
            , UPD_DT           = SYSDATE
        WHERE STUS_CTGRY_ID = #{stusCtgryId}
  </update>  

  <select id="selectStatusCategoryList" parameterType="Map" resultType="egovMap">
    SELECT  A.STUS_CTGRY_ID  
           ,A.STUS_CTGRY_NAME
           ,DBMS_LOB.SUBSTR (A.STUS_CTGRY_DESC, 4000) STUS_CTGRY_DESC
           ,A.CRT_USER_ID
           ,A.UPD_USER_ID
           ,A.UPD_DT
     FROM SYS0036M A
    WHERE 1=1
      <if test="paramCategoryId !=null and paramCategoryId != ''">
        AND A.STUS_CTGRY_ID = #{paramCategoryId}
      </if>     
      <if test="paramCategoryNM !=null and paramCategoryNM != ''">
        AND UPPER(A.STUS_CTGRY_NAME) LIKE '%' || UPPER(#{paramCategoryNM}) || '%'         
      </if>     
      <if test="paramCreateID !=null and paramCreateID != ''">
        AND A.CRT_USER_ID = #{paramCreateID}
      </if>  
     ORDER BY  A.STUS_CTGRY_ID , A.UPD_DT DESC
  </select>

  <select id="selectStatusCodeList" parameterType="Map" resultType="egovMap">
			SELECT
			      0 CHECK_FLAG 
			     ,STUS_CODE_ID  
			     ,CODE  
			     ,NAME CODE_NAME 
			FROM SYS0038M
			ORDER BY CODE_NAME ASC
  </select>

  <select id="selectStatusCategoryCodeList" parameterType="Map" resultType="egovMap">
					SELECT  B.STUS_CODE_ID
					       ,C.NAME CODE_NAME
					       ,DECODE(B.DISAB, 0,'N',1,'Y','N') CODE_DISAB
					  FROM SYS0036M A
					      ,SYS0037M B
					      ,SYS0038M C
					 WHERE A.STUS_CTGRY_ID = B.STUS_CTGRY_ID
					   AND B.STUS_CODE_ID = C.STUS_CODE_ID
       <if test="selCategoryId !=null and selCategoryId != ''">
             AND A.STUS_CTGRY_ID = #{selCategoryId}
       </if>					   
			 <if test="parmDisab !=null and parmDisab != ''">
            AND B.DISAB = #{parmDisab}
       </if>
       ORDER BY B.STUS_CODE_ID
  </select>

	<select id="getAccCodeCount" parameterType="Map" resultType="int">
		SELECT COUNT(*) COUNT
      FROM (
             SELECT ACC_CODE FROM SYS0001M GROUP BY ACC_CODE HAVING ACC_CODE= #{popUpAccCode} AND COUNT(ACC_CODE) > 0 
           )
	</select>
	
	<select id="selectCodeList" parameterType="Map" resultType="egovMap">
		SELECT 
		      CODE_ID , 
		      CODE , 
		      CODE_NAME , 
		      DBMS_LOB.SUBSTR (CODE_DESC, 4000) DESCRIPTION 
		FROM SYS0013M
		WHERE DISAB = 0
		AND CODE_MASTER_ID = #{groupCode}
		<if test="likeValue != null and likeValue !=''">
		   AND CODE LIKE #{likeValue}||'%'
		</if>
		<choose>
		  <when test="orderValue !=null and orderValue !=''">
		      ORDER BY ${orderValue} 
		  </when>
		  <otherwise>
		      ORDER BY CODE_NAME
		  </otherwise>
		</choose>
	</select>
	
	<select id="selectI18NList" parameterType="Map" resultType="egovMap">
            SELECT * FROM SYS0052M
  </select>
    
  <insert id="mergeAccountCode" parameterType="Map" >
    MERGE INTO SYS0001M
      USING DUAL
         ON (ACC_ID = #{popUpAccCodeId} )
            WHEN MATCHED THEN
                  UPDATE  
                    SET ACC_DESC  = NVL(#{popUpAccDesc},ACC_DESC) 
                      , ACC_ADDR1 = NVL(#{address1},ACC_ADDR1) 
                      , ACC_ADDR2 = NVL(#{address2},ACC_ADDR2) 
                      , ACC_ADDR3 = NVL(#{address3},ACC_ADDR3) 
                      , ACC_ADD_STATE_ID = NVL(#{mstate},ACC_ADD_STATE_ID) 
                      , ACC_ADD_CNTY_ID  = NVL(#{mcountry},ACC_ADD_CNTY_ID) 
                      , ACC_ADD_POST_CODE_ID = NVL(#{mpostcd},ACC_ADD_POST_CODE_ID)
                      , ACC_ADD_AREA_ID      = NVL(#{marea},ACC_ADD_AREA_ID)
                      , ACC_TEL_NO1          = NVL(#{tel1},ACC_TEL_NO1) 
                      , ACC_TEL_NO2          = NVL(#{tel2},ACC_TEL_NO2) 
                      , ACC_UPD_USER_ID      = NVL(#{updUserId},ACC_UPD_USER_ID)
                      , ACC_UPD_DT           = SYSDATE
                      , IS_PAY_CASH          = NVL(#{popUpIsPayCash},IS_PAY_CASH) 
                      , IS_PAY_ONLINE        = NVL(#{popUpIsPayOnline},IS_PAY_ONLINE) 
                      , IS_PAY_CHQ           = NVL(#{popUpIsPayChq},IS_PAY_CHQ) 
                      , IS_PAY_CRC           = NVL(#{popUpIsPayCrc},IS_PAY_CRC) 
          
            WHEN NOT MATCHED THEN
                     INSERT 
                        (
                           ACC_ID
                         , SAP_ACC_CODE
                         , ACC_CODE
                         , ACC_DESC
                         , ACC_GRP
                         , ACC_TYPE
                         , ACC_CURR_ID
                         , ACC_LINK
                         , ACC_IS_MFG
                         , ACC_PAY_TYPE_ID
                         , ACC_ADDR1
                         , ACC_ADDR2
                         , ACC_ADDR3
                         , ACC_ADD_POST_CODE_ID
                         , ACC_ADD_AREA_ID
                         , ACC_ADD_STATE_ID
                         , ACC_ADD_CNTY_ID
                         , ACC_TEL_NO1
                         , ACC_TEL_NO2
                         , ACC_CRT_USER_ID
                         , ACC_CRT_DT
                         , ACC_UPD_USER_ID
                         , ACC_UPD_DT
                         , ACC_STUS_ID
                         , IS_PAY_CASH
                         , IS_PAY_ONLINE
                         , IS_PAY_CHQ
                         , IS_PAY_CRC
                       )
                    VALUES  
                       ( (SELECT (MAX(ACC_ID) +1) FROM SYS0001M ) /*ACC_ID                    */
                          ,#{popUpSapAccCode}                     /*SAP_ACC_CODE              */
                          ,#{popUpAccCode}                        /*ACC_CODE                  */
                          ,#{popUpAccDesc}                        /*ACC_DESC                  */
                          ,''                                     /*ACC_GRP                   */
                          ,0                                      /*ACC_TYPE                  */
                          ,''                                     /*ACC_CURR_ID               */
                          ,''                                     /*ACC_LINK                  */
                          ,0                                      /*ACC_IS_MFG                */
                          ,0                                      /*ACC_PAY_TYPE_ID           */
                          ,#{address1}                            /*ACC_ADDR1                 */
                          ,#{address2}                            /*ACC_ADDR2                 */
                          ,#{address3}                            /*ACC_ADDR3                 */
                          ,NVL(#{mpostcd},0)                      /*ACC_ADD_POST_CODE_ID      */
                          ,NVL(#{marea},0)                        /*ACC_ADD_AREA_ID           */
                          ,NVL(#{mstate},0)                       /*ACC_ADD_STATE_ID          */
                          ,NVL(#{mcountry},0)                     /*ACC_ADD_CNTY_ID           */
                          ,#{tel1}                                /*ACC_TEL_NO1               */
                          ,#{tel2}                                /*ACC_TEL_NO2               */
                          ,#{crtUserId}                           /*ACC_CRT_USER_ID           */
                          ,SYSDATE                                /*ACC_CRT_DT                */
                          ,#{updUserId}                           /*ACC_UPD_USER_ID           */
                          ,SYSDATE                                /*ACC_UPD_DT                */
                          ,1                                      /*ACC_STUS_ID               */
                          ,#{popUpIsPayCash}                      /*IS_PAY_CASH               */
                          ,#{popUpIsPayOnline}                    /*IS_PAY_ONLINE             */
                          ,#{popUpIsPayChq}                       /*IS_PAY_CHQ                */
                          ,#{popUpIsPayCrc}                       /*IS_PAY_CRC                */
                        )
  </insert>  
    
  <select id="getAccountCodeList" parameterType="Map" resultType="egovMap">
        SELECT 
              ACC_ID AS ACC_ID 
              ,ACC_CODE AS ACC_CODE 
              ,ACC_DESC AS ACC_DESC 
              ,ACC_CRT_USER_ID AS ACC_CRT_USER_ID 
              ,ACC_UPD_USER_ID AS ACC_UPD_USER_ID 
              ,ACC_STUS_ID AS ACC_STUS_ID 
              ,IS_PAY_CASH AS IS_PAY_CASH 
              ,IS_PAY_ONLINE AS IS_PAY_ONLINE 
              ,IS_PAY_CHQ AS IS_PAY_CHQ 
              ,IS_PAY_CRC AS IS_PAY_CRC 
              ,SYS0038M.Code AS STATUS_CODE 
              ,SYS0038M.NAME AS STATUS_NAME
              ,CASE WHEN (ACC_CURR_ID IS NOT NULL) THEN ACC_CURR_ID ELSE '' END AS ACC_CURR_ID 
              ,CASE WHEN (ACC_GRP IS NOT NULL) THEN ACC_GRP ELSE '' END AS ACC_GRP 
              ,CASE WHEN (ACC_IS_MFG IS NOT NULL) THEN ACC_IS_MFG ELSE 0 END AS ACC_IS_MFG 
              ,CASE WHEN (ACC_LINK IS NOT NULL) THEN ACC_LINK ELSE '' END AS ACC_LINK 
              ,CASE WHEN (ACC_PAY_TYPE_ID IS NOT NULL) THEN ACC_PAY_TYPE_ID ELSE 0 END AS ACC_PAY_TYPE_ID 
              ,CASE WHEN (ACC_TYPE IS NOT NULL) THEN ACC_TYPE ELSE 0 END AS ACC_TYPE 
              ,CASE WHEN (ACC_ADDR1 IS NOT NULL) THEN DBMS_LOB.SUBSTR (ACC_ADDR1,4000)  ELSE '' END AS ACC_ADDR1
              ,CASE WHEN (ACC_ADDR2 IS NOT NULL) THEN DBMS_LOB.SUBSTR (ACC_ADDR2,4000)  ELSE '' END AS ACC_ADDR2 
              ,CASE WHEN (ACC_ADDR3 IS NOT NULL) THEN DBMS_LOB.SUBSTR (ACC_ADDR3,4000)  ELSE '' END AS ACC_ADDR3
              ,CASE WHEN (ACC_ADD_AREA_ID IS NOT NULL) THEN ACC_ADD_AREA_ID ELSE 0 END AS ACC_ADD_AREA_ID 
              ,CASE WHEN (Extent4.AREA_ID IS NOT NULL) THEN Extent4.AREA_NAME ELSE '' END AS AREA_NAME 
              ,CASE WHEN (ACC_ADD_CNTY_ID IS NOT NULL) THEN ACC_ADD_CNTY_ID ELSE 0 END AS ACC_ADD_CNTY_ID 
              ,CASE WHEN (Extent6.CNTY_ID IS NOT NULL) THEN Extent6.NAME ELSE '' END AS NAME15 
              ,CASE WHEN (ACC_CRT_DT IS NOT NULL) THEN  TO_CHAR(ACC_CRT_DT,'DD-MON-YYYY HH24:MI:SS')   ELSE TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS ACC_CRT_DT 
              ,CASE WHEN (Extent7.USER_ID IS NOT NULL) THEN Extent7.USER_NAME ELSE '' END AS USER_NAME47 
              ,CASE WHEN (ACC_ADD_POST_CODE_ID IS NOT NULL) THEN ACC_ADD_POST_CODE_ID ELSE 0 END AS ACC_ADD_POST_CODE_ID 
              ,CASE WHEN (Extent3.POST_CODE_ID IS NOT NULL) THEN Extent3.POST_CODE_ID ELSE 0 END AS POST_CODE_ID 
              ,CASE WHEN (SAP_ACC_CODE IS NOT NULL) THEN SAP_ACC_CODE ELSE '' END AS SAP_ACC_CODE 
              ,CASE WHEN (ACC_ADD_STATE_ID IS NOT NULL) THEN ACC_ADD_STATE_ID ELSE 0 END AS ACC_ADD_STATE_ID 
              ,CASE WHEN (Extent5.STATE_ID IS NOT NULL) THEN Extent5.NAME ELSE '' END AS NAME35 
              ,CASE WHEN (ACC_TEL_NO1 IS NOT NULL) THEN ACC_TEL_NO1 ELSE '' END AS ACC_TEL_NO1 
              ,CASE WHEN (ACC_TEL_NO2 IS NOT NULL) THEN ACC_TEL_NO2 ELSE '' END AS ACC_TEL_NO2 
              ,CASE WHEN (ACC_UPD_DT IS NOT NULL) THEN TO_CHAR(ACC_UPD_DT,'DD-MON-YYYY HH24:MI:SS') ELSE  TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS ACC_UPD_DT 
              ,CASE WHEN (Extent8.USER_ID IS NOT NULL) THEN Extent8.USER_NAME ELSE '' END AS USER_NAME
          FROM  SYS0001M
                INNER JOIN SYS0038M  ON SYS0038M.STUS_CODE_ID = ACC_STUS_ID
                  LEFT OUTER JOIN SYS0030C  Extent3 ON Extent3.POST_CODE_ID = ACC_ADD_POST_CODE_ID
                  LEFT OUTER JOIN SYS0039M  Extent4 ON Extent4.AREA_ID = ACC_ADD_AREA_ID
                  LEFT OUTER JOIN SYS0035M  Extent5 ON Extent5.STATE_ID = ACC_ADD_STATE_ID
                  LEFT OUTER JOIN SYS0015M  Extent6 ON Extent6.CNTY_ID = ACC_ADD_CNTY_ID
                  LEFT OUTER JOIN SYS0047M  Extent7 ON Extent7.USER_ID = ACC_CRT_USER_ID
                  LEFT OUTER JOIN SYS0047M  Extent8 ON Extent8.USER_ID = ACC_UPD_USER_ID
          WHERE 1 = 1
          <if test="accStusId !=null and accStusId != 0">          
            AND ACC_STUS_ID = #{accStusId} 
          </if>
          <if test="accId !=null and accId != ''">
            AND ACC_ID = #{accId}
          </if>
          <if test="accCode !=null and accCode != ''">
            AND ACC_CODE = #{accCode}
          </if>         
          <if test="accDesc !=null and accDesc != ''">
            AND ACC_DESC LIKE  '%' || #{accDesc} || '%'
          </if>         
          <if test="sapAccCode !=null and sapAccCode != ''">
            AND SAP_ACC_CODE = #{sapAccCode}
          </if>  
          <if test="paymentCd !=null and paymentCd == 'CSH' ">
            AND IS_PAY_CASH = 1
          </if>               
          <if test="paymentCd !=null and paymentCd == 'ONL' ">
            AND IS_PAY_ONLINE = 1
          </if>               
          <if test="paymentCd !=null and paymentCd == 'CHQ' ">
            AND IS_PAY_CHQ = 1
          </if>               
          <if test="paymentCd !=null and paymentCd == 'CRC' ">
            AND IS_PAY_CRC = 1
          </if>               
         ORDER BY ACC_CODE ASC
  </select>    
    
    <select id="getMstCommonCodeList" parameterType="Map" resultType="egovMap">
    
			SELECT 
				 CdMst.CODE_MASTER_ID AS CODE_MASTER_ID, 
				 CdMst.CODE_MASTER_NAME AS CODE_MASTER_NAME, 
				 CdMst.CODE_DESC AS CODE_DESC, 
				 /* CASE WHEN (CdMst.CRT_DT IS NOT NULL) THEN  TO_CHAR(CdMst.CRT_DT,'DD-MON-YYYY HH24:MI:SS') ELSE TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS CRT_DT, */
				 CdMst.CRT_DT,
				 CASE WHEN (CdMst.CRT_USER_ID IS NOT NULL) THEN CdMst.CRT_USER_ID ELSE 0 END AS CRT_USER_ID, 
				 CASE WHEN (User1.USER_ID IS NOT NULL) THEN User1.USER_NAME ELSE '' END AS CREATE_NAME, 
				 DECODE(CASE WHEN (CdMst.DISAB IS NOT NULL) THEN CdMst.DISAB ELSE 0 END,0,'N',1,'Y','N') AS DISABLED, 
				 CASE WHEN (CdMst.UPD_DT IS NOT NULL) THEN  TO_CHAR(CdMst.UPD_DT,'DD-MON-YYYY HH24:MI:SS') ELSE TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS UPD_DT, 
				 CASE WHEN (CdMst.UPD_USER_ID IS NOT NULL) THEN CdMst.UPD_USER_ID ELSE 0 END AS UPD_USER_ID, 
				 CASE WHEN (User2.USER_ID IS NOT NULL) THEN User2.USER_NAME ELSE '' END AS USER_NAME2    
				 FROM SYS0012M  CdMst
				 LEFT OUTER JOIN SYS0047M  User1 ON User1.USER_ID = CdMst.CRT_USER_ID
				 LEFT OUTER JOIN SYS0047M  User2 ON User2.USER_ID = CdMst.UPD_USER_ID   
			WHERE 1 = 1	 
				<if test="cdMstId !=null and cdMstId != ''">
                    AND  CdMst.CODE_MASTER_ID  = #{cdMstId} 
                </if>
                <if test="cdMstNm !=null and cdMstNm != ''">
                    AND (UPPER(CdMst.CODE_MASTER_NAME) LIKE UPPER(#{cdMstNm}) || '%' )
                </if>
                <if test="cdMstDesc !=null and cdMstDesc != ''">
                    AND (UPPER(CdMst.CODE_DESC) LIKE UPPER(#{cdMstDesc})  || '%' )
                </if>
                <if test="cdMstDisabled !=null and cdMstDisabled != ''">
                    AND (CdMst.DISAB = #{cdMstDisabled})
                </if>
                <if test="createID !=null and createID != ''">
                    AND (User1.USER_NAME = #{createID} )
                </if>
                <if test="crtDtFrom !=null and crtDtFrom != ''">
                    AND TO_CHAR(CdMst.CRT_DT,'YYYYMMDDHH24MISS') <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{crtDtFrom} , 'DD/MM/YYYY'),'YYYYMMDD')||'000000'        
                </if>
                <if test="crtDtTo !=null and crtDtTo != ''">
                    AND TO_CHAR(CdMst.CRT_DT,'YYYYMMDDHH24MISS') <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{crtDtTo} , 'DD/MM/YYYY'),'YYYYMMDD')||'235959'
                </if>
			ORDER BY CdMst.CODE_MASTER_NAME ASC	
	 	
    </select>
    
    <select id="getDetailCommonCodeList" parameterType="Map" resultType="egovMap">
			 SELECT
			      CODE_ID detailCodeId,
			      CODE_MASTER_ID,
			      CODE detailCode,
			      CODE_NAME detailCodeName,
			      DBMS_LOB.SUBSTR (CODE_DESC, 4000) detailCodeDesc,
			      CASE WHEN (CRT_DT IS NOT NULL) THEN  TO_CHAR(CRT_DT,'DD-MON-YYYY HH24:MI:SS') ELSE TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS CRT_DT,
			      CASE WHEN (CRT_USER_ID IS NOT NULL) THEN CRT_USER_ID ELSE 0 END AS CRT_USER_ID,
			      DECODE(CASE WHEN (DISAB IS NOT NULL) THEN DISAB ELSE 0 END , 0,'N',1,'Y','N')  AS detailDisabled, 
			      CASE WHEN (UPD_DT IS NOT NULL) THEN  TO_CHAR(UPD_DT,'DD-MON-YYYY HH24:MI:SS') ELSE TO_CHAR(TO_DATE('19000101','YYYY-MM-DD'),'DD-MON-YYYY HH24:MI:SS') END AS UPD_DT,
			      CASE WHEN (UPD_USER_ID IS NOT NULL) THEN UPD_USER_ID ELSE 0 END AS UPD_USER_ID
			      FROM SYS0013M
			WHERE CODE_MASTER_ID = #{mstCdId} 
			    <if test="dtailDisabled !=null and dtailDisabled != ''">
                    AND DISAB = #{dtailDisabled} 
                </if>
			ORDER BY CODE ASC
    </select>

    <insert id="addCommCodeGrid" parameterType="Map">
      INSERT INTO SYS0012M
        ( CODE_MASTER_ID  /*pk*/
         , CODE_MASTER_NAME  /*NN*/
         , CODE_DESC  /*NN*/
         , DISAB
         , CRT_DT
         , CRT_USER_ID
         , UPD_DT
         , UPD_USER_ID
        )
        VALUES
        ( (SELECT MAX(CODE_MASTER_ID)+1 CODE_MASTER_ID_SEQ FROM SYS0012M)
         , #{codeMasterName}
         , NVL(#{codeDesc},DBMS_LOB.SUBSTR (#{codeMasterName},4000) )
         , DECODE(#{disabled},'N',0,'Y',1,0)
         , SYSDATE
         , #{crtUserId}
         , SYSDATE
         , #{updUserId}
         )
    </insert>    
    
    <update id="updCommCodeGrid" parameterType="Map">
		UPDATE SYS0012M
		   SET CODE_DESC   = NVL(#{codeDesc},DBMS_LOB.SUBSTR (#{codeMasterName},4000) ) 
		     , CODE_MASTER_NAME = #{codeMasterName}
		     , DISAB       = DECODE(#{disabled},'N',0,'Y',1,0)
		     , UPD_USER_ID = #{updUserId}
		     , UPD_DT      = SYSDATE  
		WHERE CODE_MASTER_ID = #{codeMasterId}
    </update>    
    
    <insert id="addDetailCommCodeGrid" parameterType="Map">
		INSERT INTO SYS0013M
		        ( CODE_ID   
		        , CODE_MASTER_ID   
		        , CODE
		        , CODE_NAME 
		        , CODE_DESC
		        , DISAB
		        , CRT_DT
		        , CRT_USER_ID
		        , UPD_DT
		        , UPD_USER_ID
		        , OLD_CODE_ID
		        )
		VALUES
		        ( (SELECT (MAX(CODE_ID) +1) FROM SYS0013M)
		         , #{codeMasterId}
		         , #{detailcode}
		         , #{detailcodename}
		         , DBMS_LOB.SUBSTR (#{detailcodedesc}, 4000) 
		         , DECODE(#{detaildisabled},'N',0,'Y',1,0)
		         , SYSDATE  
		         , #{crtUserId} 
		         , SYSDATE 
		         , #{updUserId}
		         , 0    
		         )
    </insert>    

    <update id="updDetailCommCodeGrid" parameterType="Map">
		UPDATE SYS0013M
		   SET CODE        = #{detailcode}
		     , CODE_NAME   = #{detailcodename}
		     , CODE_DESC   = DBMS_LOB.SUBSTR (#{detailcodedesc}, 4000)  
		     , DISAB       = DECODE(#{detaildisabled},'N',0,'Y',1,0)
		     , UPD_USER_ID = #{updUserId}
		     , UPD_DT      = SYSDATE  
		WHERE CODE_ID      = #{detailcodeid}
    </update>  
    
    
    <select id="selectBranchList" parameterType="Map" resultType="egovMap">
        SELECT <choose>
	              <when test='groupCode == "0"'>
	                 BRNCH_ID,CODE,NAME,ADDR1,ADDR2,ADDR3,ADDR4,AREA_ID,POST_CODE_ID,STATE_CODE_ID,CNTY_ID,TEL1,TEL2,FAX,CNTC,TYPE_ID,STUS_ID,UPD_USER_ID,UPD_DT,IS_SYNC,REGN_ID
	              </when>
	              <otherwise>
	                 BRNCH_ID CODE_ID 
                     , CODE ||#{separator}|| NAME  CODE_NAME
                     , TYPE_ID
	              </otherwise>
	          </choose>
	           
		  FROM SYS0005M
		 WHERE 1 = 1
		   AND #{groupCode} = #{groupCode}
		 <choose>
              <when test='groupCode == "2" or groupCode == "5"'>
                 AND STUS_ID = 1
                 AND TYPE_ID IN (40 , 43)
              </when>
              <when test="groupCode == '3'">
                 AND STUS_ID = 1
                 AND TYPE_ID IN (40 , 43 , 42)
              </when>
              <when test='groupCode == "4"'>
                 AND STUS_ID = 1
                 AND TYPE_ID IN (42)
              </when>
              <when test='groupCode == "7"'>
                 AND STUS_ID = 1
                 AND TYPE_ID IN (1160)
              </when>
              <otherwise>
                 AND STUS_ID = 1
              </otherwise>
          </choose>
		<choose>
            <when test='groupCode == "0"'>
               ORDER BY CODE
            </when>
            <otherwise>
               ORDER BY CODE_NAME
            </otherwise>
        </choose>		 
    </select>
    
    <!--Branch ID로 User 정보 조회 -->
     <select id="getUsersByBranch" parameterType="Map" resultType="egovMap">
        SELECT 
            USER_ID AS CODE_ID, USER_NAME AS CODE_NAME 
        FROM
            SYS1012V        /* SystemUserView */
        WHERE
            BRNCH_ID = #{groupCode}
        ORDER BY 
            USER_NAME            
    </select>
    
    <!--Account 정보 조회 (크레딧 카드 리스트 / 은행 계좌 리스트)  -->
    <select id="getAccountList" parameterType="Map" resultType="egovMap">
        SELECT 
            ACC_ID AS CODE_ID, 
            ACC_CODE, 
            ACC_DESC, 
            ACC_CODE || ' - ' ||  ACC_DESC AS CODE_NAME
        FROM
            SYS0001M    
        WHERE
            ACC_STUS_ID = 1
            <if test="groupCode != null and groupCode == 'CRC'">
                AND IS_PAY_CRC = 1
            </if>
            <if test="groupCode != null and groupCode == 'CASH'">
                AND IS_PAY_CASH = 1
            </if>
        ORDER BY ACC_CODE ASC
    </select>
    
    <select id="selectAddrSelCode" parameterType="Map" resultType="egovMap">
        SELECT 
              <choose>
                  <when test="groupCode !=null and groupCode == 'country'">
                      CNTY_ID CODE_ID , CODE code , NAME CODE_NAME
                  </when>
                  <when test="groupCode !=null and groupCode == 'state'">
                      STATE_ID CODE_ID , CODE CODE , NAME CODE_NAME , CNTY_ID
                  </when>
                  <when test="groupCode !=null and groupCode == 'area'">
                      AREA_ID CODE_ID , AREA_NAME CODE_NAME
                  </when>
                  <when test="groupCode !=null and groupCode == 'post'">
                      POST_CODE_ID CODE_ID , POST_CODE CODE_NAME 
                  </when>
              </choose>
          FROM 
              <choose>
                  <when test="groupCode !=null and groupCode == 'country'">
                      SYS0015M
                      ORDER BY NAME
                  </when>
                  <when test="groupCode !=null and groupCode == 'state'">
                      SYS0035M
                      WHERE STUS_CODE_ID = '1'
                        AND CNTY_ID = #{codevalue}
                     ORDER BY NAME
                  </when>
                  <when test="groupCode !=null and groupCode == 'area'">
                      SYS0039M
                      WHERE AREA_STUS_ID = '1'
                        AND AREA_STATE_ID = #{codevalue}
                     ORDER BY AREA_NAME
                  </when>
                  <when test="groupCode !=null and groupCode == 'post'">
                      SYS0030C
                      WHERE STUS_CODE_ID = '1'
                        AND AREA_ID = #{codevalue}
                      ORDER BY POST_CODE
                  </when>
              </choose>
    </select>

    <!--Product 정보 조회 -->
    <select id="selectProductCodeList" parameterType="Map" resultType="egovMap">
    <![CDATA[
		SELECT T1.STK_ID    CODE_ID
		     , T1.STK_CODE ||' - '||T1.STK_DESC  CODE_NAME
		     , T3.CODE_NAME GROUPCD
		  FROM SYS0026M T1
		     , SAL0016M T2
		     , SYS0013M T3
		 WHERE T1.STK_ID = T2.STK_ID
		   and T1.STK_CTGRY_ID = T3.CODE_ID
		   and ( 1 != T1.IS_NCV )
		   AND ( 1 = T1.STUS_CODE_ID )
		   AND ( 61 = T1.STK_TYPE_ID )
		   AND ( T2.AMT > 0 )
		 ORDER
		    BY T3.CODE_NAME ASC, T1.STK_DESC ASC
    ]]>
    </select>
	<select id="selectInStckSelCodeList" parameterType="Map" resultType="egovMap">
	        SELECT 
						      STK.STK_ID CODE_ID
					        , (STK.STK_CODE || ' - ' || STK.STK_DESC) CODE_NAME
	          FROM 
	                      SYS0026M STK LEFT JOIN SYS0013M CD 
	                      ON STK.STK_TYPE_ID = CD.CODE_ID
	              <choose>
	                  <when test="groupCode !=null and groupCode == 'filtercd'">
						   WHERE STK.STK_TYPE_ID = 62
	                  </when>
	                  <when test="groupCode !=null and groupCode == 'sparecd'">
						   WHERE STK.STK_TYPE_ID IN (63,64)
	                  </when>
	              </choose>
						     AND STK.STK_CTGRY_ID = #{codevalue}
						     AND STK.STUS_CODE_ID = 1
						      ORDER BY CODE_NAME
	    </select>    
    
    <select id="selectStockLocationList" parameterType="Map" resultType="egovMap">
        SELECT WH_LOC_ID CODE_ID, WH_LOC_CODE CODE , DBMS_LOB.SUBSTR (WH_LOC_DESC, 4000) CODE_NAME
          FROM SYS0028M S28M
         WHERE 1 = 1
           AND S28M.WH_LOC_STUS_ID = 1
           AND S28M.WH_LOC_TYPE_ID = 277
           <if test="groupCode != null and groupCode == 'CODY'">
              AND S28M.WH_LOC_BRNCH_ID IN (SELECT BRNCH_ID FROM SYS0005M WHERE (CASE WHEN (TYPE_ID IS NOT NULL) THEN TYPE_ID ELSE 0 END) = 42)
           </if>
         ORDER BY CODE
    </select>
    
    <select id="selectBrnchIdByPostCode" parameterType="Map" resultType="egovMap">
    <![CDATA[
		SELECT T.POST_CODE_SET_ID
		     , T.POST_CODE
		     , T.BRNCH_ID
		     , T.CRT_DT
		     , T.UPD_DT
		     , T.UPD_USER_ID
		     , T.STUS_CODE_ID
		  FROM
		     ( SELECT T1.POST_CODE_SET_ID
		            , T1.POST_CODE
		            , T1.BRNCH_ID
		            , T1.CRT_DT
		            , T1.UPD_DT
		            , T1.UPD_USER_ID
		            , T1.STUS_CODE_ID
		         FROM SYS0031M T1
		        WHERE T1.POST_CODE = #{postCode}
		          AND 1 = T1.STUS_CODE_ID
		        ORDER BY POST_CODE_SET_ID ASC
		     ) T
		 WHERE ROWNUM <= 1
    ]]>
    </select>
    
    <select id="selectDocSubmissionList" parameterType="Map" resultType="egovMap">
        SELECT T.CODE_ID
             , T.TYPE_DESC
          FROM
             ( SELECT T1.CODE_ID
                    , DBMS_LOB.SUBSTR (T1.CODE_DESC, 4000) TYPE_DESC
                    , T2.TYPE_DT_SEQ
                 FROM SYS0013M T1
                 JOIN ORG0013C T2 ON T1.CODE_ID = T2.TYPE_ID
                WHERE T2.TYPE_CODE_ID = #{typeCodeId}
                  AND 1 = T2.STUS_ID
                  AND T2.TYPE_GRP_ID = #{typeCodeId}
             ) T
         ORDER BY T.TYPE_DT_SEQ ASC
    </select>
</mapper>