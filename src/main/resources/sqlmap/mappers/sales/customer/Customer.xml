<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.sales.customer.impl.CustomerMapper">
    
    <!-- 
        CLOB 컬럼을 사용하기 위해서는 아래와 같이 resultMap을 선언 후
         <select id="selectClobData" parameterType="Map"  resultMap="clobMap"> 와 같이
          resultMap="clobMap" 을 사용해야 함.
    -->
    
    <select id="selectCustomerList" parameterType="Map" resultType="egovMap">
        <![CDATA[
        SELECT  
                P2.C1 AS C1, 
                P2.CUST_ID AS CUST_ID, 
                P2.CRT_USER_ID AS CRT_USER_ID, 
                P2.USER_NAME1 AS USER_NAME1, 
                P2.CRT_DT AS CRT_DT, 
                P2.CORP_TYPE_ID AS CORP_TYPE_ID, 
                P2.CODE AS CODE, 
                P2.CODE_NAME AS CODE_NAME, 
                P2.Name1 AS Name, 
                P2.NRIC AS NRIC, 
                P2.CODE_NAME1 AS CODE_NAME1, 
                P2.TYPE_ID AS TYPE_ID, 
                P2.DOB AS DOB, 
                P2.EMAIL AS EMAIL, 
                P2.GENDER AS GENDER, 
                P2.NATION AS NATION, 
                P2.Name2 AS Name2, 
                P2.RACE_ID AS RACE_ID, 
                P2.CODE_NAME2 AS CODE_NAME2, 
                P2.REM AS REM, 
                P2.STUS_CODE_ID AS STUS_CODE_ID, 
                P2.UPD_USER_ID AS UPD_USER_ID, 
                P2.UPD_DT AS UPD_DT, 
                P2.USER_NAME2 AS USER_NAME2, 
                P2.CUST_ADD_ID AS CUST_ADD_ID, 
                P2.CUST_CNTC_ID AS CUST_CNTC_ID, 
                P2.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, 
                P2.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
                P2.VISA_EXPR AS VISA_EXPR, 
                P2.CUST_VA_NO AS CUST_VA_NO, 
                P2.GST_RGIST_NO AS GST_RGIST_NO
                FROM ( SELECT P1.CUST_ID, P1.Name1, P1.NRIC, P1.REM, P1.TYPE_ID, P1.PAS_SPORT_EXPR, 
                                P1.VISA_EXPR, P1.C1, P1.CRT_USER_ID, P1.USER_NAME1, 
                                P1.CRT_DT, P1.CORP_TYPE_ID, P1.CODE, P1.CODE_NAME, 
                                P1.CODE_NAME1, P1.DOB, P1.EMAIL, P1.GENDER, 
                                P1.NATION, P1.Name2, P1.RACE_ID, P1.CODE_NAME2, 
                                P1.STUS_CODE_ID, P1.UPD_USER_ID, P1.UPD_DT, P1.USER_NAME2, 
                                P1.CUST_ADD_ID, P1.CUST_CNTC_ID, P1.CUST_CARE_CNT_ID, P1.CUST_VA_NO, 
                                P1.GST_RGIST_NO, row_number() OVER (ORDER BY P1.CUST_ID ASC) AS row_number
                        FROM ( SELECT 
                                D1.CUST_ID AS CUST_ID, 
                                D1.Name1 AS Name1, 
                                D1.NRIC AS NRIC, 
                                D1.REM AS REM, 
                                D1.TYPE_ID AS TYPE_ID, 
                                D1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
                                D1.VISA_EXPR AS VISA_EXPR, 
                                D1.C1 AS C1, 
                                D1.CRT_USER_ID AS CRT_USER_ID, 
                                D1.USER_NAME1 AS USER_NAME1, 
                                D1.CRT_DT AS CRT_DT, 
                                D1.CORP_TYPE_ID AS CORP_TYPE_ID, 
                                D1.CODE AS CODE, 
                                D1.CODE_NAME AS CODE_NAME, 
                                D1.CODE_NAME1 AS CODE_NAME1, 
                                D1.DOB AS DOB, 
                                D1.EMAIL AS EMAIL, 
                                D1.GENDER AS GENDER, 
                                D1.NATION AS NATION, 
                                D1.Name2 AS Name2, 
                                D1.RACE_ID AS RACE_ID, 
                                D1.CODE_NAME2 AS CODE_NAME2, 
                                D1.STUS_CODE_ID AS STUS_CODE_ID, 
                                D1.UPD_USER_ID AS UPD_USER_ID, 
                                D1.UPD_DT AS UPD_DT, 
                                D1.USER_NAME2 AS USER_NAME2, 
                                D1.CUST_ADD_ID AS CUST_ADD_ID, 
                                D1.CUST_CNTC_ID AS CUST_CNTC_ID, 
                                D1.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, 
                                D1.CUST_VA_NO AS CUST_VA_NO, 
                                D1.GST_RGIST_NO AS GST_RGIST_NO
                                FROM ( SELECT DISTINCT 
                                            S1.CUST_ID1 AS CUST_ID, 
                                            S1.Name1 AS Name1, 
                                            S1.NRIC1 AS NRIC, 
                                            S1.REM, 
                                            S1.TYPE_ID AS TYPE_ID, 
                                            S1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
                                            S1.VISA_EXPR AS VISA_EXPR, 
                                            1 AS C1, 
                                            CASE WHEN (S1.CRT_USER_ID1 IS NOT NULL) THEN S1.CRT_USER_ID1 ELSE 0 END AS CRT_USER_ID, 
                                            CASE WHEN (S1.USER_ID1 IS NOT NULL) THEN S1.USER_NAME1 ELSE '' END AS USER_NAME1, 
                                            CASE WHEN ((S1.CRT_DT1 IS NOT NULL) AND (S1.CRT_DT1 > TO_DATE('1900-01-01' ))) THEN   S1.CRT_DT1 ELSE TO_DATE('1900-01-01') END AS CRT_DT, 
                                            CASE WHEN (S1.CORP_TYPE_ID IS NOT NULL) THEN S1.CORP_TYPE_ID ELSE 0 END AS CORP_TYPE_ID, 
                                            CASE WHEN (T10.CODE_ID IS NOT NULL) THEN T10.Code ELSE '' END AS CODE, 
                                            CASE WHEN (T10.CODE_ID IS NOT NULL) THEN T10.CODE_NAME ELSE '' END AS CODE_NAME, 
                                            CASE WHEN (S1.CODE_ID1 IS NOT NULL) THEN S1.CODE_NAME1 ELSE '' END AS CODE_NAME1, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN TO_DATE('1900-01-01') WHEN ((S1.DOB1 IS NOT NULL) AND (S1.DOB1 > TO_DATE('1900-01-01'))) THEN   S1.DOB1 ELSE TO_DATE('1900-01-01') END AS DOB, 
                                            CASE WHEN (S1.Email1 IS NOT NULL) THEN S1.Email1 ELSE '' END AS EMAIL, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.Gender1 IS NOT NULL) THEN S1.Gender1 ELSE '' END AS GENDER, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN 0 WHEN (S1.NATION IS NOT NULL) THEN   S1.NATION ELSE 0 END AS NATION, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.CNTY_ID1 IS NOT NULL) THEN S1.Name2 ELSE '' END AS Name2, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN 0 WHEN (S1.RACE_ID1 IS NOT NULL) THEN   S1.RACE_ID1 ELSE 0 END AS RACE_ID, 
                                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.CODE_ID2 IS NOT NULL) THEN S1.CODE_NAME2 ELSE '' END AS CODE_NAME2, 
                                            CASE WHEN (S1.STUS_CODE_ID1 IS NOT NULL) THEN   S1.STUS_CODE_ID1 ELSE 0 END AS STUS_CODE_ID, 
                                            CASE WHEN (S1.UPD_USER_ID1 IS NOT NULL) THEN S1.UPD_USER_ID1 ELSE 0 END AS UPD_USER_ID, 
                                            CASE WHEN S1.UPD_DT1 IS NOT NULL THEN   S1.UPD_DT1 ELSE TO_DATE('1900-01-01 00:00:00', 'yyyy-MM-dd') END AS UPD_DT, 
                                            CASE WHEN (S1.USER_ID2 IS NOT NULL) THEN S1.USER_NAME2 ELSE '' END AS USER_NAME2, 
                                            CASE WHEN (S1.CUST_ADD_ID IS NOT NULL) THEN S1.CUST_ADD_ID ELSE 0 END AS CUST_ADD_ID, 
                                            CASE WHEN (S1.CUST_CNTC_ID IS NOT NULL) THEN S1.CUST_CNTC_ID ELSE 0 END AS CUST_CNTC_ID, 
                                            CASE WHEN (S1.CUST_CARE_CNT_ID IS NOT NULL) THEN S1.CUST_CARE_CNT_ID ELSE 0 END AS CUST_CARE_CNT_ID, 
                                            CASE WHEN (S1.CUST_VA_NO IS NOT NULL) THEN S1.CUST_VA_NO ELSE '' END AS CUST_VA_NO, 
                                            CASE WHEN (S1.GST_RGIST_NO IS NOT NULL) THEN S1.GST_RGIST_NO ELSE '' END AS GST_RGIST_NO
                                            FROM   (SELECT T1.CUST_ID AS CUST_ID1, T1.Name AS Name1, T1.NRIC AS NRIC1, DBMS_LOB.SUBSTR (T1.REM, 4000) AS REM, T1.TYPE_ID AS TYPE_ID, T1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
                                                        T1.VISA_EXPR AS VISA_EXPR, 
                                                        T1.CRT_USER_ID AS CRT_USER_ID1, T2.USER_ID AS USER_ID1, T2.USER_NAME AS USER_NAME1, T1.CRT_DT AS CRT_DT1, T1.CORP_TYPE_ID AS CORP_TYPE_ID, T9.CODE_ID AS CODE_ID1, 
                                                        T9.CODE_NAME AS CODE_NAME1, T1.DOB AS DOB1, T1.Email AS Email1, T1.Gender AS Gender1, T1.NATION AS NATION, T4.Name AS Name2, T4.CNTY_ID AS CNTY_ID1, T1.RACE_ID AS RACE_ID1, 
                                                        T5.CODE_ID AS CODE_ID2, T5.CODE_NAME AS CODE_NAME2, T1.STUS_CODE_ID AS STUS_CODE_ID1, T1.UPD_DT AS UPD_DT1, T1.UPD_USER_ID AS UPD_USER_ID1, T3.USER_ID AS USER_ID2, T3.USER_NAME AS USER_NAME2, 
                                                        T6.CUST_ADD_ID AS CUST_ADD_ID, T7.CUST_CNTC_ID AS CUST_CNTC_ID, T8.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, T1.CUST_VA_NO AS CUST_VA_NO, T1.GST_RGIST_NO AS GST_RGIST_NO
                                                    FROM SAL0029D T1
                                                    LEFT OUTER 
                                                    JOIN SYS0047M T2 
                                                      ON T2.USER_ID = T1.CRT_USER_ID
                                                    LEFT OUTER 
                                                    JOIN SYS0047M T3 
                                                      ON T3.USER_ID = T1.UPD_USER_ID
                                                    LEFT OUTER 
                                                    JOIN SYS0015M T4 
                                                      ON T4.CNTY_ID =  T1.NATION
                                                    LEFT OUTER 
                                                    JOIN SYS0013M T5 
                                                      ON T5.CODE_ID =  T1.RACE_ID
                                                    LEFT OUTER 
                                                    JOIN SAL0023D T6 
                                                      ON T6.CUST_ID = T1.CUST_ID 
                                                     AND (9 =   T6.STUS_CODE_ID)
                                                    LEFT OUTER 
                                                    JOIN SAL0027D T7 
                                                      ON T7.CUST_ID = T1.CUST_ID 
                                                     AND (9 =   T7.STUS_CODE_ID)
                                                    LEFT OUTER 
                                                    JOIN SAL0026D T8 
                                                      ON T8.CUST_ID = T1.CUST_ID AND (9 =   T8.STUS_CODE_ID)
                                                    LEFT OUTER 
                                                    JOIN SYS0013M T9 
                                                      ON T9.CODE_ID = T1.TYPE_ID
                                                   WHERE (8 <>   T1.STUS_CODE_ID) 
                                                   ) S1
                                            LEFT OUTER 
                                            JOIN SYS0013M T10 
                                              ON T10.CODE_ID = S1.CORP_TYPE_ID 
                                             AND S1.CORP_TYPE_ID IS NOT NULL
                                         WHERE 1=1
				                          
				                            ]]>

				                                
				                            <if test="typeIdList != null and typeIdList != ''">
								                AND S1.TYPE_ID in 
									            <foreach item="item" collection="typeIdList" index="index" open="(" separator="," close=")">
									                #{item}
									            </foreach>
								            </if>
								            <if test="cmbCorpTypeIdList != null and cmbCorpTypeIdList != ''">
                                                AND S1.CORP_TYPE_ID in 
                                                <foreach item="item" collection="cmbCorpTypeIdList" index="index" open="(" separator="," close=")">
                                                    #{item}
                                                </foreach>
                                            </if>
								            <if test="nation != null and nation != ''">
                                                AND S1.NATION = #{nation}
                                            </if>
				                            <if test="custId != null and custId !=''">
                                                AND S1.CUST_ID1 = #{custId}
                                            </if>
                                            <if test="nric != null and nric !=''">
                                                AND S1.NRIC1 = #{nric}
                                            </if>
                                            <if test="raceId != null and raceId !=''">
                                                AND S1.RACE_ID1 = #{raceId}
                                            </if>
                                            <if test="name != null and name !=''">
                                                AND S1.Name1 like '%'|| #{name} || '%'
                                            </if>
                                            <if test="custVaNo != null and custVaNo !=''">
                                                AND S1.CUST_VA_NO = #{custVaNo}
                                            </if>
                                            <if test="dob != null and dob !=''">
                                                AND S1.DOB1 =   TO_CHAR(TO_DATE( #{dob} , 'DD-MM-YYYY'), 'YYYY-MM-DD')
                                            </if>
				                     ) D1
				            ) P1
				        ) P2
				WHERE P2.row_number > 0
				ORDER BY P2.CUST_ID ASC
		
    </select>
    <!-- Customer basic Info(Customer View)  -->
    <!-- <resultMap type="egovMap" id="basicClobMap">
        <result  property="REM" column="REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap> -->
    
    <select id="selectCustomerViewBasicInfo" parameterType="Map" resultType="egovMap">
       <![CDATA[
         SELECT 
            Extent1.CUST_ID AS CUST_ID,
            Extent1.NAME AS NAME,
            Extent1.NRIC AS NRIC,
            Extent1.REM AS REM,
            Extent1.TYPE_ID AS TYPE_ID,
            TO_CHAR(Extent1.PAS_SPORT_EXPR, 'DD-MM-YYYY') AS PAS_SPORT_EXPR,          
            TO_CHAR(Extent1.VISA_EXPR,'DD-MM-YYYY') AS VISA_EXPR,            
            CASE WHEN Extent1.CRT_USER_ID IS NOT NULL THEN Extent1.CRT_USER_ID ELSE 0 END AS CRT_USER_ID,
            CASE WHEN Extent2.USER_ID IS NOT NULL THEN Extent2.USER_NAME ELSE '' END AS USER_NAME,
            CASE WHEN Extent1.CRT_DT IS NOT NULL AND Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') THEN TO_CHAR(Extent1.CRT_DT, 'DD-MM-YYYY HH:MI:SS')  ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD HH:MI:SS'), 'DD-MM-YYYY HH:MI:SS') END AS CRT_DT,
            CASE WHEN Extent1.CORP_TYPE_ID IS NOT NULL THEN Extent1.CORP_TYPE_ID ELSE 0 END AS CORP_TYPE_ID,
            CASE WHEN Extent10.CODE_ID IS NOT NULL THEN Extent10.CODE ELSE '' END AS CODE,
            CASE WHEN Extent10.CODE_ID IS NOT NULL THEN Extent10.CODE_NAME ELSE '' END AS CODE_NAME,
            CASE WHEN Extent9.CODE_ID IS NOT NULL THEN Extent9.CODE_NAME ELSE '' END AS CODE_NAME1,            
            CASE WHEN 964 <> Extent1.TYPE_ID THEN TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'DD-MM-YYYY') WHEN Extent1.DOB IS NOT NULL AND TO_DATE(Extent1.DOB, 'YYYY-MM-DD') > TO_DATE('1900-01-01', 'YYYY-MM-DD') THEN TO_CHAR(TO_DATE(Extent1.DOB, 'YYYY-MM-DD'), 'DD-MM-YYYY') ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'DD-MM-YYYY') END AS DOB,            
            CASE WHEN Extent1.EMAIL IS NOT NULL THEN Extent1.EMAIL ELSE '' END AS EMAIL,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent1.GENDER IS NOT NULL THEN Extent1.GENDER ELSE '' END AS GENDER,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN 0 WHEN Extent1.NATION IS NOT NULL THEN Extent1.NATION ELSE 0 END AS NATION,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent4.CNTY_ID IS NOT NULL THEN Extent4.NAME ELSE '' END AS CNTY_NAME,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN 0 WHEN Extent1.RACE_ID IS NOT NULL THEN Extent1.RACE_ID ELSE 0 END AS RACE_ID,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent5.CODE_ID IS NOT NULL THEN Extent5.CODE_NAME ELSE '' END AS CODE_NAME2,
            CASE WHEN Extent1.STUS_CODE_ID IS NOT NULL THEN Extent1.STUS_CODE_ID ELSE 0 END AS STUS_CODE_ID,
            CASE WHEN Extent1.UPD_USER_ID IS NOT NULL THEN Extent1.UPD_USER_ID ELSE 0 END AS UPD_USER_ID,
            CASE WHEN Extent1.UPD_DT IS NOT NULL AND Extent1.UPD_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') THEN TO_CHAR(Extent1.UPD_DT, 'DD-MM-YYYY HH:MI:SS')  ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD HH:MI:SS'), 'DD-MM-YYYY HH:MI:SS') END AS UPD_DT,
            CASE WHEN Extent3.USER_ID IS NOT NULL THEN Extent3.USER_NAME ELSE '' END AS USER_NAME1,
            CASE WHEN Extent6.CUST_ADD_ID IS NOT NULL THEN Extent6.CUST_ADD_ID ELSE 0 END AS CUST_ADD_ID,
            CASE WHEN Extent7.CUST_CNTC_ID IS NOT NULL THEN Extent7.CUST_CNTC_ID ELSE 0 END AS CUST_CNTC_ID,
            CASE WHEN Extent8.CUST_CARE_CNT_ID IS NOT NULL THEN Extent8.CUST_CARE_CNT_ID ELSE 0 END AS CUST_CARE_CNT_ID,
            CASE WHEN Extent1.CUST_VA_NO IS NOT NULL THEN Extent1.CUST_VA_NO ELSE '' END AS CUST_VA_NO,
            CASE WHEN Extent1.GST_RGIST_NO IS NOT NULL THEN Extent1.GST_RGIST_NO ELSE '' END AS GST_RGIST_NO
        
        FROM 
            SAL0029D Extent1
            LEFT OUTER JOIN SYS0047M Extent2 ON Extent2.USER_ID = Extent1.CRT_USER_ID
            LEFT OUTER JOIN SYS0047M Extent3 ON Extent3.USER_ID = Extent1.UPD_USER_ID
            LEFT OUTER JOIN SYS0015M Extent4 ON Extent4.CNTY_ID = Extent1.NATION
            LEFT OUTER JOIN SYS0013M Extent5 ON Extent5.CODE_ID = Extent1.RACE_ID
            LEFT OUTER JOIN SAL0023D Extent6 ON Extent6.CUST_ID = Extent1.CUST_ID AND (9 = Extent6.STUS_CODE_ID)
            LEFT OUTER JOIN SAL0027D Extent7 ON Extent7.CUST_ID = Extent1.CUST_ID AND (9 = Extent7.STUS_CODE_ID)
            LEFT OUTER JOIN SAL0026D Extent8 ON Extent8.CUST_ID = Extent1.CUST_ID AND (9 = Extent8.STUS_CODE_ID)
            LEFT OUTER JOIN SYS0013M Extent9 ON Extent9.CODE_ID = Extent1.TYPE_ID
            LEFT OUTER JOIN SYS0013M Extent10 ON Extent10.CODE_ID = Extent1.CORP_TYPE_ID AND Extent1.CORP_TYPE_ID IS NOT NULL
        WHERE 
            8 <> Extent1.STUS_CODE_ID AND Extent1.CUST_ID =#{custId}
         AND
            ROWNUM = 1
       ]]>
    </select>
    <!--  Customer Main Address(Customer View) -->
    <select id="selectCustomerViewMainAddress" parameterType="Map" resultType="egovMap">
      <![CDATA[ 
			  SELECT Extent1.CUST_ADD_ID CUST_ADD_ID  ,
                           Extent1.CUST_ID CUST_ID  ,
                           Extent1.CRT_USER_ID CRT_USER_ID  ,
                           Extent2.NAME NAME  ,
                           Extent5.ISO,
                           Extent5.STREET_ID,
                           Extent5.SUBURB,
				           NVL(Extent1.ADD1, '') ADD1,
				           NVL(Extent1.ADD2, '') ADD2,
				           NVL(Extent5.STREET, '') STREET,
				           NVL(Extent5.POSTCODE, '') POSTCODE,
				           NVL(Extent5.LOCALITY, '') TOWN,
				           NVL(Extent5.REGION2, '') CITY,
				           NVL(Extent5.REGION1, '') STATE,
				           NVL(Extent5.COUNTRY, '') COUNTRY,
                           CASE  WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END ||' '|| CASE WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END
                           ||' '|| Extent5.STREET ||' '|| Extent5.POSTCODE ||' '|| Extent5.LOCALITY ||' '|| Extent5.REGION2 ||' '|| Extent5.REGION1 ||' '|| Extent5.COUNTRY AS FULL_ADDRESS,                            
                           CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM ELSE '' END REM  ,
                           CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  ,
                           CASE  WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END USER_NAME  ,
                           CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01' , 'YYYY-MM-DD'))) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END CRT_DT ,
                           CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END UPD_DT  ,
                           CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END UPD_USER_ID ,
                           CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END USER_NAME1  
                    FROM SAL0023D Extent1
                           JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID                        
                           LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                           LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                           LEFT JOIN SYS0064M Extent5   ON Extent5.STREET_ID = Extent1.STREET_ID
                    WHERE  
                         8 <> Extent1.STUS_CODE_ID
                    AND  
                        Extent1.CUST_ADD_ID = #{custAddId} 
                    AND 
                        ROWNUM <= 1
     ]]>
    </select>
    <!-- customer main Contact(Customer View) -->
    <!-- <resultMap type="egovMap" id="mainContactClobMap">
           <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap> -->
    <select id="selectCustomerViewMainContact" parameterType="Map" resultType="egovMap">
        <![CDATA[
			SELECT Limit1.CUST_CNTC_ID CUST_CNTC_ID  ,
                       Limit1.CUST_ID CUST_ID  ,
                       TO_CHAR(Limit1.CRT_DT, 'DD-MM-YYYY') CRT_DT  ,
                       Limit1.CRT_USER_ID CRT_USER_ID  , 
                       Limit1.USER_NAME USER_NAME  , 
                       Limit1.DEPT DEPT  , 
                       TO_CHAR(Limit1.DOB, 'DD-MM-YYYY') DOB  , 
                       Limit1.EMAIL EMAIL  , 
                       Limit1.GENDER GENDER  , 
                       Limit1.CUST_INITIAL CUST_INITIAL  , 
                       Limit1.CODE CODE  ,  
                       Limit1.NAME1 NAME1  , 
                       Limit1.NRIC NRIC  , 
                       Limit1.POS POS  ,
                       Limit1.RACE_ID RACE_ID  , 
                       Limit1.CODE_NAME CODE_NAME  , 
                       Limit1.STUS_CODE_ID STUS_CODE_ID, 
                       Limit1.NAME NAME  ,
                       Limit1.TELF TELF  , 
                       Limit1.TEL_M1 TEL_M1  , 
                       Limit1.TEL_O TEL_O  , 
                       Limit1.TEL_R TEL_R  , 
                       Limit1.EXT EXT  , 
                       Limit1.UPD_USER_ID UPD_USER_ID  , 
                       Limit1.USER_NAME1 USER_NAME1  ,
                       TO_CHAR(Limit1.UPD_DT, 'DD-MM-YYYY') UPD_DT   
            FROM ( SELECT Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                                    Extent1.CUST_ID CUST_ID  ,
                                    Extent1.CRT_USER_ID CRT_USER_ID  ,
                                    Extent2.NAME NAME  ,
                                    CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > '1900-01-01' ) ) THEN TO_DATE(Extent1.CRT_DT, 'YYYY-MM-DD') ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END CRT_DT  , 
                                    CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END USER_NAME,
                                    CASE WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END DEPT  , 
                                    CASE WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB >'1900-01-01' ) ) THEN Extent1.DOB ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END DOB  , 
                                    CASE WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END EMAIL  ,
                                    CASE WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END GENDER  ,
                                    CASE WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0  END CUST_INITIAL  ,
                                    CASE WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END CODE  ,
                                    CASE WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME)) ELSE '' END NAME1  ,
                                    CASE WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC))ELSE '' END NRIC  ,
                                    CASE WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END POS  ,
                                    CASE WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0  END RACE_ID  ,
                                    CASE WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE ''END CODE_NAME  ,
                                    CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  ,
                                    CASE WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END TELF  ,
                                    CASE WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE ''  END TEL_M1  ,
                                    CASE WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O))  ELSE '' END TEL_O  ,
                                    CASE WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R))ELSE '' END TEL_R  ,
                                    CASE WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END EXT  ,
                                    CASE WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID  ELSE 0 END UPD_USER_ID  ,
                                    CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME  ELSE '' END USER_NAME1  ,
                                    CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > '1900-01-01' ) ) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END UPD_DT  
                     FROM SAL0027D Extent1
                                    JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                    LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                                    LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                                    LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL 
                                    LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                      WHERE  ( 8 <> Extent1.STUS_CODE_ID )
                          AND  ( Extent1.CUST_CNTC_ID = #{custCntcId} ) AND ROWNUM <= 1 ) Limit1
          ]]>
    </select>
   <!-- Ajax Call Address List  -->
    <select id="selectCustomerAddressJsonList" parameterType="Map" resultType="egovMap">
       <![CDATA[    
                     SELECT 
                        project1.CUST_ADD_ID,
                        project1.CUST_ID,
                        project1.CRT_USER_ID,
                        project1.NAME,
                        project1.ADD1,
                        project1.ADD2,
                        project1.ADD2,
                        project1.ADDR,
                        project1.REM,
                        project1.USER_NAME,
                        project1.CRT_DT,
                        project1.UPD_DT,
                        project1.UPD_USER_ID,
                        project1.USER_NAME1,
                        project1.STUS_CODE_ID
                    FROM 
                        (SELECT Extent1.CUST_ADD_ID   ,
                               Extent1.CUST_ID   ,
                               Extent1.CRT_USER_ID   ,
                               Extent2.NAME   ,
                               Extent1.ADD1,
                               Extent1.ADD2,
                               CASE  WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END ||' '|| CASE WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END ||' '||
                               Extent5.STREET ||' '|| Extent5.POSTCODE ||' '|| Extent5.LOCALITY ||' '|| Extent5.REGION2 ||' '|| Extent5.REGION1 ||' '|| Extent5.COUNTRY AS ADDR,                                                    
                               CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM  ELSE '' END REM  ,
                               CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  ,
                               CASE  WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END USER_NAME  ,
                               CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('19000101','YYYYMMDD') ) ) THEN Extent1.CRT_DT ELSE TO_DATE('19000101','YYYYMMDD') END CRT_DT  ,
                               CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('19000101','YYYYMMDD') ) ) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END UPD_DT  ,
                               CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END UPD_USER_ID  ,
                               CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END USER_NAME1  
                        FROM SAL0023D Extent1
                               JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID                               
                               LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                               LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                               LEFT JOIN SYS0064M Extent5   ON Extent5.STREET_ID = Extent1.STREET_ID
                        WHERE   
                              8 <> Extent1.STUS_CODE_ID 
                        AND  
                              Extent1.CUST_ID = #{custId}) project1
                ]]>
                  <if test='searchWord != null and searchWord !=""'>
                     WHERE (UPPER( project1.ADD1)     LIKE '%' || UPPER(#{searchWord}) || '%'
                            OR UPPER(project1.ADD2)     LIKE '%' || UPPER(#{searchWord}) || '%'
                            OR UPPER(project1.ADDR)    LIKE '%' || UPPER(#{searchWord}) || '%'                        
                            OR UPPER(project1.NAME)     LIKE '%' || UPPER(#{searchWord}) || '%')
                  </if>
                ORDER BY project1.Name DESC
    </select>
    
    <!-- Ajax Call Contact List  -->
    <!-- <resultMap type="EgovMap" id="contactClobMap">
        <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
     -->
    <select id="selectCustomerContactJsonList" parameterType="Map" resultType="egovMap">
        <![CDATA[   
           SELECT Project1.CUST_CNTC_ID CUST_CNTC_ID  ,
                     Project1.CUST_ID CUST_ID  ,
                     Project1.CRT_USER_ID CRT_USER_ID  ,
                     Project1.NAME NAME  ,
                     Project1.crtDt CRT_DT  , 
                     Project1.userName USER_NAME  ,
                     Project1.dept DEPT  ,
                     Project1.dob DOB  ,
                     Project1.email EMAIL  ,
                     Project1.gender GENDER  , 
                     Project1.custInitial CUST_INITIAL  ,
                     Project1.code CODE  ,
                     Project1.name1 NAME1  , 
                     Project1.nric NRIC  ,
                     Project1.pos POS  ,
                     Project1.raceId RACE_ID  ,
                     Project1.codeName CODE_NAME  ,
                     Project1.stusCodeId STUS_CODE_ID  ,
                     Project1.telF TELF  ,
                     Project1.telM1 TEL_M1  ,
                     Project1.telO TEL_O  ,
                     Project1.telR TEL_R  ,
                     Project1.ext EXT  ,
                     Project1.updUserId UPD_USER_ID  ,
                     Project1.userName1 USERNAME1  ,
                     Project1.updDt UPD_DT                       
            FROM ( SELECT   Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                                    Extent1.CUST_ID CUST_ID  ,
                                    Extent1.CRT_USER_ID CRT_USER_ID  ,
                                    Extent2.NAME NAME  ,
                                    CASE WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END crtDt  ,
                                    CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END userName  ,
                                    CASE WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END dept  ,   
                                    CASE WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.DOB ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END dob ,
                                    CASE WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END email,
                                    CASE WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END gender,
                                    CASE WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0 END custInitial  , 
                                    CASE WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END code  ,
                                    CASE WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME))ELSE '' END name1  ,
                                    CASE WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC)) ELSE '' END nric  ,
                                    CASE WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END pos  ,
                                    CASE WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0 END raceId  ,
                                    CASE WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE '' END codeName  ,
                                    CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  ,
                                    CASE WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END telF  ,
                                    CASE WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE '' END telM1  ,
                                    CASE WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O)) ELSE '' END telO  ,
                                    CASE WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R)) ELSE '' END telR  ,
                                    CASE WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END ext  ,
                                    CASE WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUserId  ,
                                    CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName1  ,
                                    CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END updDt  
                           FROM SAL0027D Extent1
                                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                                LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                                LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL
                                LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                          WHERE 8 <> Extent1.STUS_CODE_ID
                            AND Extent1.CUST_ID = #{custId}
                    ) Project1
                ]]>
                  <if test='searchWord != null and searchWord !=""'>
                    WHERE (UPPER(Project1.NAME)     LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.name1)    LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.nric)     LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.codeName) LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.telM1)    LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.telO)     LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.telR)     LIKE '%' || UPPER(#{searchWord}) || '%'
                        OR UPPER(Project1.telF)     LIKE '%' || UPPER(#{searchWord}) || '%')
                  </if>
                ORDER BY Project1.Name DESC
    </select>

    <select id="selectCustCareContactList" parameterType="Map" resultType="egovMap">
        SELECT T1.CUST_CARE_CNT_ID
             , T1.CUST_ID
             , T1.CRT_USER_ID
             , T2.NAME
             , DECODE(T1.CRT_DT, NULL, '1900-01-01 00:00:00', TO_CHAR('YYYY-MM-DD HH24:MI;SS')) AS CRT_DT
             , NVL(T3.USER_NAME, '') AS USER_NAME
             , NVL(T1.EMAIL, '') AS EMAIL
             , NVL(T1.CUST_INITIAL, 0) AS CUST_INITIAL
             , NVL(T5.CODE, '') AS CODE
             , NVL(T1.NAME, '') AS NAME1
             , NVL(T1.STUS_CODE_ID, 0) AS STUS_CODE_ID
             , NVL(T1.TELF, '') AS TELF
             , NVL(T1.TEL_M, '') AS TEL_M
             , NVL(T1.TEL_O, '') AS TEL_O
             , NVL(T1.TEL_R, '') AS TEL_R
             , NVL(T1.EXT, '') AS EXT
             , NVL(T1.UPD_USER_ID, 0) AS UPD_USER_ID
             , NVL(T4.USER_NAME, '') AS USER_NAME
             , DECODE(T1.UPD_DT, NULL, '1900-01-01 00:00:00', TO_CHAR('YYYY-MM-DD HH24:MI;SS')) AS UPD_DT
          FROM SAL0026D T1
          JOIN SYS0038M T2 ON T2.STUS_CODE_ID = UTILS.CONVERT_TO_NUMBER(T1.STUS_CODE_ID,10,0)
          LEFT JOIN SYS0047M T3 ON T3.USER_ID = T1.CRT_USER_ID
          LEFT JOIN SYS0047M T4 ON T4.USER_ID = T1.UPD_USER_ID
          LEFT JOIN SYS0013M T5 ON T5.CODE_ID = T1.CUST_INITIAL
         WHERE 8 != T1.STUS_CODE_ID
           AND T1.CUST_ID = #{custId}
         <if test='searchWord != null and searchWord !=""'>
           AND (UPPER(T2.NAME)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T1.NAME)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T1.TEL_M) LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T1.TEL_O) LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T1.TEL_R) LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T1.TELF)  LIKE '%' || UPPER(#{searchWord}) || '%')
          </if>
         ORDER BY T1.NAME DESC
    </select>
    
    <select id="selectBillingGroupByKeywordCustIDList" parameterType="Map" resultType="egovMap">
		SELECT T1.CUST_BILL_ID
		     , T1.CUST_BILL_SO_ID
		     , T1.CUST_BILL_CUST_ID
		     , T1.CUST_BILL_CNT_ID
		     , T1.CUST_BILL_ADD_ID
		     , T1.CUST_BILL_STUS_ID
		     , T1.CUST_BILL_UPD_USER_ID
		     , T1.CUST_BILL_GRP_NO
		     , T1.CUST_BILL_CRT_USER_ID
		     , T1.CUST_BILL_PAY_TRM
		     , T1.CUST_BILL_INCHG_MEM_ID
		     , T1.CUST_BILL_IS_ESTM
		     , T1.CUST_BILL_IS_SMS
		     , T1.CUST_BILL_IS_POST
		     , NVL(T2.ADD1,     '') ADD1
		     , NVL(T2.ADD2,     '') ADD2
             , NVL(T3.STREET,   '') STREET
             , NVL(T3.POSTCODE, '') POSTCODE
             , NVL(T3.LOCALITY, '') TOWN
             , NVL(T3.REGION2,  '') CITY
             , NVL(T3.REGION1,  '') STATE
		     , NVL(T3.COUNTRY,  '') COUNTRY
		     , NVL(T1.CUST_BILL_EMAIL, '') CUST_BILL_EMAIL
		     , NVL(T1.CUST_BILL_CRT_DT, TO_DATE('1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) CUST_BILL_CRT_DT
		     , NVL(T7.USER_NAME, '') USER_NAME
		     , NVL(T1.CUST_BILL_REM, '') CUST_BILL_REM
		     , NVL(T9.MEM_CODE, '') MEM_CODE
		     , NVL(T9.NAME, '') MEM_NAME
		     , NVL(T9.NRIC, '') NRIC
		     , NVL(T10.CODE_NAME, '') CODE_NAME
		     , NVL(T8.USER_NAME, '') USER_NAME
		     , NVL(T1.CUST_BILL_UPD_DT, TO_DATE('1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) CUST_BILL_UPD_DT
		  FROM SAL0024D T1
		  LEFT JOIN SAL0023D T2  ON T2.CUST_ADD_ID = T1.CUST_BILL_ADD_ID
		  LEFT JOIN SYS0064M T3  ON T3.STREET_ID = T2.STREET_ID
		  LEFT JOIN SYS0047M T7  ON T7.USER_ID = T1.CUST_BILL_CRT_USER_ID
		  LEFT JOIN SYS0047M T8  ON T8.USER_ID = T1.CUST_BILL_UPD_USER_ID
		  LEFT JOIN ORG0001D T9  ON T9.MEM_ID = T1.CUST_BILL_INCHG_MEM_ID
		  LEFT JOIN SYS0013M T10 ON T10.CODE_ID = T1.CUST_BILL_PAY_TRM
		 WHERE 1 = T1.CUST_BILL_STUS_ID
		   AND T1.CUST_BILL_CUST_ID = #{custId}
         <if test='searchWord != null and searchWord !=""'>
           AND (UPPER(T1.CUST_BILL_GRP_NO)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T2.ADD1)     LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T2.ADD2)     LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.POSTCODE) LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.STREET)   LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.LOCALITY) LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.REGION2)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.REGION1)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(T3.COUNTRY)  LIKE '%' || UPPER(#{searchWord}) || '%'
             OR UPPER(DECODE(T1.CUST_BILL_IS_POST, 1, 'Post', '')||' '||DECODE(T1.CUST_BILL_IS_SMS, 1, 'SMS', '')||' '||DECODE(T1.CUST_BILL_IS_ESTM, 1, 'EStatement', ''))  LIKE '%' || UPPER(#{searchWord}) || '%')
          </if>
		 ORDER BY T1.CUST_BILL_GRP_NO ASC
    </select>
    
    <!-- Ajax Call Bank List  -->
    <!-- <resultMap type="EgovMap" id="bankClobMap">
            <result property="CUST_ENCRYPT_ACC_NO" column="CUST_ENCRYPT_ACC_NO" jdbcType="CLOB" javaType="java.lang.String"/> 
            <result property="CUST_ACC_BANK_BRNCH" column="CUST_ACC_BANK_BRNCH" jdbcType="CLOB" javaType="java.lang.String"/>
            <result property="CUST_ACC_OWNER" column="CUST_ACC_OWNER" jdbcType="CLOB" javaType="java.lang.String"/> 
            <result property="CUST_ACC_REM" column="CUST_ACC_REM" jdbcType="CLOB" javaType="java.lang.String"/>c11
    </resultMap> -->
    
    <select id="selectCustomerBankAccJsonList" parameterType="Map" resultType="egovMap">
        <![CDATA[   
        SELECT  Project1.CUST_ACC_ID CUST_ACC_ID  ,
                    Project1.CUST_ID CUST_ID  ,
                    Project1.custAccNo CUST_ACC_NO  , 
                    Project1.custEncryptAccNo CUST_ENCRYPT_ACC_NO  ,
                    Project1.custAccBankId CUST_ACC_BANK_ID  ,
                    Project1.bankCode BANK_CODE  ,
                    Project1.bankName BANK_NAME  ,
                    Project1.custAccBankBrnch CUST_ACC_BANK_BRNCH  ,
                    Project1.custAccOwner CUST_ACC_OWNER  , 
                    Project1.custAccStusId CUST_ACC_STUS_ID  , 
                    Project1.custAccTypeId CUST_ACC_TYPE_ID  ,
                    Project1.codeName CODE_NAME  ,
                    Project1.custAccRem CUST_ACC_REM  ,
                    Project1.custAccCrtUserId CUST_ACC_CRT_USER_ID  , 
                    Project1.custAccUpdUserId CUST_ACC_UPD_USER_ID  ,
                    Project1.custAccCrtDt CUST_ACC_CRT_DT  ,
                    Project1.custAccUpdDt CUST_ACC_UPD_DT  ,
                    Project1.userName USER_NAME  , 
                    Project1.userName1 USER_NAME1  
        FROM   ( SELECT Project1.CUST_ACC_ID CUST_ACC_ID  ,
                                Project1.CUST_ID CUST_ID  ,
                                Project1.custAccNo custAccNo  , 
                                Project1.custEncryptAccNo custEncryptAccNo  ,
                                Project1.custAccBankId custAccBankId  ,
                                Project1.bankCode bankCode  ,
                                Project1.bankName bankName  ,
                                Project1.custAccBankBrnch custAccBankBrnch  ,
                                Project1.custAccOwner custAccOwner  ,
                                Project1.custAccStusId custAccStusId  , 
                                Project1.custAccTypeId custAccTypeId  ,
                                Project1.codeName codeName  ,
                                Project1.custAccRem custAccRem  ,
                                Project1.custAccCrtUserId custAccCrtUserId  ,
                                Project1.custAccUpdUserId custAccUpdUserId  ,
                                Project1.custAccCrtDt custAccCrtDt  ,
                                Project1.custAccUpdDt custAccUpdDt  ,
                                Project1.userName userName  ,
                                Project1.userName1 userName1  
                    
                  FROM ( SELECT Extent1.CUST_ACC_ID CUST_ACC_ID  ,
                                        Extent1.CUST_ID CUST_ID  ,
                                        CASE WHEN ( Extent1.CUST_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ACC_NO ELSE ''  END custAccNo  ,
                                        CASE WHEN ( Extent1.CUST_ENCRYPT_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ENCRYPT_ACC_NO ELSE NULL  END custEncryptAccNo  , 
                                        CASE WHEN ( Extent1.CUST_ACC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_ID  ELSE 0  END custAccBankId  ,
                                        CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE  ELSE '' END bankCode  ,
                                        CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE ''  END bankName  ,
                                        CASE WHEN ( Extent1.CUST_ACC_BANK_BRNCH IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_BRNCH   ELSE NULL END custAccBankBrnch  , 
                                        CASE WHEN ( Extent1.CUST_ACC_OWNER IS NOT NULL ) THEN Extent1.CUST_ACC_OWNER ELSE NULL END custAccOwner  , 
                                        CASE WHEN ( Extent1.CUST_ACC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_ACC_STUS_ID  ELSE 0  END custAccStusId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_ACC_TYPE_ID  ELSE 0 END custAccTypeId  ,
                                        CASE WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName  ,
                                        CASE WHEN ( Extent1.CUST_ACC_REM IS NOT NULL ) THEN Extent1.CUST_ACC_REM ELSE NULL END custAccRem  , 
                                        CASE WHEN ( Extent1.CUST_ACC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_USER_ID ELSE 0 END custAccCrtUserId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_USER_ID ELSE 0 END custAccUpdUserId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END custAccCrtDt  ,
                                        CASE WHEN ( Extent1.CUST_ACC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END custAccUpdDt  ,
                                        CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  ,
                                        CASE WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  
                           FROM SAL0022D Extent1
                                    LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_ACC_BANK_ID
                                    LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_ACC_TYPE_ID
                                    LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_ACC_CRT_USER_ID
                                    LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_ACC_UPD_USER_ID
                          WHERE  8 <> Extent1.CUST_ACC_STUS_ID 
                              AND  Extent1.CUST_ID = #{custId}) Project1 
                 ) Project1 
        ORDER BY Project1.CUST_ACC_ID ASC 
		 ]]>   
    </select>
    
    <!-- Ajax Call Credit Card List  -->
    <!-- <resultMap type="egovMap" id="cardClobMap">
           <result property="CUST_CRC_NO" column="CUST_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
           <result property="CUST_ORI_CRC_NO" column="CUST_ORI_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
           <result property="CUST_CRC_REM" column="CUST_CRC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap> -->
    
    <select id="selectCustomerCreditCardJsonList" parameterType="Map" resultType="egovMap">
   <![CDATA[   
		SELECT   Project1.CUST_CRC_ID CUST_CRC_ID  ,
            Project1.custId CUST_ID  ,
            Project1.custCrcBankId CUST_CRC_BANK_ID  ,
            Project1.bankCode BANK_CODE  ,
            Project1.bankName BANK_NAME  ,
            Project1.custCrcExpr CUST_CRC_EXPR  ,
            Project1.custCrcOwner CUST_CRC_OWNER  ,
            Project1.custCrcNo CUST_CRC_NO  ,
            Project1.custOriCrcNo CUST_ORI_CRC_NO  , 
            Project1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
            Project1.custCrcTypeId CUST_CRC_TYPE_ID  , 
            Project1.codeName1 CODE_NAME1  ,
            Project1.custCrcStusId CUST_CRC_STUS_ID  ,
            Project1.custCrcCrtDt CUST_CRC_CRT_DT  ,
            Project1.custCrcUpdDt CUST_CRC_UPD_DT  ,
            Project1.custCrcRem CUST_CRC_REM  ,
            Project1.custCrcCrtUserId CUST_CRC_CRT_USER_ID  ,
            Project1.custCrcUpdUserId CUST_CRC_UPD_USER_ID  ,
            Project1.userName USER_NAME  ,
            Project1.userName1 USER_NAME1  ,
            Project1.cardTypeId CARD_TYPE_ID  ,
            Project1.CODE_NAME CODE_NAME  
    FROM (  SELECT  Project1.CUST_CRC_ID CUST_CRC_ID  ,
			                Project1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
			                Project1.CODE_NAME CODE_NAME  ,
			                Project1.custId custId  ,
			                Project1.custCrcBankId custCrcBankId  ,
			                Project1.bankCode bankCode  ,
			                Project1.bankName bankName  ,
			                Project1.custCrcExpr custCrcExpr  ,
			                Project1.custCrcOwner custCrcOwner  ,
			                Project1.custCrcNo custCrcNo  ,
			                Project1.custOriCrcNo custOriCrcNo  ,
			                Project1.custCrcTypeId custCrcTypeId  ,
			                Project1.codeName1 codeName1  ,
			                Project1.custCrcStusId custCrcStusId  ,
			                Project1.custCrcCrtDt custCrcCrtDt  ,
			                Project1.custCrcUpdDt custCrcUpdDt  ,
			                Project1.custCrcRem custCrcRem  ,
			                Project1.custCrcCrtUserId custCrcCrtUserId  ,
			                Project1.custCrcUpdUserId custCrcUpdUserId  ,
			                Project1.userName userName  ,
			                Project1.userName1 userName1  ,
			                Project1.cardTypeId cardTypeId                    
		         FROM ( SELECT Extent1.CUST_CRC_ID CUST_CRC_ID  ,
				                       Extent1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
				                       Extent6.CODE_NAME CODE_NAME  ,
				                       CASE WHEN ( Extent1.CUST_ID IS NOT NULL ) THEN Extent1.CUST_ID ELSE 0 END custId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_CRC_BANK_ID ELSE 0 END custCrcBankId  ,
				                       CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  ,
				                       CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankName  ,
				                       CASE WHEN ( Extent1.CUST_CRC_EXPR IS NOT NULL ) THEN Extent1.CUST_CRC_EXPR ELSE '' END custCrcExpr  ,
				                       CASE WHEN ( Extent1.CUST_CRC_OWNER IS NOT NULL ) THEN Extent1.CUST_CRC_OWNER ELSE '' END custCrcOwner  ,
				                       CASE WHEN ( Extent1.CUST_CRC_NO IS NOT NULL ) THEN Extent1.CUST_CRC_NO ELSE NULL END custCrcNo  ,
				                       CASE WHEN ( Extent1.CUST_ORI_CRC_NO IS NOT NULL ) THEN Extent1.CUST_ORI_CRC_NO ELSE NULL END custOriCrcNo  ,
				                       CASE WHEN ( Extent1.CUST_CRC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_CRC_TYPE_ID ELSE 0 END custCrcTypeId  ,
				                       CASE WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName1  ,
				                       CASE WHEN ( Extent1.CUST_CRC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_CRC_STUS_ID ELSE 0 END custCrcStusId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcCrtDt  ,
				                       CASE WHEN ( Extent1.CUST_CRC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcUpdDt  ,
				                       CASE WHEN ( Extent1.CUST_CRC_REM IS NOT NULL ) THEN Extent1.CUST_CRC_REM ELSE NULL END custCrcRem  ,
				                       CASE WHEN ( Extent1.CUST_CRC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_USER_ID ELSE 0 END custCrcCrtUserId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_USER_ID ELSE 0 END custCrcUpdUserId  ,
				                       CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  ,
				                       CASE WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  ,
				                       CASE WHEN ( Extent1.CARD_TYPE_ID IS NOT NULL ) THEN Extent1.CARD_TYPE_ID ELSE 0 END cardTypeId  
				                FROM SAL0028D Extent1
				                       LEFT JOIN SYS0004M Extent2 ON Extent2.BANK_ID = Extent1.CUST_CRC_BANK_ID
				                       LEFT JOIN SYS0013M Extent3 ON Extent3.CODE_ID = Extent1.CUST_CRC_TYPE_ID
				                       LEFT JOIN SYS0047M Extent4 ON Extent4.USER_ID = Extent1.CUST_CRC_CRT_USER_ID
				                       LEFT JOIN SYS0047M Extent5 ON Extent5.USER_ID = Extent1.CUST_CRC_UPD_USER_ID
				                       JOIN SYS0013M Extent6 ON Extent6.CODE_ID = Extent1.CARD_TYPE_ID
			                 WHERE  8 <> Extent1.CUST_CRC_STUS_ID
			                          AND  CASE WHEN Extent1.CUST_ID IS NOT NULL THEN Extent1.CUST_ID ELSE 0 END = #{custId}
         ]]>   
							         <if test='searchWord != null and searchWord !=""'>
							           AND (UPPER(Extent1.CUST_ORI_CRC_NO)  LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent3.CODE_NAME)        LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent1.CUST_CRC_OWNER)   LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent1.CUST_CRC_EXPR)    LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent2.CODE)             LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent2.NAME)             LIKE '%' || UPPER(#{searchWord}) || '%'
							             OR UPPER(Extent6.CODE_NAME)        LIKE '%' || UPPER(#{searchWord}) || '%')
							          </if>        
                ) Project1 
            ) Project1 
          ORDER BY Project1.CUST_CRC_ID ASC
    </select>
    <!-- Ajax Call Own Order List  -->
    <select id="selectCustomerOwnOrderJsonList" parameterType="Map" resultType="egovMap">
	    <![CDATA[  
		     SELECT   Project6.C1 C1  , 
                    Project6.SALES_ORD_ID SALES_ORD_ID  , 
                    Project6.SALES_ORD_NO SALES_ORD_NO  , 
                    TO_CHAR(Project6.salesDt,'DD-MM-YYYY') SALES_DT  ,  
                    Project6.appTypeId APP_TYPE_ID  , 
                    Project6.code CODE  , 
                    Project6.codeName CODE_NAME  , 
                    Project6.stusCodeId STUS_CODE_ID  , 
                    Project6.code1 CODE1  , 
                    Project6.itmStkId ITM_STK_ID  , 
                    Project6.STK_CODE STK_CODE  ,
                    Project6.STK_DESC STK_DESC  , 
                    Project6.modeId MODE_ID  , 
                    Project6.code2 CODE2  ,
                    Project6.bankCode BANK_CODE  , 
                    TO_CHAR(Project6.rentAmt, 'FM9999999999990.00') AS RENT_AMT 
             FROM ( SELECT  Project6.C1 C1  , 
                            Project6.SALES_ORD_ID SALES_ORD_ID  , 
                            Project6.SALES_ORD_NO SALES_ORD_NO  , 
                            Project6.salesDt salesDt  , 
                            Project6.appTypeId appTypeId  , 
                            Project6.code code  ,
                            Project6.codeName codeName  , 
                            Project6.stusCodeId stusCodeId  , 
                            Project6.code1 code1  , 
                            Project6.itmStkId itmStkId  , 
                            Project6.STK_CODE STK_CODE  , 
                            Project6.STK_DESC STK_DESC  , 
                            Project6.modeId modeId  , 
                            Project6.code2 code2  ,
                            Project6.bankCode bankCode  , 
                            Project6.rentAmt rentAmt            
                     FROM ( SELECT Distinct1.C1 C1  , 
                                   Distinct1.SALES_ORD_ID SALES_ORD_ID  , 
                                   Distinct1.SALES_ORD_NO SALES_ORD_NO  , 
                                   Distinct1.salesDt salesDt  , 
                                   Distinct1.appTypeId appTypeId  , 
                                   Distinct1.code code  , 
                                   Distinct1.codeName codeName  , 
                                   Distinct1.stusCodeId stusCodeId  ,  
                                   Distinct1.code1 code1  , 
                                   Distinct1.itmStkId itmStkId  , 
                                   Distinct1.STK_CODE STK_CODE  , 
                                   Distinct1.STK_DESC STK_DESC  , 
                                   Distinct1.modeId modeId  , 
                                   Distinct1.code2 code2  , 
                                   Distinct1.bankCode bankCode  , 
                                   Distinct1.rentAmt rentAmt   
                            FROM ( SELECT DISTINCT UnionAll1.C1 C1  , 
                                                   UnionAll1.SALES_ORD_ID SALES_ORD_ID  , 
                                                   UnionAll1.SALES_ORD_NO SALES_ORD_NO  , 
                                                   UnionAll1.salesDt salesDt  , 
                                                   UnionAll1.appTypeId appTypeId  , 
                                                   UnionAll1.code code  ,  
                                                   UnionAll1.codeName codeName  ,  
                                                   UnionAll1.stusCodeId stusCodeId  , 
                                                   UnionAll1.code1 code1  , 
                                                   UnionAll1.itmStkId itmStkId  , 
                                                   UnionAll1.STK_CODE STK_CODE  ,  
                                                   UnionAll1.STK_DESC STK_DESC  , 
                                                   UnionAll1.modeId modeId  , 
                                                   UnionAll1.code2 code2  , 
                                                   UnionAll1.bankCode bankCode  , 
                                                   UnionAll1.rentAmt rentAmt   
                                   FROM (                                                                                                                  
                                        SELECT 1 C1  , 
                                                 GroupBy1.salesOrdId SALES_ORD_ID  , 
                                                 GroupBy1.saleOrdNo SALES_ORD_NO  , 
                                                 GroupBy1.salesDt salesDt  , 
                                                 GroupBy1.appTypeId appTypeId  , 
                                                 GroupBy1.code code  , 
                                                 GroupBy1.codeName codeName  , 
                                                 GroupBy1.stusCodeId stusCodeId  , 
                                                 GroupBy1.code1 code1  , 
                                                 GroupBy1.itmStkId itmStkId  , 
                                                 GroupBy1.stkCode STK_CODE  , 
                                                 GroupBy1.stkDesc STK_DESC  , 
                                                 GroupBy1.modeId modeId  , 
                                                 GroupBy1.code2 code2  , 
                                                 GroupBy1.bankCode bankCode  ,  
                                                 CASE WHEN ( GroupBy1.rentAmt1 IS NOT NULL ) THEN GroupBy1.rentAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53) END rentAmt  
                                          FROM ( SELECT Project1.SALES_ORD_ID salesOrdId  , 
                                                        Project1.SALES_ORD_NO saleOrdNo  , 
                                                        Project1.STK_CODE stkCode  , 
                                                        Project1.STK_DESC stkDesc  , 
                                                        Project1.CODE code  ,
                                                        Project1.CODE_NAME codeName  ,  
                                                        Project1.CODE1 code1  ,
                                                        Project1.CODE2 code2  , 
                                                        Project1.salesDt salesDt  , 
                                                        Project1.appTypeId appTypeId  , 
                                                        Project1.stusCodeId stusCodeId  , 
                                                        Project1.itmStkId itmStkId  , 
                                                        Project1.modeId modeId  , 
                                                        Project1.bankCode bankCode  , 
                                                        SUM(Project1.RENT_AMT)  rentAmt1  , 
                                                        SUM(Project1.RENT_AMT)  rentAmt2  
                                                 FROM ( SELECT Extent1.SALES_ORD_ID SALES_ORD_ID  , 
                                                               Extent1.SALES_ORD_NO SALES_ORD_NO  ,
                                                               Extent3.STK_CODE STK_CODE  ,
                                                               Extent3.STK_DESC STK_DESC  ,
                                                               Extent4.CODE CODE  ,
                                                               Extent4.CODE_NAME CODE_NAME  ,
                                                               Extent5.CODE CODE1  ,
                                                               Extent7.CODE CODE2  ,
                                                               Extent9.RENT_AMT RENT_AMT  ,
                                                               CASE WHEN ( Extent1.SALES_DT IS NOT NULL ) THEN Extent1.SALES_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END salesDt  , 
                                                               CASE  WHEN ( Extent1.APP_TYPE_ID IS NOT NULL ) THEN Extent1.APP_TYPE_ID ELSE 0 END appTypeId  ,
                                                               CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                                                               CASE  WHEN ( Extent2.ITM_STK_ID IS NOT NULL ) THEN Extent2.ITM_STK_ID ELSE 0 END itmStkId  , 
                                                               CASE  WHEN ( Extent6.MODE_ID IS NOT NULL ) THEN Extent6.MODE_ID ELSE 0 END modeId  , 
                                                               CASE  WHEN ( Extent8.BANK_ID IS NOT NULL ) THEN Extent8.CODE ELSE '' END bankCode   
                                                        FROM SAL0001D Extent1
                                                               JOIN SAL0002D Extent2   ON Extent2.SALES_ORD_ID = Extent1.SALES_ORD_ID
                                                               JOIN SYS0026M Extent3   ON Extent3.STK_ID = Extent2.ITM_STK_ID
                                                               JOIN SYS0013M Extent4   ON Extent4.CODE_ID = Extent1.APP_TYPE_ID
                                                               JOIN SYS0038M Extent5   ON Extent5.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                                               JOIN SAL0074D Extent6   ON Extent6.SALES_ORD_ID = Extent1.SALES_ORD_ID
                                                               JOIN SYS0013M Extent7   ON Extent7.CODE_ID = Extent6.MODE_ID
                                                               LEFT JOIN SYS0004M Extent8   ON Extent8.BANK_ID = Extent6.BANK_ID
                                                               LEFT JOIN PAY0022D Extent9   ON Extent9.RENT_SO_ID = Extent1.SALES_ORD_ID
                                                         WHERE  ( 8 <> Extent1.STUS_CODE_ID )
                                                                  AND ( Extent1.CUST_ID = #{custId} ) 
                                                                  AND ( 66 = Extent1.APP_TYPE_ID ) ) Project1
                                                   GROUP BY Project1.SALES_ORD_ID,Project1.SALES_ORD_NO,Project1.STK_CODE,Project1.STK_DESC,Project1.CODE,Project1.CODE_NAME,Project1.CODE1,Project1.CODE2,Project1.salesDt,Project1.appTypeId,Project1.stusCodeId,Project1.itmStkId,Project1.modeId,Project1.bankCode ) GroupBy1
            UNION ALL
                            SELECT 1 C1  ,                                  
                                     GroupBy2.salesOrdId salesOrdId  ,
                                     GroupBy2.salesOrdNo salesOrdNo  ,
                                     GroupBy2.salesDt salesDt  , 
                                     GroupBy2.appTypeId appTypeId  , 
                                     GroupBy2.code code  ,
                                     GroupBy2.codeName codeName  , 
                                     GroupBy2.stusCodeId stusCodeId  , 
                                     GroupBy2.code1 code1  , 
                                     GroupBy2.itmStkId itmStkId  ,
                                     GroupBy2.stkCode stkCode  , 
                                     GroupBy2.stkDesc stkDesc  , 
                                     GroupBy2.modeId modeId  , 
                                     GroupBy2.code2 code2  , 
                                     GroupBy2.bankCode bankCode  , 
                                     CASE  WHEN ( GroupBy2.tradeAmt1 IS NOT NULL ) THEN GroupBy2.tradeAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53) END tradeAmt   
                              FROM ( SELECT Project3.SALES_ORD_ID salesOrdId  , 
                                            Project3.SALES_ORD_NO salesOrdNo  , 
                                            Project3.STK_CODE stkCode  , 
                                            Project3.STK_DESC stkDesc  , 
                                            Project3.CODE code  , 
                                            Project3.CODE_NAME codeName  , 
                                            Project3.CODE1 code1  , 
                                            Project3.salesDt salesDt  , 
                                            Project3.appTypeId appTypeId  , 
                                            Project3.stusCodeId stusCodeId  , 
                                            Project3.itmStkId itmStkId  , 
                                            Project3.modeId modeId  , 
                                            Project3.code2 code2  , 
                                            Project3.bankCode bankCode  , 
                                            SUM(Project3.TRADE_AMT)  tradeAmt1  , 
                                            SUM(Project3.TRADE_AMT)  tradeAmt2  
                                     FROM ( SELECT Extent10.SALES_ORD_ID SALES_ORD_ID  , 
                                                   Extent10.SALES_ORD_NO SALES_ORD_NO  ,
                                                   Extent12.STK_CODE STK_CODE  ,
                                                   Extent12.STK_DESC STK_DESC  ,
                                                   Extent13.CODE CODE  ,
                                                   Extent13.CODE_NAME CODE_NAME  ,
                                                   Extent14.CODE CODE1  ,
                                                   Extent15.TRADE_AMT TRADE_AMT  , 
                                                   CASE WHEN ( Extent10.SALES_DT IS NOT NULL ) THEN Extent10.SALES_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END salesDt  ,
                                                   CASE WHEN ( Extent10.APP_TYPE_ID IS NOT NULL ) THEN Extent10.APP_TYPE_ID ELSE 0 END appTypeId  , 
                                                   CASE WHEN ( Extent10.STUS_CODE_ID IS NOT NULL ) THEN Extent10.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                                                   CASE WHEN ( Extent11.ITM_STK_ID IS NOT NULL ) THEN Extent11.ITM_STK_ID ELSE 0 END itmStkId  ,
                                                   0 modeId, 
                                                   ''code2, 
                                                   ''bankCode 
                                            FROM SAL0001D Extent10
                                                   JOIN SAL0002D Extent11   ON Extent11.SALES_ORD_ID = Extent10.SALES_ORD_ID
                                                   JOIN SYS0026M Extent12   ON Extent12.STK_ID = Extent11.ITM_STK_ID
                                                   JOIN SYS0013M Extent13   ON Extent13.CODE_ID = Extent10.APP_TYPE_ID
                                                   JOIN SYS0038M Extent14   ON Extent14.STUS_CODE_ID = Extent10.STUS_CODE_ID
                                                   LEFT JOIN PAY0035D Extent15   ON Extent15.TRADE_SO_ID = Extent10.SALES_ORD_ID
                                             WHERE  ( 8 <> Extent10.STUS_CODE_ID )
                                                      AND ( Extent10.CUST_ID =#{custId} ) 
                                                      AND ( 66 <> Extent10.APP_TYPE_ID ) 
                                            ) Project3
                                            GROUP BY Project3.SALES_ORD_ID,Project3.SALES_ORD_NO,Project3.STK_CODE,Project3.STK_DESC,Project3.CODE,Project3.CODE_NAME,Project3.CODE1,Project3.salesDt,Project3.appTypeId,Project3.stusCodeId,Project3.itmStkId,Project3.modeId,Project3.code2,Project3.bankCode )
                                                     GroupBy2 ) UnionAll1 ) Distinct1 ) Project6 ) Project6            
                     ORDER BY Project6.SALES_ORD_NO ASC
	     ]]>
    </select>
    <!-- Ajax Call ThirdParty List  -->
    <select id="selectCustomerThirdPartyJsonList" parameterType="Map" resultType="egovMap">
        <![CDATA[  
        SELECT  Project2.SALES_ORD_ID SALES_ORD_ID  ,
                    Project2.SALES_ORD_NO SALES_ORD_NO  ,
                    TO_CHAR(Project2.salesDt, 'DD-MM-YYYY') SALES_DT,                     
                    Project2.appTypeId APP_TYPE_ID  ,
                    Project2.CODE CODE  ,
                    Project2.CODE_NAME CODE_NAME  ,
                    Project2.stusCodeId STUS_CODE_ID  ,
                    Project2.CODE1 CODE1  ,
                    Project2.itmStkId ITM_STK_ID  ,
                    Project2.STK_CODE STK_CODE  ,
                    Project2.STK_DESC STK_DESC  ,
                    Project2.modeId MODE_ID  ,
                    Project2.CODE2 CODE2  ,
                    Project2.bankCode BANK_CODE  ,
                    Project2.rentAmt RENT_AMT  
       FROM (   SELECT  Project2.SALES_ORD_ID SALES_ORD_ID  ,
                                Project2.SALES_ORD_NO SALES_ORD_NO  ,
                                Project2.STK_CODE STK_CODE  ,
                                Project2.STK_DESC STK_DESC  ,
                                Project2.CODE CODE  ,
                                Project2.CODE_NAME CODE_NAME  ,
                                Project2.CODE1 CODE1  ,
                                Project2.CODE2 CODE2  ,
                                Project2.salesDt salesDt  ,
                                Project2.appTypeId appTypeId  ,
                                Project2.stusCodeId stusCodeId  ,
                                Project2.itmStkId itmStkId  ,
                                Project2.modeId modeId  ,
                                Project2.bankCode bankCode  ,
                                Project2.rentAmt rentAmt                  
                     FROM ( SELECT GroupBy1.SALES_ORD_ID SALES_ORD_ID  ,
                                           GroupBy1.SALES_ORD_NO SALES_ORD_NO  ,
                                           GroupBy1.STK_CODE STK_CODE  ,
                                           GroupBy1.STK_DESC STK_DESC  ,
                                           GroupBy1.CODE CODE  ,
                                           GroupBy1.CODE_NAME CODE_NAME  ,
                                           GroupBy1.CODE1 CODE1  ,
                                           GroupBy1.CODE2 CODE2  ,
                                           GroupBy1.salesDt salesDt  ,
                                           GroupBy1.appTypeId appTypeId  ,
                                           GroupBy1.stusCodeId stusCodeId  ,
                                           GroupBy1.itmStkId itmStkId  ,
                                           GroupBy1.modeId modeId  ,
                                           GroupBy1.bankCode bankCode  ,
                                           CASE WHEN ( GroupBy1.rentAmt1 IS NOT NULL ) THEN GroupBy1.rentAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53)  END rentAmt  
                                  FROM ( SELECT   Project1.SALES_ORD_ID SALES_ORD_ID  , 
                                                          Project1.SALES_ORD_NO SALES_ORD_NO  , 
                                                          Project1.STK_CODE STK_CODE  , 
                                                          Project1.STK_DESC STK_DESC  , 
                                                          Project1.CODE CODE  ,
                                                          Project1.CODE_NAME CODE_NAME  , 
                                                          Project1.CODE1 CODE1  , 
                                                          Project1.CODE2 CODE2  , 
                                                          Project1.salesDt salesDt  , 
                                                          Project1.appTypeId appTypeId  , 
                                                          Project1.stusCodeId stusCodeId  , 
                                                          Project1.itmStkId itmStkId  , 
                                                          Project1.modeId modeId  , 
                                                          Project1.bankCode bankCode  , 
                                                          SUM(Project1.RENT_AMT)  rentAmt1  ,
                                                          SUM(Project1.RENT_AMT)  rentAmt2  
                                               FROM   ( SELECT   Extent2.SALES_ORD_ID SALES_ORD_ID  ,
                                                                         Extent2.SALES_ORD_NO SALES_ORD_NO  ,
                                                                         Extent4.STK_CODE STK_CODE  ,
                                                                         Extent4.STK_DESC STK_DESC  ,
                                                                         Extent5.CODE CODE  ,
                                                                         Extent5.CODE_NAME CODE_NAME  ,
                                                                         Extent6.CODE CODE1  ,
                                                                         Extent7.CODE CODE2  ,
                                                                         Extent9.RENT_AMT RENT_AMT  ,
                                                                         CASE WHEN ( Extent2.SALES_DT IS NOT NULL ) THEN Extent2.SALES_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END salesDt  , 
                                                                         CASE WHEN ( Extent2.APP_TYPE_ID IS NOT NULL ) THEN Extent2.APP_TYPE_ID ELSE 0 END appTypeId  , 
                                                                         CASE  WHEN ( Extent2.STUS_CODE_ID IS NOT NULL ) THEN Extent2.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                                                                         CASE  WHEN ( Extent3.ITM_STK_ID IS NOT NULL ) THEN Extent3.ITM_STK_ID ELSE 0 END itmStkId  , 
                                                                         CASE  WHEN ( Extent1.MODE_ID IS NOT NULL ) THEN Extent1.MODE_ID ELSE 0 END modeId  , 
                                                                         CASE  WHEN ( Extent8.BANK_ID IS NOT NULL ) THEN Extent8.CODE ELSE '' END bankCode  
                                                                FROM SAL0074D Extent1
                                                                         JOIN SAL0001D Extent2   ON ( 8 <> Extent2.STUS_CODE_ID )
                                                                         AND ( Extent2.SALES_ORD_ID = Extent1.SALES_ORD_ID )
                                                                         AND ( 66 = Extent2.APP_TYPE_ID )
                                                                         AND ( Extent2.CUST_ID <> #{custId} ) 
                                                                         JOIN SAL0002D Extent3   ON Extent3.SALES_ORD_ID = Extent2.SALES_ORD_ID
                                                                         JOIN SYS0026M Extent4   ON Extent4.STK_ID = Extent3.ITM_STK_ID
                                                                         JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent2.APP_TYPE_ID
                                                                         JOIN SYS0038M Extent6   ON Extent6.STUS_CODE_ID = Extent2.STUS_CODE_ID
                                                                         JOIN SYS0013M Extent7   ON Extent7.CODE_ID = Extent1.MODE_ID
                                                                         LEFT JOIN SYS0004M Extent8   ON Extent8.BANK_ID = Extent1.BANK_ID
                                                                         LEFT JOIN PAY0022D Extent9   ON Extent9.RENT_SO_ID = Extent2.SALES_ORD_ID
                                                             WHERE  ( Extent1.CUST_ID =#{custId} ) 
                                                                 AND ( 1 = Extent1.IS_3RD_PARTY ) ) Project1
                                            GROUP BY Project1.SALES_ORD_ID,Project1.SALES_ORD_NO,Project1.STK_CODE,Project1.STK_DESC,Project1.CODE,Project1.CODE_NAME,Project1.CODE1,Project1.CODE2,Project1.salesDt,Project1.appTypeId,Project1.stusCodeId,Project1.itmStkId,Project1.modeId,Project1.bankCode ) GroupBy1 ) Project2 ) Project2
                ORDER BY Project2.SALES_ORD_NO ASC
                  ]]>
    </select>
    <!-- Customer Detail Address (PopUp View)  -->
    <select id="selectCustomerAddrDetailViewPop" parameterType="Map" resultType="egovMap">
			 <![CDATA[ 
                      SELECT Extent1.CUST_ADD_ID   ,
                           Extent1.CUST_ID   ,
                           Extent1.CRT_USER_ID   ,
                           Extent2.NAME   ,
                           CASE WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END ADD1  , 
                           CASE WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END ADD2  , 
                           Extent5.STREET ||' '|| Extent5.POSTCODE ||' '|| Extent5.LOCALITY ||' '|| Extent5.REGION2 ||' '|| Extent5.REGION1 ||' '|| Extent5.COUNTRY AS ADD3,
                           Extent5.COUNTRY,
                           Extent5.REGION1,
                           Extent5.REGION2,
                           Extent5.LOCALITY,
                           Extent5.POSTCODE POST_CODE,
                           Extent5.STREET,
                           Extent5.STREET_ID,
                           CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM ELSE '' END REM  , 
                           CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  , 
                           CASE  WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END USER_NAME  , 
                           CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN TO_CHAR(Extent1.CRT_DT, 'DD-MM-YYYY') ELSE '01-01-1900' END CRT_DT  , 
                           CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN TO_CHAR(Extent1.UPD_DT, 'DD-MM-YYYY') ELSE '01-01-1900' END UPD_DT  ,
                           CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END UPD_USER_ID  , 
                           CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END USER_NAME1  
                    FROM SAL0023D Extent1
                           JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                           LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                           LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                           LEFT JOIN SYS0064M Extent5   ON Extent5.STREET_ID = Extent1.STREET_ID
                    WHERE  (8 <> Extent1.STUS_CODE_ID)
                           AND  Extent1.CUST_ADD_ID = #{getparam} AND ROWNUM <= 1
                   ]]>
    </select>
    <!-- Customer Detail Contact(PopUp View)  -->
    
    <!-- <resultMap type="egovMap" id="detailContactClobMap">
        <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/> user_id 밑에 2번 #{custCntcId} 
    </resultMap> -->
    <select id="selectCustomerContactDetailViewPop" parameterType="Map" resultType="egovMap">
			 <![CDATA[ 
			 SELECT Limit1.CUST_CNTC_ID CUST_CNTC_ID  ,
                   Limit1.CUST_ID CUST_ID  ,
                   TO_CHAR(Limit1.crtDt, 'DD-MM-YYYY') CRT_DT  ,
                   Limit1.CRT_USER_ID CRT_USER_ID  ,
                   Limit1.userNAme USER_NAME  , 
                   Limit1.dept DEPT  ,
                   TO_CHAR(Limit1.dob, 'DD-MM-YYYY') DOB  ,
                   Limit1.email EMAIL  ,
                   Limit1.gender GENDER  ,
                   Limit1.custInitial CUST_INITIAL  , 
                   Limit1.code CODE  ,
                   Limit1.name1 NAME1  ,
                   Limit1.nric NRIC  ,
                   Limit1.pos POS  ,
                   Limit1.raceId RACE_ID  ,
                   Limit1.codeName CODE_NAME  , 
                   Limit1.stusCodeId STUS_CODE_ID  ,
                   Limit1.NAME NAME  ,
                   Limit1.telF TELF  ,
                   Limit1.telM1 TEL_M1  ,
                   Limit1.telO TEL_O  ,
                   Limit1.telR TEL_R  ,
                   Limit1.ext EXT  ,
                   Limit1.updUserId UPD_USER_ID  ,
                   Limit1.userName1 USER_NAME1  ,
                   TO_CHAR(Limit1.updDt, 'DD-MM-YYYY') UPD_DT
              FROM ( SELECT Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            Extent1.CRT_USER_ID CRT_USER_ID  ,
                            Extent2.NAME NAME  ,
                            CASE WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END crtDt  , 
                            CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END userNAme  , 
                            CASE  WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END dept  , 
                            CASE  WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.DOB ELSE TO_DATE('1900-01-01','YYYY-MM-DD') END dob  , 
                            CASE  WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END email  , 
                            CASE  WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END gender  , 
                            CASE  WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0 END custInitial  , 
                            CASE  WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END code  , 
                            CASE  WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME)) ELSE '' END name1  , 
                            CASE  WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC)) ELSE '' END nric  , 
                            CASE  WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END pos  , 
                            CASE  WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0 END raceId  , 
                            CASE  WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE '' END codeName  , 
                            CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                            CASE  WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END telF  ,
                            CASE  WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE '' END telM1  , 
                            CASE  WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O)) ELSE '' END telO  , 
                            CASE  WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R)) ELSE '' END telR  , 
                            CASE  WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END ext  , 
                            CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUserId  , 
                            CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName1  , 
                            CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01','YYYY-MM-DD'))) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01','YYYY-MM-DD') END updDt   
                     FROM SAL0027D Extent1
                            JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                            LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                            LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                            LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL
                            LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                      WHERE  ( 8 <> Extent1.STUS_CODE_ID
                               AND ( Extent1.CUST_CNTC_ID = #{getparam} ) AND ROWNUM <= 1 ) )Limit1
			  ]]>
    </select>
    <!-- Customer Detail Bank(PopUp View)  -->    
    <!-- <resultMap type="egovMap" id="detailBankClobMap">
        <result property="CUST_ACC_REM" column="CUST_ACC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ACC_OWNER" column="CUST_ACC_OWNER" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ACC_BANK_BRNCH" column="CUST_ACC_BANK_BRNCH" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ENCRYPT_ACC_NO" column="CUST_ENCRYPT_ACC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap> -->
    
    <select id="selectCustomerBankDetailViewPop" parameterType="Map" resultType="egovMap">
        <![CDATA[ 
			  SELECT Limit1.CUST_ACC_ID CUST_ACC_ID  ,
                   Limit1.CUST_ID CUST_ID  ,
                   Limit1.custAccNo CUST_ACC_NO  ,
                   Limit1.custEncryptAccNo CUST_ENCRYPT_ACC_NO  ,
                   Limit1.custAccBankId CUST_ACC_BANK_ID  ,
                   Limit1.bankCode BANK_CODE  ,
                   Limit1.bankName BANK_NAME  ,
                   Limit1.custAccBankBrnch CUST_ACC_BANK_BRNCH  ,
                   Limit1.custAccOwner CUST_ACC_OWNER  ,
                   Limit1.custAccStusId CUST_ACC_STUS_ID  ,
                   Limit1.custAccTypeId CUST_ACC_TYPE_ID  ,
                   Limit1.codeName CODE_NAME  ,
                   Limit1.custAccRem CUST_ACC_REM  ,
                   Limit1.custAccCrtUserIdd CUST_ACC_CRT_USER_ID  ,
                   Limit1.custUpdUserId CUST_UPD_USER_ID  ,
                   TO_CHAR(Limit1.custAccCrtDt, 'DD-MM-YYYY') CUST_ACC_CRT_DT  ,
                   TO_CHAR(Limit1.custAccUpdDt, 'DD-MM-YYYY') CUST_ACC_UPD_DT  ,
                   Limit1.userName USER_NAME  ,
                   Limit1.userNAme1 USER_NAME1  
              FROM ( SELECT Extent1.CUST_ACC_ID CUST_ACC_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            CASE WHEN ( Extent1.CUST_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ACC_NO ELSE '' END custAccNo  , 
                            CASE  WHEN ( Extent1.CUST_ENCRYPT_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ENCRYPT_ACC_NO ELSE NULL END custEncryptAccNo  , 
                            CASE  WHEN ( Extent1.CUST_ACC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_ID ELSE 0 END custAccBankId  , 
                            CASE  WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  , 
                            CASE  WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankName  , 
                            CASE  WHEN ( Extent1.CUST_ACC_BANK_BRNCH IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_BRNCH ELSE NULL END custAccBankBrnch  , 
                            CASE WHEN ( Extent1.CUST_ACC_OWNER IS NOT NULL ) THEN Extent1.CUST_ACC_OWNER ELSE NULL END custAccOwner  , 
                            CASE  WHEN ( Extent1.CUST_ACC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_ACC_STUS_ID ELSE 0 END custAccStusId  , 
                            CASE  WHEN ( Extent1.CUST_ACC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_ACC_TYPE_ID ELSE 0 END custAccTypeId  , 
                            CASE  WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName  , 
                            CASE WHEN ( Extent1.CUST_ACC_REM IS NOT NULL ) THEN Extent1.CUST_ACC_REM ELSE NULL END custAccRem  , 
                            CASE  WHEN ( Extent1.CUST_ACC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_USER_ID ELSE 0 END custAccCrtUserIdd  , 
                            CASE  WHEN ( Extent1.CUST_ACC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_USER_ID ELSE 0 END custUpdUserId  , 
                            CASE  WHEN ( Extent1.CUST_ACC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END custAccCrtDt  , 
                            CASE  WHEN ( Extent1.CUST_ACC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custAccUpdDt  , 
                            CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  , 
                            CASE  WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userNAme1   
                     FROM SAL0022D Extent1
                            LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_ACC_BANK_ID
                            LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_ACC_TYPE_ID
                            LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_ACC_CRT_USER_ID
                            LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_ACC_UPD_USER_ID
                      WHERE  ( 8 <> Extent1.CUST_ACC_STUS_ID )
                               AND ( Extent1.CUST_ACC_ID =  #{getparam}) AND ROWNUM <= 1 ) Limit1
        ]]>
    </select>
    <!-- Customer Detail Card(PopUp View)  -->
    <!-- <resultMap type="egovMap" id="detailCardClobMap">
        <result property="CUST_CRC_NO" column="CUST_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ORI_CRC_NO" column="CUST_ORI_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_CRC_REM" column="CUST_CRC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap> -->
    <select id="selectCustomerCreditCardDetailViewPop" parameterType="Map" resultType="egovMap">
           <![CDATA[ 
				SELECT Limit1.CUST_CRC_ID CUST_CRC_ID  ,
					       Limit1.custId CUST_ID  , 
					       Limit1.custCrcBankId CUST_CRC_BANK_ID  , 
					       Limit1.bankCode BANK_CODE  , 
					       Limit1.bankId BANK_ID  , 
					       Limit1.custCrcExpr CUST_CRC_EXPR  , 
					       Limit1.custCrcOwner CUST_CRC_OWNER  , 
					       Limit1.custCrcNo CUST_CRC_NO  , 
					       Limit1.custOriCrcNo CUST_ORI_CRC_NO  , 
					       Limit1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
					       Limit1.custCrcTypeId CUST_CRC_TYPE_ID  ,
					       Limit1.code CODE  , 
					       Limit1.custCrcStusId CUST_CRC_STUS_ID  , 
					       TO_CHAR(Limit1.custCrcCrtDt, 'DD-MM-YYYY') CUST_CRC_CRT_DT  , 
                           TO_CHAR(Limit1.custCrcUpdDt, 'DD-MM-YYYY') CUST_CRC_UPD_DT  ,
					       Limit1.custCrcRem CUST_CRC_REM  , 
					       Limit1.custCrcCrtUserId CUST_CRC_CRT_USER_ID  , 
					       Limit1.custCrcUpdUserId CUST_CRC_UPD_USER_ID  , 
					       Limit1.userName USER_NAME  , 
					       Limit1.userName1 USER_NAME1  , 
					       Limit1.cardTypeId CARD_TYPE_ID  , 
					       Limit1.CODE_NAME CODE_NAME  
				FROM ( SELECT Extent1.CUST_CRC_ID CUST_CRC_ID  ,
						                Extent1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
						                Extent6.CODE_NAME CODE_NAME  ,
						                CASE WHEN ( Extent1.CUST_ID IS NOT NULL ) THEN Extent1.CUST_ID ELSE 0 END custId  , 
						                CASE WHEN ( Extent1.CUST_CRC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_CRC_BANK_ID ELSE 0 END custCrcBankId  , 
						                CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  , 
						                CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankId  , 
						                CASE WHEN ( Extent1.CUST_CRC_EXPR IS NOT NULL ) THEN Extent1.CUST_CRC_EXPR ELSE '' END custCrcExpr  , 
						                CASE WHEN ( Extent1.CUST_CRC_OWNER IS NOT NULL ) THEN Extent1.CUST_CRC_OWNER ELSE '' END custCrcOwner  , 
						                CASE  WHEN ( Extent1.CUST_CRC_NO IS NOT NULL ) THEN Extent1.CUST_CRC_NO ELSE NULL END custCrcNo  , 
						                CASE WHEN ( Extent1.CUST_ORI_CRC_NO IS NOT NULL ) THEN Extent1.CUST_ORI_CRC_NO ELSE NULL END custOriCrcNo  , 
						                CASE WHEN ( Extent1.CUST_CRC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_CRC_TYPE_ID ELSE 0 END custCrcTypeId  , 
						                CASE  WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END code  , 
						                CASE  WHEN ( Extent1.CUST_CRC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_CRC_STUS_ID ELSE 0 END custCrcStusId  , 
						                CASE WHEN ( Extent1.CUST_CRC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcCrtDt  , 
						                CASE WHEN ( Extent1.CUST_CRC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcUpdDt  , 
						                CASE  WHEN ( Extent1.CUST_CRC_REM IS NOT NULL ) THEN Extent1.CUST_CRC_REM ELSE NULL END custCrcRem  , 
						                CASE WHEN ( Extent1.CUST_CRC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_USER_ID ELSE 0 END custCrcCrtUserId  , 
						                CASE  WHEN ( Extent1.CUST_CRC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_USER_ID ELSE 0 END custCrcUpdUserId  , 
						                CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  , 
						                CASE  WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  , 
				                        CASE  WHEN ( Extent1.CARD_TYPE_ID IS NOT NULL ) THEN Extent1.CARD_TYPE_ID ELSE 0 END cardTypeId  
				          FROM SAL0028D Extent1
						                LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_CRC_BANK_ID
						                LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_CRC_TYPE_ID
						                LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_CRC_CRT_USER_ID
						                LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_CRC_UPD_USER_ID
						                JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.CARD_TYPE_ID
				           WHERE  ( 8 <> Extent1.CUST_CRC_STUS_ID )
				            AND ( Extent1.CUST_CRC_ID = #{getparam}) AND ROWNUM <= 1 ) Limit1
           ]]>
    </select>
    
    <select id="getCustIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_ID),0) + 1 from SAL0029D
    </select>
    
    <select id="getCustAddrIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_ADD_ID),0) + 1 from SAL0023D
    </select>
    
    <select id="getCustCntcIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_CNTC_ID),0) + 1 from SAL0027D
    </select>
    
    <select id="getCustCareCntIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_CARE_CNT_ID),0) + 1 from SAL0026D
    </select>
    
    <select id="getCustCrcIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_CRC_ID),0) + 1 from SAL0028D
    </select>
    
    <select id="getCustAccIdSeq" parameterType="Map" resultType="Integer">
      SELECT NVL(MAX(CUST_ACC_ID),0) + 1 from SAL0022D
    </select>
    
    <select id="getCustIdMaxSeq" resultType="Integer">
      SELECT MAX(CUST_ID) from SAL0029D
    </select>
    
    <insert id="insertCustomerInfo" parameterType="Map">
        INSERT INTO SAL0029D (CUST_ID,
                                          NAME,
					                      NRIC,
					                      NATION,
					                      DOB,
					                      GENDER,
					                      RACE_ID,
					                      EMAIL,
					                      REM,
					                      STUS_CODE_ID,
					                      UPD_USER_ID,
					                      UPD_DT,
					                      REN_GRP,
					                      PST_TERMS,
					                      ID_OLD,
					                      CRT_USER_ID,
					                      CRT_DT,
					                      TYPE_ID,
					                      PAS_SPORT_EXPR,
					                      VISA_EXPR,
					                      CUST_VA_NO,
					                      CORP_TYPE_ID,
					                      GST_RGIST_NO)
					  VALUES   (#{getCustId},
						            #{custName},
						            #{nric},
						            #{cmbNation},
						            #{dob},
						            #{gender},
						            #{cmbRace},
						            #{email},
						            #{rem},
						            #{stusCodeId},
						            #{updUserId},
						            SYSDATE,
						            #{renGrp},
						            #{pstTerms},
						            #{idOld},
						            #{crtUserId},
						            SYSDATE,
						            #{cmbTypeId},
						            TO_CHAR(TO_DATE(#{pasSportExpr}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),
                                    TO_CHAR(TO_DATE(#{visaExpr}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),
						            NULL,
						            #{cmbCorpTypeId},
						            #{gstRgistNo})
    </insert>
    
    <update id="updateCustomerInfo" parameterType="Map">
        UPDATE SAL0029D
		     SET CUST_VA_NO = #{custVaNo}
		 WHERE CUST_ID = #{getCustId};
    </update>
    
    <insert id="insertAddressInfo" parameterType="Map">
        INSERT INTO SAL0023D (CUST_ADD_ID,
                                          CUST_ID,
					                      NRIC,
					                      TEL,
					                      FAX,
					                      ADD1,
					                      ADD2,
					                      STUS_CODE_ID,
					                      REM,
					                      UPD_USER_ID,
					                      UPD_DT,
					                      STREET_ID,
					                      ID_OLD,
					                      SO_ID,
					                      IDCM,
					                      CRT_USER_ID,
					                      CRT_DT)
		  VALUES   (#{getCustAddrId},
		                #{getCustId},
			            #{nric},
			            #{tel},
			            #{fax},
			            #{addr1},
			            #{addr2},
			            #{stusCodeId},
			            #{addrRem},
			            #{updUserId},
			            SYSDATE,
			            #{streetId},
			            #{idOld},
			            #{soId},
			            #{idcm},
			            #{crtUserId},
			            SYSDATE
			            )
    </insert>
    
     <insert id="insertContactInfo" parameterType="Map">
        INSERT INTO SAL0027D (CUST_CNTC_ID, CUST_ID,
					                      NAME,
					                      CUST_INITIAL,
					                      NRIC,
					                      POS,
					                      TEL_M1,
					                      TEL_M2,
					                      TEL_O,
					                      TEL_R,
					                      TELF,
					                      DOB,
					                      GENDER,
					                      RACE_ID,
					                      EMAIL,
					                      STUS_CODE_ID,
					                      UPD_DT,
					                      UPD_USER_ID,
					                      ID_OLD,
					                      DEPT,
					                      DCM,
					                      CRT_DT,
					                      CRT_USER_ID,
					                      EXT)
					  VALUES   (#{getCustCntcId},
					                #{getCustId},
						            #{custName},
						            #{custInitial},
						            #{nric},
						            #{pos},
						            #{telM1},
						            #{telM2},
						            #{telO},
						            #{telR},
						            #{telF},
						            #{dob},
						            #{gender},
						            #{cmbRace},
						            #{email},
						            #{stusCodeId},
						            SYSDATE,
						            #{updUserId},
						            #{idOld},
						            #{dept},
						            #{dcm},
						            SYSDATE,
						            #{crtUserId},
						            #{ext}
						            )
    </insert>
    
    <insert id="insertCareContactInfo" parameterType="Map">
		INSERT INTO SAL0026D (CUST_CARE_CNT_ID, CUST_ID,
					                      NAME,
					                      CUST_INITIAL,
					                      TEL_M,
					                      TEL_O,
					                      TEL_R,
					                      EXT,
					                      EMAIL,
					                      STUS_CODE_ID,
					                      CRT_USER_ID,
					                      CRT_DT,
					                      UPD_USER_ID,
					                      UPD_DT,
					                      TELF)
		  VALUES   (#{getCustCareCntId},
		                #{getCustId},
			            #{asCustName},
			            #{custInitial},
			            #{asTelM},
			            #{asTelO},
			            #{asTelR},
			            #{asExt},
			            #{asEmail},
			            #{stusCodeId},
			            #{crtUserId},
			            SYSDATE,
			            #{updUserId},
			            SYSDATE,
			            #{asTelF}
		               )
    </insert>
    
    <select id="nricDupChk" parameterType="Map" resultType="Integer">
      SELECT COUNT(0) AS nricDupChk 
		  FROM SAL0029D 
		 WHERE  TYPE_ID = #{cmbTypeId}
		    AND NRIC = #{nric}
    </select>
    
    <select id="selectIssueBank" parameterType="Map" resultType="egovMap">
          SELECT BANK_ID ,
			         CODE ,
			         NAME AS CODE_NAME  
			 FROM SYS0004M
		    ORDER BY CODE ASC
    </select>
    
    <update id="updateCustomerBasicInfoAf" parameterType="Map" >
       UPDATE 
            SAL0029D 
       SET 
            UPD_DT = SYSDATE,
            NAME = #{basicName} , 
            PAS_SPORT_EXPR =TO_CHAR(TO_DATE(#{basicPasSportExpr}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),  
            VISA_EXPR = TO_CHAR(TO_DATE(#{basicVisaExpr}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),  
            EMAIL = #{basicEmail},
            REM = #{basicRem},
            <if test="basicTypeId == 964">
               <!--  DOB = TO_CHAR(TO_DATE(#{dob}, 'DD-MM-YYYY'), 'YYYY-MM-DD'), -->
                GENDER = #{basicGender},
                RACE_ID = #{basicRaceId}
            </if>
            
            <if test="basicTypeId == 965">
                CORP_TYPE_ID = #{basicCmbCorpTypeId}
            </if>
            WHERE CUST_ID = #{basicCustId}
    </update>
    
    <insert id="insertCreditCardInfo">
        INSERT INTO SAL0028D (CUST_CRC_ID, CUST_ID,
					                      CUST_CRC_NO,
					                      CUST_ORI_CRC_NO,
					                      CUST_ENCRYPT_CRC_NO,
					                      CUST_CRC_OWNER,
					                      CUST_CRC_TYPE_ID,
					                      CUST_CRC_BANK_ID,
					                      CUST_CRC_STUS_ID,
					                      CUST_CRC_REM,
					                      CUST_CRC_UPD_USER_ID,
					                      CUST_CRC_UPD_DT,
					                      CUST_CRC_EXPR,
					                      CUST_CRC_ID_OLD,
					                      SO_ID,
					                      CUST_CRC_IDCM,
					                      CUST_CRC_CRT_USER_ID,
					                      CUST_CRC_CRT_DT,
					                      CARD_TYPE_ID)
					  VALUES   (
					                (SELECT NVL(MAX(CUST_CRC_ID) + 1, 1) FROM SAL0028D),
						            #{getCustId},
						            #{crcNo},
						            #{creditCardNo},
						            #{encCrcNo},
						            #{nmCard},
						            #{crcType},
						            #{bank},
						            #{crcStusId},
						            #{cardRem},
						            #{crcUpdId},
						            SYSDATE,
						            #{cardExpiry},
						            #{crcIdOld},
						            #{soId},
						            #{crcIdcm},
						            #{crcCrtId},
						            SYSDATE,
						            #{cardType})
    </insert>
    
    <select id="selectAccBank" parameterType="Map" resultType="egovMap">
          SELECT   Mt.BANK_ID CODE_ID, <!-- Mt.BANK_ID -->
				       Mt.CODE CODE ,
				       Mt.CODE_NAME  
				  FROM ( SELECT Sub.BANK_ID BANK_ID  ,
						                Sub.CODE CODE  ,
						                Sub.CODE || ' - ' || Sub.NAME CODE_NAME  
						        FROM SYS0004M Sub
						          WHERE  ( 1 = Sub.STUS_CODE_ID )
				                      AND  ( 1 = Sub.IS_ALLOW_FOR_DD ) ) Mt
				  ORDER BY Mt.CODE ASC
    </select>
    
    <insert id="insertBankAccountInfo">
        INSERT INTO SAL0022D (CUST_ACC_ID, 
					                      CUST_ID,
					                      CUST_ACC_NO,
					                      CUST_ENCRYPT_ACC_NO,
					                      CUST_ACC_OWNER,
					                      CUST_ACC_TYPE_ID,
					                      CUST_ACC_BANK_ID,
					                      CUST_ACC_BANK_BRNCH,
					                      CUST_ACC_REM,
					                      CUST_ACC_STUS_ID,
					                      CUST_ACC_UPD_USER_ID,
					                      CUST_ACC_UPD_DT,
					                      CUST_ACC_NRIC,
					                      CUST_ACC_ID_OLD,
					                      SO_ID,
					                      CUST_ACC_IDCM,
					                      CUST_HLBB_ID,
					                      CUST_ACC_CRT_USER_ID,
					                      CUST_ACC_CRT_DT)
					  VALUES   (
					                (SELECT NVL(MAX(CUST_ACC_ID)+1, 1) FROM SAL0022D),
						            #{getCustId},
						            #{accNo},
						            #{encAccNo},
						            #{accOwner},
						            #{accTypeId},
						            #{accBankId},
						            #{accBankBrnch},
						            #{accRem},
						            #{accStusId},
						            #{accUpdUserId},
						            SYSDATE,
						            #{accNric},
						            #{accIdOld},
						            #{soId},
						            #{accIdcm},
						            #{hlbbId},
						            #{accCrtUserId},
						            SYSDATE
						            )
    </insert>
    
    <update id="updateCustomerAddressSetActive" parameterType="Map">
        UPDATE 
             SAL0023D
        SET 
            UPD_DT = SYSDATE,
            STUS_CODE_ID = 1 
        WHERE 
            CUST_ID = #{custId}
        AND
             STUS_CODE_ID = 9
    </update>
    
    <update id="updateCustomerAddressSetMain" parameterType="Map">
        UPDATE 
            SAL0023D 
        SET 
            UPD_DT = SYSDATE,
            STUS_CODE_ID = 9 
        WHERE 
            CUST_ADD_ID = #{custAddId}
    </update>
    
    <update id="updateCustomerContactSetActive" parameterType="Map">
        UPDATE 
            SAL0027D
        SET 
            UPD_DT = SYSDATE,
            STUS_CODE_ID = 1
        WHERE 
            CUST_ID = #{custId}
        AND 
            STUS_CODE_ID = 9
    </update>
    
    <update id="updateCustomerContactSetMain" parameterType="Map">
        UPDATE
            SAL0027D
        SET
            UPD_DT = SYSDATE,
            STUS_CODE_ID = 9
        WHERE 
            CUST_CNTC_ID = #{custCntcId}
    </update>
    
    <update id="updateCustomerContactInfoAf" parameterType="Map">
        UPDATE 
            SAL0027D
        SET 
            UPD_DT = SYSDATE,
            CUST_INITIAL = #{cntcInitial},
            GENDER = #{cntcGender},    
            NAME = #{cntcName},
            RACE_ID = #{cntcCmbRaceTypeId},
            NRIC = #{cntcNric},
            DOB = TO_CHAR(TO_DATE(#{cntcDob}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),
            TEL_M1 = #{cntcTelm},
            TEL_O = #{cntcTelo},
            TEL_R = #{cntcTelr},
            TELF = #{cntcTelf},
            DEPT = #{cntcDept},
            POS = #{cntcPos},
            EXT = #{cntcExpno},
            EMAIL = #{cntcEmail}
        WHERE
            CUST_CNTC_ID = #{cntcCustCntcId}
    </update>
    
    <select id="selectCrcBank" parameterType="Map" resultType="egovMap">
			SELECT 
			    BANK_ID CODE_ID,
			    CODE,
			    CODE || ' - ' || NAME AS CODE_NAME
			FROM
			    SYS0004M
			ORDER BY CODE ASC 
    </select>
    
    <update id="updateCustomerBankInfoAf" parameterType="Map">
			UPDATE
			    SAL0022D
			SET
			    CUST_ACC_UPD_DT = SYSDATE,
			    CUST_ACC_TYPE_ID = #{bankCustAccTypeId},
			    CUST_ACC_BANK_ID = #{bankCustAccBankId},
			    CUST_ACC_NO = #{bankCustAccNo},
			    CUST_ACC_BANK_BRNCH = #{bankCustAccBankBrnch},
			    CUST_ACC_OWNER = #{bankCustAccOwner},
			    CUST_ACC_REM = #{bankCustAccRem}
			WHERE
			    CUST_ACC_ID = #{bankCustAccId}
    </update>
    
    <update id="updateCustomerCardInfoAf" parameterType="Map">
			UPDATE 
			    SAL0028D
			SET
			    CUST_CRC_UPD_DT = SYSDATE,
			    CUST_CRC_TYPE_ID = #{custCrcTypeId},
			    CUST_CRC_BANK_ID = #{custCrcBankId},
			    CUST_ORI_CRC_NO = #{custOriCrcNo},
			    CUST_CRC_EXPR = #{custCrcExpr},
			    CUST_CRC_OWNER = #{custCrcOwner},
			    CARD_TYPE_ID = #{cardTypeId},
			    CUST_CRC_REM = #{custCrcRem}
			WHERE 
			    CUST_CRC_ID = #{custCrcId}
    </update>
    
    <update id="deleteCustomerAddress" parameterType="Map">
			UPDATE 
			    SAL0023D
			SET
			    STUS_CODE_ID = 8
			WHERE
			    CUST_ADD_ID = #{addrCustAddId}
			AND 
			    STUS_CODE_ID !=9
    </update>
    
    <update id="deleteCustomerContact" parameterType="Map">
			UPDATE 
			    SAL0027D
			SET
			    STUS_CODE_ID = 8
			WHERE
			    CUST_CNTC_ID = #{cntcCustCntcId}
			AND
			    STUS_CODE_ID != 9
    </update>
    
    <update id="deleteCustomerBank" parameterType="Map">
			UPDATE 
			    SAL0022D
			SET
			    CUST_ACC_STUS_ID = 8
			WHERE 
			    CUST_ACC_ID = #{bankCustAccId}
    </update>
    
    <update id="deleteCustomerCard" parameterType="Map">
			UPDATE 
			    SAL0028D
			SET
			    CUST_CRC_STUS_ID = 8
			WHERE 
			    CUST_CRC_ID = #{custCrcId}
    </update>
    
    <update id="updateCustomerAddressInfoAf" parameterType="Map">
			UPDATE
			    SAL0023D
			SET
			    ADD1 = #{mAddr1},
			    ADD2 = #{mAddr2},
			    STREET_ID = #{streetId},
			    REM = #{addrRem}
			WHERE
			    CUST_ADD_ID = #{addrCustAddId}
    </update>
    
    <select id="searchMagicAddressPop" parameterType="Map" resultType="egovMap">
           <![CDATA[ 
                SELECT STREET_ID
				         , REGION1 State
				         , REGION2 City
				         , LOCALITY Town
				         , POSTCODE postCd
				         , STREET
				         , ISO
				         , REGION1 || ' ' || REGION2 || ' ' || LOCALITY || ' ' || POSTCODE || ' ' || STREET AS FULLADDRESS
				   FROM SYS0064M
				 WHERE ISO = 'MY'
				     AND UPPER(STREET) LIKE UPPER('%'|| #{searchStreet} || '%')
           ]]>
    </select>
    
    <insert id="insertCustomerAddressInfoAf" parameterType="Map">
                 INSERT INTO SAL0023D (CUST_ADD_ID,
		                                          CUST_ID,
		                                          NRIC,
		                                          TEL,
		                                          FAX,
		                                          ADD1,
		                                          ADD2,
		                                          STUS_CODE_ID,
		                                          REM,
		                                          UPD_USER_ID,
		                                          UPD_DT,
		                                          STREET_ID,
		                                          ID_OLD,
		                                          SO_ID,
		                                          IDCM,
		                                          CRT_USER_ID,
		                                          CRT_DT)
		          VALUES   (
		                        (SELECT NVL(MAX(CUST_ADD_ID)+1, 1) FROM SAL0023D ) ,
		                       #{insCustId},
		                        '',
		                        '',
		                        '',
		                        #{mAddr1},
		                        #{mAddr2},
		                        1 ,
		                        #{addrRem},
		                        52366 , <!-- SESSION -->
		                        SYSDATE,
		                        #{streetId},
		                        '',
		                        '',
		                        '',
		                        52366 , <!-- SESSION -->
		                        SYSDATE
		                        )
    </insert>
    
    <insert id="insertCustomerContactAddAf" parameterType="Map">
                INSERT INTO SAL0027D (  CUST_CNTC_ID,
                                                    CUST_ID,
                                                    NAME,
                                                    CUST_INITIAL,
                                                    NRIC,
                                                    POS,
                                                    TEL_M1,
                                                    TEL_M2,
                                                    TEL_O,
                                                    TEL_R, 
                                                    TELF,
                                                    DOB,
                                                    GENDER, 
                                                    RACE_ID,
                                                    EMAIL,
                                                    STUS_CODE_ID,
                                                    UPD_DT,
                                                    UPD_USER_ID,
                                                    ID_OLD, 
                                                    DEPT,
                                                    DCM,
                                                    CRT_DT,
                                                    CRT_USER_ID,
                                                    EXT )
                            VALUES (  (SELECT NVL(MAX(CUST_CNTC_ID)+1, 1) FROM SAL0027D ),
                                           #{insCustId},
                                           #{cntcName},
                                           #{cntcInitial},
                                           #{cntcNric},
                                           #{cntcPos}, 
                                           #{cntcTelm},
                                           '',
                                           #{cntcTelo},
                                           #{cntcTelr},
                                           #{cntcTelf},
                                           TO_CHAR(TO_DATE(#{cntcDob}, 'DD-MM-YYYY'), 'YYYY-MM-DD'),
                                           #{cntcGender},
                                           #{cntcCmbRaceTypeId},
                                           #{cntcEmail},
                                           1 ,
                                           SYSDATE ,
                                           52366 , <!-- SESSION -->
                                           0 ,
                                           #{cntcDept},
                                           0 ,
                                           SYSDATE ,
                                           52366 , <!--SESSION  -->
                                           #{cntcExpno} )
    </insert>
    
    <insert id="insertCustomerBankAddAf" parameterType="Map">
         INSERT INTO SAL0022D (CUST_ACC_ID, 
                                          CUST_ID,
                                          CUST_ACC_NO,
                                          CUST_ENCRYPT_ACC_NO,
                                          CUST_ACC_OWNER,
                                          CUST_ACC_TYPE_ID,
                                          CUST_ACC_BANK_ID,
                                          CUST_ACC_BANK_BRNCH,
                                          CUST_ACC_REM,
                                          CUST_ACC_STUS_ID,
                                          CUST_ACC_UPD_USER_ID,
                                          CUST_ACC_UPD_DT,
                                          CUST_ACC_NRIC,
                                          CUST_ACC_ID_OLD,
                                          SO_ID,
                                          CUST_ACC_IDCM,
                                          CUST_HLBB_ID,
                                          CUST_ACC_CRT_USER_ID,
                                          CUST_ACC_CRT_DT)
                      VALUES   ( 
                                    (SELECT NVL(MAX(CUST_ACC_ID)+1, 1) FROM SAL0022D ),
                                    #{insCustId},
                                    #{bankCustAccNo},
                                    NULL ,
                                    #{bankCustAccOwner},
                                    #{bankCustAccTypeId},
                                    #{bankCustAccBankId},
                                    #{bankCustAccBankBrnch},
                                    #{bankCustAccRem},
                                    1 ,
                                    52366 , <!-- SESSION -->
                                    SYSDATE,
                                    '' ,
                                    0 ,
                                    0 ,
                                    0,
                                    0,
                                    52366 , <!-- SESSION -->
                                    SYSDATE
                                    )
    </insert>
        
    <insert id="insertCustomerCardAddAf" parameterType="Map">
         INSERT INTO SAL0028D (   CUST_CRC_ID, 
                                              CUST_ID,
	                                          CUST_CRC_NO,
	                                          CUST_ORI_CRC_NO,
	                                          CUST_ENCRYPT_CRC_NO,
	                                          CUST_CRC_OWNER,
	                                          CUST_CRC_TYPE_ID,
	                                          CUST_CRC_BANK_ID,
	                                          CUST_CRC_STUS_ID,
	                                          CUST_CRC_REM,
	                                          CUST_CRC_UPD_USER_ID,
	                                          CUST_CRC_UPD_DT,
	                                          CUST_CRC_EXPR,
	                                          CUST_CRC_ID_OLD,
	                                          SO_ID,
	                                          CUST_CRC_IDCM,
	                                          CUST_CRC_CRT_USER_ID,
	                                          CUST_CRC_CRT_DT,
	                                          CARD_TYPE_ID)
                      VALUES   (
                                     (SELECT NVL(MAX(CUST_CRC_ID)+1, 1) FROM SAL0028D ),
                                    #{insCustId},
                                    NULL ,
                                    #{custOriCrcNo},
                                    NULL ,
                                    #{custCrcOwner},
                                    #{custCrcTypeId},
                                    #{custCrcBankId},
                                    1 ,
                                    #{custCrcRem},
                                    52366 , <!-- SESSION -->
                                    SYSDATE,
                                    #{custCrcExpr},
                                    0 ,
                                    0 ,
                                    0 ,
                                    52366 , <!-- SESSION -->
                                    SYSDATE,
                                    #{cardTypeId})
  </insert>
  
  <select id="selectCustomerMainAddr"  parameterType="Map"  resultType="egovMap">
          <![CDATA[  
					SELECT 
					    CUST_ADD_ID,
					    STREET_ID 
					FROM 
					    SAL0023D 
					WHERE 
					    CUST_ID = #{getparam} 
					AND 
					    STUS_CODE_ID = 9 
					AND 
					    ROWNUM <= 1
           ]]>
  </select>
  
  <select id="selectCustomerMainContact" parameterType="Map" resultType="egovMap">
                  <![CDATA[  
                    SELECT 
                        CUST_CNTC_ID
                    FROM 
                        SAL0027D 
                    WHERE 
                        CUST_ID = #{getparam}
                    AND 
                        STUS_CODE_ID = 9 
                    AND 
                        ROWNUM <= 1
                   ]]>
  </select>
</mapper>