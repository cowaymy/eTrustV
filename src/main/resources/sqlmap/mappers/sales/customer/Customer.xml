<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.sales.customer.impl.CustomerMapper">
    
    <!-- 
        CLOB 컬럼을 사용하기 위해서는 아래와 같이 resultMap을 선언 후
         <select id="selectClobData" parameterType="Map"  resultMap="clobMap"> 와 같이
          resultMap="clobMap" 을 사용해야 함.
    -->
    
    <select id="selectCustomerList" parameterType="Map" resultType="egovMap">
        <![CDATA[
        SELECT  
				P2.C1 AS C1, 
				P2.CUST_ID AS CUST_ID, 
				P2.CRT_USER_ID AS CRT_USER_ID, 
				P2.USER_NAME1 AS USER_NAME1, 
				P2.CRT_DT AS CRT_DT, 
				P2.CORP_TYPE_ID AS CORP_TYPE_ID, 
				P2.CODE AS CODE, 
				P2.CODE_NAME AS CODE_NAME, 
				P2.Name1 AS Name, 
				P2.NRIC AS NRIC, 
				P2.CODE_NAME1 AS CODE_NAME1, 
				P2.TYPE_ID AS TYPE_ID, 
				P2.DOB AS DOB, 
				P2.EMAIL AS EMAIL, 
				P2.GENDER AS GENDER, 
				P2.NATION AS NATION, 
				P2.Name2 AS Name2, 
				P2.RACE_ID AS RACE_ID, 
				P2.CODE_NAME2 AS CODE_NAME2, 
				P2.REM AS REM, 
				P2.STUS_CODE_ID AS STUS_CODE_ID, 
				P2.UPD_USER_ID AS UPD_USER_ID, 
				P2.UPD_DT AS UPD_DT, 
				P2.USER_NAME2 AS USER_NAME2, 
				P2.CUST_ADD_ID AS CUST_ADD_ID, 
				P2.CUST_CNTC_ID AS CUST_CNTC_ID, 
				P2.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, 
				P2.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
				P2.VISA_EXPR AS VISA_EXPR, 
				P2.CUST_VA_NO AS CUST_VA_NO, 
				P2.GST_RGIST_NO AS GST_RGIST_NO
				FROM ( SELECT P1.CUST_ID, P1.Name1, P1.NRIC, P1.REM, P1.TYPE_ID, P1.PAS_SPORT_EXPR, 
				                P1.VISA_EXPR, P1.C1, P1.CRT_USER_ID, P1.USER_NAME1, 
				                P1.CRT_DT, P1.CORP_TYPE_ID, P1.CODE, P1.CODE_NAME, 
				                P1.CODE_NAME1, P1.DOB, P1.EMAIL, P1.GENDER, 
				                P1.NATION, P1.Name2, P1.RACE_ID, P1.CODE_NAME2, 
				                P1.STUS_CODE_ID, P1.UPD_USER_ID, P1.UPD_DT, P1.USER_NAME2, 
				                P1.CUST_ADD_ID, P1.CUST_CNTC_ID, P1.CUST_CARE_CNT_ID, P1.CUST_VA_NO, 
				                P1.GST_RGIST_NO, row_number() OVER (ORDER BY P1.CUST_ID ASC) AS row_number
				        FROM ( SELECT 
				                D1.CUST_ID AS CUST_ID, 
				                D1.Name1 AS Name1, 
				                D1.NRIC AS NRIC, 
				                D1.REM AS REM, 
				                D1.TYPE_ID AS TYPE_ID, 
				                D1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
				                D1.VISA_EXPR AS VISA_EXPR, 
				                D1.C1 AS C1, 
				                D1.CRT_USER_ID AS CRT_USER_ID, 
				                D1.USER_NAME1 AS USER_NAME1, 
				                D1.CRT_DT AS CRT_DT, 
				                D1.CORP_TYPE_ID AS CORP_TYPE_ID, 
				                D1.CODE AS CODE, 
				                D1.CODE_NAME AS CODE_NAME, 
				                D1.CODE_NAME1 AS CODE_NAME1, 
				                D1.DOB AS DOB, 
				                D1.EMAIL AS EMAIL, 
				                D1.GENDER AS GENDER, 
				                D1.NATION AS NATION, 
				                D1.Name2 AS Name2, 
				                D1.RACE_ID AS RACE_ID, 
				                D1.CODE_NAME2 AS CODE_NAME2, 
				                D1.STUS_CODE_ID AS STUS_CODE_ID, 
				                D1.UPD_USER_ID AS UPD_USER_ID, 
				                D1.UPD_DT AS UPD_DT, 
				                D1.USER_NAME2 AS USER_NAME2, 
				                D1.CUST_ADD_ID AS CUST_ADD_ID, 
				                D1.CUST_CNTC_ID AS CUST_CNTC_ID, 
				                D1.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, 
				                D1.CUST_VA_NO AS CUST_VA_NO, 
				                D1.GST_RGIST_NO AS GST_RGIST_NO
				                FROM ( SELECT DISTINCT 
				                            S1.CUST_ID1 AS CUST_ID, 
				                            S1.Name1 AS Name1, 
				                            S1.NRIC1 AS NRIC, 
				                            S1.REM, 
				                            S1.TYPE_ID AS TYPE_ID, 
				                            S1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
				                            S1.VISA_EXPR AS VISA_EXPR, 
				                            1 AS C1, 
				                            CASE WHEN (S1.CRT_USER_ID1 IS NOT NULL) THEN S1.CRT_USER_ID1 ELSE 0 END AS CRT_USER_ID, 
				                            CASE WHEN (S1.USER_ID1 IS NOT NULL) THEN S1.USER_NAME1 ELSE '' END AS USER_NAME1, 
				                            CASE WHEN ((S1.CRT_DT1 IS NOT NULL) AND (S1.CRT_DT1 > '1900-01-01 00:00:00')) THEN   S1.CRT_DT1 ELSE '1900-01-01 00:00:00' END AS CRT_DT, 
				                            CASE WHEN (S1.CORP_TYPE_ID IS NOT NULL) THEN S1.CORP_TYPE_ID ELSE 0 END AS CORP_TYPE_ID, 
				                            CASE WHEN (T10.CODE_ID IS NOT NULL) THEN T10.Code ELSE '' END AS CODE, 
				                            CASE WHEN (T10.CODE_ID IS NOT NULL) THEN T10.CODE_NAME ELSE '' END AS CODE_NAME, 
				                            CASE WHEN (S1.CODE_ID1 IS NOT NULL) THEN S1.CODE_NAME1 ELSE '' END AS CODE_NAME1, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN '1900-01-01 00:00:00' WHEN ((S1.DOB1 IS NOT NULL) AND (S1.DOB1 > '1900-01-01 00:00:00')) THEN   S1.DOB1 ELSE '1900-01-01 00:00:00' END AS DOB, 
				                            CASE WHEN (S1.Email1 IS NOT NULL) THEN S1.Email1 ELSE '' END AS EMAIL, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.Gender1 IS NOT NULL) THEN S1.Gender1 ELSE '' END AS GENDER, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN 0 WHEN (S1.NATION IS NOT NULL) THEN   S1.NATION ELSE 0 END AS NATION, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.CNTY_ID1 IS NOT NULL) THEN S1.Name2 ELSE '' END AS Name2, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN 0 WHEN (S1.RACE_ID1 IS NOT NULL) THEN   S1.RACE_ID1 ELSE 0 END AS RACE_ID, 
				                            CASE WHEN (964 <> S1.TYPE_ID) THEN '' WHEN (S1.CODE_ID2 IS NOT NULL) THEN S1.CODE_NAME2 ELSE '' END AS CODE_NAME2, 
				                            CASE WHEN (S1.STUS_CODE_ID1 IS NOT NULL) THEN   S1.STUS_CODE_ID1 ELSE 0 END AS STUS_CODE_ID, 
				                            CASE WHEN (S1.UPD_USER_ID1 IS NOT NULL) THEN S1.UPD_USER_ID1 ELSE 0 END AS UPD_USER_ID, 
				                            CASE WHEN ((S1.UPD_DT1 IS NOT NULL) AND (S1.UPD_DT1 > '1900-01-01 00:00:00')) THEN   S1.UPD_DT1 ELSE '1900-01-01 00:00:00' END AS UPD_DT, 
				                            CASE WHEN (S1.USER_ID2 IS NOT NULL) THEN S1.USER_NAME2 ELSE '' END AS USER_NAME2, 
				                            CASE WHEN (S1.CUST_ADD_ID IS NOT NULL) THEN S1.CUST_ADD_ID ELSE 0 END AS CUST_ADD_ID, 
				                            CASE WHEN (S1.CUST_CNTC_ID IS NOT NULL) THEN S1.CUST_CNTC_ID ELSE 0 END AS CUST_CNTC_ID, 
				                            CASE WHEN (S1.CUST_CARE_CNT_ID IS NOT NULL) THEN S1.CUST_CARE_CNT_ID ELSE 0 END AS CUST_CARE_CNT_ID, 
				                            CASE WHEN (S1.CUST_VA_NO IS NOT NULL) THEN S1.CUST_VA_NO ELSE '' END AS CUST_VA_NO, 
				                            CASE WHEN (S1.GST_RGIST_NO IS NOT NULL) THEN S1.GST_RGIST_NO ELSE '' END AS GST_RGIST_NO
				                            FROM   (SELECT T1.CUST_ID AS CUST_ID1, T1.Name AS Name1, T1.NRIC AS NRIC1, DBMS_LOB.SUBSTR (T1.REM, 4000) AS REM, T1.TYPE_ID AS TYPE_ID, T1.PAS_SPORT_EXPR AS PAS_SPORT_EXPR, 
				                                        T1.VISA_EXPR AS VISA_EXPR, --C1, 
				                                        T1.CRT_USER_ID AS CRT_USER_ID1, T2.USER_ID AS USER_ID1, T2.USER_NAME AS USER_NAME1, TO_CHAR(T1.CRT_DT, 'YYYYMMDD') AS CRT_DT1, T1.CORP_TYPE_ID AS CORP_TYPE_ID, T9.CODE_ID AS CODE_ID1, 
				                                        T9.CODE_NAME AS CODE_NAME1, T1.DOB AS DOB1, T1.Email AS Email1, T1.Gender AS Gender1, T1.NATION AS NATION, T4.Name AS Name2, T4.CNTY_ID AS CNTY_ID1, T1.RACE_ID AS RACE_ID1, 
				                                        T5.CODE_ID AS CODE_ID2, T5.CODE_NAME AS CODE_NAME2, T1.STUS_CODE_ID AS STUS_CODE_ID1, T1.UPD_DT AS UPD_DT1, T1.UPD_USER_ID AS UPD_USER_ID1, T3.USER_ID AS USER_ID2, T3.USER_NAME AS USER_NAME2, 
				                                        T6.CUST_ADD_ID AS CUST_ADD_ID, T7.CUST_CNTC_ID AS CUST_CNTC_ID, T8.CUST_CARE_CNT_ID AS CUST_CARE_CNT_ID, T1.CUST_VA_NO AS CUST_VA_NO, T1.GST_RGIST_NO AS GST_RGIST_NO
				                                    FROM SAL0029D T1
				                                    LEFT OUTER 
				                                    JOIN SYS0047M T2 
				                                      ON T2.USER_ID = T1.CRT_USER_ID
				                                    LEFT OUTER 
				                                    JOIN SYS0047M T3 
				                                      ON T3.USER_ID = T1.UPD_USER_ID
				                                    LEFT OUTER 
				                                    JOIN SYS0015M T4 
				                                      ON T4.CNTY_ID =  T1.NATION
				                                    LEFT OUTER 
				                                    JOIN SYS0013M T5 
				                                      ON T5.CODE_ID =  T1.RACE_ID
				                                    LEFT OUTER 
				                                    JOIN SAL0023D T6 
				                                      ON T6.CUST_ID = T1.CUST_ID 
				                                     AND (9 =   T6.STUS_CODE_ID)
				                                    LEFT OUTER 
				                                    JOIN SAL0027D T7 
				                                      ON T7.CUST_ID = T1.CUST_ID 
				                                     AND (9 =   T7.STUS_CODE_ID)
				                                    LEFT OUTER 
				                                    JOIN SAL0026D T8 
				                                      ON T8.CUST_ID = T1.CUST_ID AND (9 =   T8.STUS_CODE_ID)
				                                    LEFT OUTER 
				                                    JOIN SYS0013M T9 
				                                      ON T9.CODE_ID = T1.TYPE_ID
				                                   WHERE (8 <>   T1.STUS_CODE_ID) 
				                                     --AND (T1.TYPE_ID IN (965,964)) 
				                                     --AND ( (1154 = (CASE WHEN (T1.CORP_TYPE_ID IS NOT NULL) THEN T1.CORP_TYPE_ID ELSE 0 END)) OR (1174 = (CASE WHEN (T1.CORP_TYPE_ID IS NOT NULL) THEN T1.CORP_TYPE_ID ELSE 0 END))) 
				                                   ) S1
				                            LEFT OUTER 
				                            JOIN SYS0013M T10 
				                              ON T10.CODE_ID = S1.CORP_TYPE_ID 
				                             AND S1.CORP_TYPE_ID IS NOT NULL
				                         WHERE 1=1
				                          
				                            --AND (CASE WHEN (964 <> S1.TYPE_ID) THEN 0 WHEN (S1.NATION IS NOT NULL) THEN   S1.NATION ELSE 0 END) = 1    --MALAYSIA
				                            ]]>

				                                
				                            <if test="typeIdList != null and typeIdList != ''">
								                AND S1.TYPE_ID in 
									            <foreach item="item" collection="typeIdList" index="index" open="(" separator="," close=")">
									                #{item}
									            </foreach>
								            </if>
								            <if test="cmbCorpTypeIdList != null and cmbCorpTypeIdList != ''">
                                                AND S1.CORP_TYPE_ID in 
                                                <foreach item="item" collection="cmbCorpTypeIdList" index="index" open="(" separator="," close=")">
                                                    #{item}
                                                </foreach>
                                            </if>
								            <if test="nation != null and nation != ''">
                                                AND S1.NATION = #{nation}
                                            </if>
				                            <if test="custId != null and custId !=''">
                                                AND S1.CUST_ID1 = #{custId}
                                            </if>
                                            <if test="nric != null and nric !=''">
                                                AND S1.NRIC1 = #{nric}
                                            </if>
                                            <if test="name != null and name !=''">
                                                AND S1.Name1 like '%'|| #{name} || '%'
                                            </if>
                                            <if test="custVaNo != null and custVaNo !=''">
                                                AND S1.CUST_VA_NO = #{custVaNo}
                                            </if>
                                            <if test="dob != null and dob !=''">
                                                AND S1.DOB1 = #{dob}
                                            </if>
                                            
				                            
				                     ) D1
				            ) P1
				        ) P2
				WHERE P2.row_number > 0
				ORDER BY P2.CUST_ID ASC
		
    </select>
    <!-- Customer basic Info(Customer View)  -->
    <resultMap type="egovMap" id="basicClobMap">
        <result  property="REM" column="REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
    <select id="selectCustomerViewBasicInfo" parameterType="Map" resultMap="basicClobMap">
       <![CDATA[
        SELECT 
            Extent1.CUST_ID AS CUST_ID,
            Extent1.NAME AS NAME,
            Extent1.NRIC AS NRIC,
            Extent1.REM AS REM,
            Extent1.TYPE_ID AS TYPE_ID,
            TO_CHAR(TO_DATE(Extent1.PAS_SPORT_EXPR, 'YYYY-MM-DD'), 'DD-MM-YYYY') AS PAS_SPORT_EXPR,
            TO_CHAR(TO_DATE(Extent1.VISA_EXPR, 'YYYY-MM-DD'), 'DD-MM-YYYY') AS VISA_EXPR,            
            CASE WHEN Extent1.CRT_USER_ID IS NOT NULL THEN Extent1.CRT_USER_ID ELSE 0 END AS CRT_USER_ID,
            CASE WHEN Extent2.USER_ID IS NOT NULL THEN Extent2.USER_NAME ELSE '' END AS USER_NAME,
            CASE WHEN Extent1.CRT_DT IS NOT NULL AND Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') THEN TO_CHAR(Extent1.CRT_DT, 'DD-MM-YYYY  HH:MI:SS')  ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'DD-MM-YYYY  HH:MI:SS') END AS CRT_DT,
            CASE WHEN Extent1.CORP_TYPE_ID IS NOT NULL THEN Extent1.CORP_TYPE_ID ELSE 0 END AS CORP_TYPE_ID,
            CASE WHEN Extent10.CODE_ID IS NOT NULL THEN Extent10.CODE ELSE '' END AS CODE,
            CASE WHEN Extent10.CODE_ID IS NOT NULL THEN Extent10.CODE_NAME ELSE '' END AS CODE_NAME,
            CASE WHEN Extent9.CODE_ID IS NOT NULL THEN Extent9.CODE_NAME ELSE '' END AS CODE_NAME1,            
            CASE WHEN 964 <> Extent1.TYPE_ID THEN TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'DD-MM-YYYY') WHEN Extent1.DOB IS NOT NULL AND TO_DATE(Extent1.DOB, 'YYYY-MM-DD') > TO_DATE('1900-01-01', 'YYYY-MM-DD') THEN TO_CHAR(TO_DATE(Extent1.DOB, 'YYYY-MM-DD'), 'DD-MM-YYYY') ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD'), 'DD-MM-YYYY') END AS DOB,            
            CASE WHEN Extent1.EMAIL IS NOT NULL THEN Extent1.EMAIL ELSE '' END AS EMAIL,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent1.GENDER IS NOT NULL THEN Extent1.GENDER ELSE '' END AS GENDER,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN 0 WHEN Extent1.NATION IS NOT NULL THEN Extent1.NATION ELSE 0 END AS NATION,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent4.CNTY_ID IS NOT NULL THEN Extent4.NAME ELSE '' END AS CNTY_NAME,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN 0 WHEN Extent1.RACE_ID IS NOT NULL THEN Extent1.RACE_ID ELSE 0 END AS RACE_ID,
            CASE WHEN 964 <> Extent1.TYPE_ID THEN '' WHEN Extent5.CODE_ID IS NOT NULL THEN Extent5.CODE_NAME ELSE '' END AS CODE_NAME2,
            CASE WHEN Extent1.STUS_CODE_ID IS NOT NULL THEN Extent1.STUS_CODE_ID ELSE 0 END AS STUS_CODE_ID,
            CASE WHEN Extent1.UPD_USER_ID IS NOT NULL THEN Extent1.UPD_USER_ID ELSE 0 END AS UPD_USER_ID,
            CASE WHEN Extent1.UPD_DT IS NOT NULL AND Extent1.UPD_DT > '19000101'  THEN TO_CHAR(TO_DATE(Extent1.UPD_DT, 'YYYY-MM-DD'), 'DD-MM-YYYY  HH:MI:SS') ELSE TO_CHAR(TO_DATE('1900-01-01', 'YYYY-MM-DD  HH:MI:SS'), 'DD-MM-YYYY') END AS UPD_DT, -- date
            CASE WHEN Extent3.USER_ID IS NOT NULL THEN Extent3.USER_NAME ELSE '' END AS USER_NAME1,
            CASE WHEN Extent6.CUST_ADD_ID IS NOT NULL THEN Extent6.CUST_ADD_ID ELSE 0 END AS CUST_ADD_ID,
            CASE WHEN Extent7.CUST_CNTC_ID IS NOT NULL THEN Extent7.CUST_CNTC_ID ELSE 0 END AS CUST_CNTC_ID,
            CASE WHEN Extent8.CUST_CARE_CNT_ID IS NOT NULL THEN Extent8.CUST_CARE_CNT_ID ELSE 0 END AS CUST_CARE_CNT_ID,
            CASE WHEN Extent1.CUST_VA_NO IS NOT NULL THEN Extent1.CUST_VA_NO ELSE '' END AS CUST_VA_NO,
            CASE WHEN Extent1.GST_RGIST_NO IS NOT NULL THEN Extent1.GST_RGIST_NO ELSE '' END AS GST_RGIST_NO
        
        FROM 
            SAL0029D Extent1
            LEFT OUTER JOIN SYS0047M Extent2 ON Extent2.USER_ID = Extent1.CRT_USER_ID
            LEFT OUTER JOIN SYS0047M Extent3 ON Extent3.USER_ID = Extent1.UPD_USER_ID
            LEFT OUTER JOIN SYS0015M Extent4 ON Extent4.CNTY_ID = Extent1.NATION
            LEFT OUTER JOIN SYS0013M Extent5 ON Extent5.CODE_ID = Extent1.RACE_ID
            LEFT OUTER JOIN SAL0023D Extent6 ON Extent6.CUST_ID = Extent1.CUST_ID AND (9 = Extent6.STUS_CODE_ID)
            LEFT OUTER JOIN SAL0027D Extent7 ON Extent7.CUST_ID = Extent1.CUST_ID AND (9 = Extent7.STUS_CODE_ID)
            LEFT OUTER JOIN SAL0026D Extent8 ON Extent8.CUST_ID = Extent1.CUST_ID AND (9 = Extent8.STUS_CODE_ID)
            LEFT OUTER JOIN SYS0013M Extent9 ON Extent9.CODE_ID = Extent1.TYPE_ID
            LEFT OUTER JOIN SYS0013M Extent10 ON Extent10.CODE_ID = Extent1.CORP_TYPE_ID AND Extent1.CORP_TYPE_ID IS NOT NULL
        WHERE 
            8 <> Extent1.STUS_CODE_ID AND Extent1.CUST_ID =#{custId}
         AND
            ROWNUM = 1
       ]]>
    </select>
    <!--  Customer Main Address(Customer View) -->
    <resultMap type="egovMap" id="mainAddrClobMap">
        <result property="REM" column="REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    <select id="selectCustomerViewMainAddress" parameterType="Map" resultMap="mainAddrClobMap">
      <![CDATA[ 
			  SELECT Limit1.CUST_ADD_ID CUST_ADD_ID  ,
                   Limit1.ADD1 ADD1  ,
                   Limit1.ADD2 ADD2  ,
                   Limit1.ADD3 ADD3  ,
                   Limit1.POST_CODE_ID POST_CODE_ID  ,
                   Limit1.POST_CODE POST_CODE , --postCode
                   Limit1.AREA_ID AREA_ID  , --areaId
                   Limit1.AREA_NAME AREA_NAME, --areaName
                   Limit1.STATE_ID STATE_ID  , --stateId
                   Limit1.NAME1 NAME1 ,
                   Limit1.CNTY_ID CNTY_ID  , --cntyId
                   Limit1.NAME2 NAME2  ,
                   Limit1.REM REM  ,
                   Limit1.STUS_CODE_ID STUS_CODE_ID  , --stusCodeId
                   Limit1.NAME NAME  ,
                   Limit1.CUST_ID CUST_ID  ,
                   Limit1.CRT_USER_ID CRT_USER_ID  ,
                   Limit1.USER_NAME USER_NAME  , --userName
                   Limit1.CRT_DT CRT_DT  , --crtDt
                   Limit1.UPD_DT UPD_DT  , --updDt
                   Limit1.UPD_USER_ID UPD_USER_ID  , --updUser
                   Limit1.USER_NAME1 USER_NAME1  -- userName1
              FROM ( SELECT Extent1.CUST_ADD_ID CUST_ADD_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            Extent1.CRT_USER_ID CRT_USER_ID  ,
                            Extent2.NAME NAME  ,
                            CASE WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END ADD1  ,
                            CASE  WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END ADD2  ,
                            CASE  WHEN ( Extent1.ADD3 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD3)) ELSE '' END ADD3  ,
                            CASE  WHEN ( Extent1.POST_CODE_ID IS NOT NULL ) THEN Extent1.POST_CODE_ID ELSE 0 END POST_CODE_ID  ,
                            CASE  WHEN ( Extent3.POST_CODE_ID IS NOT NULL ) THEN Extent3.POST_CODE ELSE '' END POST_CODE  ,
                            CASE  WHEN ( Extent1.AREA_ID IS NOT NULL ) THEN Extent1.AREA_ID ELSE 0 END AREA_ID  ,
                            CASE  WHEN ( Extent4.AREA_ID IS NOT NULL ) THEN Extent4.AREA_NAME ELSE '' END AREA_NAME  ,
                            CASE  WHEN ( Extent1.STATE_ID IS NOT NULL ) THEN Extent1.STATE_ID ELSE 0 END STATE_ID  ,
                            CASE  WHEN ( Extent5.STATE_ID IS NOT NULL ) THEN Extent5.NAME ELSE '' END NAME1  ,
                            CASE  WHEN ( Extent1.CNTY_ID IS NOT NULL ) THEN Extent1.CNTY_ID ELSE 0 END CNTY_ID ,
                            CASE  WHEN ( Extent6.CNTY_ID IS NOT NULL ) THEN Extent6.NAME ELSE '' END NAME2  ,
                            CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM ELSE '' END REM  ,
                            CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  ,
                            CASE  WHEN ( Extent7.USER_ID IS NOT NULL ) THEN Extent7.USER_NAME ELSE '' END USER_NAME  ,
                            CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01' , 'YYYY-MM-DD'))) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END CRT_DT ,
                            CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > '1900-01-01')) THEN Extent1.UPD_DT ELSE '1900-01-01' END UPD_DT  ,
                            CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END UPD_USER_ID ,
                            CASE  WHEN ( Extent8.USER_ID IS NOT NULL ) THEN Extent8.USER_NAME ELSE '' END USER_NAME1  
                     FROM SAL0023D Extent1
                            JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                            LEFT JOIN SYS0030C Extent3   ON Extent3.POST_CODE_ID = Extent1.POST_CODE_ID
                            LEFT JOIN SYS0039M Extent4   ON Extent4.AREA_ID = Extent1.AREA_ID
                            LEFT JOIN SYS0035M Extent5   ON Extent5.STATE_ID = Extent1.STATE_ID
                            LEFT JOIN SYS0015M Extent6   ON Extent6.CNTY_ID = Extent1.CNTY_ID
                            LEFT JOIN SYS0047M Extent7   ON Extent7.USER_ID = Extent1.CRT_USER_ID
                            LEFT JOIN SYS0047M Extent8   ON Extent8.USER_ID = Extent1.UPD_USER_ID
                      WHERE  ( 8 <> Extent1.STUS_CODE_ID)
                               AND ( Extent1.CUST_ADD_ID = #{custAddId}) AND ROWNUM <= 1 ) Limit1
     ]]>
    </select>
    <!-- customer main Contact(Customer View) -->
    <resultMap type="egovMap" id="mainContactClobMap">
           <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    <select id="selectCustomerViewMainContact" parameterType="Map" resultMap="mainContactClobMap">
        <![CDATA[
			SELECT Limit1.CUST_CNTC_ID CUST_CNTC_ID  ,
                       Limit1.CUST_ID CUST_ID  ,
                       TO_CHAR(Limit1.CRT_DT, 'DD-MM-YYYY') CRT_DT  ,
                       Limit1.CRT_USER_ID CRT_USER_ID  , 
                       Limit1.USER_NAME USER_NAME  , 
                       Limit1.DEPT DEPT  , 
                       TO_CHAR(Limit1.DOB, 'DD-MM-YYYY') DOB  , 
                       Limit1.EMAIL EMAIL  , 
                       Limit1.GENDER GENDER  , 
                       Limit1.CUST_INITIAL CUST_INITIAL  , 
                       Limit1.CODE CODE  ,  --codeId
                       Limit1.NAME1 NAME1  , 
                       Limit1.NRIC NRIC  , 
                       Limit1.POS POS  ,
                       Limit1.RACE_ID RACE_ID  , 
                       Limit1.CODE_NAME CODE_NAME  , 
                       Limit1.STUS_CODE_ID STUS_CODE_ID, 
                       Limit1.NAME NAME  ,
                       Limit1.TELF TELF  , 
                       Limit1.TEL_M1 TEL_M1  , 
                       Limit1.TEL_O TEL_O  , 
                       Limit1.TEL_R TEL_R  , 
                       Limit1.EXT EXT  , 
                       Limit1.UPD_USER_ID UPD_USER_ID  , 
                       Limit1.USER_NAME1 USER_NAME1  ,
                       TO_CHAR(Limit1.UPD_DT, 'DD-MM-YYYY') UPD_DT   
            FROM ( SELECT Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                                    Extent1.CUST_ID CUST_ID  ,
                                    Extent1.CRT_USER_ID CRT_USER_ID  ,
                                    Extent2.NAME NAME  ,
                                    CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > '1900-01-01' ) ) THEN TO_DATE(Extent1.CRT_DT, 'YYYY-MM-DD') ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END CRT_DT  , -- DATE
                                    CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END USER_NAME,
                                    CASE WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END DEPT  , --CLOB TYPE >> ELSE 처리 NULL or EMPTY_CLOB()
                                    CASE WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB >'1900-01-01' ) ) THEN Extent1.DOB ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END DOB  , -- DATE
                                    CASE WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END EMAIL  ,
                                    CASE WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END GENDER  ,
                                    CASE WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0  END CUST_INITIAL  ,
                                    CASE WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END CODE  ,
                                    CASE WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME)) ELSE '' END NAME1  ,
                                    CASE WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC))ELSE '' END NRIC  ,
                                    CASE WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END POS  ,
                                    CASE WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0  END RACE_ID  ,
                                    CASE WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE ''END CODE_NAME  ,
                                    CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END STUS_CODE_ID  ,
                                    CASE WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END TELF  ,
                                    CASE WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE ''  END TEL_M1  ,
                                    CASE WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O))  ELSE '' END TEL_O  ,
                                    CASE WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R))ELSE '' END TEL_R  ,
                                    CASE WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END EXT  ,
                                    CASE WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID  ELSE 0 END UPD_USER_ID  ,
                                    CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME  ELSE '' END USER_NAME1  ,
                                    CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > '1900-01-01' ) ) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END UPD_DT  -- DATE
                     FROM SAL0027D Extent1
                                    JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                    LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                                    LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                                    LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL 
                                    LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                      WHERE  ( 8 <> Extent1.STUS_CODE_ID )
                          AND  ( Extent1.CUST_CNTC_ID = #{custId} ) AND ROWNUM <= 1 ) Limit1
          ]]>
    </select>
   <!-- Ajax Call Address List  -->
    <select id="selectCustomerAddressJsonList" parameterType="Map" resultType="egovMap">
       <![CDATA[    
				SELECT Project1.CUST_ADD_ID CUST_ADD_ID  ,
                        Project1.CUST_ID CUST_ID  ,
                        Project1.CRT_USER_ID CRT_USER_ID  ,
                        Project1.NAME NAME  ,
                        Project1.add1 || Project1.add2 || Project1.add3 || Project1.name1 || Project1.Name2 ADDR,                       
                        Project1.postCodeId POST_CODE_ID  ,
                        Project1.postCode POST_CODE  ,
                        Project1.areaId AREA_ID  ,
                        Project1.areaName AREA_NAME  ,
                        Project1.stateId STATE_ID  ,                       
                        Project1.cntyId CNTY_ID  ,                        
                        Project1.rem REM  ,
                        Project1.stusCodeId STUS_CODE_ID ,
                        Project1.userName USER_NAME  ,
                        Project1.crtDt CRT_DT  ,
                        Project1.updDt UPD_DT  ,
                        Project1.updUser UPD_USER  ,
                        Project1.userName1 USER_NAME1
                FROM ( SELECT Extent1.CUST_ADD_ID CUST_ADD_ID  ,
                               Extent1.CUST_ID CUST_ID  ,
                               Extent1.CRT_USER_ID CRT_USER_ID  ,
                               Extent2.NAME NAME  ,
                               CASE WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END add1  ,
                               CASE WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END add2  ,
                               CASE  WHEN ( Extent1.ADD3 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD3)) ELSE '' END add3  ,
                               CASE  WHEN ( Extent1.POST_CODE_ID IS NOT NULL ) THEN Extent1.POST_CODE_ID ELSE 0 END postCodeId  ,
                               CASE  WHEN ( Extent3.POST_CODE_ID IS NOT NULL ) THEN Extent3.POST_CODE ELSE '' END postCode  ,
                               CASE  WHEN ( Extent1.AREA_ID IS NOT NULL ) THEN Extent1.AREA_ID ELSE 0 END areaId  ,
                               CASE  WHEN ( Extent4.AREA_ID IS NOT NULL ) THEN Extent4.AREA_NAME ELSE '' END areaName  ,
                               CASE  WHEN ( Extent1.STATE_ID IS NOT NULL ) THEN Extent1.STATE_ID ELSE 0  END stateId  ,
                               CASE  WHEN ( Extent5.STATE_ID IS NOT NULL ) THEN Extent5.NAME ELSE '' END name1  ,
                               CASE  WHEN ( Extent1.CNTY_ID IS NOT NULL ) THEN Extent1.CNTY_ID ELSE 0 END cntyId  ,
                               CASE  WHEN ( Extent6.CNTY_ID IS NOT NULL ) THEN Extent6.NAME ELSE '' END name2  ,
                               CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM  ELSE '' END Rem  ,
                               CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  ,
                               CASE  WHEN ( Extent7.USER_ID IS NOT NULL ) THEN Extent7.USER_NAME ELSE '' END userName  ,
                               CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('19000101','YYYYMMDD') ) ) THEN Extent1.CRT_DT ELSE TO_DATE('19000101','YYYYMMDD') END crtDt  ,
                               CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('19000101','YYYYMMDD') ) ) THEN Extent1.UPD_DT ELSE '1900-01-01 00:00:00' END updDt  ,
                               CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUser  ,
                               CASE  WHEN ( Extent8.USER_ID IS NOT NULL ) THEN Extent8.USER_NAME ELSE '' END userName1  
                        FROM SAL0023D Extent1
                               JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                               LEFT JOIN SYS0030C Extent3   ON Extent3.POST_CODE_ID = Extent1.POST_CODE_ID
                               LEFT JOIN SYS0039M Extent4   ON Extent4.AREA_ID = Extent1.AREA_ID
                               LEFT JOIN SYS0035M Extent5   ON Extent5.STATE_ID = Extent1.STATE_ID
                               LEFT JOIN SYS0015M Extent6   ON Extent6.CNTY_ID = Extent1.CNTY_ID
                               LEFT JOIN SYS0047M Extent7   ON Extent7.USER_ID = Extent1.CRT_USER_ID
                               LEFT JOIN SYS0047M Extent8   ON Extent8.USER_ID = Extent1.UPD_USER_ID
                        WHERE  ( 8 <> Extent1.STUS_CODE_ID )
                              AND ( Extent1.CUST_ID = #{custId} ) 
                        ) Project1
                ORDER BY Project1.Name DESC
		 ]]>
    </select>
    
    <!-- Ajax Call Contact List  -->
    <resultMap type="EgovMap" id="contactClobMap">
        <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
    <select id="selectCustomerContactJsonList" parameterType="Map" resultMap="contactClobMap">
        <![CDATA[   
           SELECT Project1.CUST_CNTC_ID CUST_CNTC_ID  ,
                     Project1.CUST_ID CUST_ID  ,
                     Project1.CRT_USER_ID CRT_USER_ID  ,
                     Project1.NAME NAME  ,
                     Project1.crtDt CRT_DT  , 
                     Project1.userName USER_NAME  ,
                     Project1.dept DEPT  ,
                     Project1.dob DOB  ,
                     Project1.email EMAIL  ,
                     Project1.gender GENDER  , 
                     Project1.custInitial CUST_INITIAL  ,
                     Project1.code CODE  ,
                     Project1.name1 NAME1  , 
                     Project1.nric NRIC  ,
                     Project1.pos POS  ,
                     Project1.raceId RACE_ID  ,
                     Project1.codeName CODE_NAME  ,
                     Project1.stusCodeId STUS_CODE_ID  ,
                     Project1.telF TELF  ,
                     Project1.telM1 TEL_M1  ,
                     Project1.telO TEL_O  ,
                     Project1.telR TEL_R  ,
                     Project1.ext EXT  ,
                     Project1.updUserId UPD_USER_ID  ,
                     Project1.userName1 USERNAME1  ,
                     Project1.updDt UPD_DT                       
            FROM ( SELECT   Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                                    Extent1.CUST_ID CUST_ID  ,
                                    Extent1.CRT_USER_ID CRT_USER_ID  ,
                                    Extent2.NAME NAME  ,
                                    CASE WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END crtDt  ,
                                    CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END userName  ,
                                    CASE WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END dept  ,  -- CLOB NULL 
                                    CASE WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.DOB ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END dob ,
                                    CASE WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END email,
                                    CASE WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END gender,
                                    CASE WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0 END custInitial  , 
                                    CASE WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END code  ,
                                    CASE WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME))ELSE '' END name1  ,
                                    CASE WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC)) ELSE '' END nric  ,
                                    CASE WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END pos  ,
                                    CASE WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0 END raceId  ,
                                    CASE WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE '' END codeName  ,
                                    CASE WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  ,
                                    CASE WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END telF  ,
                                    CASE WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE '' END telM1  ,
                                    CASE WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O)) ELSE '' END telO  ,
                                    CASE WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R)) ELSE '' END telR  ,
                                    CASE WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END ext  ,
                                    CASE WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUserId  ,
                                    CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName1  ,
                                    CASE WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD') ) ) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END updDt  
                           FROM SAL0027D Extent1
                                JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                                LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                                LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL
                                LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                          WHERE 8 <> Extent1.STUS_CODE_ID
                            AND  Extent1.CUST_ID = #{custId}
                    ) Project1
                ORDER BY Project1.Name DESC
                ]]>
    </select>
    
    <!-- Ajax Call Bank List  -->
    <resultMap type="EgovMap" id="bankClobMap">
            <result property="CUST_ENCRYPT_ACC_NO" column="CUST_ENCRYPT_ACC_NO" jdbcType="CLOB" javaType="java.lang.String"/> 
            <result property="CUST_ACC_BANK_BRNCH" column="CUST_ACC_BANK_BRNCH" jdbcType="CLOB" javaType="java.lang.String"/>
            <result property="CUST_ACC_OWNER" column="CUST_ACC_OWNER" jdbcType="CLOB" javaType="java.lang.String"/> 
            <result property="CUST_ACC_REM" column="CUST_ACC_REM" jdbcType="CLOB" javaType="java.lang.String"/><!-- c11 -->
    </resultMap>
    
    <select id="selectCustomerBankAccJsonList" parameterType="Map" resultMap="bankClobMap">
        <![CDATA[   
        SELECT  Project1.CUST_ACC_ID CUST_ACC_ID  ,
                    Project1.CUST_ID CUST_ID  ,
                    Project1.custAccNo CUST_ACC_NO  , -- c1
                    Project1.custEncryptAccNo CUST_ENCRYPT_ACC_NO  ,
                    Project1.custAccBankId CUST_ACC_BANK_ID  ,
                    Project1.bankCode BANK_CODE  ,
                    Project1.bankName BANK_NAME  ,
                    Project1.custAccBankBrnch CUST_ACC_BANK_BRNCH  ,
                    Project1.custAccOwner CUST_ACC_OWNER  , --?
                    Project1.custAccStusId CUST_ACC_STUS_ID  , 
                    Project1.custAccTypeId CUST_ACC_TYPE_ID  ,
                    Project1.codeName CODE_NAME  ,
                    Project1.custAccRem CUST_ACC_REM  ,
                    Project1.custAccCrtUserId CUST_ACC_CRT_USER_ID  , --c12
                    Project1.custAccUpdUserId CUST_ACC_UPD_USER_ID  ,
                    Project1.custAccCrtDt CUST_ACC_CRT_DT  ,
                    Project1.custAccUpdDt CUST_ACC_UPD_DT  ,
                    Project1.userName USER_NAME  , --c16
                    Project1.userName1 USER_NAME1  
        FROM   ( SELECT Project1.CUST_ACC_ID CUST_ACC_ID  ,
                                Project1.CUST_ID CUST_ID  ,
                                Project1.custAccNo custAccNo  , -- c1
                                Project1.custEncryptAccNo custEncryptAccNo  ,
                                Project1.custAccBankId custAccBankId  ,
                                Project1.bankCode bankCode  ,
                                Project1.bankName bankName  ,
                                Project1.custAccBankBrnch custAccBankBrnch  ,
                                Project1.custAccOwner custAccOwner  ,
                                Project1.custAccStusId custAccStusId  , --c8
                                Project1.custAccTypeId custAccTypeId  ,
                                Project1.codeName codeName  ,
                                Project1.custAccRem custAccRem  ,
                                Project1.custAccCrtUserId custAccCrtUserId  ,
                                Project1.custAccUpdUserId custAccUpdUserId  ,
                                Project1.custAccCrtDt custAccCrtDt  ,
                                Project1.custAccUpdDt custAccUpdDt  ,
                                Project1.userName userName  ,
                                Project1.userName1 userName1  
                    
                  FROM ( SELECT Extent1.CUST_ACC_ID CUST_ACC_ID  ,
                                        Extent1.CUST_ID CUST_ID  ,
                                        CASE WHEN ( Extent1.CUST_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ACC_NO ELSE ''  END custAccNo  ,
                                        CASE WHEN ( Extent1.CUST_ENCRYPT_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ENCRYPT_ACC_NO ELSE NULL  END custEncryptAccNo  , --NULL
                                        CASE WHEN ( Extent1.CUST_ACC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_ID  ELSE 0  END custAccBankId  ,
                                        CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE  ELSE '' END bankCode  ,
                                        CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE ''  END bankName  ,
                                        CASE WHEN ( Extent1.CUST_ACC_BANK_BRNCH IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_BRNCH   ELSE NULL END custAccBankBrnch  , -- NULL
                                        CASE WHEN ( Extent1.CUST_ACC_OWNER IS NOT NULL ) THEN Extent1.CUST_ACC_OWNER ELSE NULL END custAccOwner  , -- NULL
                                        CASE WHEN ( Extent1.CUST_ACC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_ACC_STUS_ID  ELSE 0  END custAccStusId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_ACC_TYPE_ID  ELSE 0 END custAccTypeId  ,
                                        CASE WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName  ,
                                        CASE WHEN ( Extent1.CUST_ACC_REM IS NOT NULL ) THEN Extent1.CUST_ACC_REM ELSE NULL END custAccRem  , -- NULL
                                        CASE WHEN ( Extent1.CUST_ACC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_USER_ID ELSE 0 END custAccCrtUserId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_USER_ID ELSE 0 END custAccUpdUserId  ,
                                        CASE WHEN ( Extent1.CUST_ACC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END custAccCrtDt  ,
                                        CASE WHEN ( Extent1.CUST_ACC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD')  END custAccUpdDt  ,
                                        CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  ,
                                        CASE WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  
                           FROM SAL0022D Extent1
                                    LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_ACC_BANK_ID
                                    LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_ACC_TYPE_ID
                                    LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_ACC_CRT_USER_ID
                                    LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_ACC_UPD_USER_ID
                          WHERE  8 <> Extent1.CUST_ACC_STUS_ID 
                              AND  Extent1.CUST_ID = #{custId}) Project1 
                 ) Project1 
        ORDER BY Project1.CUST_ACC_ID ASC 
		 ]]>   
    </select>
    
    <!-- Ajax Call Credit Card List  -->
    <resultMap type="egovMap" id="cardClobMap">
           <result property="CUST_CRC_NO" column="CUST_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
           <result property="CUST_ORI_CRC_NO" column="CUST_ORI_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
           <result property="CUST_CRC_REM" column="CUST_CRC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
    <select id="selectCustomerCreditCardJsonList" parameterType="Map" resultMap="cardClobMap">
   <![CDATA[   
		SELECT   Project1.CUST_CRC_ID CUST_CRC_ID  ,
            Project1.custId CUST_ID  ,
            Project1.custCrcBankId CUST_CRC_BANK_ID  ,
            Project1.bankCode BANK_CODE  ,
            Project1.bankName BANK_NAME  ,
            Project1.custCrcExpr CUST_CRC_EXPR  ,
            Project1.custCrcOwner CUST_CRC_OWNER  ,
            Project1.custCrcNo CUST_CRC_NO  ,
            Project1.custOriCrcNo CUST_ORI_CRC_NO  , --c8
            Project1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
            Project1.custCrcTypeId CUST_CRC_TYPE_ID  , -- c9
            Project1.codeName1 CODE_NAME1  ,
            Project1.custCrcStusId CUST_CRC_STUS_ID  ,
            Project1.custCrcCrtDt CUST_CRC_CRT_DT  ,
            Project1.custCrcUpdDt CUST_CRC_UPD_DT  ,
            Project1.custCrcRem CUST_CRC_REM  ,
            Project1.custCrcCrtUserId CUST_CRC_CRT_USER_ID  ,
            Project1.custCrcUpdUserId CUST_CRC_UPD_USER_ID  ,
            Project1.userName USER_NAME  ,
            Project1.userName1 USER_NAME1  ,
            Project1.cardTypeId CARD_TYPE_ID  ,
            Project1.CODE_NAME CODE_NAME  
    FROM (  SELECT  Project1.CUST_CRC_ID CUST_CRC_ID  ,
			                Project1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
			                Project1.CODE_NAME CODE_NAME  ,
			                Project1.custId custId  ,
			                Project1.custCrcBankId custCrcBankId  ,
			                Project1.bankCode bankCode  ,
			                Project1.bankName bankName  ,
			                Project1.custCrcExpr custCrcExpr  ,
			                Project1.custCrcOwner custCrcOwner  ,
			                Project1.custCrcNo custCrcNo  ,
			                Project1.custOriCrcNo custOriCrcNo  ,
			                Project1.custCrcTypeId custCrcTypeId  ,
			                Project1.codeName1 codeName1  ,
			                Project1.custCrcStusId custCrcStusId  ,
			                Project1.custCrcCrtDt custCrcCrtDt  ,
			                Project1.custCrcUpdDt custCrcUpdDt  ,
			                Project1.custCrcRem custCrcRem  ,
			                Project1.custCrcCrtUserId custCrcCrtUserId  ,
			                Project1.custCrcUpdUserId custCrcUpdUserId  ,
			                Project1.userName userName  ,
			                Project1.userName1 userName1  ,
			                Project1.cardTypeId cardTypeId                    
		         FROM ( SELECT Extent1.CUST_CRC_ID CUST_CRC_ID  ,
				                       Extent1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
				                       Extent6.CODE_NAME CODE_NAME  ,
				                       CASE WHEN ( Extent1.CUST_ID IS NOT NULL ) THEN Extent1.CUST_ID ELSE 0 END custId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_CRC_BANK_ID ELSE 0 END custCrcBankId  ,
				                       CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  ,
				                       CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankName  ,
				                       CASE WHEN ( Extent1.CUST_CRC_EXPR IS NOT NULL ) THEN Extent1.CUST_CRC_EXPR ELSE '' END custCrcExpr  ,
				                       CASE WHEN ( Extent1.CUST_CRC_OWNER IS NOT NULL ) THEN Extent1.CUST_CRC_OWNER ELSE '' END custCrcOwner  ,
				                       CASE WHEN ( Extent1.CUST_CRC_NO IS NOT NULL ) THEN Extent1.CUST_CRC_NO ELSE NULL END custCrcNo  ,
				                       CASE WHEN ( Extent1.CUST_ORI_CRC_NO IS NOT NULL ) THEN Extent1.CUST_ORI_CRC_NO ELSE NULL END custOriCrcNo  ,
				                       CASE WHEN ( Extent1.CUST_CRC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_CRC_TYPE_ID ELSE 0 END custCrcTypeId  ,
				                       CASE WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName1  ,
				                       CASE WHEN ( Extent1.CUST_CRC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_CRC_STUS_ID ELSE 0 END custCrcStusId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcCrtDt  ,
				                       CASE WHEN ( Extent1.CUST_CRC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcUpdDt  ,
				                       CASE WHEN ( Extent1.CUST_CRC_REM IS NOT NULL ) THEN Extent1.CUST_CRC_REM ELSE NULL END custCrcRem  ,
				                       CASE WHEN ( Extent1.CUST_CRC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_USER_ID ELSE 0 END custCrcCrtUserId  ,
				                       CASE WHEN ( Extent1.CUST_CRC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_USER_ID ELSE 0 END custCrcUpdUserId  ,
				                       CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  ,
				                       CASE WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  ,
				                       CASE WHEN ( Extent1.CARD_TYPE_ID IS NOT NULL ) THEN Extent1.CARD_TYPE_ID ELSE 0 END cardTypeId  
				                FROM SAL0028D Extent1
				                       LEFT JOIN SYS0004M Extent2 ON Extent2.BANK_ID = Extent1.CUST_CRC_BANK_ID
				                       LEFT JOIN SYS0013M Extent3 ON Extent3.CODE_ID = Extent1.CUST_CRC_TYPE_ID
				                       LEFT JOIN SYS0047M Extent4 ON Extent4.USER_ID = Extent1.CUST_CRC_CRT_USER_ID
				                       LEFT JOIN SYS0047M Extent5 ON Extent5.USER_ID = Extent1.CUST_CRC_UPD_USER_ID
				                       JOIN SYS0013M Extent6 ON Extent6.CODE_ID = Extent1.CARD_TYPE_ID
			                 WHERE  8 <> Extent1.CUST_CRC_STUS_ID
			                          AND  CASE WHEN Extent1.CUST_ID IS NOT NULL THEN Extent1.CUST_ID ELSE 0 END = #{custId}
                ) Project1 
            ) Project1 
          ORDER BY Project1.CUST_CRC_ID ASC
         ]]>   
    </select>
    <!-- Ajax Call Own Order List  -->
    <select id="selectCustomerOwnOrderJsonList" parameterType="Map" resultType="egovMap">
	    <![CDATA[  
		     SELECT   Project6.C1 C1  , 
                    Project6.SALES_ORD_ID SALES_ORD_ID  , 
                    Project6.SALES_ORD_NO SALES_ORD_NO  , 
                    TO_CHAR(Project6.salesDt,'DD-MM-YYYY') SALES_DT  ,  --c4
                    Project6.appTypeId APP_TYPE_ID  , 
                    Project6.code CODE  , 
                    Project6.codeName CODE_NAME  , 
                    Project6.stusCodeId STUS_CODE_ID  , 
                    Project6.code1 CODE1  , 
                    Project6.itmStkId ITM_STK_ID  , 
                    Project6.STK_CODE STK_CODE  ,
                    Project6.STK_DESC STK_DESC  , 
                    Project6.modeId MODE_ID  , 
                    Project6.code2 CODE2  ,
                    Project6.bankCode BANK_CODE  , 
                    Project6.rentAmt RENT_AMT  
             FROM ( SELECT  Project6.C1 C1  , 
                            Project6.SALES_ORD_ID SALES_ORD_ID  , 
                            Project6.SALES_ORD_NO SALES_ORD_NO  , 
                            Project6.salesDt salesDt  , 
                            Project6.appTypeId appTypeId  , 
                            Project6.code code  ,
                            Project6.codeName codeName  , 
                            Project6.stusCodeId stusCodeId  , 
                            Project6.code1 code1  , 
                            Project6.itmStkId itmStkId  , 
                            Project6.STK_CODE STK_CODE  , 
                            Project6.STK_DESC STK_DESC  , 
                            Project6.modeId modeId  , 
                            Project6.code2 code2  ,
                            Project6.bankCode bankCode  , 
                            Project6.rentAmt rentAmt            
                     FROM ( SELECT Distinct1.C1 C1  , 
                                   Distinct1.SALES_ORD_ID SALES_ORD_ID  , 
                                   Distinct1.SALES_ORD_NO SALES_ORD_NO  , 
                                   Distinct1.salesDt salesDt  , 
                                   Distinct1.appTypeId appTypeId  , 
                                   Distinct1.code code  , 
                                   Distinct1.codeName codeName  , 
                                   Distinct1.stusCodeId stusCodeId  ,  
                                   Distinct1.code1 code1  , 
                                   Distinct1.itmStkId itmStkId  , 
                                   Distinct1.STK_CODE STK_CODE  , 
                                   Distinct1.STK_DESC STK_DESC  , 
                                   Distinct1.modeId modeId  , 
                                   Distinct1.code2 code2  , 
                                   Distinct1.bankCode bankCode  , 
                                   Distinct1.rentAmt rentAmt   
                            FROM ( SELECT DISTINCT UnionAll1.C1 C1  , 
                                                   UnionAll1.SALES_ORD_ID SALES_ORD_ID  , 
                                                   UnionAll1.SALES_ORD_NO SALES_ORD_NO  , 
                                                   UnionAll1.salesDt salesDt  , 
                                                   UnionAll1.appTypeId appTypeId  , 
                                                   UnionAll1.code code  ,  
                                                   UnionAll1.codeName codeName  ,  
                                                   UnionAll1.stusCodeId stusCodeId  , 
                                                   UnionAll1.code1 code1  , 
                                                   UnionAll1.itmStkId itmStkId  , 
                                                   UnionAll1.STK_CODE STK_CODE  ,  
                                                   UnionAll1.STK_DESC STK_DESC  , 
                                                   UnionAll1.modeId modeId  , 
                                                   UnionAll1.code2 code2  , 
                                                   UnionAll1.bankCode bankCode  , 
                                                   UnionAll1.rentAmt rentAmt   
                                   FROM (                                                                                                                  
                                        SELECT 1 C1  , --col 개수 맞추기?
                                                 GroupBy1.salesOrdId SALES_ORD_ID  , 
                                                 GroupBy1.saleOrdNo SALES_ORD_NO  , 
                                                 GroupBy1.salesDt salesDt  , 
                                                 GroupBy1.appTypeId appTypeId  , 
                                                 GroupBy1.code code  , 
                                                 GroupBy1.codeName codeName  , 
                                                 GroupBy1.stusCodeId stusCodeId  , 
                                                 GroupBy1.code1 code1  , 
                                                 GroupBy1.itmStkId itmStkId  , 
                                                 GroupBy1.stkCode STK_CODE  , 
                                                 GroupBy1.stkDesc STK_DESC  , 
                                                 GroupBy1.modeId modeId  , 
                                                 GroupBy1.code2 code2  , 
                                                 GroupBy1.bankCode bankCode  ,  
                                                 CASE WHEN ( GroupBy1.rentAmt1 IS NOT NULL ) THEN GroupBy1.rentAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53) END rentAmt  
                                          FROM ( SELECT Project1.SALES_ORD_ID salesOrdId  , 
                                                        Project1.SALES_ORD_NO saleOrdNo  , 
                                                        Project1.STK_CODE stkCode  , 
                                                        Project1.STK_DESC stkDesc  , 
                                                        Project1.CODE code  ,
                                                        Project1.CODE_NAME codeName  ,  
                                                        Project1.CODE1 code1  ,
                                                        Project1.CODE2 code2  , 
                                                        Project1.salesDt salesDt  , 
                                                        Project1.appTypeId appTypeId  , 
                                                        Project1.stusCodeId stusCodeId  , 
                                                        Project1.itmStkId itmStkId  , 
                                                        Project1.modeId modeId  , 
                                                        Project1.bankCode bankCode  , 
                                                        SUM(Project1.RENT_AMT)  rentAmt1  , 
                                                        SUM(Project1.RENT_AMT)  rentAmt2  
                                                 FROM ( SELECT Extent1.SALES_ORD_ID SALES_ORD_ID  , 
                                                               Extent1.SALES_ORD_NO SALES_ORD_NO  ,
                                                               Extent3.STK_CODE STK_CODE  ,
                                                               Extent3.STK_DESC STK_DESC  ,
                                                               Extent4.CODE CODE  ,
                                                               Extent4.CODE_NAME CODE_NAME  ,
                                                               Extent5.CODE CODE1  ,
                                                               Extent7.CODE CODE2  ,
                                                               Extent9.RENT_AMT RENT_AMT  ,
                                                               CASE WHEN ( Extent1.SALES_DT IS NOT NULL ) THEN Extent1.SALES_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END salesDt  , 
                                                               CASE  WHEN ( Extent1.APP_TYPE_ID IS NOT NULL ) THEN Extent1.APP_TYPE_ID ELSE 0 END appTypeId  ,
                                                               CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                                                               CASE  WHEN ( Extent2.ITM_STK_ID IS NOT NULL ) THEN Extent2.ITM_STK_ID ELSE 0 END itmStkId  , 
                                                               CASE  WHEN ( Extent6.MODE_ID IS NOT NULL ) THEN Extent6.MODE_ID ELSE 0 END modeId  , 
                                                               CASE  WHEN ( Extent8.BANK_ID IS NOT NULL ) THEN Extent8.CODE ELSE '' END bankCode   
                                                        FROM SAL0001D Extent1
                                                               JOIN SAL0002D Extent2   ON Extent2.SALES_ORD_ID = Extent1.SALES_ORD_ID
                                                               JOIN SYS0026M Extent3   ON Extent3.STK_ID = Extent2.ITM_STK_ID
                                                               JOIN SYS0013M Extent4   ON Extent4.CODE_ID = Extent1.APP_TYPE_ID
                                                               JOIN SYS0038M Extent5   ON Extent5.STUS_CODE_ID = Extent1.STUS_CODE_ID
                                                               JOIN SAL0074D Extent6   ON Extent6.SALES_ORD_ID = Extent1.SALES_ORD_ID
                                                               JOIN SYS0013M Extent7   ON Extent7.CODE_ID = Extent6.MODE_ID
                                                               LEFT JOIN SYS0004M Extent8   ON Extent8.BANK_ID = Extent6.BANK_ID
                                                               LEFT JOIN PAY0022D Extent9   ON Extent9.RENT_SO_ID = Extent1.SALES_ORD_ID
                                                         WHERE  ( 8 <> Extent1.STUS_CODE_ID )
                                                                  AND ( Extent1.CUST_ID = #{custId} ) -- CUST_ID
                                                                  AND ( 66 = Extent1.APP_TYPE_ID ) ) Project1
                                                   GROUP BY Project1.SALES_ORD_ID,Project1.SALES_ORD_NO,Project1.STK_CODE,Project1.STK_DESC,Project1.CODE,Project1.CODE_NAME,Project1.CODE1,Project1.CODE2,Project1.salesDt,Project1.appTypeId,Project1.stusCodeId,Project1.itmStkId,Project1.modeId,Project1.bankCode ) GroupBy1
            UNION ALL
                            SELECT 1 C1  ,                                  --union all 컬럼명 맞추기?
                                     GroupBy2.salesOrdId salesOrdId  ,
                                     GroupBy2.salesOrdNo salesOrdNo  ,
                                     GroupBy2.salesDt salesDt  , 
                                     GroupBy2.appTypeId appTypeId  , 
                                     GroupBy2.code code  ,
                                     GroupBy2.codeName codeName  , 
                                     GroupBy2.stusCodeId stusCodeId  , 
                                     GroupBy2.code1 code1  , 
                                     GroupBy2.itmStkId itmStkId  ,
                                     GroupBy2.stkCode stkCode  , 
                                     GroupBy2.stkDesc stkDesc  , 
                                     GroupBy2.modeId modeId  , 
                                     GroupBy2.code2 code2  , 
                                     GroupBy2.bankCode bankCode  , 
                                     CASE  WHEN ( GroupBy2.tradeAmt1 IS NOT NULL ) THEN GroupBy2.tradeAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53) END tradeAmt   
                              FROM ( SELECT Project3.SALES_ORD_ID salesOrdId  , 
                                            Project3.SALES_ORD_NO salesOrdNo  , 
                                            Project3.STK_CODE stkCode  , 
                                            Project3.STK_DESC stkDesc  , 
                                            Project3.CODE code  , 
                                            Project3.CODE_NAME codeName  , 
                                            Project3.CODE1 code1  , 
                                            Project3.salesDt salesDt  , 
                                            Project3.appTypeId appTypeId  , 
                                            Project3.stusCodeId stusCodeId  , 
                                            Project3.itmStkId itmStkId  , 
                                            Project3.modeId modeId  , 
                                            Project3.code2 code2  , 
                                            Project3.bankCode bankCode  , 
                                            SUM(Project3.TRADE_AMT)  tradeAmt1  , 
                                            SUM(Project3.TRADE_AMT)  tradeAmt2  
                                     FROM ( SELECT Extent10.SALES_ORD_ID SALES_ORD_ID  , 
                                                   Extent10.SALES_ORD_NO SALES_ORD_NO  ,
                                                   Extent12.STK_CODE STK_CODE  ,
                                                   Extent12.STK_DESC STK_DESC  ,
                                                   Extent13.CODE CODE  ,
                                                   Extent13.CODE_NAME CODE_NAME  ,
                                                   Extent14.CODE CODE1  ,
                                                   Extent15.TRADE_AMT TRADE_AMT  , 
                                                   CASE WHEN ( Extent10.SALES_DT IS NOT NULL ) THEN Extent10.SALES_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END salesDt  ,
                                                   CASE WHEN ( Extent10.APP_TYPE_ID IS NOT NULL ) THEN Extent10.APP_TYPE_ID ELSE 0 END appTypeId  , 
                                                   CASE WHEN ( Extent10.STUS_CODE_ID IS NOT NULL ) THEN Extent10.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                                                   CASE WHEN ( Extent11.ITM_STK_ID IS NOT NULL ) THEN Extent11.ITM_STK_ID ELSE 0 END itmStkId  ,
                                                   0 modeId, --col 개수 맞추기?? 
                                                   ''code2, --col 개수 맞추기?? 
                                                   ''bankCode  --col 개수 맞추기?? 
                                            FROM SAL0001D Extent10
                                                   JOIN SAL0002D Extent11   ON Extent11.SALES_ORD_ID = Extent10.SALES_ORD_ID
                                                   JOIN SYS0026M Extent12   ON Extent12.STK_ID = Extent11.ITM_STK_ID
                                                   JOIN SYS0013M Extent13   ON Extent13.CODE_ID = Extent10.APP_TYPE_ID
                                                   JOIN SYS0038M Extent14   ON Extent14.STUS_CODE_ID = Extent10.STUS_CODE_ID
                                                   LEFT JOIN PAY0035D Extent15   ON Extent15.TRADE_SO_ID = Extent10.SALES_ORD_ID
                                             WHERE  ( 8 <> Extent10.STUS_CODE_ID )
                                                      AND ( Extent10.CUST_ID =#{custId} ) -- CUST_ID
                                                      AND ( 66 <> Extent10.APP_TYPE_ID ) 
                                            ) Project3
                                            GROUP BY Project3.SALES_ORD_ID,Project3.SALES_ORD_NO,Project3.STK_CODE,Project3.STK_DESC,Project3.CODE,Project3.CODE_NAME,Project3.CODE1,Project3.salesDt,Project3.appTypeId,Project3.stusCodeId,Project3.itmStkId,Project3.modeId,Project3.code2,Project3.bankCode )
                                                     GroupBy2 ) UnionAll1 ) Distinct1 ) Project6 ) Project6            
                     ORDER BY Project6.SALES_ORD_NO ASC
	     ]]>
    </select>
    <!-- Ajax Call ThirdParty List  -->
    <select id="selectCustomerThirdPartyJsonList" parameterType="Map" resultType="egovMap">
        <![CDATA[  
        SELECT  Project2.SALES_ORD_ID SALES_ORD_ID  ,
                    Project2.SALES_ORD_NO SALES_ORD_NO  ,
                    TO_CHAR(Project2.salesDt, 'DD-MM-YYYY') SALES_DT,                     
                    Project2.appTypeId APP_TYPE_ID  ,
                    Project2.CODE CODE  ,
                    Project2.CODE_NAME CODE_NAME  ,
                    Project2.stusCodeId STUS_CODE_ID  ,
                    Project2.CODE1 CODE1  ,
                    Project2.itmStkId ITM_STK_ID  ,
                    Project2.STK_CODE STK_CODE  ,
                    Project2.STK_DESC STK_DESC  ,
                    Project2.modeId MODE_ID  ,
                    Project2.CODE2 CODE2  ,
                    Project2.bankCode BANK_CODE  ,
                    Project2.rentAmt RENT_AMT  
       FROM (   SELECT  Project2.SALES_ORD_ID SALES_ORD_ID  ,
                                Project2.SALES_ORD_NO SALES_ORD_NO  ,
                                Project2.STK_CODE STK_CODE  ,
                                Project2.STK_DESC STK_DESC  ,
                                Project2.CODE CODE  ,
                                Project2.CODE_NAME CODE_NAME  ,
                                Project2.CODE1 CODE1  ,
                                Project2.CODE2 CODE2  ,
                                Project2.salesDt salesDt  ,
                                Project2.appTypeId appTypeId  ,
                                Project2.stusCodeId stusCodeId  ,
                                Project2.itmStkId itmStkId  ,
                                Project2.modeId modeId  ,
                                Project2.bankCode bankCode  ,
                                Project2.rentAmt rentAmt                  
                     FROM ( SELECT GroupBy1.SALES_ORD_ID SALES_ORD_ID  ,
                                           GroupBy1.SALES_ORD_NO SALES_ORD_NO  ,
                                           GroupBy1.STK_CODE STK_CODE  ,
                                           GroupBy1.STK_DESC STK_DESC  ,
                                           GroupBy1.CODE CODE  ,
                                           GroupBy1.CODE_NAME CODE_NAME  ,
                                           GroupBy1.CODE1 CODE1  ,
                                           GroupBy1.CODE2 CODE2  ,
                                           GroupBy1.salesDt salesDt  ,
                                           GroupBy1.appTypeId appTypeId  ,
                                           GroupBy1.stusCodeId stusCodeId  ,
                                           GroupBy1.itmStkId itmStkId  ,
                                           GroupBy1.modeId modeId  ,
                                           GroupBy1.bankCode bankCode  ,
                                           CASE WHEN ( GroupBy1.rentAmt1 IS NOT NULL ) THEN GroupBy1.rentAmt2 ELSE UTILS.CONVERT_TO_FLOAT(0,53)  END rentAmt  
                                  FROM ( SELECT   Project1.SALES_ORD_ID SALES_ORD_ID  , --SALES_ORD_ID K1                       ----시작
                                                          Project1.SALES_ORD_NO SALES_ORD_NO  , -- SALES_ORD_NO K2
                                                          Project1.STK_CODE STK_CODE  , -- STK_CODE K3
                                                          Project1.STK_DESC STK_DESC  , -- STK_DESC K4
                                                          Project1.CODE CODE  , -- CODE K5
                                                          Project1.CODE_NAME CODE_NAME  , -- CODE_NAME K6
                                                          Project1.CODE1 CODE1  , -- CODE1 K7
                                                          Project1.CODE2 CODE2  , -- CODE2 K8
                                                          Project1.salesDt salesDt  , -- C1 K9
                                                          Project1.appTypeId appTypeId  , -- C2 K10
                                                          Project1.stusCodeId stusCodeId  , -- C3 K11
                                                          Project1.itmStkId itmStkId  , -- C4 K12
                                                          Project1.modeId modeId  , -- C5 K13
                                                          Project1.bankCode bankCode  , -- C6 K14
                                                          SUM(Project1.RENT_AMT)  rentAmt1  ,
                                                          SUM(Project1.RENT_AMT)  rentAmt2  
                                               FROM   ( SELECT   Extent2.SALES_ORD_ID SALES_ORD_ID  ,
                                                                         Extent2.SALES_ORD_NO SALES_ORD_NO  ,
                                                                         Extent4.STK_CODE STK_CODE  ,
                                                                         Extent4.STK_DESC STK_DESC  ,
                                                                         Extent5.CODE CODE  ,
                                                                         Extent5.CODE_NAME CODE_NAME  ,
                                                                         Extent6.CODE CODE1  ,
                                                                         Extent7.CODE CODE2  ,
                                                                         Extent9.RENT_AMT RENT_AMT  ,
                                                                         CASE WHEN ( Extent2.SALES_DT IS NOT NULL ) THEN Extent2.SALES_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END salesDt  , --c1
                                                                         CASE WHEN ( Extent2.APP_TYPE_ID IS NOT NULL ) THEN Extent2.APP_TYPE_ID ELSE 0 END appTypeId  , --c2
                                                                         CASE  WHEN ( Extent2.STUS_CODE_ID IS NOT NULL ) THEN Extent2.STUS_CODE_ID ELSE 0 END stusCodeId  , --c3
                                                                         CASE  WHEN ( Extent3.ITM_STK_ID IS NOT NULL ) THEN Extent3.ITM_STK_ID ELSE 0 END itmStkId  , --c4
                                                                         CASE  WHEN ( Extent1.MODE_ID IS NOT NULL ) THEN Extent1.MODE_ID ELSE 0 END modeId  , --c5
                                                                         CASE  WHEN ( Extent8.BANK_ID IS NOT NULL ) THEN Extent8.CODE ELSE '' END bankCode  --c6
                                                                FROM SAL0074D Extent1
                                                                         JOIN SAL0001D Extent2   ON ( 8 <> Extent2.STUS_CODE_ID )
                                                                         AND ( Extent2.SALES_ORD_ID = Extent1.SALES_ORD_ID )
                                                                         AND ( 66 = Extent2.APP_TYPE_ID )
                                                                         AND ( Extent2.CUST_ID <> #{custId} ) -- CUST_ID
                                                                         JOIN SAL0002D Extent3   ON Extent3.SALES_ORD_ID = Extent2.SALES_ORD_ID
                                                                         JOIN SYS0026M Extent4   ON Extent4.STK_ID = Extent3.ITM_STK_ID
                                                                         JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent2.APP_TYPE_ID
                                                                         JOIN SYS0038M Extent6   ON Extent6.STUS_CODE_ID = Extent2.STUS_CODE_ID
                                                                         JOIN SYS0013M Extent7   ON Extent7.CODE_ID = Extent1.MODE_ID
                                                                         LEFT JOIN SYS0004M Extent8   ON Extent8.BANK_ID = Extent1.BANK_ID
                                                                         LEFT JOIN PAY0022D Extent9   ON Extent9.RENT_SO_ID = Extent2.SALES_ORD_ID
                                                             WHERE  ( Extent1.CUST_ID =#{custId} ) -- CUST_ID
                                                                 AND ( 1 = Extent1.IS_3RD_PARTY ) ) Project1
                                            GROUP BY Project1.SALES_ORD_ID,Project1.SALES_ORD_NO,Project1.STK_CODE,Project1.STK_DESC,Project1.CODE,Project1.CODE_NAME,Project1.CODE1,Project1.CODE2,Project1.salesDt,Project1.appTypeId,Project1.stusCodeId,Project1.itmStkId,Project1.modeId,Project1.bankCode ) GroupBy1 ) Project2 ) Project2
                ORDER BY Project2.SALES_ORD_NO ASC
                  ]]>
    </select>
    <!-- Customer Detail Address (PopUp View)  -->
    <select id="selectCustomerAddrDetailViewPop" parameterType="Map" resultType="egovMap">
			 <![CDATA[ 
			  SELECT Limit1.CUST_ADD_ID CUST_ADD_ID  ,
                   Limit1.add1 ADD1  , --c1
                   Limit1.add2 ADD2  , 
                   Limit1.add3 ADD3  ,
                   Limit1.postCodeId POST_CODE_ID  , 
                   Limit1.postCode POST_CODE  , 
                   Limit1.areaId AREA_ID  , --c6 
                   Limit1.areaName AREA_NAME  , 
                   Limit1.stateIdd STATE_ID  , 
                   Limit1.stateName STATE_NAME  , 
                   Limit1.cntyId CNTY_ID  , 
                   Limit1.cntyName CNTY_NAME  , 
                   Limit1.rem REM  , 
                   Limit1.stusCodeId STUS_CODE_ID  , 
                   Limit1.NAME NAME  , 
                   Limit1.CUST_ID CUST_ID  ,
                   Limit1.CRT_USER_ID CRT_USER_ID  , 
                   Limit1.userName USER_NAME  , 
                   TO_CHAR(Limit1.crtDt, 'DD-MM-YYYY') CRT_DT  , --c15
                   TO_CHAR(TO_DATE(Limit1.updDt, 'YYYY-MM-DD'), 'DD-MM-YYYY') UPD_DT  , 
                   Limit1.updUserId UPD_USER_ID  , 
                   Limit1.userName1 USER_NAME1  
              FROM ( SELECT Extent1.CUST_ADD_ID CUST_ADD_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            Extent1.CRT_USER_ID CRT_USER_ID  ,
                            Extent2.NAME NAME  ,
                            CASE WHEN ( Extent1.ADD1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD1)) ELSE '' END add1  , 
                            CASE WHEN ( Extent1.ADD2 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD2)) ELSE '' END add2  , 
                            CASE WHEN ( Extent1.ADD3 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.ADD3)) ELSE '' END add3  , 
                            CASE WHEN ( Extent1.POST_CODE_ID IS NOT NULL ) THEN Extent1.POST_CODE_ID ELSE 0 END postCodeId  , 
                            CASE  WHEN ( Extent3.POST_CODE_ID IS NOT NULL ) THEN Extent3.POST_CODE ELSE '' END postCode  , 
                            CASE  WHEN ( Extent1.AREA_ID IS NOT NULL ) THEN Extent1.AREA_ID ELSE 0 END areaId  ,
                            CASE  WHEN ( Extent4.AREA_ID IS NOT NULL ) THEN Extent4.AREA_NAME ELSE '' END areaName  , 
                            CASE  WHEN ( Extent1.STATE_ID IS NOT NULL ) THEN Extent1.STATE_ID ELSE 0 END stateIdd  , 
                            CASE  WHEN ( Extent5.STATE_ID IS NOT NULL ) THEN Extent5.NAME ELSE '' END stateName  , 
                            CASE WHEN ( Extent1.CNTY_ID IS NOT NULL ) THEN Extent1.CNTY_ID ELSE 0 END cntyId  , 
                            CASE  WHEN ( Extent6.CNTY_ID IS NOT NULL ) THEN Extent6.NAME ELSE '' END cntyName  , 
                            CASE  WHEN ( Extent1.REM IS NOT NULL ) THEN Extent1.REM ELSE '' END rem  , 
                            CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  , 
                            CASE  WHEN ( Extent7.USER_ID IS NOT NULL ) THEN Extent7.USER_NAME ELSE '' END userName  , 
                            CASE  WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END crtDt  , 
                            CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > '1900-01-01')) THEN Extent1.UPD_DT ELSE '1900-01-01' END updDt  ,
                            CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUserId  , 
                            CASE  WHEN ( Extent8.USER_ID IS NOT NULL ) THEN Extent8.USER_NAME ELSE '' END userName1  
                     FROM SAL0023D Extent1
                            JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                            LEFT JOIN SYS0030C Extent3   ON Extent3.POST_CODE_ID = Extent1.POST_CODE_ID
                            LEFT JOIN SYS0039M Extent4   ON Extent4.AREA_ID = Extent1.AREA_ID
                            LEFT JOIN SYS0035M Extent5   ON Extent5.STATE_ID = Extent1.STATE_ID
                            LEFT JOIN SYS0015M Extent6   ON Extent6.CNTY_ID = Extent1.CNTY_ID
                            LEFT JOIN SYS0047M Extent7   ON Extent7.USER_ID = Extent1.CRT_USER_ID
                            LEFT JOIN SYS0047M Extent8   ON Extent8.USER_ID = Extent1.UPD_USER_ID
                      WHERE  (8 <> Extent1.STUS_CODE_ID)
                               AND ( Extent1.CUST_ADD_ID = #{getparam} ) AND ROWNUM <= 1 ) Limit1
			       ]]>
    </select>
    <!-- Customer Detail Contact(PopUp View)  -->
    
    <resultMap type="egovMap" id="detailContactClobMap">
        <result property="DEPT" column="DEPT" jdbcType="CLOB" javaType="java.lang.String"/> <!-- user_id 밑에 2번 --> <!-- #{custCntcId}  -->
    </resultMap>
    <select id="selectCustomerContactDetailViewPop" parameterType="Map" resultMap="detailContactClobMap">
			 <![CDATA[ 
			 SELECT Limit1.CUST_CNTC_ID CUST_CNTC_ID  ,
                   Limit1.CUST_ID CUST_ID  ,
                   TO_CHAR(Limit1.crtDt, 'DD-MM-YYYY') CRT_DT  ,
                   Limit1.CRT_USER_ID CRT_USER_ID  ,
                   Limit1.userNAme USER_NAME  , --c2
                   Limit1.dept DEPT  ,
                   TO_CHAR(Limit1.dob, 'DD-MM-YYYY') DOB  ,
                   Limit1.email EMAIL  ,
                   Limit1.gender GENDER  ,
                   Limit1.custInitial CUST_INITIAL  , --c7
                   Limit1.code CODE  ,
                   Limit1.name1 NAME1  ,
                   Limit1.nric NRIC  ,
                   Limit1.pos POS  ,
                   Limit1.raceId RACE_ID  ,
                   Limit1.codeName CODE_NAME  , --c13
                   Limit1.stusCodeId STUS_CODE_ID  ,
                   Limit1.NAME NAME  ,
                   Limit1.telF TELF  ,
                   Limit1.telM1 TEL_M1  ,
                   Limit1.telO TEL_O  ,
                   Limit1.telR TEL_R  ,
                   Limit1.ext EXT  ,
                   Limit1.updUserId UPD_USER_ID  ,
                   Limit1.userName1 USER_NAME1  ,
                   TO_CHAR(Limit1.updDt, 'DD-MM-YYYY') UPD_DT
              FROM ( SELECT Extent1.CUST_CNTC_ID CUST_CNTC_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            Extent1.CRT_USER_ID CRT_USER_ID  ,
                            Extent2.NAME NAME  ,
                            CASE WHEN ( ( Extent1.CRT_DT IS NOT NULL ) AND ( Extent1.CRT_DT > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END crtDt  , --c1
                            CASE WHEN ( Extent3.USER_ID IS NOT NULL ) THEN Extent3.USER_NAME ELSE '' END userNAme  , --c2
                            CASE  WHEN ( Extent1.DEPT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.DEPT)) ELSE NULL END dept  , --CLOB --c3
                            CASE  WHEN ( ( Extent1.DOB IS NOT NULL ) AND ( Extent1.DOB > TO_DATE('1900-01-01', 'YYYY-MM-DD'))) THEN Extent1.DOB ELSE TO_DATE('1900-01-01','YYYY-MM-DD') END dob  , --c4
                            CASE  WHEN ( Extent1.EMAIL IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EMAIL)) ELSE '' END email  , --c5
                            CASE  WHEN ( Extent1.GENDER IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.GENDER)) ELSE '' END gender  , --c6
                            CASE  WHEN ( Extent1.CUST_INITIAL IS NOT NULL ) THEN Extent1.CUST_INITIAL ELSE 0 END custInitial  , --c7
                            CASE  WHEN ( Extent5.CODE_ID IS NOT NULL ) THEN Extent5.CODE ELSE '' END code  , --c8
                            CASE  WHEN ( Extent1.NAME IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NAME)) ELSE '' END name1  , --c9
                            CASE  WHEN ( Extent1.NRIC IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.NRIC)) ELSE '' END nric  , --c10
                            CASE  WHEN ( Extent1.POS IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.POS)) ELSE '' END pos  , --c11
                            CASE  WHEN ( Extent1.RACE_ID IS NOT NULL ) THEN Extent1.RACE_ID ELSE 0 END raceId  , --c12
                            CASE  WHEN ( Extent6.CODE_ID IS NOT NULL ) THEN Extent6.CODE_NAME ELSE '' END codeName  , --c13
                            CASE  WHEN ( Extent1.STUS_CODE_ID IS NOT NULL ) THEN Extent1.STUS_CODE_ID ELSE 0 END stusCodeId  , --c14
                            CASE  WHEN ( Extent1.TELF IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TELF)) ELSE '' END telF  , --c15
                            CASE  WHEN ( Extent1.TEL_M1 IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_M1)) ELSE '' END telM1  , --c16
                            CASE  WHEN ( Extent1.TEL_O IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_O)) ELSE '' END telO  , --c17
                            CASE  WHEN ( Extent1.TEL_R IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.TEL_R)) ELSE '' END telR  , --c18
                            CASE  WHEN ( Extent1.EXT IS NOT NULL ) THEN LTRIM(RTRIM(Extent1.EXT)) ELSE '' END ext  , --c19
                            CASE  WHEN ( Extent1.UPD_USER_ID IS NOT NULL ) THEN Extent1.UPD_USER_ID ELSE 0 END updUserId  , --c20
                            CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName1  , --c21
                            CASE  WHEN ( ( Extent1.UPD_DT IS NOT NULL ) AND ( Extent1.UPD_DT > TO_DATE('1900-01-01','YYYY-MM-DD'))) THEN Extent1.UPD_DT ELSE TO_DATE('1900-01-01','YYYY-MM-DD') END updDt   --c22
                     FROM SAL0027D Extent1
                            JOIN SYS0038M Extent2   ON Extent2.STUS_CODE_ID = Extent1.STUS_CODE_ID
                            LEFT JOIN SYS0047M Extent3   ON Extent3.USER_ID = Extent1.CRT_USER_ID
                            LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.UPD_USER_ID
                            LEFT JOIN SYS0013M Extent5   ON Extent5.CODE_ID = Extent1.CUST_INITIAL
                            LEFT JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.RACE_ID
                      WHERE  ( 8 <> Extent1.STUS_CODE_ID
                               AND ( Extent1.CUST_CNTC_ID = #{getparam} ) AND ROWNUM <= 1 ) )Limit1
			  ]]>
    </select>
    <!-- Customer Detail Bank(PopUp View)  -->    
    <resultMap type="egovMap" id="detailBankClobMap">
        <result property="CUST_ACC_REM" column="CUST_ACC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ACC_OWNER" column="CUST_ACC_OWNER" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ACC_BANK_BRNCH" column="CUST_ACC_BANK_BRNCH" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ENCRYPT_ACC_NO" column="CUST_ENCRYPT_ACC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
    <select id="selectCustomerBankDetailViewPop" parameterType="Map" resultMap="detailBankClobMap">
        <![CDATA[ 
			  SELECT Limit1.CUST_ACC_ID CUST_ACC_ID  ,
                   Limit1.CUST_ID CUST_ID  ,
                   Limit1.custAccNo CUST_ACC_NO  ,
                   Limit1.custEncryptAccNo CUST_ENCRYPT_ACC_NO  ,
                   Limit1.custAccBankId CUST_ACC_BANK_ID  ,
                   Limit1.bankCode BANK_CODE  ,
                   Limit1.bankName BANK_NAME  ,
                   Limit1.custAccBankBrnch CUST_ACC_BANK_BRNCH  ,
                   Limit1.custAccOwner CUST_ACC_OWNER  ,
                   Limit1.custAccStusId CUST_ACC_STUS_ID  ,
                   Limit1.custAccTypeId CUST_ACC_TYPE_ID  ,
                   Limit1.codeName CODE_NAME  ,
                   Limit1.custAccRem CUST_ACC_REM  ,
                   Limit1.custAccCrtUserIdd CUST_ACC_CRT_USER_ID  ,
                   Limit1.custUpdUserId CUST_UPD_USER_ID  ,
                   TO_CHAR(Limit1.custAccCrtDt, 'DD-MM-YYYY') CUST_ACC_CRT_DT  ,
                   TO_CHAR(Limit1.custAccUpdDt, 'DD-MM-YYYY') CUST_ACC_UPD_DT  ,
                   Limit1.userName USER_NAME  ,
                   Limit1.userNAme1 USER_NAME1  
              FROM ( SELECT Extent1.CUST_ACC_ID CUST_ACC_ID  ,
                            Extent1.CUST_ID CUST_ID  ,
                            CASE WHEN ( Extent1.CUST_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ACC_NO ELSE '' END custAccNo  , --c1
                            CASE  WHEN ( Extent1.CUST_ENCRYPT_ACC_NO IS NOT NULL ) THEN Extent1.CUST_ENCRYPT_ACC_NO ELSE NULL END custEncryptAccNo  , -- CLOB --c2
                            CASE  WHEN ( Extent1.CUST_ACC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_ID ELSE 0 END custAccBankId  , --c3
                            CASE  WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  , --c4
                            CASE  WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankName  , --c5
                            CASE  WHEN ( Extent1.CUST_ACC_BANK_BRNCH IS NOT NULL ) THEN Extent1.CUST_ACC_BANK_BRNCH ELSE NULL END custAccBankBrnch  , -- CLOB --c6
                            CASE WHEN ( Extent1.CUST_ACC_OWNER IS NOT NULL ) THEN Extent1.CUST_ACC_OWNER ELSE NULL END custAccOwner  , -- CLOB --c7
                            CASE  WHEN ( Extent1.CUST_ACC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_ACC_STUS_ID ELSE 0 END custAccStusId  , --c8
                            CASE  WHEN ( Extent1.CUST_ACC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_ACC_TYPE_ID ELSE 0 END custAccTypeId  , --c9
                            CASE  WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END codeName  , --c10
                            CASE WHEN ( Extent1.CUST_ACC_REM IS NOT NULL ) THEN Extent1.CUST_ACC_REM ELSE NULL END custAccRem  , --CLOB --c11
                            CASE  WHEN ( Extent1.CUST_ACC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_USER_ID ELSE 0 END custAccCrtUserIdd  , --c12
                            CASE  WHEN ( Extent1.CUST_ACC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_USER_ID ELSE 0 END custUpdUserId  , --c13
                            CASE  WHEN ( Extent1.CUST_ACC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_ACC_CRT_DT ELSE TO_DATE('1900-01-01' , 'YYYY-MM-DD') END custAccCrtDt  , --c14
                            CASE  WHEN ( Extent1.CUST_ACC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_ACC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custAccUpdDt  , --c15
                            CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  , --c16
                            CASE  WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userNAme1   --c17
                     FROM SAL0022D Extent1
                            LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_ACC_BANK_ID
                            LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_ACC_TYPE_ID
                            LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_ACC_CRT_USER_ID
                            LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_ACC_UPD_USER_ID
                      WHERE  ( 8 <> Extent1.CUST_ACC_STUS_ID )
                               AND ( Extent1.CUST_ACC_ID =  #{getparam}) AND ROWNUM <= 1 ) Limit1
        ]]>
    </select>
    <!-- Customer Detail Card(PopUp View)  -->
    <resultMap type="egovMap" id="detailCardClobMap">
        <result property="CUST_CRC_NO" column="CUST_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_ORI_CRC_NO" column="CUST_ORI_CRC_NO" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="CUST_CRC_REM" column="CUST_CRC_REM" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    <select id="selectCustomerCreditCardDetailViewPop" parameterType="Map" resultMap="detailCardClobMap">
           <![CDATA[ 
				SELECT Limit1.CUST_CRC_ID CUST_CRC_ID  ,
					       Limit1.custId CUST_ID  , --c1
					       Limit1.custCrcBankId CUST_CRC_BANK_ID  , --c2
					       Limit1.bankCode BANK_CODE  , --c3
					       Limit1.bankId BANK_ID  , --c4
					       Limit1.custCrcExpr CUST_CRC_EXPR  , --c5
					       Limit1.custCrcOwner CUST_CRC_OWNER  , --c6
					       Limit1.custCrcNo CUST_CRC_NO  , --c7 clob
					       Limit1.custOriCrcNo CUST_ORI_CRC_NO  , --c8 clob
					       Limit1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
					       Limit1.custCrcTypeId CUST_CRC_TYPE_ID  , --c9
					       Limit1.code CODE  , --c10
					       Limit1.custCrcStusId CUST_CRC_STUS_ID  , --c11
					       TO_CHAR(Limit1.custCrcCrtDt, 'DD-MM-YYYY') CUST_CRC_CRT_DT  , --c12
                           TO_CHAR(Limit1.custCrcUpdDt, 'DD-MM-YYYY') CUST_CRC_UPD_DT  ,
					       Limit1.custCrcRem CUST_CRC_REM  , --c14 clob
					       Limit1.custCrcCrtUserId CUST_CRC_CRT_USER_ID  , --c15
					       Limit1.custCrcUpdUserId CUST_CRC_UPD_USER_ID  , --c16
					       Limit1.userName USER_NAME  , --c17
					       Limit1.userName1 USER_NAME1  , --c18
					       Limit1.cardTypeId CARD_TYPE_ID  , --c19
					       Limit1.CODE_NAME CODE_NAME  
				FROM ( SELECT Extent1.CUST_CRC_ID CUST_CRC_ID  ,
						                Extent1.CUST_ENCRYPT_CRC_NO CUST_ENCRYPT_CRC_NO  ,
						                Extent6.CODE_NAME CODE_NAME  ,
						                CASE WHEN ( Extent1.CUST_ID IS NOT NULL ) THEN Extent1.CUST_ID ELSE 0 END custId  , --C1
						                CASE WHEN ( Extent1.CUST_CRC_BANK_ID IS NOT NULL ) THEN Extent1.CUST_CRC_BANK_ID ELSE 0 END custCrcBankId  , --C2
						                CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.CODE ELSE '' END bankCode  , --C3
						                CASE WHEN ( Extent2.BANK_ID IS NOT NULL ) THEN Extent2.NAME ELSE '' END bankId  , --C4
						                CASE WHEN ( Extent1.CUST_CRC_EXPR IS NOT NULL ) THEN Extent1.CUST_CRC_EXPR ELSE '' END custCrcExpr  , --C5
						                CASE WHEN ( Extent1.CUST_CRC_OWNER IS NOT NULL ) THEN Extent1.CUST_CRC_OWNER ELSE '' END custCrcOwner  , --C6
						                CASE  WHEN ( Extent1.CUST_CRC_NO IS NOT NULL ) THEN Extent1.CUST_CRC_NO ELSE NULL END custCrcNo  , --CLOB --C7
						                CASE WHEN ( Extent1.CUST_ORI_CRC_NO IS NOT NULL ) THEN Extent1.CUST_ORI_CRC_NO ELSE NULL END custOriCrcNo  , --CLOB --C8
						                CASE WHEN ( Extent1.CUST_CRC_TYPE_ID IS NOT NULL ) THEN Extent1.CUST_CRC_TYPE_ID ELSE 0 END custCrcTypeId  , --C9
						                CASE  WHEN ( Extent3.CODE_ID IS NOT NULL ) THEN Extent3.CODE_NAME ELSE '' END code  , --C10
						                CASE  WHEN ( Extent1.CUST_CRC_STUS_ID IS NOT NULL ) THEN Extent1.CUST_CRC_STUS_ID ELSE 0 END custCrcStusId  , --C11
						                CASE WHEN ( Extent1.CUST_CRC_CRT_DT IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcCrtDt  , --C12
						                CASE WHEN ( Extent1.CUST_CRC_UPD_DT IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_DT ELSE TO_DATE('1900-01-01', 'YYYY-MM-DD') END custCrcUpdDt  , --C13
						                CASE  WHEN ( Extent1.CUST_CRC_REM IS NOT NULL ) THEN Extent1.CUST_CRC_REM ELSE NULL END custCrcRem  , --CLOB --C14
						                CASE WHEN ( Extent1.CUST_CRC_CRT_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_CRT_USER_ID ELSE 0 END custCrcCrtUserId  , --C15
						                CASE  WHEN ( Extent1.CUST_CRC_UPD_USER_ID IS NOT NULL ) THEN Extent1.CUST_CRC_UPD_USER_ID ELSE 0 END custCrcUpdUserId  , --C16
						                CASE  WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE '' END userName  , --C17
						                CASE  WHEN ( Extent5.USER_ID IS NOT NULL ) THEN Extent5.USER_NAME ELSE '' END userName1  , --C18
				                        CASE  WHEN ( Extent1.CARD_TYPE_ID IS NOT NULL ) THEN Extent1.CARD_TYPE_ID ELSE 0 END cardTypeId  --C19
				          FROM SAL0028D Extent1
						                LEFT JOIN SYS0004M Extent2   ON Extent2.BANK_ID = Extent1.CUST_CRC_BANK_ID
						                LEFT JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.CUST_CRC_TYPE_ID
						                LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent1.CUST_CRC_CRT_USER_ID
						                LEFT JOIN SYS0047M Extent5   ON Extent5.USER_ID = Extent1.CUST_CRC_UPD_USER_ID
						                JOIN SYS0013M Extent6   ON Extent6.CODE_ID = Extent1.CARD_TYPE_ID
				           WHERE  ( 8 <> Extent1.CUST_CRC_STUS_ID )
				            AND ( Extent1.CUST_CRC_ID = #{getparam}) AND ROWNUM <= 1 ) Limit1
           ]]>
    </select>
</mapper>