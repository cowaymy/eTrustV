<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.sales.rcms.impl.ROSCallLogMapper">

<select id="getAppTypeList" parameterType="Map" resultType="egovMap">
    SELECT 
       Extent1.CODE_ID   ,
       Extent1.CODE_MASTER_ID   ,
       Extent1.CODE   ,
       Extent1.CODE_NAME   ,
       Extent1.CODE_DESC   ,
       Extent1.DISAB   ,
       Extent1.CRT_DT   ,
       Extent1.CRT_USER_ID   ,
       Extent1.UPD_DT   ,
       Extent1.UPD_USER_ID   ,
       Extent1.OLD_CODE_ID   
  FROM SYS0013M Extent1
 WHERE  ( 0 = Extent1.DISAB )
          AND ( Extent1.CODE_MASTER_ID = #{codeMasterId})
</select>

<select id="selectRosCallLogList" parameterType="Map" resultType="egovMap">
    SELECT Project1.ORD_ID   ,
       Project1.ORD_NO   ,
       Project1.ORD_DT,
       Project1.APP_TYPE_ID   ,
       Project1.APP_TYPE_CODE   ,
       Project1.APP_TYPE_DESC   ,
       Project1.CUST_ID   ,
       Project1.CUST_NAME   ,
       Project1.CUST_NRIC   ,
       Project1.ORD_PO_NO   ,
       Project1.ORD_REF_NO   ,
       Project1.BRNCH_ID   ,
       Project1.STOCK_CODE   ,
       Project1.STOCK_DESC   ,
       Project1.RENTAL_STUS   ,
       Project1.CUST_BILL_ID   ,
       Project1.ORD_STUS_ID   
  FROM ( SELECT Project1.ORD_ID   ,
                Project1.ORD_NO   ,
                Project1.RENTAL_STUS   ,
                Project1.ORD_REF_NO   ,
                Project1.ORD_PO_NO   ,
                Project1.APP_TYPE_CODE   ,
                Project1.APP_TYPE_DESC   ,
                Project1.STOCK_CODE   ,
                Project1.STOCK_DESC   ,
                Project1.CUST_ID   ,
                Project1.CUST_NAME   ,
                Project1.CUST_NRIC   ,
                Project1.APP_TYPE_ID   ,
                Project1.ORD_DT   ,
                Project1.BRNCH_ID   ,
                Project1.CUST_BILL_ID   ,
                Project1.ORD_STUS_ID   
         FROM ( SELECT Extent1.ORD_ID   ,
                       Extent1.ORD_NO   ,
                       Extent1.RENTAL_STUS   ,
                       Extent1.ORD_REF_NO   ,
                       Extent1.ORD_PO_NO   ,
                       Extent1.APP_TYPE_CODE   ,
                       Extent1.APP_TYPE_DESC   ,
                       Extent1.STOCK_CODE   ,
                       Extent1.STOCK_DESC   ,
                       Extent1.CUST_ID   ,
                       Extent1.CUST_NAME   ,
                       Extent1.CUST_NRIC   ,
                       Extent2.APP_TYPE_ID   ,
                       CASE  WHEN ( Extent1.ORD_DT IS NOT NULL ) THEN TO_CHAR(Extent1.ORD_DT, 'DD/MM/YYYY') ELSE '01/01/1900' END ORD_DT  ,
                       CASE  WHEN ( Extent2.BRNCH_ID IS NOT NULL ) THEN Extent2.BRNCH_ID  ELSE 0 END BRNCH_ID  ,
                       CASE  WHEN ( Extent2.CUST_BILL_ID IS NULL ) THEN 0 ELSE Extent2.CUST_BILL_ID END CUST_BILL_ID  ,
                       CASE  WHEN ( Extent1.ORD_STUS_ID IS NOT NULL ) THEN Extent1.ORD_STUS_ID ELSE 0 END ORD_STUS_ID  
                FROM ( SELECT vOrderBasicInfo.ORD_ID   ,
                              vOrderBasicInfo.ORD_NO   ,
                              vOrderBasicInfo.RENTAL_STUS   ,
                              vOrderBasicInfo.ORD_STUS_ID   ,
                              vOrderBasicInfo.ORD_STUS_CODE   ,
                              vOrderBasicInfo.ORD_STUS_NAME   ,
                              vOrderBasicInfo.ORD_DT   ,
                              vOrderBasicInfo.INSTLMT_PRIOD   ,
                              vOrderBasicInfo.ORD_AMT   ,
                              vOrderBasicInfo.ORD_MTH_RENTAL   ,
                              vOrderBasicInfo.ORD_PV   ,
                              vOrderBasicInfo.ORD_PV_MONTH   ,
                              vOrderBasicInfo.ORD_PV_YEAR   ,
                              vOrderBasicInfo.ORD_REF_NO   ,
                              vOrderBasicInfo.ORD_PO_NO   ,
                              vOrderBasicInfo.ORD_DEPT_CODE   ,
                              vOrderBasicInfo.ORD_GRP_CODE   ,
                              vOrderBasicInfo.ORD_ORG_CODE   ,
                              vOrderBasicInfo.ORD_CRT_USER_ID   ,
                              vOrderBasicInfo.ORD_CRT_DT   ,
                              vOrderBasicInfo.APP_TYPE_ID   ,
                              vOrderBasicInfo.APP_TYPE_CODE   ,
                              vOrderBasicInfo.APP_TYPE_DESC   ,
                              vOrderBasicInfo.STOCK_ID   ,
                              vOrderBasicInfo.STOCK_CODE   ,
                              vOrderBasicInfo.STOCK_DESC   ,
                              vOrderBasicInfo.CUST_ID   ,
                              vOrderBasicInfo.CUST_TYPE   ,
                              vOrderBasicInfo.CUST_NAME   ,
                              vOrderBasicInfo.CUST_NRIC   ,
                              vOrderBasicInfo.CUST_DOB   ,
                              vOrderBasicInfo.CUST_NATION   ,
                              vOrderBasicInfo.CUST_GENDER   ,
                              vOrderBasicInfo.CUST_RACE   ,
                              vOrderBasicInfo.CUST_EMAIL   ,
                              vOrderBasicInfo.CUST_VA_NO   ,
                              vOrderBasicInfo.CUST_PASSPORT_EXPR   ,
                              vOrderBasicInfo.CUST_VISA_EXPR   ,
                              vOrderBasicInfo.ORD_PROMO_ID   ,
                              vOrderBasicInfo.ORD_PROMO_CODE   ,
                              vOrderBasicInfo.ORD_PROMO_DESC   ,
                              vOrderBasicInfo.ORD_MEM_ID   ,
                              vOrderBasicInfo.ORD_MEM_CODE   ,
                              vOrderBasicInfo.ORD_MEM_NAME   ,
                              vOrderBasicInfo.ORD_MEM_NRIC   ,
                              vOrderBasicInfo.ORD_MEM_TYPE_ID   ,
                              vOrderBasicInfo.ORD_MEM_TYPE_CODE   ,
                              vOrderBasicInfo.ORD_MEM_TYPE_NAME   ,
                              vOrderBasicInfo.COOL_OFF_PRIOD   ,
                              vOrderBasicInfo.KEYIN_BRNCH_ID   ,
                              vOrderBasicInfo.KEYIN_BRNCH_CODE   ,
                              vOrderBasicInfo.KEYIN_BRNCH_NAME   ,
                              vOrderBasicInfo.ORD_REM   ,
                              vOrderBasicInfo.RENT_CHK_ID   ,
                              vOrderBasicInfo.ORD_HM_ID   ,
                              vOrderBasicInfo.ORD_SM_ID   ,
                              vOrderBasicInfo.ORD_GM_ID   ,
                              vOrderBasicInfo.ORD_ADDR_ID   ,
                              vOrderBasicInfo.ORD_CNTC_ID   ,
                              vOrderBasicInfo.ORD_PROMO_RELATED_NO   ,
                              vOrderBasicInfo.UPD_DT   ,
                              vOrderBasicInfo.UPD_USER_ID   ,
                              vOrderBasicInfo.JOM_PAY_REF   ,
                              vOrderBasicInfo.STK_CTGRY_ID   ,
                              vOrderBasicInfo.STK_CTGRY_NAME   ,
                              vOrderBasicInfo.CUST_TYPE_ID   ,
                              vOrderBasicInfo.CUST_BILL_ID   ,
                              vOrderBasicInfo.OBLIGT_YEAR   
                       FROM SAL1006V vOrderBasicInfo ) Extent1
                       JOIN SAL0001D Extent2   ON Extent2.SALES_ORD_ID = Extent1.ORD_ID
                 WHERE 1 = 1  
                 <if test=" ordNo != null and ordNo != '' ">
                    AND  Extent1.ORD_NO = #{ordNo}
                 </if>
                 <if test=" appTypeArr != null and appTypeArr.length > 0 ">
                    AND  Extent2.APP_TYPE_ID IN
                    <foreach collection="appTypeArr" item="item" open="(" separator="," close=")">
                    #{item}
                    </foreach>
                 </if>
                 <if test=" custId != null and custId != '' ">
                    AND  Extent1.CUST_ID = #{custId}
                 </if>
                 <if test=" custName != null and custName != '' ">
                    AND  UPPER(Extent1.CUST_NAME) LIKE '%'||UPPER(#{custName}) ||'%'
                 </if>
                 <if test=" custNric != null and custNric != '' ">
                    AND  Extent1.CUST_NRIC LIKE '%'||#{custNric}||'%'
                 </if>
                 <if test=" rentalArr != null and rentalArr.length > 0  ">
                    AND Extent1.RENTAL_STUS IN
                    <foreach collection="rentalArr" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                 </if>
                          ) Project1 ) Project1
  ORDER BY Project1.ORD_ID ASC
</select>


<select id="getRentInstallLatestNo" parameterType="Map" resultType="egovMap">
				SELECT 
				    T1.RENT_INST_NO
				FROM(
				        SELECT 
				            RENT_INST_NO
				        FROM 
				            SAL0070D 
				        WHERE 
				            SALES_ORD_ID = #{ordId} 
				        ORDER BY RENT_INST_DT DESC ) T1
				<![CDATA[     
				WHERE ROWNUM <= 1
				]]>
</select>

<select id="getRentalStatus" parameterType="Map" resultType="egovMap">
    SELECT 
        RENTAL_STUS 
    FROM 
        SAL1006V 
    WHERE ORD_ID = #{ordId}
    <![CDATA[
    AND ROWNUM <= 1
    ]]>
</select>

<select id="selectROSSMSCodyTicketLogList" parameterType="Map" resultType="egovMap"> 
				   SELECT Project4.C1   ,
				       Project4.TYPE_ID   ,
				       Project4.CODE   ,
				       Project4.CODE_NAME   ,
				       Project4.REM   ,
				       Project4.USER_ID   ,
				       Project4.USER_NAME   ,
				       TO_CHAR(Project4.CALL_CRT_DT , 'DD/MM/YYYY') CALL_CRT_DT   
				  FROM ( SELECT Project4.C1   ,
				                Project4.TYPE_ID   ,
				                Project4.CODE   ,
				                Project4.CODE_NAME   ,
				                Project4.REM   ,
				                Project4.USER_ID   ,
				                Project4.USER_NAME   ,
				                Project4.CALL_CRT_DT   
				         FROM ( SELECT Distinct1.C1   ,
				                       Distinct1.TYPE_ID   ,
				                       Distinct1.CODE   ,
				                       Distinct1.CODE_NAME   ,
				                       Distinct1.REM   ,
				                       Distinct1.USER_ID   ,
				                       Distinct1.USER_NAME   ,
				                       Distinct1.CALL_CRT_DT   
				                FROM ( SELECT DISTINCT UnionAll1.C1   ,
				                                       UnionAll1.TYPE_ID   ,
				                                       UnionAll1.CODE CODE  ,
				                                       UnionAll1.CODE_NAME   ,
				                                       UnionAll1.REM   ,
				                                       UnionAll1.USER_ID   ,
				                                       UnionAll1.USER_NAME   ,
				                                       UnionAll1.CALL_CRT_DT   
				                       FROM ( SELECT 1 C1  ,
				                                     Extent1.TYPE_ID TYPE_ID  ,
				                                     Extent3.CODE CODE  ,
				                                     Extent3.CODE_NAME CODE_NAME  ,
				                                     CASE WHEN ( Extent2.CALL_SMS_REM IS NOT NULL ) THEN Extent2.CALL_SMS_REM ELSE ' ' END REM  ,
				                                     CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_ID ELSE 0 END USER_ID  ,
				                                     CASE WHEN ( Extent4.USER_ID IS NOT NULL ) THEN Extent4.USER_NAME ELSE ' ' END USER_NAME  ,
				                                     Extent2.CALL_CRT_DT CALL_CRT_DT  
				                              FROM CCR0006D Extent1
				                                     JOIN CCR0007D Extent2   ON ( Extent2.CALL_ENTRY_ID = Extent1.CALL_ENTRY_ID ) AND ( 1 = Extent2.CALL_SMS )
				                                     JOIN SYS0013M Extent3   ON Extent3.CODE_ID = Extent1.TYPE_ID
				                                     LEFT JOIN SYS0047M Extent4   ON Extent4.USER_ID = Extent2.CALL_CRT_USER_ID
				                               WHERE  Extent1.SALES_ORD_ID = #{ordId}
				                              UNION ALL 
				                              SELECT 1 C1  ,
				                                     Extent7.TYPE_ID   ,
				                                     Extent8.CODE   ,
				                                     Extent8.CODE_NAME   ,
				                                     CASE WHEN ( Extent5.CRCT_REM IS NOT NULL ) THEN Extent5.CRCT_REM ELSE ' ' END REM  ,
				                                     CASE WHEN ( Extent9.USER_ID IS NOT NULL ) THEN Extent9.USER_ID ELSE 0 END USER_ID  ,
				                                     CASE WHEN ( Extent9.USER_ID IS NOT NULL ) THEN Extent9.USER_NAME ELSE ' ' END USER_NAME  ,
				                                     Extent5.CRT_DT CRT_DT  
				                              FROM CCR0014M Extent5
				                                     JOIN CCR0007D Extent6   ON Extent6.CALL_RESULT_ID = Extent5.CALL_RESULT_ID
				                                     JOIN CCR0006D Extent7   ON ( Extent7.CALL_ENTRY_ID = Extent6.CALL_ENTRY_ID )
				                                     AND ( Extent7.SALES_ORD_ID = #{ordId} )
				                                     JOIN SYS0013M Extent8   ON Extent8.CODE_ID = Extent5.CALL_TYPE_ID
				                                     LEFT JOIN SYS0047M Extent9   ON Extent9.USER_ID = Extent5.CRT_USER_ID ) UnionAll1 ) Distinct1 ) Project4 ) Project4
				      ORDER BY Project4.CALL_CRT_DT DESC
</select>

<select id="getReasonCodeList" parameterType="Map" resultType="egovMap">
			  SELECT
			     Extent1.RESN_ID CODE_ID  ,
			     Extent1.CODE CODE  ,
			     Extent1.CODE || ' - ' || Extent1.RESN_DESC CODE_NAME  
			  FROM 
			     SYS0032M Extent1
			  WHERE  
			      Extent1.RESN_TYPE_ID = #{typeId} 
			  AND  
			      Extent1.STUS_CODE_ID = #{stusCodeId} 
</select>

<select id="getFeedbackCodeList" parameterType="Map" resultType="egovMap">
			    SELECT Extent2.RESN_ID CODE_ID  ,
			       Extent2.CODE CODE  ,
			       Extent2.CODE || ' - ' || Extent2.RESN_DESC CODE_NAME  
			  FROM SYS0034M Extent1
			         JOIN SYS0032M Extent2   ON Extent2.RESN_ID = Extent1.RESN_ID
			 WHERE  ( Extent1.PARENT_RESN_ID = #{resnId} )
			          AND ( 0 = Extent1.DISAB )
</select>

<select id="selectROSCallLogBillGroupOrderCnt" parameterType="Map" resultType="egovMap">
			SELECT 
			    Extent1.SALES_ORD_ID   
			FROM 
			    SAL0001D Extent1
			WHERE 
			    Extent1.CUST_BILL_ID = #{custBillId} 
			<![CDATA[
			AND  1 <> Extent1.STUS_CODE_ID
			]]> 
</select>

<select id="getOrderServiceMemberViewByOrderID" parameterType="Map" resultType="egovMap">
    SELECT Limit1.SALES_ORD_ID SALES_ORD_ID  ,
       Limit1.DEPT_CODE DEPT_CODE  ,
       CASE WHEN ( Limit1.MEM_ID IS NOT NULL ) THEN Limit1.MEMBERCODE1 ELSE ' ' END MEMBER_CODE  ,
       CASE WHEN ( Limit1.MEM_ID IS NOT NULL ) THEN Limit1.NAME1 ELSE ' ' END MEMBER_NAME  ,
       CASE WHEN ( Limit1.TELMOBILE1 IS NOT NULL ) THEN Limit1.TELMOBILE1 ELSE ' ' END MEM_TEL_MOBILE  ,
       Limit1.GRP_CODE   ,
       CASE WHEN ( Limit1.MEMBERID1 IS NOT NULL ) THEN Limit1.MEMBERCODE2 ELSE ' ' END MEMBER_CODE1  ,
       CASE WHEN ( Limit1.MEMBERID1 IS NOT NULL ) THEN Limit1.NAME2 ELSE ' ' END MEMBER_NAME1  ,
       CASE WHEN ( Limit1.TELMOBILE2 IS NOT NULL ) THEN Limit1.TELMOBILE2 ELSE ' ' END MEM_TEL_MOBILE1  ,
       Limit1.ORG_CODE   ,
       CASE WHEN ( Limit1.MEMBERID2 IS NOT NULL ) THEN Limit1.MEMBERCODE3 ELSE ' ' END MEMBER_CODE2  ,
       CASE WHEN ( Limit1.MEMBERID2 IS NOT NULL ) THEN Limit1.NAME3 ELSE ' ' END MEMBER_NAME2  ,
       CASE WHEN ( Limit1.TELMOBILE3 IS NOT NULL ) THEN Limit1.TELMOBILE3 ELSE ' ' END MEM_TEL_MOBILE2  ,
       Limit1.MEM_CODE   ,
       Limit1.NAME   ,
       Limit1.NRIC   ,
       CASE WHEN ( Limit1.TEL_MOBILE IS NOT NULL ) THEN Limit1.TEL_MOBILE ELSE ' ' END TEL_MOBILE  ,
       CASE WHEN ( Limit1.TEL_HUSE IS NOT NULL ) THEN Limit1.TEL_HUSE ELSE ' ' END TEL_HUSE  ,
       CASE WHEN ( Limit1.TEL_OFFICE IS NOT NULL ) THEN Limit1.TEL_OFFICE ELSE ' ' END TEL_OFFICE  
  FROM ( SELECT Extent1.SALES_ORD_ID SALES_ORD_ID  ,
                Extent3.MEM_CODE MEM_CODE  ,
                Extent3.NAME NAME  ,
                Extent3.NRIC NRIC  ,
                Extent3.TEL_OFFICE TEL_OFFICE  ,
                Extent3.TEL_HUSE TEL_HUSE  ,
                Extent3.TEL_MOBILE TEL_MOBILE  ,
                Extent4.DEPT_CODE DEPT_CODE  ,
                Extent4.GRP_CODE GRP_CODE  ,
                Extent4.ORG_CODE ORG_CODE  ,
                Extent5.MEM_ID MEM_ID  ,
                Extent5.MEM_CODE MEMBERCODE1  ,
                Extent5.NAME NAME1  ,
                Extent5.TEL_MOBILE TELMOBILE1  ,
                Extent7.MEM_ID MEMBERID1  ,
                Extent7.MEM_CODE MEMBERCODE2  ,
                Extent7.NAME NAME2  ,
                Extent7.TEL_MOBILE TELMOBILE2  ,
                Extent9.MEM_ID MEMBERID2  ,
                Extent9.MEM_CODE MEMBERCODE3  ,
                Extent9.NAME NAME3  ,
                Extent9.TEL_MOBILE TELMOBILE3  
         FROM SAL0001D Extent1
                JOIN SAL0090D Extent2   ON ( Extent2.SRV_SO_ID = Extent1.SALES_ORD_ID )
                AND ( 1 = Extent2.SRV_STUS_ID )
                JOIN ORG0001D Extent3   ON Extent3.MEM_ID = Extent2.SRV_CODY_ID
                JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                              vMemberOrg.MEM_CODE MEM_CODE  ,
                              vMemberOrg.MEM_LVL MEM_LVL  ,
                              vMemberOrg.DEPT_CODE DEPT_CODE  ,
                              vMemberOrg.GRP_CODE GRP_CODE  ,
                              vMemberOrg.ORG_CODE ORG_CODE  ,
                              vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                              vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                              vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                              vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                              vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                              vMemberOrg.LVL0_UP_ID LVL0_UP_ID  
                       FROM ORG1001V vMemberOrg ) Extent4   ON Extent4.MEM_ID = Extent3.MEM_ID
                LEFT JOIN ORG0001D Extent5   ON Extent5.MEM_ID = Extent4.MEM_UP_ID
                LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID  
                            FROM ORG1001V vMemberOrg ) Extent6   ON Extent6.MEM_ID = Extent4.MEM_UP_ID
                LEFT JOIN ORG0001D Extent7   ON Extent7.MEM_ID = Extent6.MEM_UP_ID
                LEFT JOIN ( SELECT vMemberOrg.MEM_ID MEM_ID  ,
                                   vMemberOrg.MEM_CODE MEM_CODE  ,
                                   vMemberOrg.MEM_LVL MEM_LVL  ,
                                   vMemberOrg.DEPT_CODE DEPT_CODE  ,
                                   vMemberOrg.GRP_CODE GRP_CODE  ,
                                   vMemberOrg.ORG_CODE ORG_CODE  ,
                                   vMemberOrg.TOP_ORG_CODE TOP_ORG_CODE  ,
                                   vMemberOrg.MEM_UP_ID MEM_UP_ID  ,
                                   vMemberOrg.LVL3_UP_ID LVL3_UP_ID  ,
                                   vMemberOrg.LVL2_UP_ID LVL2_UP_ID  ,
                                   vMemberOrg.LVL1_UP_ID LVL1_UP_ID  ,
                                   vMemberOrg.LVL0_UP_ID LVL0_UP_ID  
                            FROM ORG1001V vMemberOrg ) Extent8   ON Extent8.MEM_ID = Extent6.MEM_UP_ID
                LEFT JOIN ORG0001D Extent9   ON Extent9.MEM_ID = Extent8.MEM_UP_ID
          <![CDATA[      
          WHERE  Extent1.SALES_ORD_ID = #{ordId} AND ROWNUM <= 1 ) Limit1
          ]]>
</select>
<!-- INSERT NEW ROS CALL START -->
<select id="chkCurrRosCall" parameterType="Map" resultType="egovMap">
			SELECT 
			    Extent1.SALES_ORD_ID   ,
			    Extent1.ROS_YEAR   ,
			    Extent1.ROS_MONTH   ,
			    Extent1.ROS_CALLER_USER_ID   ,
			    Extent1.ROS_CALL_RESN_ID   ,
			    Extent1.ROS_CALL_RECALL_DT   ,
			    Extent1.ROS_CALL_STUS_ID   ,
			    Extent1.ROS_CALL_CRT_DT   ,
			    Extent1.ROS_CALL_CRT_USER_ID   ,
			    Extent1.ROS_CALL_UPD_DT   ,
			    Extent1.ROS_CALL_UPD_USER_ID   
			FROM 
			    MSC0013D Extent1
			WHERE 
			    Extent1.SALES_ORD_ID = #{orderId} 
			AND 
			    Extent1.ROS_YEAR = TO_CHAR(SYSDATE,'YYYY') 
			AND 
			    Extent1.ROS_MONTH = TO_CHAR(SYSDATE,'MM') 
			AND 
			    <![CDATA[
			    ROWNUM <= 1
			    ]]>
</select>

<update id="updateROSCallInfo" parameterType="Map" >
                UPDATE 
                    MSC0013D
                SET 
                    ROS_CALL_RESN_ID = #{rosCallResnId},
                    ROS_CALL_RECALL_DT = TO_DATE(#{rosCallRecallDt} , 'DD/MM/YYYY HH24:MI:SS'),
                    ROS_CALL_STUS_ID = #{rosCallStusId},
                    ROS_STUS = #{rosStatus},
                    PTP_DT = TO_DATE(#{ptpDt}, 'DD/MM/YYYY'),
                    ROS_CALL_UPD_DT = SYSDATE,
                    ROS_CALL_UPD_USER_ID = #{userId}
                WHERE   
                     SALES_ORD_ID = #{orderId} 
                AND  
                    ROS_YEAR = TO_CHAR(SYSDATE,'YYYY')  
                AND 
                    ROS_MONTH = TO_CHAR(SYSDATE,'MM')  
</update>

<select id="chkCurrCallEntryInfo" parameterType="Map" resultType="egovMap">
            SELECT Extent1.CALL_ENTRY_ID   ,
                   Extent1.SALES_ORD_ID   ,
                   Extent1.TYPE_ID   ,
                   Extent1.STUS_CODE_ID   ,
                   Extent1.RESULT_ID   ,
                   Extent1.DOC_ID   ,
                   Extent1.CRT_USER_ID   ,
                   Extent1.CRT_DT   ,
                   Extent1.CALL_DT   ,
                   Extent1.IS_WAIT_FOR_CANCL   ,
                   Extent1.HAPY_CALLER_ID   ,
                   Extent1.UPD_DT   ,
                   Extent1.UPD_USER_ID   ,
                   Extent1.ORI_CALL_DT   
             FROM 
                CCR0006D Extent1
             WHERE 
                Extent1.SALES_ORD_ID = #{orderId} 
             AND
                507 = Extent1.TYPE_ID
            <![CDATA[      
            AND ROWNUM <= 1
            ]]>
</select>

<select id="getSeqCCR0007D" resultType="java.lang.Integer">
    SELECT CCR0007D_CALL_RESULT_ID_SEQ.NEXTVAL FROM DUAL
</select>

<insert id="insertCallResultInfo" parameterType="Map">
    INSERT INTO CCR0007D (
                CALL_RESULT_ID,
                CALL_ENTRY_ID,
                CALL_STUS_ID,
                CALL_DT,
                CALL_ACTN_DT,
                CALL_FDBCK_ID,
                CALL_CT_ID,
                CALL_REM,
                CALL_CRT_USER_ID,
                CALL_CRT_DT,
                CALL_CRT_USER_ID_DEPT,
                CALL_HC_ID,
                CALL_ROS_AMT,
                CALL_SMS,
                CALL_SMS_REM
        ) VALUES (
                #{callResultSeq},
                #{callEntId},
                #{callStusId},
                TO_DATE(#{callDt}, 'DD/MM/YYYY'),
                TO_DATE(#{callActnDt}, 'DD/MM/YYYY'),
                #{callFdbchId},
                #{callCtId},
                #{callRem},
                #{callCrtUserId},
                SYSDATE,
                #{callCrtUserIdDept},
                #{callHcId},
                #{callRosAmt},
                #{callSMS},
                #{callSMSRem}
               )
</insert>

<update id="updateCallEntryInfo" parameterType="Map">
            UPDATE 
                CCR0006D
            SET 
                RESULT_ID = #{resultId},
                UPD_DT = SYSDATE,
                UPD_USER_ID = #{userId}
             WHERE   
                CALL_ENTRY_ID = #{callEntId} 
</update>


<select id="getSeqCCR0006D" resultType="java.lang.Integer">
    SELECT CCR0006D_CALL_ENTRY_ID_SEQ.NEXTVAL FROM DUAL
</select>

<insert id="insertCallEntryInfo" parameterType="Map">
INSERT INTO CCR0006D(
                CALL_ENTRY_ID,
                SALES_ORD_ID,
                TYPE_ID,
                STUS_CODE_ID,
                RESULT_ID,
                DOC_ID ,
                CRT_USER_ID,
                CRT_DT,
                CALL_DT,
                IS_WAIT_FOR_CANCL,
                HAPY_CALLER_ID,
                UPD_DT,
                UPD_USER_ID,
                ORI_CALL_DT,
                CUR_SEQ_NO,
                MAIN_DEPT,
                SUB_DEPT
        ) VALUES (
              #{callEntSeq},
              #{salesOrdId},
              #{typeId},
              #{stusCodeId},
              #{resultId},
              #{docId},
              #{userId},
              SYSDATE,
              TO_DATE(#{callDt}, 'DD/MM/YYYY'),
              #{isWaitForCancl},
              #{happCallerId},
              SYSDATE,
              #{userId},
              TO_DATE(#{oriCallDt}, 'DD/MM/YYYY'),
              NULL,
              NULL,
              NULL
               )

</insert>

<!--ROS CALL NOT FOUND -->
<insert id="insertROSCallInfo" parameterType="Map">
    INSERT INTO MSC0013D (
                        SALES_ORD_ID,
                        ROS_YEAR,
                        ROS_MONTH,
                        ROS_CALLER_USER_ID,
                        ROS_CALL_RESN_ID,
                        ROS_CALL_RECALL_DT,
                        ROS_CALL_STUS_ID,
                        ROS_CALL_CRT_DT,
                        ROS_CALL_CRT_USER_ID,
                        ROS_CALL_UPD_DT,
                        ROS_CALL_UPD_USER_ID,
                        ROS_STUS,
                        PTP_DT
        ) VALUES (
                        #{orderId},
                        TO_CHAR(SYSDATE,'YYYY'),
                        TO_CHAR(SYSDATE,'MM'),
                        #{rosCallerUserId},
                        #{rosCallResnId},
                        TO_DATE(#{rosCallRecallDt}, 'DD/MM/YYYY HH24:MI:SS'),
                        #{rosCallStusId},
                        SYSDATE,
                        #{userId},
                        SYSDATE,
                        #{userId},
                        #{rosStatus},
                        TO_DATE(#{ptpDt}, 'DD/MM/YYYY')
        )
</insert>


</mapper>