<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coway.trust.biz.attendance.impl.AttendanceMapper">

    <insert id="saveBatchCalMst" parameterType="Map">
        INSERT INTO ATD0001M
        (
              BATCH_ID
            , BATCH_MEM_TYPE
            , BATCH_MTH_YEAR
            , BATCH_STUS_ID
            , CNFM_STUS_ID
            , CRT_USER_ID
            , CRT_DT
        ) VALUES (
	          ATD0001M_BATCH_ID_SEQ.NEXTVAL
	        , #{batchMemType}
	        , #{batchMthYear}
	        , '1'
	        , '44'
	        , #{crtUserId}
	        , SYSDATE
        )
    </insert>

    <insert id="saveBatchCalDetailList" parameterType="java.util.List">
        INSERT INTO ATD0002D
        (
              ATD_ID
            , BATCH_ID
            , ATD_TYPE
            , MEM_CODE
            , MEM_TYPE
            , DT_FROM
            , DT_TO
            , TIME
            , DISAB
            , CRT_USER_ID
            , CRT_DT
        )
        SELECT ATD0002D_ATD_ID_SEQ.nextval, batchId, atdType, memCode, memType, dateFrom, dateTo, time ,disab, crtUserId, crtDt FROM (
	        <foreach collection="list" item="item" index="index" separator=" UNION ALL ">
	         SELECT
	              #{item.batchId} batchId
	            , #{item.atdType} atdType
	            , #{item.memCode} memCode
	            , #{item.batchMemType} memType
	            , TO_DATE(#{item.dateFrom}, 'DD/MM/RRRR') dateFrom
	            , TO_DATE(#{item.dateTo}, 'DD/MM/RRRR') dateTo
	            , TO_TIMESTAMP(#{item.time}, 'HH24:MI') time
	            , '0' disab
	            , #{item.crtUserId} crtUserId
	            , SYSDATE crtDt
	      FROM DUAL
            </foreach>
        )
    </insert>

    <update id="updateBatchCalMst" parameterType="Map">
           UPDATE ATD0001M
           SET
                  BATCH_STUS_ID = 4
                , CNFM_STUS_ID = 77
           WHERE BATCH_ID = #{batchId}
           AND BATCH_STUS_ID =1
           AND CNFM_STUS_ID = 44
    </update>

     <update id="updateMemberInfo" parameterType="Map">
        MERGE INTO ATD0002D A
        USING (
	              SELECT DISTINCT
	                    A.BATCH_ID
	                  , A.MEM_CODE
	                  , C.MEM_ID
	                  , C.MEM_LVL
	                  , C.DEPT_CODE
	                  , C.GRP_CODE
	                  , C.ORG_CODE
	              FROM ATD0002D A
	              JOIN ATD0001M B ON A.BATCH_ID = B.BATCH_ID
	              JOIN ORG1002V C ON A.MEM_CODE = C.MEM_CODE AND TO_CHAR (TO_DATE(C.HIST_MONTH||HIST_YEAR,'MM/YYYY'), 'MM/YYYY') = B.BATCH_MTH_YEAR
        )SRC ON ( A.MEM_CODE = SRC.MEM_CODE AND A.BATCH_ID =SRC.BATCH_ID )
        WHEN MATCHED THEN UPDATE
        SET A.MEM_ID = SRC.MEM_ID
             ,A.MEM_LVL = SRC.MEM_LVL
             ,A.DEPT_CODE = SRC.DEPT_CODE
             ,A.GRP_CODE = SRC.GRP_CODE
             ,A.ORG_CODE = SRC.ORG_CODE
    </update>

    <select id="selectCurrentBatchId" resultType="int">
            SELECT NVL(MAX(BATCH_ID), 1) AS BATCH_ID FROM ATD0001M
    </select>

    <update id="updateAttendanceBatch" parameterType="Map">
	   UPDATE FCM0019M
	   SET APPV_PRCSS_NO = #{appvPrcssNo}
	       ,UPD_DT = SYSDATE
	       ,UPD_USER_ID = #{userId}
	    WHERE CLM_NO = #{clmNo}
    </update>

    <insert id="insertApproveLineDetail" parameterType="Map">
        INSERT INTO ATD0003D (
		                      BATCH_ID
							, APPV_USER_ID
							, APPV_LINE_CNT
							, APPV_STATUS
							, CRT_USER_ID
							, CRT_DT
             )VALUES (
                             #{batchId}
                           , #{memCode}
                           , #{approveNo}
                           , 1
                           , #{userId}
                           , SYSDATE
            )
    </insert>

    <select id="searchAtdUploadList" parameterType="Map" resultType="egovMap">
		SELECT
		      A.BATCH_ID
		    , FN_GET_STUS_DESC(A.BATCH_STUS_ID,1) AS STUS
		    , FN_GET_CODE_DESC(A.BATCH_MEM_TYPE) AS MEM_TYPE
		    , A.BATCH_MEM_TYPE
		    , A.BATCH_MTH_YEAR
		    , CRT_DT
		    , B.USER_NAME
		FROM ATD0001M A
		LEFT JOIN SYS0047M B ON A.CRT_USER_ID = B.USER_ID
		WHERE 1=1
		AND A.BATCH_STUS_ID  <![CDATA[ <> ]]> 8

        <if test="calMonthYear != null and calMonthYear != '' ">
            AND ( A.BATCH_MTH_YEAR = #{calMonthYear} )
        </if>

        <if test="calMemType != null and calMemType != '' ">
             AND ( A.BATCH_MEM_TYPE = #{calMemType} )
         </if>
            ORDER BY 1 DESC
    </select>

     <select id="checkDup" parameterType="Map" resultType="int">
            SELECT
                    COUNT(*)
            FROM ATD0001M
            WHERE BATCH_MEM_TYPE = #{batchMemType}
            AND BATCH_MTH_YEAR = #{batchMthYear}
            AND BATCH_STUS_ID <![CDATA[ <> ]]> 8
     </select>

      <update id="disableBatchCalMst" parameterType="Map">
           UPDATE ATD0001M
           SET
                    BATCH_STUS_ID = 8
                  , UPD_USER_ID = #{crtUserId}
                  , UPD_DT =SYSDATE
          WHERE BATCH_MEM_TYPE = #{batchMemType}
          AND BATCH_MTH_YEAR = #{batchMthYear}
    </update>

     <update id="deleteUploadBatch" parameterType="Map">
           UPDATE ATD0001M
           SET
                    BATCH_STUS_ID = 8
                  , UPD_USER_ID = #{crtUserId}
                  , UPD_DT =SYSDATE
          WHERE BATCH_ID = #{batchId}
    </update>

    <update id="disableBatchCalDtl" parameterType="Map">
           UPDATE ATD0002D
           SET
                    DISAB = 1
                  , UPD_USER_ID = #{crtUserId}
                  , UPD_DT =SYSDATE
          WHERE BATCH_ID = #{batchId}
    </update>

    <update id="approveUploadBatch" parameterType="Map">
           UPDATE ATD0001M
           SET
                    BATCH_STUS_ID = 4
                  , CNFM_STUS_ID = 77
                  , UPD_USER_ID = #{crtUserId}
                  , UPD_DT =SYSDATE
          WHERE BATCH_ID = #{batchId}
    </update>

     <select id="selectManagerCode" parameterType="Map" resultType="egovMap">
		   SELECT  DISTINCT
	                    A.MANAGER_CODE AS CODE_ID
	                  , A.MANAGER_CODE AS CODE_NAME
			FROM ATD0005D A
			WHERE NVL(A.DISAB,0) = 0
			<if test="memLvl != null and memLvl != '' ">
	            <choose>
	                  <when test="memLvl == 1">
	                        AND A.RANK = 6988
	                   </when>
	                   <when test="memLvl == 2">
	                        AND A.RANK = 6989
	                   </when>
	                    <when test="memLvl == 3">
	                        AND A.RANK = 6990
	                   </when>
	             </choose>
	        </if>
			ORDER BY 1
	</select>


	<select id="searchAtdManagementList" parameterType="Map" resultType="egovMap">
        SELECT DISTINCT ATD_DATE, ATD_DAY,  YEAR, MONTH
          <if test="rank != null and rank != '' ">
               <choose>
                     <when test="rank == 6988">
                          , ORG_CODE
                      </when>
                      <when test="rank == 6989">
                          , GRP_CODE
                      </when>
                      <when test="rank == 6990">
                          , DEPT_CODE
                      </when>
                </choose>
           </if>
          , NVL(INFO_TECH,0) AS INFO_TECH, NVL(OUT_OF_OFFICE,0 )OUT_OF_OFFICE, NVL(E_LEAVE,0) E_LEAVE, NVL(PUBLIC_HOLIDAY,0) PUBLIC_HOLIDAY, NVL(TRAINING,0) TRAINING, TIME
          , CASE WHEN TRIM(ATD_DAY) NOT IN ('SATURDAY','SUNDAY')  THEN '1' ELSE '0' END AS WORKING_DAY
          , CASE WHEN ATD_DAY NOT IN ('SATURDAY','SUNDAY') AND (
            (NVL(INFO_TECH,0)  <![CDATA[ <> ]]> 0 AND TIME  <![CDATA[ <> ]]> 'LATE')
            OR NVL(E_LEAVE,0) =1 OR NVL(TRAINING,0) =1 ) THEN '1'
            ELSE '0' END AS ATTENDANCE
            FROM
        (SELECT ATD_DATE, ATD_DAY, YEAR, MONTH
          <if test="rank != null and rank != '' ">
               <choose>
                     <when test="rank == 6988">
                          , ORG_CODE
                      </when>
                      <when test="rank == 6989">
                          , GRP_CODE
                      </when>
                      <when test="rank == 6990">
                          , DEPT_CODE
                      </when>
                </choose>
           </if>
            ,  INFO_TECH, OUT_OF_OFFICE, E_LEAVE, PUBLIC_HOLIDAY, TRAINING
            , CASE WHEN to_char(TIME, 'hh24:mi') >  to_char(to_timestamp('09:01', 'hh24:mi'), 'hh24:mi') THEN 'LATE' ELSE to_char(TIME, 'hh24:mi') END AS TIME
        FROM (
            SELECT * FROM
                 (
	                WITH DAY_LIST AS (
	                    SELECT TO_CHAR(TO_DATE(ATD_DATE,'DD/MM/YYYY'),'YYYY/MM/DD') AS ATD_DATE FROM
	                    (
	                        SELECT
	                            TO_CHAR(LEVEL) || '/' || TO_CHAR(#{calMonthYear})  AS ATD_DATE
	                        FROM DUAL CONNECT BY LEVEL  <![CDATA[ <= ]]>   TO_CHAR(LAST_DAY(TO_DATE(#{calMonthYear}, 'MM/YYYY')),'DD')
	                    )
	                ),
	                    ATD_LIST AS (
	                    SELECT
	                          A.BATCH_ID
	                        , B.TIME
	                        , EXTRACT (YEAR FROM TO_DATE(BATCH_MTH_YEAR,'MM/YYYY')) YEAR
	                        , EXTRACT (MONTH FROM TO_DATE(BATCH_MTH_YEAR,'MM/YYYY')) MONTH
	                        , B.MEM_CODE
	                        , B.ATD_TYPE
	                        , B.DT_FROM
	                        , B.DT_TO
	                    FROM ATD0001M A
	                    JOIN ATD0002D B ON A.BATCH_ID = B.BATCH_ID
	                    WHERE 1=1
	                    AND A.BATCH_STUS_ID = 4
	                    AND NVL(B.DISAB,0) = 0
	                    AND BATCH_MTH_YEAR = #{calMonthYear}

	                )
	                SELECT
	                       A.ATD_DATE
	                     , TO_CHAR(TO_DATE(A.ATD_DATE,'YYYY/MM/DD'), 'DAY') AS ATD_DAY
	--                   , D.CODE
	                     , D.CODE_DESC TYPE
	                     , B.TIME
	                     , B.YEAR
	                     , B.MONTH
	--                   , B.MEM_CODE

					   <if test="rank != null and rank != '' ">
				            <choose>
				                  <when test="rank == 6988">
				                       , E.ORG_CODE
				                   </when>
				                   <when test="rank == 6989">
				                        , E.GRP_CODE
				                   </when>
				                    <when test="rank == 6990">
				                         , E.DEPT_CODE
				                   </when>
				             </choose>
				        </if>
	                     , COUNT(B.MEM_CODE) AS ATD_CHECK
	                FROM DAY_LIST A
	                LEFT JOIN ATD_LIST B ON A.ATD_DATE BETWEEN TO_CHAR(B.DT_FROM,'YYYY/MM/DD') AND TO_CHAR(B.DT_TO,'YYYY/MM/DD')
	                LEFT JOIN SYS0013M D ON B.ATD_TYPE = D.CODE
	                LEFT JOIN ORG1001V E ON B.MEM_CODE = E.MEM_CODE

	                GROUP BY A.ATD_DATE, TO_CHAR(TO_DATE(A.ATD_DATE,'YYYY/MM/DD'), 'DAY'), D.CODE, D.CODE_DESC , B.TIME, B.YEAR, B.MONTH

	                <if test="rank != null and rank != '' ">
                            <choose>
                                  <when test="rank == 6988">
                                       , E.ORG_CODE
                                   </when>
                                   <when test="rank == 6989">
                                       , E.GRP_CODE
                                   </when>
                                    <when test="rank == 6990">
                                       , E.DEPT_CODE
                                   </when>
                             </choose>
                     </if>

        ) PIVOT (SUM(ATD_CHECK) FOR TYPE IN ('Info Tech' AS Info_Tech, 'Out of Office' AS Out_of_Office, 'E Leave' AS E_Leave,'Public Holiday' AS Public_Holiday,'Training' AS Training )))
            WHERE 1=1

            <if test="rank != null and rank != '' ">
                 <choose>
                    <when test="rank == 6988">
                          AND ORG_CODE = #{managerCode} OR ORG_CODE IS NULL
                     </when>
                     <when test="rank == 6989">
                          AND GRP_CODE = #{managerCode} OR GRP_CODE IS NULL
                     </when>
                      <when test="rank == 6990">
                          AND DEPT_CODE = #{managerCode} OR DEPT_CODE IS NULL
                     </when>
                </choose>
            </if>
        )
        ORDER BY 1
	</select>


	<resultMap id="atdRate" type="egovMap" />

    <select id="atdRateCalculation" parameterType="Map"  statementType="CALLABLE" >
      {
            call SP_ATD_RATE_CALCULATION(#{batchId},#{p1 , mode=OUT , jdbcType=VARCHAR , javaType=String , resultMap=atdRate})
      }
     </select>

     <select id="selectYearList" parameterType="Map" resultType="egovMap">
           SELECT (TO_CHAR(SYSDATE,'YYYY') - 5) + (LEVEL-1) CODE_ID, (TO_CHAR(SYSDATE,'YYYY') - 5) + (LEVEL-1) CODE_NAME  FROM DUAL
           CONNECT BY LEVEL <= (TO_CHAR(SYSDATE,'RRRR') - (TO_CHAR(SYSDATE,'YYYY') - 5) + 1 )
    </select>


  </mapper>